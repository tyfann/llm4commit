[
    {
        "msg": "Fixed loading terms from some GR pages that had a space after the class type",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -520,7 +520,8 @@ private XRay.Term GetTerm(string baseUrl, string relativeUrl)\nresult.DescUrl = tempUri.ToString();\nHtmlDocument charDoc = new HtmlDocument();\ncharDoc.LoadHtml(HttpDownloader.GetPageHtml(tempUri.ToString()));\n- HtmlNode mainNode = charDoc.DocumentNode.SelectSingleNode(\"//div[@class='mainContentFloat']\");\n+ HtmlNode mainNode = charDoc.DocumentNode.SelectSingleNode(\"//div[@class='mainContentFloat']\")\n+ ?? charDoc.DocumentNode.SelectSingleNode(\"//div[@class='mainContentFloat ']\");\nresult.TermName = mainNode.SelectSingleNode(\"./h1\").InnerText;\nmainNode = mainNode.SelectSingleNode(\"//div[@class='grey500BoxContent']\");\nHtmlNodeCollection tempNodes = mainNode.SelectNodes(\"//div[@class='floatingBox']\");\n",
        "lang": "C#",
        "codet5-history": "Fix for issue\nFix for issue"
    },
    {
        "msg": "Fixed labels on characters/terms in BaseDB",
        "diff": "diff --git a/dist/BaseDB.sql b/dist/BaseDB.sql CREATE TABLE type(id INTEGER, label INTEGER, singular_label INTEGER, icon INTEGER, top_mentioned_entities TEXT, PRIMARY KEY(id));\n-INSERT INTO `type` VALUES ('1','7','8','1', '');\n-INSERT INTO `type` VALUES ('2','9','10','2', '');\n+INSERT INTO `type` VALUES ('1','9','10','1', '');\n+INSERT INTO `type` VALUES ('2','11','12','2', '');\nCREATE TABLE string(id INTEGER, language TEXT, text TEXT);\nINSERT INTO `string` VALUES ('0','de','Alle');\nINSERT INTO `string` VALUES ('0','en','All');\n",
        "lang": "C#",
        "codet5-history": "Update type column in diff script"
    },
    {
        "msg": "Missing extension when looking for X-Ray file",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -1252,7 +1252,7 @@ private bool checkFiles(string author, string title, string asin)\npbFile3.Image = Resources.file_on;\nelse\npbFile3.Image = Resources.file_off;\n- if (File.Exists(XrPath = bookOutputDir + @\"\\XRAY.entities.\" + asin))\n+ if (File.Exists(XrPath = bookOutputDir + @\"\\XRAY.entities.\" + asin + \".asc\"))\npbFile4.Image = Resources.file_on;\nelse\npbFile4.Image = Resources.file_off;\n",
        "lang": "C#",
        "codet5-history": "Fix for issue\nFix for issue"
    },
    {
        "msg": "Style for ratings on Goodreads changed. Keeping old style as well just in case.",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -303,7 +303,8 @@ public override BookInfo GetNextInSeries(BookInfo curBook, AuthorProfile authorP\n{\ncurBook.amazonRating = float.Parse(goodreadsRating.InnerText);\n}\n- HtmlNode passagesNode = metaNode.SelectSingleNode(\".//a[@class='actionLinkLite votes' and @href='#other_reviews']\");\n+ HtmlNode passagesNode = metaNode.SelectSingleNode(\".//a[@class='actionLinkLite votes' and @href='#other_reviews']\")\n+ ?? metaNode.SelectSingleNode(\".//span[@class='count value-title']\");\nif (passagesNode != null)\n{\nmatch = Regex.Match(passagesNode.InnerText, @\"(\\d+|\\d{1,3}([,\\.]\\d{3})*)(?=\\s)\");\n",
        "lang": "C#",
        "codet5-history": "Fix for issue\nFix for issue"
    },
    {
        "msg": "Started tweaking Goodreads term download",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -482,18 +482,22 @@ public override List<XRay.Term> GetTerms(string dataUrl, Action<string> Log)\nsourceHtmlDoc = new HtmlDocument();\nsourceHtmlDoc.LoadHtml(HttpDownloader.GetPageHtml(dataUrl));\n}\n- Log(\"Gathering term information from Goodreads...\");\nList<HtmlNode> allChars;\n- List<HtmlNode> moreChars = null;\nHtmlNodeCollection charNodes = sourceHtmlDoc.DocumentNode.SelectNodes(\"//div[@class='infoBoxRowTitle' and text()='Characters']/../div[@class='infoBoxRowItem']/a\");\nif (charNodes == null) return terms;\nallChars = charNodes.ToList();\n// Check if ...more link exists on Goodreads page\nHtmlNodeCollection moreCharNodes = sourceHtmlDoc.DocumentNode.SelectNodes(\"//div[@class='infoBoxRowTitle' and text()='Characters']/../div[@class='infoBoxRowItem']/span[@class='toggleContent']/a\");\nif (moreCharNodes != null)\n- moreChars = moreCharNodes.ToList();\n+ {\n+ List<HtmlNode> moreChars = moreCharNodes.ToList();\nif (moreChars != null)\nallChars.AddRange(moreChars);\n+ }\n+ Log(\"Gathering term information from Goodreads... (\" + allChars.Count + \")\");\n+ if (allChars.Count > 20)\n+ Log(\"More than 20 characters found. Consider using the 'download to XML' option if you need to build repeatedly.\");\n+ // TODO: Multi-threaded download & show progress\nforeach (HtmlNode charNode in allChars)\n{\ntry\n",
        "lang": "C#",
        "codet5-history": "Add a warning when there are more than 20 characters in Goodreads"
    },
    {
        "msg": "Thread-safe property setter",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs @@ -691,5 +691,13 @@ public static bool CleanUp(string folderPath)\nDirectory.Delete(folderPath, false);\nreturn true;\n}\n+\n+ public static void SetPropertyThreadSafe(this Control ctrl, string name, object value)\n+ {\n+ if (ctrl.InvokeRequired)\n+ ctrl.BeginInvoke(new Action(() => SetPropertyThreadSafe(ctrl, name, value)));\n+ else\n+ ctrl.GetType().InvokeMember(name, System.Reflection.BindingFlags.SetProperty, null, ctrl, new object[] { value });\n+ }\n}\n}\n\\ No newline at end of file\n",
        "lang": "C#",
        "codet5-history": "Add SetPropertyThreadSafe to Control"
    },
    {
        "msg": "Thread-safe progress bar function",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -49,6 +49,12 @@ public frmMain()\nDataSource dataSource = null;\n+ public void UpdateProgressBar(Tuple<int, int> vals)\n+ {\n+ Functions.SetPropertyThreadSafe(prgBar, \"Maximum\", vals.Item2);\n+ Functions.SetPropertyThreadSafe(prgBar, \"Value\", vals.Item1);\n+ }\n+\npublic void Log(string message)\n{\nif (Exiting) return;\n",
        "lang": "C#",
        "codet5-history": "Add UpdateProgressBar to diff"
    },
    {
        "msg": "Made Log thread-safe",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -58,6 +58,10 @@ public void UpdateProgressBar(Tuple<int, int> vals)\npublic void Log(string message)\n{\nif (Exiting) return;\n+ if (txtOutput.InvokeRequired)\n+ txtOutput.BeginInvoke(new Action(() => Log(message)));\n+ else\n+ {\nCheckTimestamp = txtOutput.Text.StartsWith(\"Running X-Ray Builder GUI\");\nif (!CheckTimestamp)\n{\n@@ -85,6 +89,8 @@ public void Log(string message)\n}\ntxtOutput.Refresh();\n}\n+ }\n+ }\npublic static bool checkInternet()\n{\n",
        "lang": "C#",
        "codet5-history": "Fixes issue with invoke-required text output"
    },
    {
        "msg": "Added async metadata functions",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs using System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading;\n+using System.Threading.Tasks;\nusing System.Windows.Forms;\nusing System.Xml;\nusing System.Xml.Serialization;\n@@ -243,6 +244,11 @@ public static string TimeStamp()\nversion, date, time);\n}\n+ public static async Task<Unpack.Metadata> GetMetaDataInternalAsync(string mobiFile, string outDir, bool saveRawML, string randomFile = \"\")\n+ {\n+ return await Task.Run(() => GetMetaDataInternal(mobiFile, outDir, saveRawML, randomFile));\n+ }\n+\n//0 = asin, 1 = uniqid, 2 = databasename, 3 = rawML, 4 = author, 5 = title\npublic static Unpack.Metadata GetMetaDataInternal(string mobiFile, string outDir, bool saveRawML, string randomFile = \"\")\n{\n@@ -356,6 +362,11 @@ public static string GetPageCount(string rawML, BookInfo bookInfo)\nreturn output;\n}\n+ public static async Task<List<string>> GetMetaDataAsync(string mobiFile, string outDir, string randomFile, string mobiUnpack)\n+ {\n+ return await Task.Run(() => GetMetaData(mobiFile, outDir, randomFile, mobiUnpack));\n+ }\n+\npublic static List<string> GetMetaData(string mobiFile, string outDir, string randomFile, string mobiUnpack)\n{\nif (mobiUnpack == null) throw new ArgumentNullException(\"mobiUnpack\");\n",
        "lang": "C#",
        "codet5-history": "Add async functions to functions.cs"
    },
    {
        "msg": "Start using new async metadata funcs",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs using System.Linq;\nusing System.Net;\nusing System.Text;\n+using System.Threading.Tasks;\nusing System.Windows.Forms;\nusing XRayBuilderGUI.DataSources;\nusing XRayBuilderGUI.Properties;\n@@ -129,7 +130,7 @@ private void btnBrowseXML_Click(object sender, EventArgs e)\ntxtXMLFile.Text = Functions.GetFile(txtXMLFile.Text, \"XML files (*.xml)|*.xml|TXT files (*.txt)|*.txt\");\n}\n- private void btnBuild_Click(object sender, EventArgs e)\n+ private async void btnBuild_Click(object sender, EventArgs e)\n{\n//Check current settings\nif (!File.Exists(txtMobi.Text))\n@@ -178,14 +179,14 @@ private void btnBuild_Click(object sender, EventArgs e)\nif (settings.useKindleUnpack)\n{\nLog(\"Running Kindleunpack to get metadata...\");\n- results = Functions.GetMetaData(txtMobi.Text, settings.outDir, randomFile, settings.mobi_unpack);\n+ results = await Functions.GetMetaDataAsync(txtMobi.Text, settings.outDir, randomFile, settings.mobi_unpack);\n}\nelse\n{\nLog(\"Extracting metadata...\");\ntry\n{\n- results = Functions.GetMetaDataInternal(txtMobi.Text, settings.outDir, true, randomFile).getResults();\n+ results = (await Functions.GetMetaDataInternalAsync(txtMobi.Text, settings.outDir, true, randomFile)).getResults();\n}\ncatch (Exception ex)\n{\n",
        "lang": "C#",
        "codet5-history": "Fixes async/await issues in diff command"
    },
    {
        "msg": "Removed useless textbox",
        "diff": "diff --git a/src/frmMain.Designer.cs b/src/frmMain.Designer.cs @@ -49,7 +49,6 @@ private void InitializeComponent()\nthis.tmiXray = new System.Windows.Forms.ToolStripMenuItem();\nthis.prgBar = new System.Windows.Forms.ProgressBar();\nthis.txtOutput = new System.Windows.Forms.RichTextBox();\n- this.textBox1 = new System.Windows.Forms.TextBox();\nthis.groupBox2 = new System.Windows.Forms.GroupBox();\nthis.pbFile4 = new System.Windows.Forms.PictureBox();\nthis.pbFile3 = new System.Windows.Forms.PictureBox();\n@@ -292,17 +291,6 @@ private void InitializeComponent()\nthis.txtOutput.Text = \"\";\nthis.txtOutput.LinkClicked += new System.Windows.Forms.LinkClickedEventHandler(this.txtOutput_LinkClicked);\n//\n- // textBox1\n- //\n- this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)\n- | System.Windows.Forms.AnchorStyles.Left)\n- | System.Windows.Forms.AnchorStyles.Right)));\n- this.textBox1.Location = new System.Drawing.Point(12, 189);\n- this.textBox1.Multiline = true;\n- this.textBox1.Name = \"textBox1\";\n- this.textBox1.Size = new System.Drawing.Size(598, 339);\n- this.textBox1.TabIndex = 62;\n- //\n// groupBox2\n//\nthis.groupBox2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));\n@@ -646,7 +634,6 @@ private void InitializeComponent()\nthis.Controls.Add(this.prgBar);\nthis.Controls.Add(this.btnBuild);\nthis.Controls.Add(this.btnBrowseXML);\n- this.Controls.Add(this.textBox1);\nthis.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;\nthis.Icon = ((System.Drawing.Icon)(resources.GetObject(\"$this.Icon\")));\nthis.Name = \"frmMain\";\n@@ -668,7 +655,6 @@ private void InitializeComponent()\n((System.ComponentModel.ISupportInitialize)(this.pbFile1)).EndInit();\n((System.ComponentModel.ISupportInitialize)(this.pbCover)).EndInit();\nthis.ResumeLayout(false);\n- this.PerformLayout();\n}\n@@ -704,7 +690,6 @@ private void InitializeComponent()\nprivate System.Windows.Forms.Button btnUnpack;\nprivate System.Windows.Forms.RichTextBox txtOutput;\nprivate System.Windows.Forms.TextBox txtGoodreads;\n- private System.Windows.Forms.TextBox textBox1;\nprivate System.Windows.Forms.GroupBox groupBox2;\nprivate System.Windows.Forms.PictureBox pbCover;\nprivate System.Windows.Forms.Label lblAsin;\n",
        "lang": "C#",
        "codet5-history": "Remove textBox1 from diff"
    },
    {
        "msg": "Get terms async",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -234,7 +234,8 @@ private async void btnBuild_Click(object sender, EventArgs e)\n}\nLog(\"Initial X-Ray built, adding locations and chapters...\");\n//Expand the X-Ray file from the unpacked mobi\n- if (xray.ExpandFromRawMl(results[3], settings.ignoresofthyphen, !settings.useNewVersion) > 0)\n+ Progress<Tuple<int, int>> progress = new Progress<Tuple<int, int>>(UpdateProgressBar);\n+ if (xray.ExpandFromRawMl(results[3], progress, settings.ignoresofthyphen, !settings.useNewVersion) > 0)\n{\nLog(\"An error occurred while processing locations and chapters.\");\nreturn;\n@@ -508,7 +509,7 @@ private void btnKindleExtras_Click(object sender, EventArgs e)\n}\n- private void btnDownloadTerms_Click(object sender, EventArgs e)\n+ private async void btnDownloadTerms_Click(object sender, EventArgs e)\n{\nif (txtGoodreads.Text == \"\")\n{\n@@ -528,17 +529,18 @@ private void btnDownloadTerms_Click(object sender, EventArgs e)\ntxtXMLFile.Text = path;\nXRay xray = new XRay(txtGoodreads.Text, this, dataSource);\n- if (xray.SaveXml(path) > 0)\n- {\n+ if ((await xray.SaveXmlAsync(path, new Progress<Tuple<int, int>>(UpdateProgressBar))) > 0)\nLog(\"Warning: Unable to download character data as no character data found on Goodreads.\");\n- return;\n- }\n- Log(\"Character data has been saved to: \" + path);\n+ else\n+ Log(\"Character data has been successfully saved to: \" + path);\n}\ncatch (Exception)\n{\nLog(\"An error occurred while saving character data to XML. Path was: \" + path);\n- return;\n+ }\n+ finally\n+ {\n+ ToggleInterface(true);\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Fixes issue with XRay.SaveXmlAsync"
    },
    {
        "msg": "Function to enable/disable interface",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -91,6 +91,19 @@ public void Log(string message)\ntxtOutput.Refresh();\n}\n}\n+\n+ private void ToggleInterface(bool enabled)\n+ {\n+ foreach (Control c in Controls)\n+ {\n+ if (c is Button)\n+ c.Enabled = enabled;\n+ }\n+ txtMobi.Enabled = enabled;\n+ txtXMLFile.Enabled = enabled;\n+ txtGoodreads.Enabled = enabled;\n+ rdoFile.Enabled = enabled;\n+ rdoGoodreads.Enabled = enabled;\n}\npublic static bool checkInternet()\n",
        "lang": "C#",
        "codet5-history": "Add toggle interface"
    },
    {
        "msg": "Massively improved rawml extraction speed by not using linq (from ~15s to under 1s to extract Game of Thrones book 2)",
        "diff": "diff --git a/src/Unpack/Metadata.cs b/src/Unpack/Metadata.cs using System;\nusing System.Collections.Generic;\n-using System.Linq;\nusing System.IO;\nusing System.Text;\n@@ -147,7 +146,10 @@ public byte[] getRawML(FileStream fs)\nfs.Read(buffer, 0, buffer.Length);\nbuffer = trimTrailingDataEntries(buffer);\nbyte[] result = decomp.unpack(buffer, PDB.MobiHeaderSize);\n- rawML = rawML.Concat(result).ToArray();\n+ buffer = new byte[rawML.Length + result.Length];\n+ Buffer.BlockCopy(rawML, 0, buffer, 0, rawML.Length);\n+ Buffer.BlockCopy(result, 0, buffer, rawML.Length, result.Length);\n+ rawML = buffer;\n}\nreturn rawML;\n}\n",
        "lang": "C#",
        "codet5-history": "Fix the bug in the metadata extraction"
    },
    {
        "msg": "Refactored metadata handler",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs using System.Windows.Forms;\nusing System.Xml;\nusing System.Xml.Serialization;\n+using XRayBuilderGUI.Unpack;\nnamespace XRayBuilderGUI\n{\n@@ -244,20 +245,20 @@ public static string TimeStamp()\nversion, date, time);\n}\n- public static async Task<Unpack.Metadata> GetMetaDataInternalAsync(string mobiFile, string outDir, bool saveRawML, string randomFile = \"\")\n+ public static async Task<Metadata> GetMetaDataInternalAsync(string mobiFile, string outDir, bool saveRawML, string randomFile = \"\")\n{\nreturn await Task.Run(() => GetMetaDataInternal(mobiFile, outDir, saveRawML, randomFile));\n}\n//0 = asin, 1 = uniqid, 2 = databasename, 3 = rawML, 4 = author, 5 = title\n- public static Unpack.Metadata GetMetaDataInternal(string mobiFile, string outDir, bool saveRawML, string randomFile = \"\")\n+ public static Metadata GetMetaDataInternal(string mobiFile, string outDir, bool saveRawML, string randomFile = \"\")\n{\n- List<string> output = new List<string>();\nFileStream fs = new FileStream(mobiFile, FileMode.Open, FileAccess.Read);\nif (fs == null)\nthrow new Exception(\"Unable to open mobi file.\");\n- Unpack.Metadata md = new Unpack.Metadata(fs);\n-\n+ Metadata md = new Metadata(fs);\n+ try\n+ {\nif (md.mobiHeader.exthHeader == null)\nthrow new Exception(\"No EXT Header found. Ensure this book was processed with Calibre then try again.\");\n@@ -266,7 +267,7 @@ public static Unpack.Metadata GetMetaDataInternal(string mobiFile, string outDir\nDialogResult.Yes == MessageBox.Show(\"The document type is not set to EBOK. Would you like this to be updated?\\r\\n\" +\n\"Caution: This feature is experimental and could potentially ruin your book file.\", \"Incorrect Content Type\", MessageBoxButtons.YesNo))\n{\n- fs.Close();\n+ fs.Dispose();\nfs = new FileStream(mobiFile, FileMode.Open, FileAccess.ReadWrite);\nif (fs == null)\nthrow new Exception(\"Unable to re-open mobi file for writing.\");\n@@ -274,7 +275,6 @@ public static Unpack.Metadata GetMetaDataInternal(string mobiFile, string outDir\n}\nelse\n{\n- fs.Close();\nthrow new Exception(\"The document type is not set to EBOK; Kindle will not display an X-Ray for this book.\\r\\n\" +\n\"You must either use Calibre's convert feature (Personal Doc tag under MOBI Output) or a MOBI editor (exth 501) to change this.\");\n}\n@@ -285,7 +285,6 @@ public static Unpack.Metadata GetMetaDataInternal(string mobiFile, string outDir\n\"Kindle may not display an X-Ray for this book.\\n\" +\n\"Do you wish to continue?\", ASIN), \"Incorrect ASIN\", MessageBoxButtons.YesNo))\n{\n- fs.Close();\nthrow new Exception(String.Format(\"Incorrect ASIN detected: {0}!\\r\\n\" +\n\"Kindle may not display an X-Ray for this book.\\r\\n\" +\n\"You must either use Calibre's Quality Check plugin (Fix ASIN for Kindle Fire) \" +\n@@ -311,7 +310,15 @@ public static Unpack.Metadata GetMetaDataInternal(string mobiFile, string outDir\nrawMLFile.Write(rawML, 0, rawML.Length);\n}\n}\n- fs.Close();\n+ }\n+ catch (Exception ex)\n+ {\n+ throw ex;\n+ }\n+ finally\n+ {\n+ fs.Dispose();\n+ }\nreturn md;\n}\n",
        "lang": "C#",
        "codet5-history": "Fixes for the code review"
    },
    {
        "msg": "Clear progress bar when re-enabling the interface",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -119,6 +119,8 @@ private void ToggleInterface(bool enabled)\ncancelTokens.Dispose();\ncancelTokens = new CancellationTokenSource();\n}\n+ else if (enabled == true)\n+ UpdateProgressBar(new Tuple<int, int>(0, 0));\n}\npublic static bool checkInternet()\n",
        "lang": "C#",
        "codet5-history": "Update progress bar when toggling interface"
    },
    {
        "msg": "Converted one-click",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -1178,10 +1178,12 @@ private void txtOutput_LinkClicked(object sender, LinkClickedEventArgs e)\nProcess.Start(e.LinkText);\n}\n- private void btnOneClick_Click(object sender, EventArgs e)\n+ private async void btnOneClick_Click(object sender, EventArgs e)\n{\n- btnKindleExtras_Click(sender, e);\n- btnBuild_Click(sender, e);\n+ ToggleInterface(false);\n+ await btnKindleExtras_Run();\n+ await btnBuild_Run();\n+ ToggleInterface(true);\n}\nprivate void txtAsin_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n",
        "lang": "C#",
        "codet5-history": "Fix button clicking on the interface"
    },
    {
        "msg": "Search notables while already scanning every paragraph to save time",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -609,30 +609,28 @@ public int ExpandFromRawMl(string rawMl, IProgress<Tuple<int, int>> progress, Ca\n}\n}\n}\n- }\n- // Attempt to match any quotes from Shelfari for Notable Clips, not worried if no matches occur as they will be added later anyway\n- if (Properties.Settings.Default.useNewVersion)\n+ // Attempt to match downloaded notable clips, not worried if no matches occur as some will be added later anyway\n+ if (Properties.Settings.Default.useNewVersion && notableClips != null)\n{\n- foreach (string[] quote in notableClips)\n+ foreach (Tuple<string, int> quote in notableClips)\n{\n- int index = readContents.IndexOf(quote[0]);\n+ int index = node.InnerText.IndexOf(quote.Item1);\nif (index > -1)\n{\n+ // See if an excerpt already exists at this location\nExcerpt excerpt = excerpts.FirstOrDefault(e => e.start == index);\nif (excerpt == null)\n{\n- excerpt = new Excerpt(excerptId++, index, quote[0].Length);\n- if (quote[1] != \"\")\n- {\n- Term foundterm = Terms.FirstOrDefault(t => t.TermName == quote[1]);\n- if (foundterm != null)\n- excerpt.related_entities.Add(foundterm.Id);\n- }\n+ excerpt = new Excerpt(excerptId++, index, quote.Item1.Length);\n+ excerpt.related_entities.Add(0); // Mark the excerpt as notable\n+ // TODO: also add other related entities\nexcerpts.Add(excerpt);\n}\n- foundNotables++;\n+ else\nexcerpt.related_entities.Add(0);\n+ foundNotables++;\n+ }\n}\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Fix notable clips not being matched"
    },
    {
        "msg": "Made db process cancellable",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -741,7 +741,7 @@ private void SearchChapters(HtmlAgilityPack.HtmlDocument bookDoc, string rawML)\n}\n}\n- public int PopulateDb(SQLiteConnection db)\n+ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress, CancellationToken token)\n{\nstring sql = \"\";\nint entity = 1;\n@@ -755,14 +755,13 @@ public int PopulateDb(SQLiteConnection db)\ncommand.ExecuteNonQuery();\ncommand.Dispose();\nmain.Log(\"Updating database with terms, descriptions, and excerpts...\");\n- main.prgBar.Maximum = Terms.Count;\n//Write all entities and occurrences\nmain.Log(String.Format(\"Writing {0} terms...\", Terms.Count));\n+ progress.Report(new Tuple<int, int>(0, Terms.Count));\nforeach (Term t in Terms)\n{\nif (main.Exiting) return 1;\n- main.prgBar.Value = entity++;\n- Application.DoEvents();\n+ token.ThrowIfCancellationRequested();\ncommand = new SQLiteCommand(db);\nif (t.Type == \"character\") personCount++;\nelse if (t.Type == \"topic\") termCount++;\n@@ -791,20 +790,20 @@ public int PopulateDb(SQLiteConnection db)\ncommand = new SQLiteCommand(sql, db);\ncommand.ExecuteNonQuery();\ncommand.Dispose();\n+ progress.Report(new Tuple<int, int>(entity++, Terms.Count));\n}\n//Write excerpts and entity_excerpt table\n- main.prgBar.Maximum = excerpts.Count;\nmain.Log(String.Format(\"Writing {0} excerpts...\", excerpts.Count));\nsql = \"\";\ncommand = new SQLiteCommand(db);\ncommand.CommandText =\nString.Format(\n\"insert into excerpt (id, start, length, image, related_entities, goto) values (@id, @start, @length, @image, @rel_ent, null);\");\n+ progress.Report(new Tuple<int, int>(0, excerpts.Count));\nforeach (Excerpt e in excerpts)\n{\nif (main.Exiting) return 1;\n- main.prgBar.Value = excerpt++;\n- Application.DoEvents();\n+ token.ThrowIfCancellationRequested();\ncommand.Parameters.AddWithValue(\"id\", e.id);\ncommand.Parameters.AddWithValue(\"start\", e.start);\ncommand.Parameters.AddWithValue(\"length\", e.length);\n@@ -815,6 +814,7 @@ public int PopulateDb(SQLiteConnection db)\n{\nsql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", ent, e.id);\n}\n+ progress.Report(new Tuple<int, int>(excerpt++, excerpts.Count));\n}\ncommand.Dispose();\n// Populate some more Notable Clips if not enough were found from Shelfari\n@@ -832,12 +832,12 @@ public int PopulateDb(SQLiteConnection db)\nfoundNotables++;\n}\n}\n+ token.ThrowIfCancellationRequested();\nmain.Log(\"Writing entity excerpt table...\");\ncommand = new SQLiteCommand(sql, db);\ncommand.ExecuteNonQuery();\ncommand.Dispose();\n- main.prgBar.Value = main.prgBar.Maximum;\n- Application.DoEvents();\n+ token.ThrowIfCancellationRequested();\nmain.Log(\"Writing top mentions...\");\nList<int> sorted =\nTerms.Where<Term>(t => t.Type.Equals(\"character\"))\n@@ -857,6 +857,7 @@ public int PopulateDb(SQLiteConnection db)\ncommand.ExecuteNonQuery();\ncommand.Dispose();\n+ token.ThrowIfCancellationRequested();\nmain.Log(\"Writing metadata...\");\nsql =\n",
        "lang": "C#",
        "codet5-history": "Use progress bar in diff"
    },
    {
        "msg": "Fixed notable clip writing",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -817,18 +817,23 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\nprogress.Report(new Tuple<int, int>(excerpt++, excerpts.Count));\n}\ncommand.Dispose();\n- // Populate some more Notable Clips if not enough were found from Shelfari\n- // TODO: Add a config value in settings for this\n- if (foundNotables + excerpts.Count <= 20)\n- excerpts.ForEach(ex => sql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, ex.id));\n+ // Populate some more notable clips if not enough were found,\n+ // TODO: Add a config value in settings for this amount\n+ if (foundNotables <= 20 && foundNotables + excerpts.Count <= 20)\n+ excerpts.ForEach(ex =>\n+ {\n+ if (!ex.related_entities.Contains(0))\n+ sql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, ex.id);\n+ });\nelse\n{\nRandom rand = new Random();\n- while (foundNotables <= 20)\n+ List<Excerpt> eligible = excerpts.Where(ex => !ex.related_entities.Contains(0)).ToList();\n+ while (foundNotables <= 20 && eligible.Count > 0)\n{\n- Excerpt randEx = excerpts.ElementAt(rand.Next(excerpts.Count));\n+ Excerpt randEx = eligible.ElementAt(rand.Next(eligible.Count));\nsql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, randEx.id);\n- excerpts.Remove(randEx);\n+ eligible.Remove(randEx);\nfoundNotables++;\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Fixes - Update XRay.cs\n* Fixes - Update XRay"
    },
    {
        "msg": "Async DB population",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -347,15 +347,22 @@ private async Task btnBuild_Run()\ncommand.ExecuteNonQuery();\ncommand.Dispose();\nLog(\"Done building initial database. Populating with info from source X-Ray...\");\n+ CancellationToken token = cancelTokens.Token;\ntry\n{\n- xray.PopulateDb(m_dbConnection);\n+ await Task.Run(() =>\n+ {\n+ xray.PopulateDb(m_dbConnection, new Progress<Tuple<int, int>>(UpdateProgressBar), token);\n+ }, token);\n}\ncatch (Exception ex)\n{\n- Log(\"An error occurred while populating the X-Ray database.\\r\\n\" + ex.Message + \"\\r\\n\" + ex.StackTrace);\ncommand.Dispose();\nm_dbConnection.Close();\n+ if (ex is OperationCanceledException)\n+ Log(\"Building canceled.\");\n+ else\n+ Log(\"An error occurred while populating the X-Ray database.\\r\\n\" + ex.Message + \"\\r\\n\" + ex.StackTrace);\nreturn;\n}\nLog(\"Updating indices...\");\n",
        "lang": "C#",
        "codet5-history": "Fix canceling the build"
    },
    {
        "msg": "Cancel tasks when exiting",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -725,6 +725,7 @@ private void Form1_FormClosing(object sender, FormClosingEventArgs e)\n}\n}\nExiting = true;\n+ cancelTokens.Cancel();\nApplication.Exit();\n}\n",
        "lang": "C#",
        "codet5-history": "Cancel tokens on exit"
    },
    {
        "msg": "Missed line from old log func",
        "diff": "diff --git a/src/Logger.cs b/src/Logger.cs @@ -44,6 +44,7 @@ public static void SafeAppendText(this RichTextBox rtfBox, string message)\n}\nrtfBox.AppendText(message);\nrtfBox.SelectionColor = rtfBox.ForeColor;\n+ rtfBox.Refresh();\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Refresh RTFBox after writing a short commit message"
    },
    {
        "msg": "Minor fixes to Amazon stuff",
        "diff": "diff --git a/src/DataSources/Amazon.cs b/src/DataSources/Amazon.cs @@ -65,16 +65,8 @@ public static async Task<AuthorSearchResults> SearchAuthor(BookInfo curBook, str\nresults.authorAsin = results.authorAsin.Substring(index1 + 11, 10);\nnode = node.SelectSingleNode(\"//*[@id='result_1']/div/div/div/div/a\");\n- string properAuthor;\n- try\n- {\n- properAuthor = node.GetAttributeValue(\"href\", \"\");\n- }\n- catch (Exception ex)\n- {\n- properAuthor = \"\";\n- }\n- if (properAuthor == \"\" || properAuthor.IndexOf('/', 1) < 3)\n+ string properAuthor = node?.GetAttributeValue(\"href\", \"\");\n+ if (properAuthor == \"\" || properAuthor == null || properAuthor.IndexOf('/', 1) < 3)\n{\nLogger.Log(\"Unable to parse author's page URL properly. Try again later or report this URL on the MobileRead thread: \" + amazonAuthorSearchUrl);\nreturn null;\n@@ -100,7 +92,7 @@ public static async Task<AuthorSearchResults> SearchAuthor(BookInfo curBook, str\ncatch\n{\n// If page not found (on co.uk at least, the long form does not seem to work) fallback to short form\n- // and pray the formatting/item display suits our needs. If short form not found, crash back to AuthorProfile.\n+ // and pray the formatting/item display suits our needs. If short form not found, crash back to caller.\nauthorpageHtml = await HttpDownloader.GetPageHtmlAsync(authorAmazonWebsiteLocationLog);\n}\nresults.authorHtmlDoc.LoadHtml(authorpageHtml);\n@@ -196,11 +188,11 @@ public static async Task<BookInfo> SearchBook(string title, string author, strin\nHtmlDocument searchDoc = new HtmlDocument();\nsearchDoc.LoadHtml(await HttpDownloader.GetPageHtmlAsync(searchUrl));\nHtmlNode node = searchDoc.DocumentNode.SelectSingleNode(\"//li[@id='result_0']\");\n- HtmlNode nodeASIN = node.SelectSingleNode(\".//a[@title='Kindle Edition']\");\n+ HtmlNode nodeASIN = node?.SelectSingleNode(\".//a[@title='Kindle Edition']\");\nif (nodeASIN == null)\n{\nnode = searchDoc.DocumentNode.SelectSingleNode(\"//li[@id='result_1']\");\n- nodeASIN = node.SelectSingleNode(\".//a[@title='Kindle Edition']\");\n+ nodeASIN = node?.SelectSingleNode(\".//a[@title='Kindle Edition']\");\n}\n//At least attempt to verify it might be the same book?\nif (node != null && nodeASIN != null && node.InnerText.IndexOf(title, StringComparison.OrdinalIgnoreCase) >= 0)\n",
        "lang": "C#",
        "codet5-history": "Fix NRE in Amazon.cs\n* Fix NRE in Amazon.cs\n*"
    },
    {
        "msg": "Improved (hopefully) notable clip handling",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -625,6 +625,8 @@ public int ExpandFromRawMl(string rawMl, IProgress<Tuple<int, int>> progress, Ca\nexcerpt = new Excerpt(excerptId++, index, quote.Item1.Length);\nexcerpt.related_entities.Add(0); // Mark the excerpt as notable\n// TODO: also add other related entities\n+ excerpt.notable = true;\n+ excerpt.highlights = quote.Item2;\nexcerpts.Add(excerpt);\n}\nelse\n@@ -808,27 +810,32 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\ncommand.Parameters.AddWithValue(\"start\", e.start);\ncommand.Parameters.AddWithValue(\"length\", e.length);\ncommand.Parameters.AddWithValue(\"image\", e.image);\n- command.Parameters.AddWithValue(\"rel_ent\", String.Join(\",\", e.related_entities.Where(en => en != 0).ToArray())); // don't write 0 (notable)\n+ command.Parameters.AddWithValue(\"rel_ent\", String.Join(\",\", e.related_entities.Where(en => en != 0).ToArray())); // don't write 0 (notable flag)\ncommand.ExecuteNonQuery();\nforeach (int ent in e.related_entities)\n{\n+ if (ent != 0) // skip notable flag\nsql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", ent, e.id);\n}\nprogress.Report(new Tuple<int, int>(excerpt++, excerpts.Count));\n}\ncommand.Dispose();\n+ // create links to notable clips in order of popularity\n+ var notablesOnly = excerpts.Where(ex => ex.notable).OrderByDescending(ex => ex.highlights);\n+ foreach (Excerpt notable in notablesOnly)\n+ sql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, notable.id);\n// Populate some more notable clips if not enough were found,\n// TODO: Add a config value in settings for this amount\nif (foundNotables <= 20 && foundNotables + excerpts.Count <= 20)\nexcerpts.ForEach(ex =>\n{\n- if (!ex.related_entities.Contains(0))\n+ if (!ex.notable)\nsql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, ex.id);\n});\nelse\n{\nRandom rand = new Random();\n- List<Excerpt> eligible = excerpts.Where(ex => !ex.related_entities.Contains(0)).ToList();\n+ List<Excerpt> eligible = excerpts.Where(ex => !ex.notable).ToList();\nwhile (foundNotables <= 20 && eligible.Count > 0)\n{\nExcerpt randEx = eligible.ElementAt(rand.Next(eligible.Count));\n@@ -924,6 +931,8 @@ private class Excerpt\npublic string image = \"\";\npublic List<int> related_entities = new List<int>();\npublic int go_to = -1;\n+ public int highlights = 0;\n+ public bool notable = false;\npublic Excerpt(int id, int start, int length)\n{\n",
        "lang": "C#",
        "codet5-history": "Add highlights and notable flag to Excerpt"
    },
    {
        "msg": "Skip if enough notables exist",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -832,7 +832,7 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\nif (!ex.notable)\nsql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, ex.id);\n});\n- else\n+ else if (foundNotables <= 20)\n{\nRandom rand = new Random();\nList<Excerpt> eligible = excerpts.Where(ex => !ex.notable).ToList();\n",
        "lang": "C#",
        "codet5-history": "Fix commit message for notable entities"
    },
    {
        "msg": "bool not used",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -1284,7 +1284,7 @@ private void btnCreate_Click(object sender, EventArgs e)\nfrmCreator.ShowDialog();\n}\n- private bool checkFiles(string author, string title, string asin)\n+ private void checkFiles(string author, string title, string asin)\n{\nstring bookOutputDir = settings.useSubDirectories ? Functions.GetBookOutputDirectoryOnly(author, Functions.RemoveInvalidFileChars(title)) : settings.outDir;\n@@ -1304,7 +1304,6 @@ private bool checkFiles(string author, string title, string asin)\npbFile4.Image = Resources.file_on;\nelse\npbFile4.Image = Resources.file_off;\n- return true;\n}\nprivate void btnCancel_Click(object sender, EventArgs e)\n",
        "lang": "C#",
        "codet5-history": "Fix return value of checkFiles"
    },
    {
        "msg": "Bumped version to 2.0.20",
        "diff": "diff --git a/Properties/AssemblyInfo.cs b/Properties/AssemblyInfo.cs // You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n-[assembly: AssemblyVersion(\"2.0.18.0\")]\n-[assembly: AssemblyFileVersion(\"2.0.18.0\")]\n+[assembly: AssemblyVersion(\"2.0.20.0\")]\n+[assembly: AssemblyFileVersion(\"2.0.20.0\")]\n",
        "lang": "C#",
        "codet5-history": "Update version to 2.0.20.0"
    },
    {
        "msg": "Added basic cover image support to metadata reader",
        "diff": "diff --git a/src/Unpack/Metadata.cs b/src/Unpack/Metadata.cs using System;\nusing System.Collections.Generic;\n+using System.Drawing;\nusing System.IO;\nusing System.Text;\n@@ -16,6 +17,7 @@ public class Metadata\npublic PDBHeader PDB;\npublic PalmDOCHeader PDH;\npublic MobiHead mobiHeader;\n+ public Bitmap coverImage = null;\nprivate int _startRecord = 1;\npublic string rawMLPath = \"\";\nprivate string _ASIN = \"\";\n@@ -28,7 +30,8 @@ public Metadata(FileStream fs)\nmobiHeader = new MobiHead(fs, PDB.MobiHeaderSize);\n// Use ASIN of the first book in the mobi\n_ASIN = mobiHeader.exthHeader.ASIN != \"\" ? mobiHeader.exthHeader.ASIN : mobiHeader.exthHeader.ASIN2;\n-\n+ int coverOffset = mobiHeader.exthHeader.CoverOffset;\n+ int firstImage = -1;\n// Start at end of first book records, search for a second (KF8) and use it instead (for combo books)\nfor (int i = PDH.RecordCount; i < PDB.NumRecords - 1; i++)\n{\n@@ -37,7 +40,17 @@ public Metadata(FileStream fs)\nbyte[] buffer = new byte[recSize];\nfs.Seek(PDB._recInfo[i].RecordDataOffset, SeekOrigin.Begin);\nfs.Read(buffer, 0, buffer.Length);\n- if (Encoding.ASCII.GetString(buffer, 0, 8) == \"BOUNDARY\")\n+ string imgtype = coverOffset == -1 ? \"\" : get_image_type(buffer);\n+ if (imgtype != \"\")\n+ {\n+ if (firstImage == -1) firstImage = i;\n+ if (i == firstImage + coverOffset)\n+ {\n+ using (MemoryStream ms = new MemoryStream(buffer))\n+ coverImage = new Bitmap(ms);\n+ }\n+ }\n+ else if (Encoding.ASCII.GetString(buffer, 0, 8) == \"BOUNDARY\")\n{\n_startRecord = i + 2;\nPDH = new PalmDOCHeader(fs);\n@@ -47,6 +60,15 @@ public Metadata(FileStream fs)\n}\n}\n+ private string get_image_type(byte[] data)\n+ {\n+ if ((data[6] == 'J' && data[7] == 'F' && data[8] == 'I' && data[9] == 'F')\n+ || (data[6] == 'E' && data[7] == 'x' && data[8] == 'i' && data[9] == 'f')\n+ || (data[0] == 0xFF && data[1] == 0xD8 && data[data.Length - 2] == 0xFF && data[data.Length - 1] == 0xD9))\n+ return \"jpeg\";\n+ return \"\";\n+ }\n+\n// Temporary function to mimic old GetMetaData functionality until it can be removed\n// 0 = asin, 1 = uniqid, 2 = databasename, 3 = rawML, 4 = author, 5 = title\npublic List<string> getResults()\n",
        "lang": "C#",
        "codet5-history": "Added support for cover images in metadata"
    },
    {
        "msg": "Added cover offset to exth reader",
        "diff": "diff --git a/src/Unpack/EXTH.cs b/src/Unpack/EXTH.cs @@ -110,6 +110,26 @@ public string ASIN2\nget { return GetRecordByType(504); }\n}\n+ public int CoverOffset\n+ {\n+ get { return BitConverter.ToInt32(Functions.CheckBytes(GetRecordBytesByType(201)), 0); }\n+ }\n+\n+ private byte[] GetRecordBytesByType(int recType)\n+ {\n+ byte[] record = null;\n+ foreach (EXTHRecord rec in recordList)\n+ {\n+ if (rec.RecordType == recType)\n+ {\n+ record = new byte[rec.RecordData.Length];\n+ Buffer.BlockCopy(rec.RecordData, 0, record, 0, rec.RecordData.Length);\n+ break;\n+ }\n+ }\n+ return record;\n+ }\n+\nprivate string GetRecordByType(int recType)\n{\nstring record = String.Empty;\n",
        "lang": "C#",
        "codet5-history": "Add CoverOffset to EXTH.cs"
    },
    {
        "msg": "Switched to using exceptions for errors getting metadata, fixed issue where kindleunpack was always run regardless of the setting when opening a book initially, because cover support was missing",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -180,8 +180,16 @@ private async Task btnBuild_Run()\nif (settings.useKindleUnpack)\n{\nLogger.Log(\"Running Kindleunpack to get metadata...\");\n+ try\n+ {\nresults = await Functions.GetMetaDataAsync(txtMobi.Text, settings.outDir, randomFile, settings.mobi_unpack);\n}\n+ catch (Exception ex)\n+ {\n+ Logger.Log(\"An error occurred extracting metadata: \" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n+ return;\n+ }\n+ }\nelse\n{\nLogger.Log(\"Extracting metadata...\");\n@@ -195,11 +203,6 @@ private async Task btnBuild_Run()\nreturn;\n}\n}\n- if (results.Count != 6)\n- {\n- Logger.Log(results[0]);\n- return;\n- }\nif (settings.saverawml)\n{\n@@ -445,6 +448,8 @@ private async Task btnKindleExtras_Run()\nif (settings.useKindleUnpack)\n{\nLogger.Log(\"Running Kindleunpack to get metadata...\");\n+ try\n+ {\nresults = await Functions.GetMetaDataAsync(txtMobi.Text, settings.outDir, randomFile, settings.mobi_unpack);\nif (!File.Exists(results[3]))\n{\n@@ -453,6 +458,12 @@ private async Task btnKindleExtras_Run()\n}\nrawMLSize = new FileInfo(results[3]).Length;\n}\n+ catch (Exception ex)\n+ {\n+ Logger.Log(\"An error occurred extracting metadata: \" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n+ return;\n+ }\n+ }\nelse\n{\nLogger.Log(\"Extracting metadata...\");\n@@ -468,11 +479,6 @@ private async Task btnKindleExtras_Run()\nreturn;\n}\n}\n- if (results.Count != 6)\n- {\n- Logger.Log(results[0]);\n- return;\n- }\nif (settings.saverawml && settings.useKindleUnpack)\n{\n@@ -604,8 +610,16 @@ private async Task btnSearchGoodreads_Run()\nif (settings.useKindleUnpack)\n{\nLogger.Log(\"Running Kindleunpack to get metadata...\");\n+ try\n+ {\nresults = Functions.GetMetaData(txtMobi.Text, settings.outDir, randomFile, settings.mobi_unpack);\n}\n+ catch (Exception ex)\n+ {\n+ Logger.Log(\"An error occurred extracting metadata: \" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n+ return;\n+ }\n+ }\nelse\n{\nLogger.Log(\"Extracting metadata...\");\n@@ -619,11 +633,6 @@ private async Task btnSearchGoodreads_Run()\nreturn;\n}\n}\n- if (results.Count != 6)\n- {\n- Logger.Log(results[0]);\n- return;\n- }\nLogger.Log(String.Format(\"Got metadata!\\r\\nDatabase Name: {0}\\r\\nUniqueID: {1}\",\nresults[2], results[1]));\n@@ -829,39 +838,43 @@ private void txtMobi_TextChanged(object sender, EventArgs e)\nreturn;\n}\nList<string> results;\n+ if (settings.useKindleUnpack)\n+ {\n+ Logger.Log(\"Running Kindleunpack to get metadata...\");\ntry\n{\nresults = Functions.GetMetaData(txtMobi.Text, settings.outDir, randomFile, settings.mobi_unpack);\n+ if (results.Count == 7)\n+ pbCover.Image = new Bitmap(results[6]);\n+ else\n+ pbCover.Image = null;\n}\ncatch (Exception ex)\n{\n- Logger.Log(\"An error occurred getting metadata: \" + ex.Message);\n+ Logger.Log(\"An error occurred extracting metadata: \" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n+ txtMobi.Text = \"\";\nreturn;\n}\n-\n- if (results.Count != 7)\n+ }\n+ else\n{\n- this.Cursor = Cursors.Default;\n+ Logger.Log(\"Extracting metadata...\");\n+ try\n+ {\n+ Unpack.Metadata md = Functions.GetMetaDataInternal(txtMobi.Text, settings.outDir, false);\n+ results = md.getResults();\n+ pbCover.Image = md.coverImage;\n+ }\n+ catch (Exception ex)\n+ {\n+ Logger.Log(\"An error occurred extracting metadata: \" + ex.Message + \"\\r\\n\" + ex.StackTrace);\ntxtMobi.Text = \"\";\n- if (results.Count == 1) Logger.Log(\"An error occurred getting metadata: \" + results[0]);\nreturn;\n}\n+ }\nstring outputDir = settings.useSubDirectories ? Functions.GetBookOutputDirectoryOnly(results[4], results[5]) : settings.outDir;\n- //Open file in read only mode\n- using (FileStream stream = new FileStream(results[6], FileMode.Open, FileAccess.Read))\n- //Get a binary reader for the file stream\n- using (BinaryReader reader = new BinaryReader(stream))\n- {\n- //copy the content of the file into a memory stream\n- MemoryStream memoryStream = new MemoryStream(reader.ReadBytes((int)stream.Length));\n- //make a new Bitmap object the owner of the MemoryStream\n- Bitmap bitmap = new Bitmap(memoryStream);\n- pbCover.Image = bitmap;\n- stream.Dispose();\n- }\n-\nlblTitle.Visible = true;\nlblAuthor.Visible = true;\nlblAsin.Visible = true;\n@@ -1129,8 +1142,16 @@ private void btnUnpack_Click(object sender, EventArgs e)\nif (settings.useKindleUnpack)\n{\nLogger.Log(\"Running Kindleunpack to extract rawML...\");\n+ try\n+ {\nresults = Functions.GetMetaData(txtMobi.Text, settings.outDir, randomFile, settings.mobi_unpack);\n}\n+ catch (Exception ex)\n+ {\n+ Logger.Log(\"An error occurred extracting rawML: \" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n+ return;\n+ }\n+ }\nelse\n{\nLogger.Log(\"Extracting rawML...\");\n@@ -1144,11 +1165,6 @@ private void btnUnpack_Click(object sender, EventArgs e)\nreturn;\n}\n}\n- if (results.Count != 6)\n- {\n- Logger.Log(results[0]);\n- return;\n- }\nstring rawmlPath = Path.Combine(Environment.CurrentDirectory + @\"\\dmp\", Path.GetFileName(results[3]));\nFile.Copy(results[3], rawmlPath, true);\nLogger.Log(\"Extracted rawml successfully!\\r\\nSaved to \" + rawmlPath);\n",
        "lang": "C#",
        "codet5-history": "Fixing the bug that the metadata extraction would fail when the metadata extraction fails."
    },
    {
        "msg": "Reset book path field every time so a book can be re-opened properly",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -105,6 +105,7 @@ public static bool checkInternet()\nprivate void btnBrowseMobi_Click(object sender, EventArgs e)\n{\n+ txtMobi.Text = \"\";\ntxtMobi.Text = Functions.GetBook(txtMobi.Text);\n}\n@@ -826,10 +827,9 @@ private void rdoSource_CheckedChanged(object sender, EventArgs e)\nprivate void txtMobi_TextChanged(object sender, EventArgs e)\n{\n+ if (txtMobi.Text == \"\" || !File.Exists(txtMobi.Text)) return;\ntxtGoodreads.Text = \"\";\nprgBar.Value = 0;\n- if (!File.Exists(txtMobi.Text)) return;\n- this.Cursor = Cursors.WaitCursor;\nstring randomFile = Functions.GetTempDirectory();\nif (!Directory.Exists(randomFile))\n@@ -894,8 +894,6 @@ private void txtMobi_TextChanged(object sender, EventArgs e)\ncheckFiles(results[4], results[5], results[0]);\n- this.Cursor = Cursors.Default;\n-\ntry\n{\n// Directory.Delete(randomFile, true);\n",
        "lang": "C#",
        "codet5-history": "Fix Mobi diff"
    },
    {
        "msg": "Changed to throw exceptions for errors",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs @@ -392,17 +392,13 @@ public static List<string> GetMetaData(string mobiFile, string outDir, string ra\n}\ncatch (Exception ex)\n{\n- output.Add(String.Format(\"An error occurred while running Kindleunpack: {0}\\r\\n\", ex.Message));\n- MessageBox.Show(\"Error while running Kindleunpack. See the output log for details.\");\n- return output;\n+ throw new Exception(String.Format(\"An error occurred while running Kindleunpack: {0}\\r\\n\", ex.Message));\n}\nrawMl = Path.GetFileNameWithoutExtension(mobiFile) + \".rawml\";\n//Was the unpack successful?\nif (!unpackInfo.Contains(\"Write opf\\r\\n\") && !unpackInfo.Contains(\"\\r\\nCompleted\"))\n{\n- output.Add(\"Kindleunpack returned: \" + unpackInfo +\n- \"\\r\\nAn error occurred during unpack. See above info for details.\\r\\n\");\n- return output;\n+ throw new Exception(\"Kindleunpack returned: \" + unpackInfo + \"\\r\\nAn error occurred during unpack. See above info for details.\\r\\n\");\n}\n//Attempt to find the .rawml unpacked from the mobi\nrawMl = randomFile + @\"/mobi8/\" + rawMl;\n@@ -410,9 +406,7 @@ public static List<string> GetMetaData(string mobiFile, string outDir, string ra\nrawMl = randomFile + @\"/mobi7/\" + Path.GetFileNameWithoutExtension(mobiFile) + \".rawml\";\nif (!File.Exists(rawMl))\n{\n- output.Add(\"Error finding .rawml file. Path: \" + rawMl);\n- MessageBox.Show(\"Error finding .rawml.\", \"RAWML Error\");\n- return output;\n+ throw new Exception(\"Error finding .rawml file. Path: \" + rawMl);\n}\nstring databaseName = \"\";\n@@ -432,7 +426,7 @@ public static List<string> GetMetaData(string mobiFile, string outDir, string ra\nif (file.Name.Contains(\"cover\"))\n{\nimage = file.FullName;\n- continue;\n+ break;\n}\n}\n}\n@@ -449,12 +443,10 @@ public static List<string> GetMetaData(string mobiFile, string outDir, string ra\n\"Kindle may not display an X-Ray for this book.\\n\" +\n\"Do you wish to continue?\", incorrectAsin), \"Incorrect ASIN\", MessageBoxButtons.YesNo))\n{\n- output.Add(\n- String.Format(\"Incorrect ASIN detected: {0}!\\r\\n\" +\n+ throw new Exception(String.Format(\"Incorrect ASIN detected: {0}!\\r\\n\" +\n\"Kindle may not display an X-Ray for this book.\\r\\n\" +\n\"You must either use Calibre's Quality Check plugin (Fix ASIN for Kindle Fire) \" +\n\"or a Mobi editor (exth 113 and 504) to change this.\", incorrectAsin));\n- return output;\n}\n}\nasin = incorrectAsin;\n@@ -467,11 +459,8 @@ public static List<string> GetMetaData(string mobiFile, string outDir, string ra\n{\nif (match.Groups[1].Value != \"EBOK\")\n{\n- output.Add(\n- \"The document type is not set to EBOK; Kindle will not display an X-Ray for this book.\\r\\nYou must either use Calibre's convert feature (Personal Doc tag under MOBI Output) or a Mobi editor (exth 501) to change this.\");\n- MessageBox.Show(\n- \"The document type is not set to EBOK; Kindle will not display an X-Ray for this book.\\r\\nYou must either use Calibre's convert feature (Personal Doc tag under MOBI Output) or a Mobi editor (exth 501) to change this.\");\n- return output;\n+ throw new Exception(\"The document type is not set to EBOK; Kindle will not display an X-Ray for this book.\\r\\n\"\n+ + \"You must either use Calibre's convert feature (Personal Doc tag under MOBI Output) or a Mobi editor (exth 501) to change this.\");\n}\n}\n// Find author name in Kindleunpack output\n@@ -493,27 +482,21 @@ public static List<string> GetMetaData(string mobiFile, string outDir, string ra\n{\nif (stream == null)\n{\n- output.Add(\"Error opening mobi file (stream error).\");\n- MessageBox.Show(\"Error opening mobi file (stream error).\");\n- return output;\n+ throw new Exception(\"Error opening mobi file (stream error).\");\n}\nint bytesRead = stream.Read(dbinput, 0, 32);\nif (bytesRead != 32)\n{\n- output.Add(\"Error reading from mobi file.\");\n- MessageBox.Show(\"Error reading from mobi file.\");\n- return output;\n+ throw new Exception(\"Error reading from mobi file.\");\n}\ndatabaseName = Encoding.Default.GetString(dbinput).Trim('\\0');\n}\nif (databaseName == \"\" || uniqid == \"\" || asin == \"\")\n{\n- output.Add(String.Format(\n+ throw new Exception(String.Format(\n\"Error: Missing metadata.\\r\\nDatabase Name: {0}\\r\\nASIN: {1}\\r\\nUniqueID: {2}\", databaseName, asin,\nuniqid));\n- MessageBox.Show(\"Missing metadata. See output log for details.\", \"Metadata Error\");\n- return output;\n}\nelse if (!Properties.Settings.Default.useNewVersion && databaseName.Length == 31)\n{\n@@ -532,7 +515,6 @@ public static List<string> GetMetaData(string mobiFile, string outDir, string ra\noutput.Add(author);\noutput.Add(title);\noutput.Add(image);\n-\nreturn output;\n}\n",
        "lang": "C#",
        "codet5-history": "Replace MessageBox.Show with Exception"
    },
    {
        "msg": "Use Json to parse End Actions",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -951,41 +951,39 @@ private void tmiAuthorProfile_Click(object sender, EventArgs e)\n}\n}\n- private void tmiEndAction_Click(object sender, EventArgs e)\n+ private async void tmiEndAction_Click(object sender, EventArgs e)\n{\n- if (settings.useNewVersion)\n- {\n- if (!File.Exists(EaPath))\n+ string selPath = \"\";\n+ if (File.Exists(EaPath))\n+ selPath = EaPath;\n+ else\n{\nOpenFileDialog openFile = new OpenFileDialog();\nopenFile.Title = \"Open a Kindle EndAction file...\";\nopenFile.Filter = \"ASC files|*.asc\";\nopenFile.InitialDirectory = settings.outDir;\nif (openFile.ShowDialog() == DialogResult.OK)\n- {\n- try\n{\nif (openFile.FileName.Contains(\"EndActions\"))\n- {\n- frmEndAction.populateEndActions(openFile.FileName);\n- //frmEndAction.Location = new Point(this.Left, this.Top);\n- frmEndAction.ShowDialog();\n- }\n+ selPath = openFile.FileName;\nelse\n- MessageBox.Show(@\"Whoops! That filename does not contain \"\"EndActions\"\"!\");\n- }\n- catch (Exception ex)\n{\n- MessageBox.Show(\"Error: Current line being parsed:\\r\\n\" + frmEndAction.GetCurrentLine + \"\\r\\n\" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n+ Logger.Log(\"Invalid End Actions file.\");\n+ return;\n}\n}\n}\n- else\n+ if (selPath != \"\")\n+ {\n+ try\n{\n- frmEndAction.populateEndActions(EaPath);\n- //frmEndAction.Location = new Point(this.Left, this.Top);\n+ await frmEndAction.populateEndActions(selPath);\nfrmEndAction.ShowDialog();\n}\n+ catch (Exception ex)\n+ {\n+ MessageBox.Show(\"Error:\\r\\n\" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n+ }\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Fix EndAction file opening"
    },
    {
        "msg": "Automatic format changes",
        "diff": "diff --git a/src/frmPreviewSA.Designer.cs b/src/frmPreviewSA.Designer.cs @@ -29,10 +29,10 @@ protected override void Dispose(bool disposing)\nprivate void InitializeComponent()\n{\nthis.components = new System.ComponentModel.Container();\n- System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle3 = new System.Windows.Forms.DataGridViewCellStyle();\n- System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();\n+ System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle9 = new System.Windows.Forms.DataGridViewCellStyle();\n+ System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle7 = new System.Windows.Forms.DataGridViewCellStyle();\nSystem.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(frmPreviewSA));\n- System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle2 = new System.Windows.Forms.DataGridViewCellStyle();\n+ System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle8 = new System.Windows.Forms.DataGridViewCellStyle();\nthis.dgvOtherBooks = new System.Windows.Forms.DataGridView();\nthis.Column1 = new System.Windows.Forms.DataGridViewImageColumn();\nthis.Column2 = new System.Windows.Forms.DataGridViewTextBoxColumn();\n@@ -79,14 +79,14 @@ private void InitializeComponent()\nthis.dgvOtherBooks.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {\nthis.Column1,\nthis.Column2});\n- dataGridViewCellStyle3.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;\n- dataGridViewCellStyle3.BackColor = System.Drawing.SystemColors.Control;\n- dataGridViewCellStyle3.Font = new System.Drawing.Font(\"Microsoft Sans Serif\", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n- dataGridViewCellStyle3.ForeColor = System.Drawing.SystemColors.ControlText;\n- dataGridViewCellStyle3.SelectionBackColor = System.Drawing.SystemColors.Control;\n- dataGridViewCellStyle3.SelectionForeColor = System.Drawing.SystemColors.ControlText;\n- dataGridViewCellStyle3.WrapMode = System.Windows.Forms.DataGridViewTriState.True;\n- this.dgvOtherBooks.DefaultCellStyle = dataGridViewCellStyle3;\n+ dataGridViewCellStyle9.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;\n+ dataGridViewCellStyle9.BackColor = System.Drawing.SystemColors.Control;\n+ dataGridViewCellStyle9.Font = new System.Drawing.Font(\"Microsoft Sans Serif\", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n+ dataGridViewCellStyle9.ForeColor = System.Drawing.SystemColors.ControlText;\n+ dataGridViewCellStyle9.SelectionBackColor = System.Drawing.SystemColors.Control;\n+ dataGridViewCellStyle9.SelectionForeColor = System.Drawing.SystemColors.ControlText;\n+ dataGridViewCellStyle9.WrapMode = System.Windows.Forms.DataGridViewTriState.True;\n+ this.dgvOtherBooks.DefaultCellStyle = dataGridViewCellStyle9;\nthis.dgvOtherBooks.Location = new System.Drawing.Point(334, 31);\nthis.dgvOtherBooks.Name = \"dgvOtherBooks\";\nthis.dgvOtherBooks.ReadOnly = true;\n@@ -98,14 +98,14 @@ private void InitializeComponent()\n// Column1\n//\nthis.Column1.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None;\n- dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter;\n- dataGridViewCellStyle1.BackColor = System.Drawing.SystemColors.Control;\n- dataGridViewCellStyle1.ForeColor = System.Drawing.SystemColors.ControlText;\n- dataGridViewCellStyle1.NullValue = ((object)(resources.GetObject(\"dataGridViewCellStyle1.NullValue\")));\n- dataGridViewCellStyle1.Padding = new System.Windows.Forms.Padding(0, 0, 0, 4);\n- dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Control;\n- dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.ControlText;\n- this.Column1.DefaultCellStyle = dataGridViewCellStyle1;\n+ dataGridViewCellStyle7.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter;\n+ dataGridViewCellStyle7.BackColor = System.Drawing.SystemColors.Control;\n+ dataGridViewCellStyle7.ForeColor = System.Drawing.SystemColors.ControlText;\n+ dataGridViewCellStyle7.NullValue = ((object)(resources.GetObject(\"dataGridViewCellStyle7.NullValue\")));\n+ dataGridViewCellStyle7.Padding = new System.Windows.Forms.Padding(0, 0, 0, 4);\n+ dataGridViewCellStyle7.SelectionBackColor = System.Drawing.SystemColors.Control;\n+ dataGridViewCellStyle7.SelectionForeColor = System.Drawing.SystemColors.ControlText;\n+ this.Column1.DefaultCellStyle = dataGridViewCellStyle7;\nthis.Column1.HeaderText = \"Column1\";\nthis.Column1.Name = \"Column1\";\nthis.Column1.ReadOnly = true;\n@@ -114,14 +114,14 @@ private void InitializeComponent()\n//\n// Column2\n//\n- dataGridViewCellStyle2.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;\n- dataGridViewCellStyle2.BackColor = System.Drawing.SystemColors.Control;\n- dataGridViewCellStyle2.ForeColor = System.Drawing.SystemColors.ControlText;\n- dataGridViewCellStyle2.Padding = new System.Windows.Forms.Padding(4, 0, 0, 0);\n- dataGridViewCellStyle2.SelectionBackColor = System.Drawing.SystemColors.Control;\n- dataGridViewCellStyle2.SelectionForeColor = System.Drawing.SystemColors.ControlText;\n- dataGridViewCellStyle2.WrapMode = System.Windows.Forms.DataGridViewTriState.True;\n- this.Column2.DefaultCellStyle = dataGridViewCellStyle2;\n+ dataGridViewCellStyle8.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;\n+ dataGridViewCellStyle8.BackColor = System.Drawing.SystemColors.Control;\n+ dataGridViewCellStyle8.ForeColor = System.Drawing.SystemColors.ControlText;\n+ dataGridViewCellStyle8.Padding = new System.Windows.Forms.Padding(4, 0, 0, 0);\n+ dataGridViewCellStyle8.SelectionBackColor = System.Drawing.SystemColors.Control;\n+ dataGridViewCellStyle8.SelectionForeColor = System.Drawing.SystemColors.ControlText;\n+ dataGridViewCellStyle8.WrapMode = System.Windows.Forms.DataGridViewTriState.True;\n+ this.Column2.DefaultCellStyle = dataGridViewCellStyle8;\nthis.Column2.HeaderText = \"Column2\";\nthis.Column2.Name = \"Column2\";\nthis.Column2.ReadOnly = true;\n",
        "lang": "C#",
        "codet5-history": "Fixes a few typos in the code"
    },
    {
        "msg": "Use new extraction function to get terms for X-Ray preview",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -36,8 +36,6 @@ public frmMain()\nInitializeComponent();\n}\n- private frmPreviewXR frmXraPreview = new frmPreviewXR();\n-\nprivate frmAbout frmInfo = new frmAbout();\nprivate frmCreateXR frmCreator = new frmCreateXR();\n@@ -1026,59 +1024,44 @@ private async void tmiEndAction_Click(object sender, EventArgs e)\nprivate void tmiXray_Click(object sender, EventArgs e)\n{\n- if (settings.useNewVersion)\n- {\n- if (!File.Exists(XrPath))\n+ string selPath = \"\";\n+ if (File.Exists(XrPath))\n+ selPath = XrPath;\n+ else\n{\nOpenFileDialog openFile = new OpenFileDialog();\nopenFile.Title = \"Open a Kindle X-Ray file...\";\nopenFile.Filter = \"ASC files|*.asc\";\nopenFile.InitialDirectory = settings.outDir;\nif (openFile.ShowDialog() == DialogResult.OK)\n- {\n- try\n{\nif (openFile.FileName.Contains(\"XRAY.entities\"))\n+ selPath = openFile.FileName;\n+ else\n{\n- string xrayDB = \"Data Source=\" + openFile.FileName + \";Version=3;\";\n- List<XRay.Term> Terms = new List<XRay.Term>(100);\n-\n- SQLiteConnection m_dbConnection = new SQLiteConnection(xrayDB);\n- m_dbConnection.Open();\n-\n- string sql = \"SELECT * FROM entity WHERE has_info_card = '1'\";\n- SQLiteCommand command = new SQLiteCommand(sql, m_dbConnection);\n- SQLiteDataReader reader = command.ExecuteReader();\n-\n- while (reader.Read())\n- {\n- XRay.Term newTerm = new XRay.Term();\n- newTerm.Id = reader.GetInt32(0);\n- newTerm.TermName = reader.GetString(1);\n- int i = reader.GetInt32(3);\n- newTerm.Type = reader.GetInt32(3) == 1 ? \"character\" : \"topic\";\n- newTerm.DescSrc = Convert.ToString(reader.GetInt32(4));\n- Terms.Add(newTerm);\n+ Logger.Log(\"Invalid X-Ray file.\");\n+ return;\n}\n- command.Dispose();\n-\n- for (int i = 1; i < Terms.Count + 1; i++)\n+ }\n+ }\n+ if (selPath != \"\")\n{\n- sql = String.Format(\"SELECT * FROM entity_description WHERE entity = '{0}'\", i);\n- command = new SQLiteCommand(sql, m_dbConnection);\n- reader = command.ExecuteReader();\n- while (reader.Read())\n+ try\n{\n- Terms[i - 1].Desc = reader.GetString(0);\n- }\n+ int ver = CheckXRayVersion(selPath);\n+ if (ver == 0)\n+ {\n+ Logger.Log(\"Invalid X-Ray file.\");\n+ return;\n}\n- m_dbConnection.Close();\n+ List<XRay.Term> terms = ver == 2 ? ExtractTermsNew(selPath) : ExtractTermsOld(selPath);\n+ frmPreviewXR frmXraPreview = new frmPreviewXR();\nfrmXraPreview.flpPeople.Controls.Clear();\nfrmXraPreview.flpTerms.Controls.Clear();\n- foreach (XRay.Term t in Terms)\n+ foreach (XRay.Term t in terms)\n{\nXRayPanel p = new XRayPanel(t.Type, t.TermName, t.DescSrc, t.Desc);\nif (t.Type == \"character\")\n@@ -1090,20 +1073,12 @@ private void tmiXray_Click(object sender, EventArgs e)\nfrmXraPreview.ShowDialog();\n}\n- else\n- MessageBox.Show(@\"Whoops! That filename does not contain \"\"XRAY Entities\"\"!\");\n- }\ncatch (Exception ex)\n{\nMessageBox.Show(\"Error:\\r\\n\" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n}\n}\n}\n- else\n- {\n- }\n- }\n- }\nprivate void btnUnpack_Click(object sender, EventArgs e)\n{\n@@ -1195,25 +1170,15 @@ private void btnExtractTerms_Click(object sender, EventArgs e)\nLogger.Log(\"Invalid or no file selected.\");\nreturn;\n}\n- bool newVer = false;\n- using (FileStream fs = new FileStream(selPath, FileMode.Open, FileAccess.Read))\n- {\n- int c = fs.ReadByte();\n- if (c == 'S')\n- newVer = true;\n- else if (c != '{')\n+ int newVer = CheckXRayVersion(selPath);\n+ if (newVer == 0)\n{\nLogger.Log(\"Invalid X-Ray file.\");\nreturn;\n}\n- }\ntry\n{\n- List<XRay.Term> terms;\n- if (newVer)\n- terms = ExtractTermsNew(selPath);\n- else\n- terms = ExtractTermsOld(selPath);\n+ List<XRay.Term> terms = newVer == 2 ? ExtractTermsNew(selPath) : ExtractTermsOld(selPath);\nif (!Directory.Exists(Environment.CurrentDirectory + @\"\\xml\\\"))\nDirectory.CreateDirectory(Environment.CurrentDirectory + @\"\\xml\\\");\nstring outfile = Environment.CurrentDirectory + @\"\\xml\\\" + Path.GetFileNameWithoutExtension(selPath) + \".xml\";\n@@ -1226,6 +1191,20 @@ private void btnExtractTerms_Click(object sender, EventArgs e)\n}\n}\n+ // 0 = invalid, 1 = old, 2 = new\n+ public int CheckXRayVersion(string path)\n+ {\n+ using (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read))\n+ {\n+ int c = fs.ReadByte();\n+ if (c == 'S')\n+ return 2;\n+ else if (c == '{')\n+ return 1;\n+ return 0;\n+ }\n+ }\n+\nprivate List<XRay.Term> ExtractTermsNew(string path)\n{\nList<XRay.Term> terms = new List<XRay.Term>(100);\n@@ -1254,6 +1233,7 @@ private List<XRay.Term> ExtractTermsNew(string path)\n//{\nnewTerm.DescSrc = \"Wikipedia\";\nnewTerm.DescUrl = String.Format(@\"http://en.wikipedia.org/wiki/{0}\", newTerm.TermName.Replace(\" \", \"_\"));\n+ //newTerm.DescSrc = Convert.ToString(reader.GetInt32(4));\n//}\nterms.Add(newTerm);\n}\n",
        "lang": "C#",
        "codet5-history": "Add Xray version check"
    },
    {
        "msg": "Fixed issue when Goodreads only had 1 page of quotes",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -501,7 +501,8 @@ private async Task<XRay.Term> GetTerm(string baseUrl, string relativeUrl)\nif (maxPages == 1)\n{\nHtmlNode tempNode = quoteDoc.DocumentNode.SelectSingleNode(\"//span[contains(@class,'previous_page')]/parent::div/*[last()-1]\");\n- if (!int.TryParse(tempNode.InnerHtml, out maxPages)) maxPages = 1;\n+ if (tempNode == null || !int.TryParse(tempNode.InnerHtml, out maxPages))\n+ maxPages = 1;\nresult = new List<Tuple<string, int>>(maxPages * 30);\n}\nHtmlNodeCollection tempNodes = quoteDoc.DocumentNode.SelectNodes(\"//div[@class='quotes']/div[@class='quote']\");\n",
        "lang": "C#",
        "codet5-history": "Fix NRE in diff"
    },
    {
        "msg": "Version bumped to 2.0.21",
        "diff": "diff --git a/Properties/AssemblyInfo.cs b/Properties/AssemblyInfo.cs // You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n-[assembly: AssemblyVersion(\"2.0.20.0\")]\n-[assembly: AssemblyFileVersion(\"2.0.20.0\")]\n+[assembly: AssemblyVersion(\"2.0.21.0\")]\n+[assembly: AssemblyFileVersion(\"2.0.21.0\")]\n",
        "lang": "C#",
        "codet5-history": "Update version to 2.0.21.0"
    },
    {
        "msg": "Add blank locations when extracting to keep count",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -1220,6 +1220,10 @@ private List<XRay.Term> ExtractTermsNew(string path)\n//}\n//else\n//{\n+ // Actual location aren't needed for extracting terms for preview or XML saving, but need count\n+ int i = reader.GetInt32(4);\n+ for (; i > 0; i--)\n+ newTerm.Locs.Add(null);\nnewTerm.DescSrc = \"Wikipedia\";\nnewTerm.DescUrl = String.Format(@\"http://en.wikipedia.org/wiki/{0}\", newTerm.TermName.Replace(\" \", \"_\"));\n//newTerm.DescSrc = Convert.ToString(reader.GetInt32(4));\n",
        "lang": "C#",
        "codet5-history": "Fixes issue with missing locations in the diff"
    },
    {
        "msg": "Remove redundant async keywords",
        "diff": "diff --git a/src/DataSources/DataSource.cs b/src/DataSources/DataSource.cs @@ -12,9 +12,9 @@ public abstract class DataSource\npublic virtual HtmlDocument sourceHtmlDoc { get; set; }\npublic abstract Task<string> SearchBook(string author, string title);\npublic abstract Task<BookInfo> GetNextInSeries(BookInfo curBook, AuthorProfile authorProfile, string TLD);\n- public virtual async Task<bool> GetPageCount(BookInfo curBook) { return false; }\n- public virtual async Task GetExtras(BookInfo curBook, CancellationToken token, IProgress<Tuple<int, int>> progress = null) { }\n- public virtual async Task<List<XRay.Term>> GetTerms(string dataUrl, IProgress<Tuple<int, int>> progress, CancellationToken token) { return new List<XRay.Term>(); }\n- public virtual async Task<List<Tuple<string, int>>> GetNotableClips(string url, CancellationToken token, HtmlDocument srcDoc = null, IProgress<Tuple<int, int>> progress = null) { return new List<Tuple<string, int>>(); }\n+ public virtual Task<bool> GetPageCount(BookInfo curBook) { return Task.FromResult(false); }\n+ public virtual Task GetExtras(BookInfo curBook, CancellationToken token, IProgress<Tuple<int, int>> progress = null) { return Task.FromResult(false); }\n+ public virtual Task<List<XRay.Term>> GetTerms(string dataUrl, IProgress<Tuple<int, int>> progress, CancellationToken token) { return Task.FromResult(new List<XRay.Term>()); }\n+ public virtual Task<List<Tuple<string, int>>> GetNotableClips(string url, CancellationToken token, HtmlDocument srcDoc = null, IProgress<Tuple<int, int>> progress = null) { return Task.FromResult(new List<Tuple<string, int>>()); }\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Remove async from DataSource methods"
    },
    {
        "msg": "Version to 2.0.22",
        "diff": "diff --git a/Properties/AssemblyInfo.cs b/Properties/AssemblyInfo.cs // You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n-[assembly: AssemblyVersion(\"2.0.21.0\")]\n-[assembly: AssemblyFileVersion(\"2.0.21.0\")]\n+[assembly: AssemblyVersion(\"2.0.22.0\")]\n+[assembly: AssemblyFileVersion(\"2.0.22.0\")]\n",
        "lang": "C#",
        "codet5-history": "Update version to 2.0.22.0"
    },
    {
        "msg": "Version 2.0.24",
        "diff": "diff --git a/Properties/AssemblyInfo.cs b/Properties/AssemblyInfo.cs // You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n-[assembly: AssemblyVersion(\"2.0.22.0\")]\n-[assembly: AssemblyFileVersion(\"2.0.22.0\")]\n+[assembly: AssemblyVersion(\"2.0.24.0\")]\n+[assembly: AssemblyFileVersion(\"2.0.24.0\")]\n",
        "lang": "C#",
        "codet5-history": "Update version to 2.0.24.0"
    },
    {
        "msg": "Removed commented 'extracting' message on book load",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -865,7 +865,6 @@ private void txtMobi_TextChanged(object sender, EventArgs e)\n}\nelse\n{\n- //Logger.Log(\"Extracting metadata...\");\ntry\n{\nUnpack.Metadata md = Functions.GetMetaDataInternal(txtMobi.Text, settings.outDir, false);\n",
        "lang": "C#",
        "codet5-history": "Remove commented out log statement"
    },
    {
        "msg": "Updates to HtmlAgilityPack and SQLite",
        "diff": "diff --git a/XRayBuilderGUI.csproj b/XRayBuilderGUI.csproj <Prefer32Bit>false</Prefer32Bit>\n</PropertyGroup>\n<ItemGroup>\n- <Reference Include=\"HtmlAgilityPack, Version=1.6.2.0, Culture=neutral, PublicKeyToken=bd319b19eaf3b43a, processorArchitecture=MSIL\">\n- <HintPath>packages\\HtmlAgilityPack.1.6.2\\lib\\Net45\\HtmlAgilityPack.dll</HintPath>\n+ <Reference Include=\"HtmlAgilityPack, Version=1.6.3.0, Culture=neutral, PublicKeyToken=bd319b19eaf3b43a, processorArchitecture=MSIL\">\n+ <HintPath>packages\\HtmlAgilityPack.1.6.3\\lib\\Net45\\HtmlAgilityPack.dll</HintPath>\n<Private>True</Private>\n</Reference>\n<Reference Include=\"Newtonsoft.Json, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL\">\n<Reference Include=\"System\" />\n<Reference Include=\"System.ComponentModel.DataAnnotations\" />\n<Reference Include=\"System.Core\" />\n- <Reference Include=\"System.Data.SQLite, Version=1.0.105.2, Culture=neutral, PublicKeyToken=db937bc2d44ff139, processorArchitecture=MSIL\">\n- <HintPath>packages\\System.Data.SQLite.Core.1.0.105.2\\lib\\net451\\System.Data.SQLite.dll</HintPath>\n+ <Reference Include=\"System.Data.SQLite, Version=1.0.106.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139, processorArchitecture=MSIL\">\n+ <HintPath>packages\\System.Data.SQLite.Core.1.0.106.0\\lib\\net451\\System.Data.SQLite.dll</HintPath>\n<Private>True</Private>\n</Reference>\n<Reference Include=\"System.Xml.Linq\" />\n<PostBuildEvent>\n</PostBuildEvent>\n</PropertyGroup>\n- <Import Project=\"packages\\System.Data.SQLite.Core.1.0.105.2\\build\\net451\\System.Data.SQLite.Core.targets\" Condition=\"Exists('packages\\System.Data.SQLite.Core.1.0.105.2\\build\\net451\\System.Data.SQLite.Core.targets')\" />\n+ <Import Project=\"packages\\System.Data.SQLite.Core.1.0.106.0\\build\\net451\\System.Data.SQLite.Core.targets\" Condition=\"Exists('packages\\System.Data.SQLite.Core.1.0.106.0\\build\\net451\\System.Data.SQLite.Core.targets')\" />\n<Target Name=\"EnsureNuGetPackageBuildImports\" BeforeTargets=\"PrepareForBuild\">\n<PropertyGroup>\n<ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them. For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>\n</PropertyGroup>\n- <Error Condition=\"!Exists('packages\\System.Data.SQLite.Core.1.0.105.2\\build\\net451\\System.Data.SQLite.Core.targets')\" Text=\"$([System.String]::Format('$(ErrorText)', 'packages\\System.Data.SQLite.Core.1.0.105.2\\build\\net451\\System.Data.SQLite.Core.targets'))\" />\n+ <Error Condition=\"!Exists('packages\\System.Data.SQLite.Core.1.0.106.0\\build\\net451\\System.Data.SQLite.Core.targets')\" Text=\"$([System.String]::Format('$(ErrorText)', 'packages\\System.Data.SQLite.Core.1.0.106.0\\build\\net451\\System.Data.SQLite.Core.targets'))\" />\n</Target>\n<!-- To modify your build process, add your task inside one of the targets below and uncomment it.\nOther similar extension points exist, see Microsoft.Common.targets.\n",
        "lang": "C#",
        "codet5-history": "Update to latest version of SQLite and HtmlAgilityPack"
    },
    {
        "msg": "Use i instead of maxPages",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -495,7 +495,7 @@ private async Task<XRay.Term> GetTerm(string baseUrl, string relativeUrl)\nHtmlDocument quoteDoc = new HtmlDocument();\nquoteDoc.LoadHtml(await HttpDownloader.GetPageHtmlAsync(String.Format(quoteURL, i)));\n// first time through, check how many pages there are (find previous page button, get parent div, take all children of that, 2nd last one should be the max page count\n- if (maxPages == 1)\n+ if (i == 1)\n{\nHtmlNode tempNode = quoteDoc.DocumentNode.SelectSingleNode(\"//span[contains(@class,'previous_page')]/parent::div/*[last()-1]\");\nif (tempNode == null || !int.TryParse(tempNode.InnerHtml, out maxPages))\n",
        "lang": "C#",
        "codet5-history": "Fixing the wrong condition in the diff"
    },
    {
        "msg": "Removed assignment from conditional statement",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -1323,7 +1323,8 @@ private void checkFiles(string author, string title, string asin)\npbFile3.Image = Resources.file_on;\nelse\npbFile3.Image = Resources.file_off;\n- if (File.Exists(XrPath = bookOutputDir + @\"\\XRAY.entities.\" + asin + \".asc\"))\n+ XrPath = bookOutputDir + @\"\\XRAY.entities.\" + asin + \".asc\";\n+ if (File.Exists(XrPath))\npbFile4.Image = Resources.file_on;\nelse\npbFile4.Image = Resources.file_off;\n",
        "lang": "C#",
        "codet5-history": "Fix typo in diff command"
    },
    {
        "msg": "Fixed old console logging statements",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -364,7 +364,7 @@ public int ExpandFromRawMl(string rawMl, IProgress<Tuple<int, int>> progress, Ca\n}\ncatch (Exception ex)\n{\n- Console.WriteLine(ex.Message); //Just ignore errors\n+ Logger.Log(\"Error searching for chapters: \" + ex.Message);\n}\n//Built chapters list is saved for manual editing\nif (_chapters.Count > 0)\n@@ -716,7 +716,7 @@ private void SearchChapters(HtmlAgilityPack.HtmlDocument bookDoc, string rawML)\n}\ncatch (Exception ex)\n{\n- Console.WriteLine(ex.Message);\n+ Logger.Log(\"Error searching for Calibre chapters: \" + ex.Message);\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Replace Console.WriteLine with Logger.Log"
    },
    {
        "msg": "Redundant ToString()",
        "diff": "diff --git a/src/DataSources/Shelfari.cs b/src/DataSources/Shelfari.cs @@ -54,7 +54,7 @@ private string FindShelfariURL(HtmlDocument shelfariHtmlDoc, string author, stri\n(listofthings.Contains(author) || listofthings.Exists(r => r.Replace(\" \", \"\") == author.Replace(\" \", \"\"))))\nif (!listoflinks.Any(c => c.Contains(\"(collective work)\")))\n{\n- shelfariBookUrl = listoflinks[index].ToString();\n+ shelfariBookUrl = listoflinks[index];\nshelfariBookUrl = Regex.Replace(shelfariBookUrl, \"<a href=\\\"\", \"\", RegexOptions.None);\nshelfariBookUrl = Regex.Replace(shelfariBookUrl, \"\\\".*?</a>.*\", \"\", RegexOptions.None);\nif (shelfariBookUrl.ToLower().StartsWith(\"http://\"))\n",
        "lang": "C#",
        "codet5-history": "Fix shelfari book url"
    },
    {
        "msg": "Error message when cover image fails to download",
        "diff": "diff --git a/src/BookInfo.cs b/src/BookInfo.cs @@ -196,7 +196,10 @@ public System.Drawing.Bitmap CoverImage()\n{\n_bookImage = Task.Run(() => HttpDownloader.GetImage(bookImageUrl)).Result;\n}\n- catch (Exception) { }\n+ catch (Exception ex)\n+ {\n+ Logger.Log(\"Failed to download cover image: \" + ex.Message);\n+ }\nreturn _bookImage;\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Log exception when cover image download fails"
    },
    {
        "msg": "Removed duplicate .Any call",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -475,7 +475,7 @@ public int ExpandFromRawMl(string rawMl, IProgress<Tuple<int, int>> progress, Ca\n{\nif (search.Any(r => Regex.Match(node.InnerText, r).Success)\n|| search.Any(r => Regex.Match(node.InnerHtml, r).Success)\n- || (ignoreSoftHypen && (search.Any(r => Regex.Match(noSoftHypen, r).Success) || search.Any(r => Regex.Match(noSoftHypen, r).Success))))\n+ || (ignoreSoftHypen && search.Any(r => Regex.Match(noSoftHypen, r).Success)))\ntermFound = true;\n}\nelse\n",
        "lang": "C#",
        "codet5-history": "Fix for issue\nThe `ignoreSoftHypen` check was not working correctly."
    },
    {
        "msg": "Unnecessary initialization",
        "diff": "diff --git a/src/BookInfo.cs b/src/BookInfo.cs @@ -41,7 +41,7 @@ public class BookInfo\npublic BookInfo previousInSeries;\n// List of clips and their highlight/like count\n- public List<Tuple<string, int>> notableClips = null;\n+ public List<Tuple<string, int>> notableClips;\npublic BookInfo(string title, string author, string asin, string guid, string databasename, string path, string sidecarName, string dataUrl, string rawmlPath)\n{\n",
        "lang": "C#",
        "codet5-history": "Remove default value for notableClips"
    },
    {
        "msg": "Removed explicit rethrow",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs @@ -296,9 +296,9 @@ public static Metadata GetMetaDataInternal(string mobiFile, string outDir, bool\n}\n}\n}\n- catch (Exception ex)\n+ catch\n{\n- throw ex;\n+ throw;\n}\nfinally\n{\n",
        "lang": "C#",
        "codet5-history": "Remove unnecessary Exception in diff"
    },
    {
        "msg": "Dispose of cancelTokens when closing form",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -699,6 +699,7 @@ private void Form1_FormClosing(object sender, FormClosingEventArgs e)\n}\nExiting = true;\ncancelTokens.Cancel();\n+ cancelTokens.Dispose();\nApplication.Exit();\n}\n",
        "lang": "C#",
        "codet5-history": "Dispose cancel tokens on exit"
    },
    {
        "msg": "Use contains instead of indexof",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs @@ -602,9 +602,9 @@ public static List<T> DeserializeList<T>(string filePath)\n/// </summary>\npublic static string FixAuthor(string author)\n{\n- if (author.IndexOf(';') > 0)\n+ if (author.Contains(';'))\nauthor = author.Split(';')[0];\n- if (author.IndexOf(',') > 0)\n+ if (author.Contains(','))\n{\nstring[] parts = author.Split(',');\nauthor = parts[1].Trim() + \" \" + parts[0].Trim();\n",
        "lang": "C#",
        "codet5-history": "Fixing the bug that the author string was not properly parsed"
    },
    {
        "msg": "Crash CreateTerms and CreateAliases back to the caller if they fail vs returning 0/1",
        "diff": "diff --git a/src/frmCreateXR.cs b/src/frmCreateXR.cs @@ -198,18 +198,19 @@ private void btnSaveXML_Click(object sender, EventArgs e)\n}\ntry\n{\n- if (CreateTerms() == 0 && aliasesExist)\n+ CreateTerms();\n+ if (aliasesExist)\n{\n- if (CreateAliases() == 0)\n+ CreateAliases();\nMessageBox.Show(\"X-Ray entities and Alias files created sucessfully!\");\n}\n- else if (CreateTerms() == 0)\n+ else\nMessageBox.Show(\"X-Ray entities file created sucessfully!\");\n}\ncatch (Exception ex)\n{\nMessageBox.Show(String.Format(\"An error occurred saving the files: {0}\\r\\n{1}\", ex.Message, ex.StackTrace),\n- \"Missing Information\", MessageBoxButtons.OK, MessageBoxIcon.Warning);\n+ \"Save XML\", MessageBoxButtons.OK, MessageBoxIcon.Warning);\n}\n}\n@@ -264,16 +265,16 @@ private void tsmEdit_Click(object sender, EventArgs e)\nbtnEditTerm_Click(sender, e);\n}\n- private int CreateAliases()\n- {\n- try\n+ private void CreateAliases()\n{\nstring aliasFile = Environment.CurrentDirectory + @\"\\ext\\\" + txtAsin.Text + \".aliases\";\nstring aliases = \"\";\nif (!Directory.Exists(Environment.CurrentDirectory + @\"\\ext\\\"))\nDirectory.CreateDirectory(Environment.CurrentDirectory + @\"\\ext\\\");\nusing (var streamWriter = new StreamWriter(aliasFile, false, Encoding.UTF8))\n+ {\nfor (int i = 0; i < Terms.Count; i++)\n+ {\nif (Terms[i].Aliases.Count > 0)\n{\nTerms[i].Aliases.Sort((a, b) => b.Length.CompareTo(a.Length));\n@@ -290,16 +291,10 @@ private int CreateAliases()\nstreamWriter.WriteLine(Terms[i].TermName + \"|\");\n}\n}\n- catch\n- {\n- return 1;\n}\n- return 0;\n}\n- private int CreateTerms()\n- {\n- try\n+ private void CreateTerms()\n{\nif (!Directory.Exists(Environment.CurrentDirectory + @\"\\xml\\\"))\nDirectory.CreateDirectory(Environment.CurrentDirectory + @\"\\xml\\\");\n@@ -343,12 +338,6 @@ private int CreateTerms()\n}\nFunctions.Save<List<XRay.Term>>(Terms, outfile);\n}\n- catch\n- {\n- return 1;\n- }\n- return 0;\n- }\nprivate static bool CompareImages(Bitmap image1, Bitmap image2)\n{\n",
        "lang": "C#",
        "codet5-history": "Fixes for the diff task"
    },
    {
        "msg": "Moved fields only used in single methods",
        "diff": "diff --git a/src/AuthorProfile.cs b/src/AuthorProfile.cs @@ -15,12 +15,9 @@ public class AuthorProfile\n{\nprivate static Properties.Settings settings = Properties.Settings.Default;\n- private string ApPath = \"\";\nprivate BookInfo curBook;\nprivate string TLD;\n- private Bitmap ApAuthorImage;\n-\npublic string ApTitle;\npublic string ApSubTitle;\npublic string BioTrimmed = \"\";\n@@ -55,7 +52,7 @@ public async Task<bool> Generate()\nLogger.Log(\"An error occurred creating output directory: \" + ex.Message + \"\\r\\nFiles will be placed in the default output directory.\");\noutputDir = settings.outDir;\n}\n- ApPath = outputDir + @\"\\AuthorProfile.profile.\" + curBook.asin + \".asc\";\n+ string ApPath = outputDir + @\"\\AuthorProfile.profile.\" + curBook.asin + \".asc\";\nif (!Properties.Settings.Default.overwrite && File.Exists(ApPath))\n{\n@@ -202,6 +199,7 @@ public async Task<bool> Generate()\ncurBook.authorImageUrl = authorImageUrl;\n+ Bitmap ApAuthorImage;\ntry\n{\nLogger.Log(\"Downloading author image...\");\n",
        "lang": "C#",
        "codet5-history": "Fix author image download"
    },
    {
        "msg": "Shortex never used anywhere else",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -50,7 +50,6 @@ public class XRay\nprivate List<Excerpt> excerpts = new List<Excerpt>();\nprivate long _srl;\nprivate long _erl;\n- private bool _shortEx = true;\nprivate bool unattended;\nprivate bool skipShelfari;\nprivate int locOffset;\n@@ -339,7 +338,6 @@ public int ExpandFromRawMl(string rawMl, IProgress<Tuple<int, int>> progress, Ca\nstring punctuationMarks = String.Format(@\"({0}s|{0})?{1}?[!\\.?,\"\"\\);:]*{0}*{1}*{2}*\", apostrophes, quotes, dashesEllipsis);\nint excerptId = 0;\n- this._shortEx = shortEx;\nHtmlAgilityPack.HtmlDocument web = new HtmlAgilityPack.HtmlDocument();\nstring readContents;\nusing (StreamReader streamReader = new StreamReader(rawMl, Encoding.Default))\n",
        "lang": "C#",
        "codet5-history": "Remove unused shortEx variable"
    },
    {
        "msg": "termID not being incremented in the actual loop",
        "diff": "diff --git a/src/frmCreateXR.cs b/src/frmCreateXR.cs @@ -306,7 +306,7 @@ private void CreateTerms()\nXRay.Term newTerm = new XRay.Term();\nforeach (DataGridViewCell cell in row.Cells)\n{\n- newTerm.Id = termId;\n+ newTerm.Id = termId++;\nnewTerm.Type = CompareImages((Bitmap)row.Cells[0].Value, Resources.character) == true ? \"character\" : \"topic\";\nnewTerm.TermName = row.Cells[1].Value.ToString();\nif (row.Cells[2].Value.ToString() != \"\")\n@@ -334,7 +334,6 @@ private void CreateTerms()\nnewTerm.RegEx = (bool)row.Cells[9].Value;\n}\nTerms.Add(newTerm);\n- termId++;\n}\nFunctions.Save<List<XRay.Term>>(Terms, outfile);\n}\n",
        "lang": "C#",
        "codet5-history": "Fix termId increment"
    },
    {
        "msg": "Remove empty catch",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs @@ -296,10 +296,6 @@ public static Metadata GetMetaDataInternal(string mobiFile, string outDir, bool\n}\n}\n}\n- catch\n- {\n- throw;\n- }\nfinally\n{\nfs.Dispose();\n",
        "lang": "C#",
        "codet5-history": "Remove unnecessary catch block in diff"
    },
    {
        "msg": "Use StringBuilder instead of string concatenation",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -294,14 +294,14 @@ public async Task<int> CreateXray(IProgress<Tuple<int, int>> progress, Cancellat\nLogger.Log(String.Format(\"{0} {1} found in file:\", Terms.Count, Terms.Count > 1 ? \"Terms\" : \"Term\"));\nelse\nLogger.Log(String.Format(\"{0} {1} found on {2}:\", Terms.Count, Terms.Count > 1 ? \"Terms\" : \"Term\", dataSource.Name));\n- string tmp = \"\";\n+ StringBuilder str = new StringBuilder(Terms.Count * 32); // Assume that most names will be less than 32 chars\nint termId = 1;\nforeach (Term t in Terms)\n{\n- tmp += t.TermName + \", \";\n+ str.Append(t.TermName).Append(\", \");\nt.Id = termId++;\n}\n- Logger.Log(tmp);\n+ Logger.Log(str.ToString());\nif (!unattended && enableEdit)\n{\n@@ -744,7 +744,7 @@ private void SearchChapters(HtmlAgilityPack.HtmlDocument bookDoc, string rawML)\npublic int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress, CancellationToken token)\n{\n- string sql = \"\";\n+ StringBuilder sql = new StringBuilder(Terms.Count * 256);\nint entity = 1;\nint excerpt = 1;\nint personCount = 0;\n@@ -784,18 +784,18 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\ncommand.ExecuteNonQuery();\ncommand.Dispose();\n- sql = \"\";\n+ sql.Clear();\nforeach (int[] loc in t.Occurrences)\n- sql += String.Format(\"insert into occurrence (entity, start, length) values ({0}, {1}, {2});\\n\",\n+ sql.AppendFormat(\"insert into occurrence (entity, start, length) values ({0}, {1}, {2});\\n\",\nt.Id, loc[0], loc[1]);\n- command = new SQLiteCommand(sql, db);\n+ command = new SQLiteCommand(sql.ToString(), db);\ncommand.ExecuteNonQuery();\ncommand.Dispose();\nprogress.Report(new Tuple<int, int>(entity++, Terms.Count));\n}\n//Write excerpts and entity_excerpt table\nLogger.Log(String.Format(\"Writing {0} excerpts...\", excerpts.Count));\n- sql = \"\";\n+ sql.Clear();\ncommand = new SQLiteCommand(db);\ncommand.CommandText = \"insert into excerpt (id, start, length, image, related_entities, goto) values (@id, @start, @length, @image, @rel_ent, null);\";\nprogress.Report(new Tuple<int, int>(0, excerpts.Count));\n@@ -812,7 +812,7 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\nforeach (int ent in e.related_entities)\n{\nif (ent != 0) // skip notable flag\n- sql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", ent, e.id);\n+ sql.AppendFormat(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", ent, e.id);\n}\nprogress.Report(new Tuple<int, int>(excerpt++, excerpts.Count));\n}\n@@ -820,14 +820,14 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\n// create links to notable clips in order of popularity\nvar notablesOnly = excerpts.Where(ex => ex.notable).OrderByDescending(ex => ex.highlights);\nforeach (Excerpt notable in notablesOnly)\n- sql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, notable.id);\n+ sql.AppendFormat(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, notable.id);\n// Populate some more notable clips if not enough were found,\n// TODO: Add a config value in settings for this amount\nif (foundNotables <= 20 && foundNotables + excerpts.Count <= 20)\nexcerpts.ForEach(ex =>\n{\nif (!ex.notable)\n- sql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, ex.id);\n+ sql.AppendFormat(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, ex.id);\n});\nelse if (foundNotables <= 20)\n{\n@@ -836,14 +836,14 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\nwhile (foundNotables <= 20 && eligible.Count > 0)\n{\nExcerpt randEx = eligible.ElementAt(rand.Next(eligible.Count));\n- sql += String.Format(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, randEx.id);\n+ sql.AppendFormat(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, randEx.id);\neligible.Remove(randEx);\nfoundNotables++;\n}\n}\ntoken.ThrowIfCancellationRequested();\nLogger.Log(\"Writing entity excerpt table...\");\n- command = new SQLiteCommand(sql, db);\n+ command = new SQLiteCommand(sql.ToString(), db);\ncommand.ExecuteNonQuery();\ncommand.Dispose();\ntoken.ThrowIfCancellationRequested();\n@@ -853,28 +853,29 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\n.OrderByDescending(t => t.Locs.Count)\n.Select(t => t.Id)\n.ToList<int>();\n- sql = String.Format(\"update type set top_mentioned_entities='{0}' where id=1;\\n\",\n+ sql.Clear();\n+ sql.AppendFormat(\"update type set top_mentioned_entities='{0}' where id=1;\\n\",\nString.Join(\",\", sorted.GetRange(0, Math.Min(10, sorted.Count))));\nsorted =\nTerms.Where<Term>(t => t.Type.Equals(\"topic\"))\n.OrderByDescending(t => t.Locs.Count)\n.Select(t => t.Id)\n.ToList<int>();\n- sql += String.Format(\"update type set top_mentioned_entities='{0}' where id=2;\",\n+ sql.AppendFormat(\"update type set top_mentioned_entities='{0}' where id=2;\",\nString.Join(\",\", sorted.GetRange(0, Math.Min(10, sorted.Count))));\n- command = new SQLiteCommand(sql, db);\n+ command = new SQLiteCommand(sql.ToString(), db);\ncommand.ExecuteNonQuery();\ncommand.Dispose();\ntoken.ThrowIfCancellationRequested();\nLogger.Log(\"Writing metadata...\");\n- sql =\n- String.Format(\n+ sql.Clear();\n+ sql.AppendFormat(\n\"insert into book_metadata (srl, erl, has_images, has_excerpts, show_spoilers_default, num_people, num_terms, num_images, preview_images) \"\n+ \"values ({0}, {1}, 0, 1, 0, {2}, {3}, 0, null);\", _srl, _erl, personCount, termCount);\n- command = new SQLiteCommand(sql, db);\n+ command = new SQLiteCommand(sql.ToString(), db);\ncommand.ExecuteNonQuery();\ncommand.Dispose();\nreturn 0;\n",
        "lang": "C#",
        "codet5-history": "Replace String.Format with StringBuilder"
    },
    {
        "msg": "Removed cancel before dispose",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -695,7 +695,6 @@ private void Form1_FormClosing(object sender, FormClosingEventArgs e)\n}\n}\nExiting = true;\n- cancelTokens.Cancel();\ncancelTokens.Dispose();\nApplication.Exit();\n}\n",
        "lang": "C#",
        "codet5-history": "Remove unnecessary cancel call"
    },
    {
        "msg": "Fixed return value of sendmessage",
        "diff": "diff --git a/src/frmPreviewEA.cs b/src/frmPreviewEA.cs @@ -16,7 +16,7 @@ public partial class frmPreviewEA : Form\n// http://qdevblog.blogspot.ch/2011/11/c-listview-item-spacing.html\n[DllImport(\"user32.dll\")]\n- private static extern int SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);\n+ private static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);\nprivate int MakeLong(short lowPart, short highPart)\n{\n",
        "lang": "C#",
        "codet5-history": "Fix return type of SendMessage"
    },
    {
        "msg": "Only dispose fs once",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs @@ -252,7 +252,6 @@ public static Metadata GetMetaDataInternal(string mobiFile, string outDir, bool\nDialogResult.Yes == MessageBox.Show(\"The document type is not set to EBOK. Would you like this to be updated?\\r\\n\" +\n\"Caution: This feature is experimental and could potentially ruin your book file.\", \"Incorrect Content Type\", MessageBoxButtons.YesNo))\n{\n- fs.Dispose();\nfs = new FileStream(mobiFile, FileMode.Open, FileAccess.ReadWrite);\nif (fs == null)\nthrow new Exception(\"Unable to re-open mobi file for writing.\");\n",
        "lang": "C#",
        "codet5-history": "Remove unnecessary file stream dispose"
    },
    {
        "msg": "Seal metadata class",
        "diff": "diff --git a/src/Unpack/Metadata.cs b/src/Unpack/Metadata.cs namespace XRayBuilderGUI.Unpack\n{\n- public class Metadata : IDisposable\n+ public sealed class Metadata : IDisposable\n{\npublic PDBHeader PDB;\npublic PalmDOCHeader PDH;\n",
        "lang": "C#",
        "codet5-history": "Make Metadata sealed"
    },
    {
        "msg": "Clone coverImage into control",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -866,7 +866,7 @@ private void txtMobi_TextChanged(object sender, EventArgs e)\nusing (Unpack.Metadata md = Functions.GetMetaDataInternal(txtMobi.Text, settings.outDir, false))\n{\nresults = md.getResults();\n- pbCover.Image = md.coverImage;\n+ pbCover.Image = (Image)md.coverImage.Clone();\n}\n}\ncatch (Exception ex)\n",
        "lang": "C#",
        "codet5-history": "Clone the image before setting it to the original image"
    },
    {
        "msg": "Switched some strings from using .Format to interpolation",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs @@ -196,11 +196,8 @@ public static string RemoveInvalidFileChars(string filename)\npublic static bool ExtrasExist(string location, string asin)\n{\n- {\n- if (File.Exists(location + String.Format(@\"\\AuthorProfile.profile.{0}.asc\", asin)) &&\n- File.Exists(location + String.Format(@\"\\EndActions.data.{0}.asc\", asin)))\n+ if (File.Exists(location + $\"\\\\AuthorProfile.profile.{asin}.asc\") && File.Exists(location + $\"\\\\EndActions.data.{asin}.asc\"))\nreturn true;\n- }\nreturn false;\n}\n@@ -215,8 +212,7 @@ public static string GetTempDirectory()\ndo\n{\npath = Path.Combine(Properties.Settings.Default.tmpDir, Path.GetRandomFileName());\n- }\n- while (Directory.Exists(path));\n+ } while (Directory.Exists(path));\nDirectory.CreateDirectory(path);\nreturn path;\n}\n@@ -226,8 +222,7 @@ public static string TimeStamp()\nvar version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;\nvar time = String.Format(\"{0:HH:mm:ss}\", DateTime.Now);\nvar date = String.Format(\"{0:dd/MM/yyyy}\", DateTime.Now);\n- return String.Format(\"Running X-Ray Builder GUI v{0}. Log started on {1} at {2}.\\r\\n\",\n- version, date, time);\n+ return $\"Running X-Ray Builder GUI v{version}. Log started on {date} at {time}.\\r\\n\";\n}\npublic static async Task<Metadata> GetMetaDataInternalAsync(string mobiFile, string outDir, bool saveRawML, string randomFile = \"\")\n@@ -265,23 +260,22 @@ public static Metadata GetMetaDataInternal(string mobiFile, string outDir, bool\nstring ASIN = md.ASIN;\nMatch match = Regex.Match(ASIN, \"(^B[A-Z0-9]{9})\");\n- if (!match.Success && DialogResult.No == MessageBox.Show(String.Format(\"Incorrect ASIN detected: {0}!\\n\" +\n+ if (!match.Success && DialogResult.No == MessageBox.Show($\"Incorrect ASIN detected: {ASIN}!\\n\" +\n\"Kindle may not display an X-Ray for this book.\\n\" +\n- \"Do you wish to continue?\", ASIN), \"Incorrect ASIN\", MessageBoxButtons.YesNo))\n+ \"Do you wish to continue?\", \"Incorrect ASIN\", MessageBoxButtons.YesNo))\n{\n- throw new Exception(String.Format(\"Incorrect ASIN detected: {0}!\\r\\n\" +\n+ throw new Exception($\"Incorrect ASIN detected: {ASIN}!\\r\\n\" +\n\"Kindle may not display an X-Ray for this book.\\r\\n\" +\n\"You must either use Calibre's Quality Check plugin (Fix ASIN for Kindle Fire) \" +\n- \"or a MOBI editor (exth 113 and optionally 504) to change this.\", ASIN));\n+ \"or a MOBI editor (exth 113 and optionally 504) to change this.\");\n}\nif (!Properties.Settings.Default.useNewVersion && md.DBName.Length == 31)\n{\n- MessageBox.Show(String.Format(\n- \"WARNING: Database Name is the maximum length. If \\\"{0}\\\" is the full book title, this should not be an issue.\\r\\n\" +\n+ MessageBox.Show(\n+ $\"WARNING: Database Name is the maximum length. If \\\"{md.DBName}\\\" is the full book title, this should not be an issue.\\r\\n\" +\n\"If the title is supposed to be longer than that, you may get an error on your Kindle (WG on firmware < 5.6).\\r\\n\" +\n- \"This can be resolved by either shortening the title in Calibre or manually changing the database name.\\r\\n\",\n- md.DBName));\n+ \"This can be resolved by either shortening the title in Calibre or manually changing the database name.\\r\\n\");\n}\nif (saveRawML)\n@@ -344,8 +338,7 @@ public static string GetPageCount(string rawML, BookInfo bookInfo)\nbookInfo.pagesInBook = pageCount.ToString();\nbookInfo.readingHours = span.Hours.ToString();\nbookInfo.readingMinutes = span.Minutes.ToString();\n- output = (String.Format(\"Typical time to read: {0} hours and {1} minutes ({2} pages)\"\n- , span.Hours, span.Minutes, bookInfo.pagesInBook));\n+ output = $\"Typical time to read: {span.Hours} hours and {span.Minutes} minutes ({bookInfo.pagesInBook} pages)\";\nreturn output;\n}\n@@ -362,7 +355,7 @@ public static List<string> GetMetaData(string mobiFile, string outDir, string ra\nProcessStartInfo startInfo = new ProcessStartInfo()\n{\nFileName = mobiUnpack,\n- Arguments = \"-r -d \\\"\" + mobiFile + @\"\"\" \"\"\" + randomFile + @\"\"\"\",\n+ Arguments = $\"-r -d \\\"{mobiFile}\\\" \\\"{randomFile}\\\"\",\nRedirectStandardOutput = true,\nRedirectStandardError = true,\nStandardOutputEncoding = Encoding.UTF8,\n@@ -490,18 +483,14 @@ public static List<string> GetMetaData(string mobiFile, string outDir, string ra\nif (databaseName == \"\" || uniqid == \"\" || asin == \"\")\n{\n- throw new Exception(String.Format(\n- \"Error: Missing metadata.\\r\\nDatabase Name: {0}\\r\\nASIN: {1}\\r\\nUniqueID: {2}\", databaseName, asin,\n- uniqid));\n+ throw new Exception($\"Error: Missing metadata.\\r\\nDatabase Name: {databaseName}\\r\\nASIN: {asin}\\r\\nUniqueID: {uniqid}\");\n}\nelse if (!Properties.Settings.Default.useNewVersion && databaseName.Length == 31)\n{\nMessageBox.Show(\n- String.Format(\n- \"WARNING: Database Name is the maximum length. If \\\"{0}\\\" is the full book title, this should not be an issue.\\r\\n\" +\n+ $\"WARNING: Database Name is the maximum length. If \\\"{databaseName}\\\" is the full book title, this should not be an issue.\\r\\n\" +\n\"If the title is supposed to be longer than that, you may get an error WG on your Kindle.\\r\\n\" +\n- \"This can be resolved by either shortening the title in Calibre or manually changing the database name.\\r\\n\",\n- databaseName));\n+ \"This can be resolved by either shortening the title in Calibre or manually changing the database name.\\r\\n\");\n}\noutput.Add(asin);\n",
        "lang": "C#",
        "codet5-history": "Replace String.Format with $"
    },
    {
        "msg": "Added missing unattended check",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -376,7 +376,7 @@ public int ExpandFromRawMl(string rawMl, IProgress<Tuple<int, int>> progress, Ca\nchapterFile));\n}\n- if (enableEdit)\n+ if (!unattended && enableEdit)\nif (DialogResult.Yes ==\nmain.SafeShow(\"Would you like to open the chapters file in notepad for editing?\", \"Chapters\",\nMessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))\n",
        "lang": "C#",
        "codet5-history": "Fix unattended flag"
    },
    {
        "msg": "progress and main should be nullable",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -430,11 +430,11 @@ public int ExpandFromRawMl(string rawMl, IProgress<Tuple<int, int>> progress, Ca\nif (nodes == null)\nthrow new Exception(\"Could not locate any paragraphs in this book.\\r\\n\" +\n\"Report this error along with a copy of the book to improve parsing.\");\n- progress.Report(new Tuple<int, int>(0, nodes.Count));\n+ progress?.Report(new Tuple<int, int>(0, nodes.Count));\nfor (int i = 0; i < nodes.Count; i++)\n{\n- if (main.Exiting || token.IsCancellationRequested) return 1;\n- progress.Report(new Tuple<int, int>(i + 1, nodes.Count));\n+ if ((main?.Exiting ?? false) || token.IsCancellationRequested) return 1;\n+ progress?.Report(new Tuple<int, int>(i + 1, nodes.Count));\nHtmlNode node = nodes[i];\nif (node.FirstChild == null) continue; //If the inner HTML is just empty, skip the paragraph!\n@@ -755,10 +755,10 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\nLogger.Log(\"Updating database with terms, descriptions, and excerpts...\");\n//Write all entities and occurrences\nLogger.Log(String.Format(\"Writing {0} terms...\", Terms.Count));\n- progress.Report(new Tuple<int, int>(0, Terms.Count));\n+ progress?.Report(new Tuple<int, int>(0, Terms.Count));\nforeach (Term t in Terms)\n{\n- if (main.Exiting) return 1;\n+ if (main?.Exiting ?? false) return 1;\ntoken.ThrowIfCancellationRequested();\nif (t.Type == \"character\") personCount++;\nelse if (t.Type == \"topic\") termCount++;\n@@ -782,16 +782,16 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\ncommand = new SQLiteCommand(sql.ToString(), db);\ncommand.ExecuteNonQuery();\ncommand.Dispose();\n- progress.Report(new Tuple<int, int>(entity++, Terms.Count));\n+ progress?.Report(new Tuple<int, int>(entity++, Terms.Count));\n}\n//Write excerpts and entity_excerpt table\nLogger.Log(String.Format(\"Writing {0} excerpts...\", excerpts.Count));\nsql.Clear();\ncommand = new SQLiteCommand(\"insert into excerpt (id, start, length, image, related_entities, goto) values (@id, @start, @length, @image, @rel_ent, null);\", db);\n- progress.Report(new Tuple<int, int>(0, excerpts.Count));\n+ progress?.Report(new Tuple<int, int>(0, excerpts.Count));\nforeach (Excerpt e in excerpts)\n{\n- if (main.Exiting) return 1;\n+ if (main?.Exiting ?? false) return 1;\ntoken.ThrowIfCancellationRequested();\ncommand.Parameters.AddWithValue(\"id\", e.id);\ncommand.Parameters.AddWithValue(\"start\", e.start);\n@@ -804,7 +804,7 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\nif (ent != 0) // skip notable flag\nsql.AppendFormat(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", ent, e.id);\n}\n- progress.Report(new Tuple<int, int>(excerpt++, excerpts.Count));\n+ progress?.Report(new Tuple<int, int>(excerpt++, excerpts.Count));\n}\ncommand.Dispose();\n// create links to notable clips in order of popularity\n",
        "lang": "C#",
        "codet5-history": "Fix NRE in XRay.cs\n* Fix NRE in XRay"
    },
    {
        "msg": "Made progress nullable",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -398,7 +398,7 @@ public override async Task<List<XRay.Term>> GetTerms(string dataUrl, IProgress<T\nif (allChars.Count > 20)\nLogger.Log(\"More than 20 characters found. Consider using the 'download to XML' option if you need to build repeatedly.\");\nint count = 1;\n- if (progress != null) progress.Report(new Tuple<int, int>(1, allChars.Count));\n+ progress?.Report(new Tuple<int, int>(1, allChars.Count));\nforeach (HtmlNode charNode in allChars)\n{\ntoken.ThrowIfCancellationRequested();\n@@ -407,7 +407,7 @@ public override async Task<List<XRay.Term>> GetTerms(string dataUrl, IProgress<T\nXRay.Term tempTerm = await GetTerm(dataUrl, charNode.GetAttributeValue(\"href\", \"\"));\nif (tempTerm != null)\nterms.Add(tempTerm);\n- if (progress != null) progress.Report(new Tuple<int, int>(count++, allChars.Count));\n+ progress?.Report(new Tuple<int, int>(count++, allChars.Count));\n}\ncatch (Exception ex)\n{\n",
        "lang": "C#",
        "codet5-history": "Fix null reference in progress"
    },
    {
        "msg": "Changed unicode double quotes to hex",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -1106,7 +1106,7 @@ public void SaveCharacters(string aliasFile)\nTextInfo textInfo = new CultureInfo(\"en-US\", false).TextInfo;\nstring pattern = @\"( ?(\" + string.Join(\"|\", CommonTitles) +\n- \")\\\\.? )|(^[A-Z]\\\\. )|( [A-Z]\\\\.)|(\\\")|()|()|(,)|(')\";\n+ \")\\\\.? )|(^[A-Z]\\\\. )|( [A-Z]\\\\.)|(\\\")|(\\u201C)|(\\u0x201D)|(,)|(')\";\nRegex regex = new Regex(pattern);\nMatch matchCheck = Regex.Match(c.TermName, pattern);\n",
        "lang": "C#",
        "codet5-history": "Add support for unicode characters in commit message"
    },
    {
        "msg": "If log control not set, output to console",
        "diff": "diff --git a/src/Logger.cs b/src/Logger.cs @@ -13,9 +13,14 @@ public static class Logger\npublic static void Log(string message)\n{\n- if (ctrl == null) throw new NullReferenceException(\"Log control not set.\");\nif (!enabled) return;\nif (!message.EndsWith(\"\\r\\n\")) message += \"\\r\\n\";\n+ if (ctrl == null)\n+ {\n+ Console.WriteLine(message);\n+ return;\n+ }\n+ else\nctrl.SafeAppendText(message);\n}\n",
        "lang": "C#",
        "codet5-history": "Fix null reference exception in Logger.Log"
    },
    {
        "msg": "Removed unnecessary 'this'",
        "diff": "diff --git a/src/Unpack/MobiHead.cs b/src/Unpack/MobiHead.cs @@ -48,48 +48,48 @@ public class MobiHead\npublic MobiHead(FileStream fs, uint mobiHeaderSize)\n{\n- fs.Read(this.identifier, 0, this.identifier.Length);\n- if (this.IdentifierAsString != \"MOBI\")\n+ fs.Read(identifier, 0, identifier.Length);\n+ if (IdentifierAsString != \"MOBI\")\nthrow new IOException(\"Did not get expected MOBI identifier\");\n- fs.Read(this.headerLength, 0, this.headerLength.Length);\n- this.restOfMobiHeader = new byte[this.HeaderLength + 16 - 132];\n-\n- fs.Read(this.mobiType, 0, this.mobiType.Length);\n- fs.Read(this.textEncoding, 0, this.textEncoding.Length);\n- fs.Read(this.uniqueID, 0, this.uniqueID.Length);\n- Array.Reverse(this.uniqueID);\n- fs.Read(this.fileVersion, 0, this.fileVersion.Length);\n- fs.Read(this.orthographicIndex, 0, this.orthographicIndex.Length);\n- fs.Read(this.inflectionIndex, 0, this.inflectionIndex.Length);\n- fs.Read(this.indexNames, 0, this.indexNames.Length);\n- fs.Read(this.indexKeys, 0, this.indexKeys.Length);\n- fs.Read(this.extraIndex0, 0, this.extraIndex0.Length);\n- fs.Read(this.extraIndex1, 0, this.extraIndex1.Length);\n- fs.Read(this.extraIndex2, 0, this.extraIndex2.Length);\n- fs.Read(this.extraIndex3, 0, this.extraIndex3.Length);\n- fs.Read(this.extraIndex4, 0, this.extraIndex4.Length);\n- fs.Read(this.extraIndex5, 0, this.extraIndex5.Length);\n- fs.Read(this.firstNonBookIndex, 0, this.firstNonBookIndex.Length);\n- fs.Read(this.fullNameOffset, 0, this.fullNameOffset.Length);\n- fs.Read(this.fullNameLength, 0, this.fullNameLength.Length);\n-\n- int fullNameLen = BitConverter.ToInt32(Functions.CheckBytes(this.fullNameLength), 0);\n- fs.Read(this.locale, 0, this.locale.Length);\n- fs.Read(this.inputLanguage, 0, this.inputLanguage.Length);\n- fs.Read(this.outputLanguage, 0, this.outputLanguage.Length);\n- fs.Read(this.minVersion, 0, this.minVersion.Length);\n- fs.Read(this.firstImageIndex, 0, this.firstImageIndex.Length);\n- fs.Read(this.huffmanRecordOffset, 0, this.huffmanRecordOffset.Length);\n- fs.Read(this.huffmanRecordCount, 0, this.huffmanRecordCount.Length);\n- fs.Read(this.huffmanTableOffset, 0, this.huffmanTableOffset.Length);\n- fs.Read(this.huffmanTableLength, 0, this.huffmanTableLength.Length);\n- fs.Read(this.exthFlags, 0, this.exthFlags.Length);\n+ fs.Read(headerLength, 0, headerLength.Length);\n+ restOfMobiHeader = new byte[HeaderLength + 16 - 132];\n+\n+ fs.Read(mobiType, 0, mobiType.Length);\n+ fs.Read(textEncoding, 0, textEncoding.Length);\n+ fs.Read(uniqueID, 0, uniqueID.Length);\n+ Array.Reverse(uniqueID);\n+ fs.Read(fileVersion, 0, fileVersion.Length);\n+ fs.Read(orthographicIndex, 0, orthographicIndex.Length);\n+ fs.Read(inflectionIndex, 0, inflectionIndex.Length);\n+ fs.Read(indexNames, 0, indexNames.Length);\n+ fs.Read(indexKeys, 0, indexKeys.Length);\n+ fs.Read(extraIndex0, 0, extraIndex0.Length);\n+ fs.Read(extraIndex1, 0, extraIndex1.Length);\n+ fs.Read(extraIndex2, 0, extraIndex2.Length);\n+ fs.Read(extraIndex3, 0, extraIndex3.Length);\n+ fs.Read(extraIndex4, 0, extraIndex4.Length);\n+ fs.Read(extraIndex5, 0, extraIndex5.Length);\n+ fs.Read(firstNonBookIndex, 0, firstNonBookIndex.Length);\n+ fs.Read(fullNameOffset, 0, fullNameOffset.Length);\n+ fs.Read(fullNameLength, 0, fullNameLength.Length);\n+\n+ int fullNameLen = BitConverter.ToInt32(Functions.CheckBytes(fullNameLength), 0);\n+ fs.Read(locale, 0, locale.Length);\n+ fs.Read(inputLanguage, 0, inputLanguage.Length);\n+ fs.Read(outputLanguage, 0, outputLanguage.Length);\n+ fs.Read(minVersion, 0, minVersion.Length);\n+ fs.Read(firstImageIndex, 0, firstImageIndex.Length);\n+ fs.Read(huffmanRecordOffset, 0, huffmanRecordOffset.Length);\n+ fs.Read(huffmanRecordCount, 0, huffmanRecordCount.Length);\n+ fs.Read(huffmanTableOffset, 0, huffmanTableOffset.Length);\n+ fs.Read(huffmanTableLength, 0, huffmanTableLength.Length);\n+ fs.Read(exthFlags, 0, exthFlags.Length);\n//If bit 6 (0x40) is set, then there's an EXTH record\n- bool exthExists = (BitConverter.ToUInt32(Functions.CheckBytes(this.exthFlags), 0) & 0x40) != 0;\n+ bool exthExists = (BitConverter.ToUInt32(Functions.CheckBytes(exthFlags), 0) & 0x40) != 0;\n- fs.Read(this.restOfMobiHeader, 0, this.restOfMobiHeader.Length);\n+ fs.Read(restOfMobiHeader, 0, restOfMobiHeader.Length);\nif (exthExists)\n{\n@@ -97,10 +97,10 @@ public MobiHead(FileStream fs, uint mobiHeaderSize)\n}\n// If applicable, read mbh flags regarding trailing bytes in record data\n- if (this.MinVersion >= 5 && this.HeaderLength >= 228)\n+ if (MinVersion >= 5 && HeaderLength >= 228)\n{\nbyte[] tempFlags = new byte[2];\n- Array.Copy(this.restOfMobiHeader, 110, tempFlags, 0, 2);\n+ Array.Copy(restOfMobiHeader, 110, tempFlags, 0, 2);\nushort mbhFlags = BitConverter.ToUInt16(Functions.CheckBytes(tempFlags), 0);\nmultibyte = Convert.ToBoolean(mbhFlags & 1);\nwhile (mbhFlags > 1)\n@@ -111,19 +111,19 @@ public MobiHead(FileStream fs, uint mobiHeaderSize)\n}\n}\n- int currentOffset = 132 + this.restOfMobiHeader.Length + ExthHeaderSize;\n- this.remainder = new byte[(int)(mobiHeaderSize - currentOffset)];\n- fs.Read(this.remainder, 0, this.remainder.Length);\n+ int currentOffset = 132 + restOfMobiHeader.Length + ExthHeaderSize;\n+ remainder = new byte[(int)(mobiHeaderSize - currentOffset)];\n+ fs.Read(remainder, 0, remainder.Length);\n- int fullNameIndexInRemainder = BitConverter.ToInt32(Functions.CheckBytes(this.fullNameOffset), 0) - currentOffset;\n+ int fullNameIndexInRemainder = BitConverter.ToInt32(Functions.CheckBytes(fullNameOffset), 0) - currentOffset;\n- this.fullName = new byte[fullNameLen];\n+ fullName = new byte[fullNameLen];\nif (fullNameIndexInRemainder >= 0 &&\n- fullNameIndexInRemainder < this.remainder.Length &&\n- fullNameIndexInRemainder + fullNameLen <= this.remainder.Length && fullNameLen > 0)\n+ fullNameIndexInRemainder < remainder.Length &&\n+ fullNameIndexInRemainder + fullNameLen <= remainder.Length && fullNameLen > 0)\n{\n- Array.Copy(this.remainder, fullNameIndexInRemainder, this.fullName, 0, fullNameLen);\n+ Array.Copy(remainder, fullNameIndexInRemainder, fullName, 0, fullNameLen);\n}\n}\n@@ -131,39 +131,39 @@ public int ExthHeaderSize\n{\nget\n{\n- if (this.exthHeader == null)\n+ if (exthHeader == null)\nreturn 0;\nelse\n- return this.exthHeader.Size;\n+ return exthHeader.Size;\n}\n}\npublic string FullName\n{\n- get { return Encoding.UTF8.GetString(this.fullName).Trim('\\0'); }\n+ get { return Encoding.UTF8.GetString(fullName).Trim('\\0'); }\n}\npublic string IdentifierAsString\n{\n- get { return Encoding.ASCII.GetString(this.identifier).Trim('\\0'); }\n+ get { return Encoding.ASCII.GetString(identifier).Trim('\\0'); }\n}\npublic uint HeaderLength\n{\n- get { return BitConverter.ToUInt32(Functions.CheckBytes(this.headerLength), 0); }\n+ get { return BitConverter.ToUInt32(Functions.CheckBytes(headerLength), 0); }\n}\npublic uint MobiType\n{\n- get { return BitConverter.ToUInt32(Functions.CheckBytes(this.mobiType), 0); }\n+ get { return BitConverter.ToUInt32(Functions.CheckBytes(mobiType), 0); }\n}\npublic string MobiTypeAsString\n{\nget\n{\n- switch (this.MobiType)\n+ switch (MobiType)\n{\ncase 2: return \"Mobipocket Book\";\ncase 3: return \"PalmDoc Book\";\n@@ -178,64 +178,64 @@ public string MobiTypeAsString\ncase 517: return \"TEXT\";\ncase 518: return \"HTML\";\ndefault:\n- return String.Format(\"Unknown {0}\", this.MobiType);\n+ return String.Format(\"Unknown {0}\", MobiType);\n}\n}\n}\npublic uint UniqueID\n{\n- get { return BitConverter.ToUInt32(this.uniqueID, 0); }\n+ get { return BitConverter.ToUInt32(uniqueID, 0); }\n}\npublic uint FileVersion\n{\n- get { return BitConverter.ToUInt32(this.fileVersion, 0); }\n+ get { return BitConverter.ToUInt32(fileVersion, 0); }\n}\npublic uint IndexKeys\n{\n- get { return BitConverter.ToUInt32(this.indexKeys, 0); }\n+ get { return BitConverter.ToUInt32(indexKeys, 0); }\n}\npublic uint FirstNonBookIndex\n{\n- get { return BitConverter.ToUInt32(Functions.CheckBytes(this.firstNonBookIndex), 0); }\n+ get { return BitConverter.ToUInt32(Functions.CheckBytes(firstNonBookIndex), 0); }\n}\npublic uint FullNameOffset\n{\n- get { return BitConverter.ToUInt32(Functions.CheckBytes(this.fullNameOffset), 0); }\n+ get { return BitConverter.ToUInt32(Functions.CheckBytes(fullNameOffset), 0); }\n}\npublic uint FullNameLength\n{\n- get { return BitConverter.ToUInt32(Functions.CheckBytes(this.fullNameLength), 0); }\n+ get { return BitConverter.ToUInt32(Functions.CheckBytes(fullNameLength), 0); }\n}\npublic uint MinVersion\n{\n- get { return BitConverter.ToUInt32(Functions.CheckBytes(this.minVersion), 0); }\n+ get { return BitConverter.ToUInt32(Functions.CheckBytes(minVersion), 0); }\n}\npublic uint HuffmanRecordOffset\n{\n- get { return BitConverter.ToUInt32(Functions.CheckBytes(this.huffmanRecordOffset), 0); }\n+ get { return BitConverter.ToUInt32(Functions.CheckBytes(huffmanRecordOffset), 0); }\n}\npublic uint HuffmanRecordCount\n{\n- get { return BitConverter.ToUInt32(Functions.CheckBytes(this.huffmanRecordCount), 0); }\n+ get { return BitConverter.ToUInt32(Functions.CheckBytes(huffmanRecordCount), 0); }\n}\npublic uint HuffmanTableOffset\n{\n- get { return BitConverter.ToUInt32(Functions.CheckBytes(this.huffmanTableOffset), 0); }\n+ get { return BitConverter.ToUInt32(Functions.CheckBytes(huffmanTableOffset), 0); }\n}\npublic uint HuffmanTableLength\n{\n- get { return BitConverter.ToUInt32(Functions.CheckBytes(this.huffmanTableLength), 0); }\n+ get { return BitConverter.ToUInt32(Functions.CheckBytes(huffmanTableLength), 0); }\n}\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Fix some warnings in the code"
    },
    {
        "msg": "Handle case where author has a bio page but it doesn't show up as a search result for whatever reason",
        "diff": "diff --git a/src/DataSources/Amazon.cs b/src/DataSources/Amazon.cs @@ -58,14 +58,24 @@ public static async Task<AuthorSearchResults> SearchAuthor(BookInfo curBook, str\n$\"\\r\\nSearch results can be viewed at {amazonAuthorSearchUrl}\");\nreturn null;\n}\n- results.authorAsin = node.OuterHtml;\n- int index1 = results.authorAsin.IndexOf(\"data-asin\");\n- if (index1 > 0)\n- results.authorAsin = results.authorAsin.Substring(index1 + 11, 10);\n- node = node.SelectSingleNode(\"//*[@id='result_1']/div/div/div/div/a\");\n- string properAuthor = node?.GetAttributeValue(\"href\", \"\");\n- if (properAuthor == \"\" || properAuthor == null || properAuthor.IndexOf('/', 1) < 3)\n+ string properAuthor = \"\";\n+ // Check for typical search results, second item is the author page\n+ if ((node = node.SelectSingleNode(\"//*[@id='result_1']/div/div/div/div/a\")) != null)\n+ {\n+ results.authorAsin = node.GetAttributeValue(\"data-asin\", \"\");\n+ properAuthor = node.GetAttributeValue(\"href\", \"\");\n+ }\n+ // otherwise check for \"by so-and-so\" text beneath the titles for a possible match\n+ else if ((node = results.authorHtmlDoc.DocumentNode.SelectSingleNode($\"//div[@id='resultsCol']//li[@class='s-result-item celwidget ']//a[text()=\\\"{newAuthor}\\\"]\")) != null)\n+ {\n+ properAuthor = node.GetAttributeValue(\"href\", \"\");\n+ int i = properAuthor.IndexOf(\"/e/B\");\n+ if (i > 0)\n+ results.authorAsin = properAuthor.Substring(i + 3, 10);\n+ }\n+\n+ if (properAuthor == \"\" || properAuthor == null || properAuthor.IndexOf('/', 1) < 3 || results.authorAsin == \"\")\n{\nLogger.Log(\"Unable to parse author's page URL properly. Try again later or report this URL on the MobileRead thread: \" + amazonAuthorSearchUrl);\nreturn null;\n",
        "lang": "C#",
        "codet5-history": "Fix author search for Amazon"
    },
    {
        "msg": "simply alias file creation and always include lines for terms that don't have aliases yet",
        "diff": "diff --git a/src/frmCreateXR.cs b/src/frmCreateXR.cs @@ -269,28 +269,18 @@ private void tsmEdit_Click(object sender, EventArgs e)\nprivate void CreateAliases()\n{\nstring aliasFile = Environment.CurrentDirectory + @\"\\ext\\\" + txtAsin.Text + \".aliases\";\n- string aliases = \"\";\n- if (!Directory.Exists(Environment.CurrentDirectory + @\"\\ext\\\"))\nDirectory.CreateDirectory(Environment.CurrentDirectory + @\"\\ext\\\");\nusing (var streamWriter = new StreamWriter(aliasFile, false, Encoding.UTF8))\n{\n- for (int i = 0; i < Terms.Count; i++)\n+ foreach (var term in Terms)\n{\n- if (Terms[i].Aliases.Count > 0)\n+ if (term.Aliases.Count > 0)\n{\n- Terms[i].Aliases.Sort((a, b) => b.Length.CompareTo(a.Length));\n- foreach (string word in Terms[i].Aliases)\n- {\n- aliases += word + \",\";\n- }\n- if (aliases.LastIndexOf(\",\") != -1)\n- {\n- streamWriter.WriteLine(Terms[i].TermName + \"|\" + aliases.Substring(0, aliases.LastIndexOf(\",\")));\n- aliases = \"\";\n+ term.Aliases.Sort((a, b) => b.Length.CompareTo(a.Length));\n+ streamWriter.WriteLine($\"{term.TermName}|{string.Join(\",\", term.Aliases)}\");\n}\nelse\n- streamWriter.WriteLine(Terms[i].TermName + \"|\");\n- }\n+ streamWriter.WriteLine(term.TermName + \"|\");\n}\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Fix aliases generation in diff"
    },
    {
        "msg": "clean up createxr and always create an alias file",
        "diff": "diff --git a/src/frmCreateXR.cs b/src/frmCreateXR.cs using System.Diagnostics;\nusing System.Drawing;\nusing System.IO;\n+using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Windows.Forms;\n@@ -19,9 +20,6 @@ public frmCreateXR()\nprivate ToolTip toolTip1 = new ToolTip();\nprivate List<XRay.Term> Terms = new List<XRay.Term>(100);\n- private Settings settings = Settings.Default;\n-\n- private bool aliasesExist;\nprivate void btnAddTerm_Click(object sender, EventArgs e)\n{\n@@ -65,8 +63,8 @@ private void btnEditTerm_Click(object sender, EventArgs e)\ntxtAliases.Text = row.Cells[2].Value.ToString();\ntxtDescription.Text = row.Cells[3].Value.ToString();\ntxtLink.Text = row.Cells[4].Value.ToString();\n- rdoGoodreads.Checked = row.Cells[5].Value.ToString() == \"Goodreads\" ? true : false;\n- rdoWikipedia.Checked = row.Cells[5].Value.ToString() == \"Wikipedia\" ? true : false;\n+ rdoGoodreads.Checked = row.Cells[5].Value.ToString() == \"Goodreads\";\n+ rdoWikipedia.Checked = row.Cells[5].Value.ToString() == \"Wikipedia\";\nchkMatch.Checked = (bool)row.Cells[6].Value;\nchkCase.Checked = (bool)row.Cells[7].Value;\n//chkDelete.Checked = (bool)row.Cells[8].Value;\n@@ -200,14 +198,9 @@ private void btnSaveXML_Click(object sender, EventArgs e)\ntry\n{\nCreateTerms();\n- if (aliasesExist)\n- {\nCreateAliases();\nMessageBox.Show(\"X-Ray entities and Alias files created sucessfully!\");\n}\n- else\n- MessageBox.Show(\"X-Ray entities file created sucessfully!\");\n- }\ncatch (Exception ex)\n{\nMessageBox.Show(String.Format(\"An error occurred saving the files: {0}\\r\\n{1}\", ex.Message, ex.StackTrace),\n@@ -289,44 +282,29 @@ private void CreateTerms()\n{\nif (!Directory.Exists(Environment.CurrentDirectory + @\"\\xml\\\"))\nDirectory.CreateDirectory(Environment.CurrentDirectory + @\"\\xml\\\");\n- string outfile = Environment.CurrentDirectory + String.Format(@\"\\xml\\{0}.entities.xml\", txtAsin.Text);\n+ string outfile = Environment.CurrentDirectory + $@\"\\xml\\{txtAsin.Text}.entities.xml\";\nTerms.Clear();\n+ var termId = 1;\nforeach (DataGridViewRow row in dgvTerms.Rows)\n{\n- int termId = 1;\n- XRay.Term newTerm = new XRay.Term();\n- foreach (DataGridViewCell cell in row.Cells)\n- {\n- newTerm.Id = termId++;\n- newTerm.Type = CompareImages((Bitmap)row.Cells[0].Value, Resources.character) ? \"character\" : \"topic\";\n- newTerm.TermName = row.Cells[1].Value.ToString();\n- if (row.Cells[2].Value.ToString() != \"\")\n- {\n- aliasesExist = true;\n- string[] aliasList = row.Cells[2].Value.ToString().Split(',');\n- foreach (string alias in aliasList)\n- {\n- if (newTerm.Aliases.Contains(alias))\n- {\n- newTerm.Aliases.Remove(alias);\n- newTerm.Aliases.Add(alias);\n- }\n- else\n+ XRay.Term newTerm = new XRay.Term\n{\n- newTerm.Aliases.Add(alias);\n- }\n- }\n- }\n- newTerm.Desc = row.Cells[3].Value.ToString();\n- newTerm.DescUrl = row.Cells[4].Value.ToString();\n- newTerm.DescSrc = row.Cells[5].Value.ToString();\n- newTerm.Match = (bool)row.Cells[6].Value;\n- newTerm.MatchCase = (bool)row.Cells[7].Value;\n- newTerm.RegEx = (bool)row.Cells[9].Value;\n- }\n+ Id = termId++,\n+ Type = CompareImages((Bitmap) row.Cells[0].Value, Resources.character) ? \"character\" : \"topic\",\n+ TermName = row.Cells[1].Value.ToString(),\n+ Aliases = row.Cells[2].Value.ToString() != \"\"\n+ ? row.Cells[2].Value.ToString().Split(',').Distinct().ToList()\n+ : new List<string>(),\n+ Desc = row.Cells[3].Value.ToString(),\n+ DescUrl = row.Cells[4].Value.ToString(),\n+ DescSrc = row.Cells[5].Value.ToString(),\n+ Match = (bool) row.Cells[6].Value,\n+ MatchCase = (bool) row.Cells[7].Value,\n+ RegEx = (bool) row.Cells[9].Value\n+ };\nTerms.Add(newTerm);\n}\n- Functions.Save<List<XRay.Term>>(Terms, outfile);\n+ Functions.Save(Terms, outfile);\n}\nprivate static bool CompareImages(Bitmap image1, Bitmap image2)\n@@ -363,9 +341,9 @@ private List<T> LoadTermsFromTxt<T>(string txtfile)\n{\ntry\n{\n- string temp = streamReader.ReadLine().ToLower();\n+ string temp = streamReader.ReadLine()?.ToLower();\n+ if (string.IsNullOrEmpty(temp)) continue;\nlineCount++;\n- if (temp == \"\") continue;\nif (temp != \"character\" && temp != \"topic\")\n{\nMessageBox.Show(\"Error: Invalid term type \\\"\" + temp + \"\\\" on line \" + lineCount);\n@@ -378,7 +356,7 @@ private List<T> LoadTermsFromTxt<T>(string txtfile)\nDesc = streamReader.ReadLine()\n};\nlineCount += 2;\n- newTerm.MatchCase = temp == \"character\" ? true : false;\n+ newTerm.MatchCase = temp == \"character\";\nnewTerm.DescSrc = \"shelfari\";\nnewTerm.Id = termId++;\nTerms.Add(newTerm);\n",
        "lang": "C#",
        "codet5-history": "Update XR diff to use LINQ"
    },
    {
        "msg": "fix for goodreads series parsing",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -164,8 +164,6 @@ public override async Task<BookInfo> GetNextInSeries(BookInfo curBook, AuthorPro\nLogger.Log(\"An error occurred finding the next book in series, the book may not be part of a series, or it is the latest release.\");\nif (seriesInfo.TryGetValue(\"Previous\", out book))\n- {\n- if (prevBook == null)\n{\nprevBook = authorProfile.otherBooks.FirstOrDefault(bk => Regex.IsMatch(bk.title, \"^\" + book.title + @\"(?: \\(.*\\))?$\"));\nif (book.asin != null)\n@@ -189,7 +187,6 @@ public override async Task<BookInfo> GetNextInSeries(BookInfo curBook, AuthorPro\nprevBook.amazonUrl = Url;\nprevBook.asin = frmAS.tbAsin.Text;\n}\n- }\nif (prevBook == null)\n{\nLogger.Log(\"Book was found to be part of a series, but an error occurred finding the previous book.\\r\\n\" +\n@@ -216,14 +213,14 @@ public override async Task<BookInfo> GetNextInSeries(BookInfo curBook, AuthorPro\n//Search Goodreads for series info\nstring goodreadsSeriesUrl = @\"https://www.goodreads.com/series/{0}\";\nHtmlNode metaNode = sourceHtmlDoc.DocumentNode.SelectSingleNode(\"//div[@id='bookMeta']\");\n- HtmlNode SeriesNode = metaNode.SelectSingleNode(\"//h1[@id='bookTitle']\");\n- if (SeriesNode == null)\n+ HtmlNode seriesNode = metaNode?.SelectSingleNode(\"//h1[@id='bookTitle']/a\");\n+ if (seriesNode == null)\nreturn results;\n- match = Regex.Match(SeriesNode.OuterHtml, @\"/series/([0-9]*)\");\n+ match = Regex.Match(seriesNode.OuterHtml, @\"/series/([0-9]*)\");\nif (!match.Success)\nreturn results;\ngoodreadsSeriesUrl = String.Format(goodreadsSeriesUrl, match.Groups[1].Value);\n- match = Regex.Match(SeriesNode.InnerText, @\"\\((.*) #?([0-9]*([.,][0-9])?)\\)\");\n+ match = Regex.Match(seriesNode.InnerText, @\"\\((.*) #?([0-9]*([.,][0-9])?)\\)\");\nif (match.Success)\n{\nLogger.Log(String.Format(\"Series Goodreads Page URL: {0}\", goodreadsSeriesUrl));\n@@ -238,18 +235,11 @@ public override async Task<BookInfo> GetNextInSeries(BookInfo curBook, AuthorPro\nif (seriesHtmlDoc != null)\n{\n- SeriesNode = seriesHtmlDoc.DocumentNode.SelectSingleNode(\"//div[@class='greyText']\");\n- match = Regex.Match(SeriesNode.InnerText, @\"([0-9]*) primary works?\");\n-\n+ seriesNode = seriesHtmlDoc.DocumentNode.SelectSingleNode(\"//div[contains(@class, 'responsiveSeriesHeader__subtitle')]\");\n+ match = Regex.Match(seriesNode?.InnerText ?? \"\", @\"([0-9]*) (?:primary )?works?\");\nif (match.Success)\n- {\ncurBook.totalInSeries = match.Groups[1].Value;\n- }\n- else\n- {\n- match = Regex.Match(SeriesNode.InnerText, @\"([0-9]*) works?,\");\n- curBook.totalInSeries = match.Groups[1].Value;\n- }\n+\nbool notWholeNumber = curBook.seriesPosition.Contains(\".\");\nint positionInt = (int)Convert.ToDouble(curBook.seriesPosition, CultureInfo.InvariantCulture.NumberFormat);\nint totalInt = (int)Convert.ToDouble(curBook.totalInSeries, CultureInfo.InvariantCulture.NumberFormat);\n",
        "lang": "C#",
        "codet5-history": "Fixing bad series link in goodreads.com"
    },
    {
        "msg": "fix for amazon author parsing (html changed)",
        "diff": "diff --git a/src/DataSources/Amazon.cs b/src/DataSources/Amazon.cs @@ -63,19 +63,18 @@ public static async Task<AuthorSearchResults> SearchAuthor(BookInfo curBook, str\n// Check for typical search results, second item is the author page\nif ((node = node.SelectSingleNode(\"//*[@id='result_1']/div/div/div/div/a\")) != null)\n{\n- results.authorAsin = node.GetAttributeValue(\"data-asin\", \"\");\nproperAuthor = node.GetAttributeValue(\"href\", \"\");\n+ results.authorAsin = node.GetAttributeValue(\"data-asin\", null)\n+ ?? AsinFromUrl(properAuthor);\n}\n// otherwise check for \"by so-and-so\" text beneath the titles for a possible match\nelse if ((node = results.authorHtmlDoc.DocumentNode.SelectSingleNode($\"//div[@id='resultsCol']//li[@class='s-result-item celwidget ']//a[text()=\\\"{newAuthor}\\\"]\")) != null)\n{\nproperAuthor = node.GetAttributeValue(\"href\", \"\");\n- int i = properAuthor.IndexOf(\"/e/B\");\n- if (i > 0)\n- results.authorAsin = properAuthor.Substring(i + 3, 10);\n+ results.authorAsin = AsinFromUrl(properAuthor);\n}\n- if (properAuthor == \"\" || properAuthor == null || properAuthor.IndexOf('/', 1) < 3 || results.authorAsin == \"\")\n+ if (string.IsNullOrEmpty(properAuthor) || properAuthor.IndexOf('/', 1) < 3 || results.authorAsin == \"\")\n{\nLogger.Log(\"Unable to parse author's page URL properly. Try again later or report this URL on the MobileRead thread: \" + amazonAuthorSearchUrl);\nreturn null;\n@@ -211,5 +210,11 @@ public static async Task<BookInfo> SearchBook(string title, string author, strin\n}\nreturn result;\n}\n+\n+ private static string AsinFromUrl(string url)\n+ {\n+ var asinMatch = Regex.Match(url, @\"/e/(B\\w+)/\", RegexOptions.Compiled);\n+ return asinMatch.Success ? asinMatch.Groups[1].Value : \"\";\n+ }\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Fix for Amazon.cs\nFix for Amazon.cs"
    },
    {
        "msg": "always look for at least 1 digit",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -236,7 +236,7 @@ public override async Task<BookInfo> GetNextInSeries(BookInfo curBook, AuthorPro\nif (seriesHtmlDoc != null)\n{\nseriesNode = seriesHtmlDoc.DocumentNode.SelectSingleNode(\"//div[contains(@class, 'responsiveSeriesHeader__subtitle')]\");\n- match = Regex.Match(seriesNode?.InnerText ?? \"\", @\"([0-9]*) (?:primary )?works?\");\n+ match = Regex.Match(seriesNode?.InnerText ?? \"\", @\"([0-9]+) (?:primary )?works?\");\nif (match.Success)\ncurBook.totalInSeries = match.Groups[1].Value;\n",
        "lang": "C#",
        "codet5-history": "Fix incorrect regex in diff"
    },
    {
        "msg": "add asyncenumerator package",
        "diff": "diff --git a/XRayBuilderGUI.csproj b/XRayBuilderGUI.csproj <Prefer32Bit>false</Prefer32Bit>\n</PropertyGroup>\n<ItemGroup>\n+ <Reference Include=\"AsyncEnumerable, Version=2.2.1.0, Culture=neutral, PublicKeyToken=0426b068161bd1d1, processorArchitecture=MSIL\">\n+ <HintPath>packages\\AsyncEnumerator.2.2.1\\lib\\net45\\AsyncEnumerable.dll</HintPath>\n+ </Reference>\n<Reference Include=\"HtmlAgilityPack, Version=1.6.3.0, Culture=neutral, PublicKeyToken=bd319b19eaf3b43a, processorArchitecture=MSIL\">\n<HintPath>packages\\HtmlAgilityPack.1.6.3\\lib\\Net45\\HtmlAgilityPack.dll</HintPath>\n<Private>True</Private>\n",
        "lang": "C#",
        "codet5-history": "Add AsyncEnumerator to the list of packages"
    },
    {
        "msg": "move settings file in csproj to where it should have been",
        "diff": "diff --git a/XRayBuilderGUI.csproj b/XRayBuilderGUI.csproj <Compile Include=\"Properties\\AssemblyInfo.cs\" />\n<Compile Include=\"src\\Unpack\\EXTH.cs\" />\n<Compile Include=\"src\\Unpack\\MobiHead.cs\" />\n- <Compile Include=\"src\\Settings.cs\" />\n+ <Compile Include=\"Properties\\Settings.cs\" />\n<Compile Include=\"src\\Unpack\\Metadata.cs\" />\n<Compile Include=\"src\\Unpack\\PalmDocHeader.cs\" />\n<Compile Include=\"src\\Unpack\\PDBHeader.cs\" />\n",
        "lang": "C#",
        "codet5-history": "Fix Settings.cs reference"
    },
    {
        "msg": "start of fixing goodreads parsing for new site format",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -114,9 +114,10 @@ public override async Task<BookInfo> GetNextInSeries(BookInfo curBook, AuthorPro\nDictionary<string, BookInfo> seriesInfo = await GetNextInSeriesTitle(curBook).ConfigureAwait(false);\nif (seriesInfo.TryGetValue(\"Next\", out var book))\n{\n+ // TODO: next and previous sections are the same...\n// Search author's other books for the book (assumes next in series was written by the same author...)\n// Returns the first one found, though there should probably not be more than 1 of the same name anyway\n- nextBook = authorProfile.otherBooks.FirstOrDefault(bk => Regex.IsMatch(bk.title, \"^\" + book.title + @\"(?: \\(.*\\))?$\"));\n+ nextBook = authorProfile.otherBooks.FirstOrDefault(bk => Regex.IsMatch(bk.title, $@\"^{book.title}(?: \\(.*\\))?$\"));\nif (nextBook == null)\n{\n// Attempt to search Amazon for the book instead\n@@ -165,7 +166,7 @@ public override async Task<BookInfo> GetNextInSeries(BookInfo curBook, AuthorPro\nif (seriesInfo.TryGetValue(\"Previous\", out book))\n{\n- prevBook = authorProfile.otherBooks.FirstOrDefault(bk => Regex.IsMatch(bk.title, \"^\" + book.title + @\"(?: \\(.*\\))?$\"));\n+ prevBook = authorProfile.otherBooks.FirstOrDefault(bk => Regex.IsMatch(bk.title, $@\"^{book.title}(?: \\(.*\\))?$\"));\nif (book.asin != null)\n{\nprevBook = book;\n@@ -240,61 +241,51 @@ public override async Task<BookInfo> GetNextInSeries(BookInfo curBook, AuthorPro\nif (match.Success)\ncurBook.totalInSeries = match.Groups[1].Value;\n- bool notWholeNumber = curBook.seriesPosition.Contains(\".\");\nint positionInt = (int)Convert.ToDouble(curBook.seriesPosition, CultureInfo.InvariantCulture.NumberFormat);\nint totalInt = (int)Convert.ToDouble(curBook.totalInSeries, CultureInfo.InvariantCulture.NumberFormat);\n- if (positionInt == 1)\n- {\n- Logger.Log(String.Format(\"This is the first book in the {0} series\", curBook.seriesName));\n- }\n- if (positionInt == totalInt)\n- {\n- Logger.Log(String.Format(\"This is the latest book in the {0} series\", curBook.seriesName));\n- }\n- if (positionInt < totalInt)\n- Logger.Log(String.Format(\"This is book {0} of {1} in the {2} series\",\n- curBook.seriesPosition, curBook.totalInSeries, curBook.seriesName));\n+ Logger.Log($\"This is book {curBook.seriesPosition} of {curBook.totalInSeries} in the {curBook.seriesName} series\");\n- HtmlNodeCollection bookNodes = seriesHtmlDoc.DocumentNode.SelectNodes(\"//tr[@itemtype='http://schema.org/Book']\");\n- string stringPrevSearch = notWholeNumber ?\n- String.Format(@\"book {0}\", positionInt) :\n- String.Format(@\"book {0}\", positionInt - 1);\n- string stringNextSearch = String.Format(@\"book {0}\", positionInt + 1);\n+ HtmlNodeCollection bookNodes = seriesHtmlDoc.DocumentNode.SelectNodes(\"//div[@itemtype='http://schema.org/Book']\");\n+ string prevSearch = curBook.seriesPosition.Contains(\".\")\n+ ? $\"book {positionInt}\"\n+ : $\"book {positionInt - 1}\";\n+ string nextSearch = $\"book {positionInt + 1}\";\nif (bookNodes != null)\n{\nforeach (HtmlNode book in bookNodes)\n{\n- HtmlNode bookIndex = book.SelectSingleNode(\".//em\");\n+ var bookIndex = book.SelectSingleNode(\".//div[@class='responsiveBook__header']\")?.InnerText.ToLower();\nif (bookIndex == null) continue;\n- if (bookIndex.InnerText == stringPrevSearch && results.Count == 0)\n+ // TODO: Combine these\n+ if (results.Count == 0 && bookIndex == prevSearch)\n{\nBookInfo prevBook = new BookInfo(\"\", \"\", \"\");\n- HtmlNode title = book.SelectSingleNode(\".//a[@class='bookTitle']\");\n- prevBook.title = Regex.Replace(title.InnerText.Trim(), @\" \\(.*\\)\", string.Empty);\n- match = Regex.Match(title.GetAttributeValue(\"href\", \"\"), @\"show/([0-9]*)\");\n+ var title = book.SelectSingleNode(\".//div[@class='u-paddingBottomXSmall']/a\");\n+ prevBook.title = Regex.Replace(title.InnerText.Trim(), @\" \\(.*\\)\", \"\", RegexOptions.Compiled);\n+ match = Regex.Match(title.GetAttributeValue(\"href\", \"\"), @\"show/([0-9]+)\");\nif (match.Success)\nprevBook.asin = await SearchBookASIN(match.Groups[1].Value, prevBook.title);\n- prevBook.author = book.SelectSingleNode(\".//a[@class='authorName']\").InnerText.Trim();\n+ prevBook.author = book.SelectSingleNode(\".//span[@itemprop='author']//a\")?.InnerText.Trim() ?? \"\";\nresults[\"Previous\"] = prevBook;\ncurBook.previousInSeries = prevBook;\n- Logger.Log(String.Format(\"Preceded by: {0}\", prevBook.title));\n+ Logger.Log($\"Preceded by: {prevBook.title}\");\ncontinue;\n}\n- if (bookIndex.InnerText == stringNextSearch)\n+ if (bookIndex == nextSearch)\n{\nBookInfo nextBook = new BookInfo(\"\", \"\", \"\");\n- HtmlNode title = book.SelectSingleNode(\".//a[@class='bookTitle']\");\n- nextBook.title = Regex.Replace(title.InnerText.Trim(), @\" \\(.*\\)\", string.Empty);\n- match = Regex.Match(title.GetAttributeValue(\"href\", \"\"), @\"show/([0-9]*)\");\n+ var title = book.SelectSingleNode(\".//div[@class='u-paddingBottomXSmall']/a\");\n+ nextBook.title = Regex.Replace(title.InnerText.Trim(), @\" \\(.*\\)\", \"\", RegexOptions.Compiled);\n+ match = Regex.Match(title.GetAttributeValue(\"href\", \"\"), @\"show/([0-9]+)\");\nif (match.Success)\nnextBook.asin = await SearchBookASIN(match.Groups[1].Value, nextBook.title);\n- nextBook.author = book.SelectSingleNode(\".//a[@class='authorName']\").InnerText.Trim();\n+ nextBook.author = book.SelectSingleNode(\".//span[@itemprop='author']//a\")?.InnerText.Trim() ?? \"\";\nresults[\"Next\"] = nextBook;\ncurBook.nextInSeries = nextBook;\n- Logger.Log(String.Format(\"Followed by: {0}\", nextBook.title));\n+ Logger.Log($\"Followed by: {nextBook.title}\");\n}\n- if (results.Count == 2 || (results.Count == 1 & positionInt == totalInt)) break; // next and prev found or prev found and latest in series\n+ if (results.Count == 2 || results.Count == 1 && positionInt == totalInt) break; // next and prev found or prev found and latest in series\n}\n}\n}\n",
        "lang": "C#",
        "codet5-history": "Fixing some issues with the diff script"
    },
    {
        "msg": "parallelized endactions stuff but also made a note to fix the repetition",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -430,6 +430,7 @@ private async Task<XRay.Term> GetTerm(string baseUrl, string relativeUrl)\nreturn result;\n}\n+ // TODO: Parallelize\n/// <summary>\n/// Gather the list of quotes & number of times they've been liked -- close enough to \"x paragraphs have been highlighted y times\" from Amazon\n/// </summary>\n",
        "lang": "C#",
        "codet5-history": "Add TODO for parallelizing diff"
    },
    {
        "msg": "more progress bar conversion",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -328,7 +328,7 @@ public async Task<int> CreateXray(ProgressBarCtrl progress, CancellationToken to\nreturn 0;\n}\n- public int ExpandFromRawMl(string rawMl, IProgress<Tuple<int, int>> progress, CancellationToken token, bool ignoreSoftHypen = false, bool shortEx = true)\n+ public int ExpandFromRawMl(string rawMl, ProgressBarCtrl progress, CancellationToken token, bool ignoreSoftHypen = false, bool shortEx = true)\n{\n// If there is an apostrophe, attempt to match 's at the end of the term\n// Match end of word, then search for any lingering punctuation\n@@ -425,11 +425,10 @@ public int ExpandFromRawMl(string rawMl, IProgress<Tuple<int, int>> progress, Ca\nif (nodes == null)\nthrow new Exception(\"Could not locate any paragraphs in this book.\\r\\n\" +\n\"Report this error along with a copy of the book to improve parsing.\");\n- progress?.Report(new Tuple<int, int>(0, nodes.Count));\n+ progress?.Set(0, nodes.Count);\nfor (int i = 0; i < nodes.Count; i++)\n{\nif ((main?.Exiting ?? false) || token.IsCancellationRequested) return 1;\n- progress?.Report(new Tuple<int, int>(i + 1, nodes.Count));\nHtmlNode node = nodes[i];\nif (node.FirstChild == null) continue; //If the inner HTML is just empty, skip the paragraph!\n@@ -627,6 +626,7 @@ public int ExpandFromRawMl(string rawMl, IProgress<Tuple<int, int>> progress, Ca\n}\n}\n}\n+ progress?.Add(1);\n}\ntimer.Stop();\n@@ -732,10 +732,9 @@ private void SearchChapters(HtmlAgilityPack.HtmlDocument bookDoc, string rawML)\n}\n}\n- public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress, CancellationToken token)\n+ public int PopulateDb(SQLiteConnection db, ProgressBarCtrl progress, CancellationToken token)\n{\nStringBuilder sql = new StringBuilder(Terms.Count * 256);\n- int entity = 1;\nint excerpt = 1;\nint personCount = 0;\nint termCount = 0;\n@@ -746,7 +745,7 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\nLogger.Log(\"Updating database with terms, descriptions, and excerpts...\");\n//Write all entities and occurrences\nLogger.Log($\"Writing {Terms.Count} terms...\");\n- progress?.Report(new Tuple<int, int>(0, Terms.Count));\n+ progress?.Set(0, Terms.Count);\nforeach (Term t in Terms)\n{\nif (main?.Exiting ?? false) return 1;\n@@ -773,13 +772,13 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\ncommand = new SQLiteCommand(sql.ToString(), db);\ncommand.ExecuteNonQuery();\ncommand.Dispose();\n- progress?.Report(new Tuple<int, int>(entity++, Terms.Count));\n+ progress?.Add(1);\n}\n//Write excerpts and entity_excerpt table\nLogger.Log(String.Format(\"Writing {0} excerpts...\", excerpts.Count));\nsql.Clear();\ncommand = new SQLiteCommand(\"insert into excerpt (id, start, length, image, related_entities, goto) values (@id, @start, @length, @image, @rel_ent, null);\", db);\n- progress?.Report(new Tuple<int, int>(0, excerpts.Count));\n+ progress?.Set(0, excerpts.Count);\nforeach (Excerpt e in excerpts)\n{\nif (main?.Exiting ?? false) return 1;\n@@ -795,7 +794,7 @@ public int PopulateDb(SQLiteConnection db, IProgress<Tuple<int, int>> progress,\nif (ent != 0) // skip notable flag\nsql.AppendFormat(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", ent, e.id);\n}\n- progress?.Report(new Tuple<int, int>(excerpt++, excerpts.Count));\n+ progress?.Add(1);\n}\ncommand.Dispose();\n// create links to notable clips in order of popularity\n@@ -1246,7 +1245,7 @@ public void SaveToFileOld(string path, bool useutf8)\n}\n}\n- public async Task SaveToFileNew(string path, Progress<Tuple<int, int>> progress, CancellationToken token)\n+ public async Task SaveToFileNew(string path, ProgressBarCtrl progress, CancellationToken token)\n{\nSQLiteConnection.CreateFile(path);\nusing (SQLiteConnection m_dbConnection = new SQLiteConnection($\"Data Source={path};Version=3;\"))\n",
        "lang": "C#",
        "codet5-history": "Replace IProgress<Tuple<int, int>> with ProgressBarCtrl"
    },
    {
        "msg": "refactor output directory stuff",
        "diff": "diff --git a/src/frmMain.cs b/src/frmMain.cs @@ -53,6 +53,13 @@ public DialogResult SafeShow(string msg, string caption, MessageBoxButtons butto\nreturn (DialogResult)Invoke(new Func<DialogResult>(() => MessageBox.Show(this, msg, caption, buttons, icon, def)));\n}\n+ public string OutputDirectory(string author, string title, bool create)\n+ {\n+ if (!settings.useSubDirectories) return settings.outDir;\n+ UIFunctions.ValidateFilename(author, title);\n+ return Functions.GetBookOutputDirectory(author, title, create);\n+ }\n+\nprivate void ToggleInterface(bool enabled)\n{\nforeach (Control c in Controls)\n@@ -234,9 +241,7 @@ private async Task btnBuild_Run()\n}\nelse\n{\n- outFolder = settings.useSubDirectories\n- ? Functions.GetBookOutputDirectory(results[4], Functions.RemoveInvalidFileChars(results[5]))\n- : settings.outDir;\n+ outFolder = OutputDirectory(results[4], results[5], true);\n}\n}\ncatch (Exception ex)\n@@ -404,7 +409,7 @@ private async Task btnKindleExtras_Run()\nBookInfo bookInfo = new BookInfo(results[5], results[4], results[0], results[1], results[2],\nrandomFile, Functions.RemoveInvalidFileChars(results[5]), txtGoodreads.Text, results[3]);\n- string outputDir = settings.useSubDirectories ? Functions.GetBookOutputDirectory(bookInfo.author, bookInfo.sidecarName) : settings.outDir;\n+ string outputDir = OutputDirectory(bookInfo.author, bookInfo.sidecarName, true);\nLogger.Log(\"Attempting to build Author Profile...\");\nAuthorProfile ap = new AuthorProfile(bookInfo, new AuthorProfile.Settings\n@@ -1255,7 +1260,7 @@ private void btnCreate_Click(object sender, EventArgs e)\nprivate void checkFiles(string author, string title, string asin)\n{\n- string bookOutputDir = settings.useSubDirectories ? Functions.GetBookOutputDirectoryOnly(author, Functions.RemoveInvalidFileChars(title)) : settings.outDir;\n+ string bookOutputDir = OutputDirectory(author, Functions.RemoveInvalidFileChars(title), false);\nif (File.Exists(bookOutputDir + @\"\\StartActions.data.\" + asin + \".asc\"))\npbFile1.Image = Resources.file_on;\n",
        "lang": "C#",
        "codet5-history": "Add support for creating a sub-directory"
    },
    {
        "msg": "remove more ui references from functions",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs @@ -406,7 +406,7 @@ public static void RunNotepad(string filename)\n}\ncatch (Exception ex)\n{\n- MessageBox.Show(\"Error trying to launch notepad: \" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n+ throw new Exception(\"Error trying to launch notepad.\", ex);\n}\n}\n@@ -440,8 +440,8 @@ public static List<T> DeserializeList<T>(string filePath)\n{\nvar itemList = new List<T>();\n- if (File.Exists(filePath))\n- {\n+ if (!File.Exists(filePath)) return itemList;\n+\nvar serializer = new XmlSerializer(typeof(List<T>));\nTextReader reader = new StreamReader(filePath, Encoding.UTF8);\ntry\n@@ -450,14 +450,10 @@ public static List<T> DeserializeList<T>(string filePath)\n}\ncatch (Exception ex)\n{\n- MessageBox.Show(\n- \"Error processing XML file: \" + ex.Message +\n- \"\\r\\nIf the error contains a (#, #), the first number is the line the error occurred on.\",\n- \"XML Error\");\n- return null;\n+ throw new InvalidDataException($\"Error processing XML file: {ex.Message}\"\n+ + \"\\r\\nIf the error contains a (#, #), the first number is the line the error occurred on.\", ex);\n}\nreader.Close();\n- }\nreturn itemList;\n}\n@@ -544,21 +540,6 @@ public static string ConvertGuid(string guid)\nreturn guid;\n}\n-\n- public static void SetPropertyThreadSafe(this Control ctrl, string name, object value)\n- {\n- if (ctrl.InvokeRequired)\n- ctrl.BeginInvoke(new Action(() => SetPropertyThreadSafe(ctrl, name, value)));\n- else\n- ctrl.GetType().InvokeMember(name, System.Reflection.BindingFlags.SetProperty, null, ctrl, new [] { value });\n- }\n-\n- public static object GetPropertyTS(this Control ctrl, string name)\n- {\n- return ctrl.InvokeRequired\n- ? ctrl.Invoke(new Func<object>(() => ctrl.GetPropertyTS(name)))\n- : ctrl.GetType().InvokeMember(name, System.Reflection.BindingFlags.GetProperty, null, ctrl, null);\n- }\n}\ninternal static class NativeMethods\n",
        "lang": "C#",
        "codet5-history": "Replaced MessageBox with Exception"
    },
    {
        "msg": "add note on amazon captcha",
        "diff": "diff --git a/src/DataSources/Amazon.cs b/src/DataSources/Amazon.cs @@ -46,9 +46,11 @@ public static async Task<AuthorSearchResults> SearchAuthor(BookInfo curBook, str\n}\n// Check for captcha\n+ // TODO: Try to prompt for captcha and have user complete it to continue\nif (results.authorHtmlDoc.DocumentNode.InnerText.Contains(\"Robot Check\"))\n{\n- Logger.Log($\"Warning: Amazon.{TLD} is requesting a captcha. Please try another region, or try again later.\");\n+ Logger.Log($\"Warning: Amazon.{TLD} is requesting a captcha.\"\n+ + $\"You can try visiting Amazon.{TLD} in a real browser first, try another region, or try again later.\");\n}\n// Try to find Author's page from Amazon search\nHtmlNode node = results.authorHtmlDoc.DocumentNode.SelectSingleNode(\"//*[@id='result_1']\");\n",
        "lang": "C#",
        "codet5-history": "Update captcha warning message"
    },
    {
        "msg": "resolve issue with parsing author's name from list",
        "diff": "diff --git a/src/EndActions.cs b/src/EndActions.cs @@ -183,7 +183,9 @@ public async Task<bool> Generate()\ncontinue;\notherBook =\nresult.SelectSingleNode(\n- \".//div[@class='a-row a-size-small']\");\n+ \".//a[@class='a-size-small a-link-child']\")\n+ ?? throw new Exception(\"Amazon format changed)\");\n+ // TODO: Throw more format changed exceptions to make it obvious that the site changed\nvar sponsAuthor = otherBook.InnerText.Trim();\npossibleBooks.Add(new BookInfo(sponsTitle, sponsAuthor, sponsAsin));\n}\n",
        "lang": "C#",
        "codet5-history": "Fixing the diff command to throw an exception if Amazon format changed"
    },
    {
        "msg": "also check empty string",
        "diff": "diff --git a/src/DataSources/Goodreads.cs b/src/DataSources/Goodreads.cs @@ -108,9 +108,10 @@ public override async Task<BookInfo> GetNextInSeries(BookInfo curBook, AuthorPro\nif (nextBook == null)\n{\n// Attempt to search Amazon for the book instead\n+ // TODO: This should be elsewhere\ntry\n{\n- if (book.asin != null)\n+ if (!string.IsNullOrEmpty(book.asin))\n{\nnextBook = book;\nawait nextBook.GetAmazonInfo($\"https://www.amazon.{TLD}/dp/{book.asin}\").ConfigureAwait(false);\n",
        "lang": "C#",
        "codet5-history": "Fixing the Amazon book search"
    },
    {
        "msg": "refactor alias file handling to remove messagebox calls",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -241,40 +241,23 @@ public async Task<int> CreateXray(SafeShowDelegate safeShow, IProgressBar progre\n}\n}\n- //Export list of Shelfari characters to a file to make it easier to create aliases or import the modified aliases if they exist\n+ public void ExportAndDisplayTerms()\n+ {\n+ //Export available terms to a file to make it easier to create aliases or import the modified aliases if they exist\n//Could potentially just attempt to automate the creation of aliases, but in some cases it is very subjective...\n//For example, Shelfari shows the character \"Artemis Fowl II\", but in the book he is either referred to as \"Artemis Fowl\", \"Artemis\", or even \"Arty\"\n//Other characters have one name on Shelfari but can have completely different names within the book\n- string aliasFile;\n- if (aliaspath == \"\")\n- aliasFile = Environment.CurrentDirectory + @\"\\ext\\\" + asin + \".aliases\";\n- else\n- aliasFile = aliaspath;\nbool aliasesDownloaded = false;\n- if ((!File.Exists(aliasFile) || Properties.Settings.Default.overwriteAliases) && Properties.Settings.Default.downloadAliases)\n- {\n- try\n- {\n- string aliases = await HttpDownloader.GetPageHtmlAsync(\"https://www.revensoftware.com/xray/aliases/\" + asin);\n- StreamWriter fs = new StreamWriter(aliasFile, false, Encoding.UTF8);\n- fs.Write(aliases);\n- fs.Close();\n- Logger.Log(\"Found and downloaded pre-made aliases file.\");\n- aliasesDownloaded = true;\n- }\n- catch (Exception ex)\n- {\n- if (!ex.Message.Contains(\"(404) Not Found\"))\n- Logger.Log(\"No pre-made aliases available for this book.\");\n- else\n- Logger.Log(\"An error occurred downloading aliases: \" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n- }\n- }\n+ // TODO: Review this download process\n+ //if ((!File.Exists(AliasPath) || Properties.Settings.Default.overwriteAliases) && Properties.Settings.Default.downloadAliases)\n+ //{\n+ // aliasesDownloaded = await AttemptAliasDownload();\n+ //}\n- if (!aliasesDownloaded && (!File.Exists(aliasFile) || Properties.Settings.Default.overwriteAliases))\n+ if (!aliasesDownloaded && (!File.Exists(AliasPath) || Properties.Settings.Default.overwriteAliases))\n{\n- SaveCharacters(aliasFile);\n- Logger.Log($\"Characters exported to {aliasFile} for adding aliases.\");\n+ SaveCharacters(AliasPath);\n+ Logger.Log($\"Characters exported to {AliasPath} for adding aliases.\");\n}\nif (skipShelfari)\n@@ -289,32 +272,30 @@ public async Task<int> CreateXray(SafeShowDelegate safeShow, IProgressBar progre\nt.Id = termId++;\n}\nLogger.Log(str.ToString());\n-\n- if (!unattended && enableEdit)\n- {\n- if (DialogResult.Yes ==\n- safeShow(\n- \"Terms have been exported to an alias file or already exist in that file. Would you like to open the file in notepad for editing?\\r\\n\"\n- + \"See the MobileRead forum thread (link in Settings) for more information on building aliases.\",\n- \"Aliases\",\n- MessageBoxButtons.YesNo,\n- MessageBoxIcon.Question,\n- MessageBoxDefaultButton.Button2))\n- {\n- Functions.RunNotepad(aliasFile);\n- }\n- }\n- //Load the aliases now that we know they exist\n- if (!File.Exists(aliasFile))\n- Logger.Log(\"Aliases file not found.\");\n- else\n- {\n- LoadAliases(aliasFile);\n- Logger.Log(\"Character aliases read from \" + aliasFile + \".\");\n- }\n- return 0;\n}\n+ //public async Task<bool> AttemptAliasDownload()\n+ //{\n+ // try\n+ // {\n+ // string aliases = await HttpDownloader.GetPageHtmlAsync(\"https://www.revensoftware.com/xray/aliases/\" + asin);\n+ // StreamWriter fs = new StreamWriter(AliasPath, false, Encoding.UTF8);\n+ // fs.Write(aliases);\n+ // fs.Close();\n+ // Logger.Log(\"Found and downloaded pre-made aliases file.\");\n+ // return true;\n+ // }\n+ // catch (Exception ex)\n+ // {\n+ // if (!ex.Message.Contains(\"(404) Not Found\"))\n+ // Logger.Log(\"No pre-made aliases available for this book.\");\n+ // else\n+ // Logger.Log(\"An error occurred downloading aliases: \" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n+ // }\n+\n+ // return false;\n+ //}\n+\npublic int ExpandFromRawMl(string rawMl, SafeShowDelegate safeShow, IProgressBar progress, CancellationToken token, bool ignoreSoftHypen = false, bool shortEx = true)\n{\n// If there is an apostrophe, attempt to match 's at the end of the term\n",
        "lang": "C#",
        "codet5-history": "Added support for exporting and importing terms"
    },
    {
        "msg": "make alias path public",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -45,7 +45,7 @@ public class XRay\nprivate string _guid = \"\";\nprivate string asin = \"\";\nprivate string version = \"1\";\n- private string aliaspath = \"\";\n+ private string _aliasPath;\npublic List<Term> Terms = new List<Term>(100);\nprivate List<Chapter> _chapters = new List<Chapter>();\nprivate List<Excerpt> excerpts = new List<Excerpt>();\n@@ -113,7 +113,7 @@ public XRay(string shelfari, DataSource dataSource)\nGuid = guid;\nthis.asin = asin;\nthis.locOffset = locOffset;\n- this.aliaspath = aliaspath;\n+ _aliasPath = aliaspath;\nthis.unattended = unattended;\nthis.dataSource = dataSource;\n}\n@@ -128,12 +128,18 @@ public XRay(string shelfari, DataSource dataSource)\nGuid = guid;\nthis.asin = asin;\nthis.locOffset = locOffset;\n- this.aliaspath = aliaspath;\n+ _aliasPath = aliaspath;\nunattended = false;\nthis.dataSource = dataSource;\nskipShelfari = true;\n}\n+ public string AliasPath\n+ {\n+ set => _aliasPath = value;\n+ get => string.IsNullOrEmpty(_aliasPath) ? Environment.CurrentDirectory + @\"\\ext\\\" + asin + \".aliases\" : _aliasPath;\n+ }\n+\npublic string Guid\n{\nset => Functions.ConvertGuid(value);\n@@ -1127,9 +1133,10 @@ public void SaveCharacters(string aliasFile)\n}\n}\n- public void LoadAliases(string aliasFile)\n+ public void LoadAliases(string aliasFile = null)\n{\nvar d = new Dictionary<string, string[]>();\n+ aliasFile = aliasFile ?? AliasPath;\nif (!File.Exists(aliasFile)) return;\nusing (var streamReader = new StreamReader(aliasFile, Encoding.UTF8))\n{\n",
        "lang": "C#",
        "codet5-history": "Add AliasPath to XRay"
    },
    {
        "msg": "refactor chapter handling",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs using HtmlAgilityPack;\nusing Newtonsoft.Json;\nusing XRayBuilderGUI.DataSources;\n+using HtmlDocument = HtmlAgilityPack.HtmlDocument;\nnamespace XRayBuilderGUI\n{\n@@ -305,23 +306,8 @@ public void ExportAndDisplayTerms()\n// return false;\n//}\n- public int ExpandFromRawMl(string rawMl, SafeShowDelegate safeShow, IProgressBar progress, CancellationToken token, bool ignoreSoftHypen = false, bool shortEx = true)\n+ public void HandleChapters(long mlLen, HtmlDocument doc, string rawMl)\n{\n- // If there is an apostrophe, attempt to match 's at the end of the term\n- // Match end of word, then search for any lingering punctuation\n- string apostrophes = Encoding.Default.GetString(Encoding.UTF8.GetBytes(\"('|\\u2019|\\u0060|\\u00B4)\")); // '\\u2019\\u0060\\u00B4\n- string quotes = Encoding.Default.GetString(Encoding.UTF8.GetBytes(\"(\\\"|\\u2018|\\u2019|\\u201A|\\u201B|\\u201C|\\u201D|\\u201E|\\u201F)\"));\n- string dashesEllipsis = Encoding.Default.GetString(Encoding.UTF8.GetBytes(\"(-|\\u2010|\\u2011|\\u2012|\\u2013|\\u2014|\\u2015|\\u2026|&#8211;|&#8212;|&#8217;|&#8218;|&#8230;)\")); //U+2010 to U+2015 and U+2026\n- string punctuationMarks = String.Format(@\"({0}s|{0})?{1}?[!\\.?,\"\"\\);:]*{0}*{1}*{2}*\", apostrophes, quotes, dashesEllipsis);\n-\n- int excerptId = 0;\n- HtmlAgilityPack.HtmlDocument web = new HtmlAgilityPack.HtmlDocument();\n- string readContents;\n- using (StreamReader streamReader = new StreamReader(rawMl, Encoding.Default))\n- {\n- readContents = streamReader.ReadToEnd();\n- }\n- web.LoadHtml(readContents);\n//Similar to aliases, if chapters definition exists, load it. Otherwise, attempt to build it from the book\nstring chapterFile = Environment.CurrentDirectory + @\"\\ext\\\" + asin + \".chapters\";\nif (File.Exists(chapterFile) && !Properties.Settings.Default.overwriteChapters)\n@@ -335,7 +321,7 @@ public int ExpandFromRawMl(string rawMl, SafeShowDelegate safeShow, IProgressBar\n{\ntry\n{\n- SearchChapters(web, readContents);\n+ SearchChapters(doc, rawMl);\n}\ncatch (Exception ex)\n{\n@@ -368,10 +354,9 @@ public int ExpandFromRawMl(string rawMl, SafeShowDelegate safeShow, IProgressBar\n//Define srl and erl so \"progress bar\" shows up correctly\nif (_chapters.Count == 0)\n{\n- long len = (new FileInfo(rawMl)).Length;\n- _chapters.Add(new Chapter(\"\", 1, len));\n+ _chapters.Add(new Chapter(\"\", 1, mlLen));\n_srl = 1;\n- _erl = len;\n+ _erl = mlLen;\n}\nelse\n{\n@@ -385,6 +370,27 @@ public int ExpandFromRawMl(string rawMl, SafeShowDelegate safeShow, IProgressBar\nLogger.Log($\"{c.name} | start: {c.start} | end: {c.End}\");\n}\n}\n+ }\n+\n+ public int ExpandFromRawMl(string rawMl, SafeShowDelegate safeShow, IProgressBar progress, CancellationToken token, bool ignoreSoftHypen = false, bool shortEx = true)\n+ {\n+ // If there is an apostrophe, attempt to match 's at the end of the term\n+ // Match end of word, then search for any lingering punctuation\n+ string apostrophes = Encoding.Default.GetString(Encoding.UTF8.GetBytes(\"('|\\u2019|\\u0060|\\u00B4)\")); // '\\u2019\\u0060\\u00B4\n+ string quotes = Encoding.Default.GetString(Encoding.UTF8.GetBytes(\"(\\\"|\\u2018|\\u2019|\\u201A|\\u201B|\\u201C|\\u201D|\\u201E|\\u201F)\"));\n+ string dashesEllipsis = Encoding.Default.GetString(Encoding.UTF8.GetBytes(\"(-|\\u2010|\\u2011|\\u2012|\\u2013|\\u2014|\\u2015|\\u2026|&#8211;|&#8212;|&#8217;|&#8218;|&#8230;)\")); //U+2010 to U+2015 and U+2026\n+ string punctuationMarks = String.Format(@\"({0}s|{0})?{1}?[!\\.?,\"\"\\);:]*{0}*{1}*{2}*\", apostrophes, quotes, dashesEllipsis);\n+\n+ int excerptId = 0;\n+ HtmlDocument web = new HtmlDocument();\n+ string readContents;\n+ using (StreamReader streamReader = new StreamReader(rawMl, Encoding.Default))\n+ {\n+ readContents = streamReader.ReadToEnd();\n+ }\n+ web.LoadHtml(readContents);\n+\n+ HandleChapters(new FileInfo(rawMl).Length, web, readContents);\nLogger.Log(\"Scanning book content...\");\nSystem.Diagnostics.Stopwatch timer = new System.Diagnostics.Stopwatch();\n@@ -621,11 +627,11 @@ public int ExpandFromRawMl(string rawMl, SafeShowDelegate safeShow, IProgressBar\n/// </summary>\n/// <param name=\"bookDoc\">Book's HTML</param>\n/// <param name=\"rawML\">Path to the book's rawML file</param>\n- private void SearchChapters(HtmlAgilityPack.HtmlDocument bookDoc, string rawML)\n+ private void SearchChapters(HtmlDocument bookDoc, string rawML)\n{\nvar leadingZerosRegex = new Regex(@\"^0+(?=\\d)\", RegexOptions.Compiled);\nstring tocHtml;\n- HtmlAgilityPack.HtmlDocument tocDoc = new HtmlAgilityPack.HtmlDocument();\n+ HtmlDocument tocDoc = new HtmlDocument();\nHtmlNode toc = bookDoc.DocumentNode.SelectSingleNode(\n\"//reference[translate(@title,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')='TABLE OF CONTENTS']\");\n_chapters.Clear();\n@@ -634,7 +640,7 @@ private void SearchChapters(HtmlAgilityPack.HtmlDocument bookDoc, string rawML)\n{\nint tocloc = Convert.ToInt32(leadingZerosRegex.Replace(toc.GetAttributeValue(\"filepos\", \"\"), \"\"));\ntocHtml = rawML.Substring(tocloc, rawML.IndexOf(\"<mbp:pagebreak/>\", tocloc + 1, StringComparison.Ordinal) - tocloc);\n- tocDoc = new HtmlAgilityPack.HtmlDocument();\n+ tocDoc = new HtmlDocument();\ntocDoc.LoadHtml(tocHtml);\nvar tocNodes = tocDoc.DocumentNode.SelectNodes(\"//a\");\nforeach (HtmlNode chapter in tocNodes)\n",
        "lang": "C#",
        "codet5-history": "Add support for multiple chapters in the same document"
    },
    {
        "msg": "redundant try/catch",
        "diff": "diff --git a/src/UI/frmCreateXR.cs b/src/UI/frmCreateXR.cs @@ -132,20 +132,14 @@ private void btnOpenXml_Click(object sender, EventArgs e)\nt.RegexAliases);\n}\nTerms.Clear();\n- }\n- catch (Exception ex)\n- {\n- MessageBox.Show(\"Error:\\r\\n\" + ex.Message + \"\\r\\n\" + ex.StackTrace);\n- }\n- try\n- {\n+\nif (!File.Exists(aliasFile)) return;\nusing (var streamReader = new StreamReader(aliasFile, Encoding.UTF8))\n{\nwhile (!streamReader.EndOfStream)\n{\nstring input = streamReader.ReadLine();\n- string[] temp = input.Split('|');\n+ string[] temp = input?.Split('|') ?? throw new IOException(\"Empty or invalid file.\");\nif (temp.Length <= 1 || temp[0] == \"\" || temp[0].Substring(0, 1) == \"#\") continue;\nstring temp2 = input.Substring(input.IndexOf('|') + 1);\nif (!d.ContainsKey(temp[0]))\n",
        "lang": "C#",
        "codet5-history": "Fixes a bug where the file was empty and not thrown."
    },
    {
        "msg": "so many braces",
        "diff": "diff --git a/src/UI/frmCreateXR.cs b/src/UI/frmCreateXR.cs @@ -295,24 +295,13 @@ private void CreateTerms()\nprivate static bool CompareImages(Bitmap image1, Bitmap image2)\n{\n- if (image1.Width == image2.Width && image1.Height == image2.Height)\n- {\n+ if (image1.Width != image2.Width || image1.Height != image2.Height) return false;\nfor (int i = 0; i < image1.Width; i++)\n- {\nfor (int j = 0; j < image1.Height; j++)\n- {\nif (image1.GetPixel(i, j) != image2.GetPixel(i, j))\n- {\nreturn false;\n- }\n- }\n- }\nreturn true;\n- }\n- else\n- {\n- return false;\n- }\n+\n}\nprivate List<T> LoadTermsFromTxt<T>(string txtfile)\n",
        "lang": "C#",
        "codet5-history": "Fix comparison of images in diff"
    },
    {
        "msg": "change colour for warnings",
        "diff": "diff --git a/src/Logger.cs b/src/Logger.cs @@ -37,13 +37,19 @@ public static void SafeAppendText(this RichTextBox rtfBox, string message)\nrtfBox.SelectionLength = 0;\nrtfBox.SelectionColor = Color.Green;\n}\n- List<string> redFlags = new List<string> { \"error\", \"failed\", \"problem\", \"skipping\", \"warning\", \"unable\" };\n+ List<string> redFlags = new List<string> { \"error\", \"failed\", \"problem\", \"skipping\", \"unable\" };\nif (redFlags.Any(message.ContainsIgnorecase))\n{\nrtfBox.SelectionStart = rtfBox.TextLength;\nrtfBox.SelectionLength = 0;\nrtfBox.SelectionColor = Color.Red;\n}\n+ if (message.ContainsIgnorecase(\"warning\"))\n+ {\n+ rtfBox.SelectionStart = rtfBox.TextLength;\n+ rtfBox.SelectionLength = 0;\n+ rtfBox.SelectionColor = Color.DarkOrange;\n+ }\nrtfBox.AppendText(message);\nrtfBox.SelectionColor = rtfBox.ForeColor;\nrtfBox.Refresh();\n",
        "lang": "C#",
        "codet5-history": "Fix warning color in diff"
    },
    {
        "msg": "optimize db calls",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs using System;\nusing System.Collections.Generic;\n+using System.Data;\nusing System.Data.SQLite;\nusing System.Globalization;\nusing System.IO;\n@@ -717,81 +718,90 @@ private void SearchChapters(HtmlDocument bookDoc, string rawML)\n}\n}\n- // TODO: Make async\npublic int PopulateDb(SQLiteConnection db, IProgressBar progress, CancellationToken token)\n{\nStringBuilder sql = new StringBuilder(Terms.Count * 256);\nint personCount = 0;\nint termCount = 0;\n- SQLiteCommand command = new SQLiteCommand(\"update string set text=@text where id=15\", db);\n- command.Parameters.AddWithValue(\"text\", dataUrl);\n+ var command = new SQLiteCommand($\"update string set text='{dataUrl}' where id=15\", db);\ncommand.ExecuteNonQuery();\n- command.Dispose();\n+\nLogger.Log(\"Updating database with terms, descriptions, and excerpts...\");\n//Write all entities and occurrences\nLogger.Log($\"Writing {Terms.Count} terms...\");\nprogress?.Set(0, Terms.Count);\n+ command = new SQLiteCommand(\"insert into entity (id, label, loc_label, type, count, has_info_card) values (@id, @label, null, @type, @count, 1)\", db);\n+ var command2 = new SQLiteCommand(\"insert into entity_description (text, source_wildcard, source, entity) values (@text, @source_wildcard, @source, @entity)\", db);\n+ var command3 = new SQLiteCommand(\"insert into occurrence (entity, start, length) values (@entity, @start, @length)\", db);\nforeach (Term t in Terms)\n{\ntoken.ThrowIfCancellationRequested();\nif (t.Type == \"character\") personCount++;\nelse if (t.Type == \"topic\") termCount++;\n- command = new SQLiteCommand(String.Format(\"insert into entity (id, label, loc_label, type, count, has_info_card) values ({0}, @label, null, {1}, {2}, 1);\",\n- t.Id, t.Type == \"character\" ? 1 : 2, t.Occurrences.Count), db);\n- command.Parameters.AddWithValue(\"label\", t.TermName);\n+ command.Parameters.Add(\"@id\", DbType.Int32).Value = t.Id;\n+ command.Parameters.Add(\"@label\", DbType.String).Value = t.TermName;\n+ command.Parameters.Add(\"@type\", DbType.Int32).Value = t.Type == \"character\" ? 1 : 2;\n+ command.Parameters.Add(\"@count\", DbType.Int32).Value = t.Occurrences.Count;\ncommand.ExecuteNonQuery();\n- command.Dispose();\n- command = new SQLiteCommand(String.Format(\"insert into entity_description (text, source_wildcard, source, entity) values (@text, @source_wildcard, {0}, {1});\",\n- t.DescSrc == \"shelfari\" ? 2 : 4, t.Id), db);\n- command.Parameters.AddWithValue(\"text\", t.Desc == \"\" ? \"No description available.\" : t.Desc);\n- command.Parameters.AddWithValue(\"source_wildcard\", t.TermName);\n- command.ExecuteNonQuery();\n- command.Dispose();\n+ command2.Parameters.Add(\"@text\", DbType.String).Value = t.Desc == \"\" ? \"No description available.\" : t.Desc;\n+ command2.Parameters.Add(\"@source_wildcard\", DbType.String).Value = t.TermName;\n+ command2.Parameters.Add(\"@source\", DbType.Int32).Value = t.DescSrc == \"shelfari\" ? 4 : 6;\n+ command2.Parameters.Add(\"@entity\", DbType.Int32).Value = t.Id;\n+ command2.ExecuteNonQuery();\n- sql.Clear();\nforeach (int[] loc in t.Occurrences)\n- sql.AppendFormat(\"insert into occurrence (entity, start, length) values ({0}, {1}, {2});\\n\",\n- t.Id, loc[0], loc[1]);\n- command = new SQLiteCommand(sql.ToString(), db);\n- command.ExecuteNonQuery();\n- command.Dispose();\n+ {\n+ command3.Parameters.Add(\"@entity\", DbType.Int32).Value = t.Id;\n+ command3.Parameters.Add(\"@start\", DbType.Int32).Value = loc[0];\n+ command3.Parameters.Add(\"@length\", DbType.Int32).Value = loc[1];\n+ command3.ExecuteNonQuery();\n+ }\nprogress?.Add(1);\n}\n+\n//Write excerpts and entity_excerpt table\n- Logger.Log(String.Format(\"Writing {0} excerpts...\", excerpts.Count));\n- sql.Clear();\n- command = new SQLiteCommand(\"insert into excerpt (id, start, length, image, related_entities, goto) values (@id, @start, @length, @image, @rel_ent, null);\", db);\n+ Logger.Log($\"Writing {excerpts.Count} excerpts...\");\n+ command.CommandText = \"insert into excerpt (id, start, length, image, related_entities, goto) values (@id, @start, @length, @image, @rel_ent, null);\";\n+ command.Parameters.Clear();\n+ command2.CommandText = \"insert into entity_excerpt (entity, excerpt) values (@entityId, @excerptId)\";\n+ command2.Parameters.Clear();\nprogress?.Set(0, excerpts.Count);\n- foreach (Excerpt e in excerpts)\n+ foreach (var e in excerpts)\n{\ntoken.ThrowIfCancellationRequested();\n- command.Parameters.AddWithValue(\"id\", e.id);\n- command.Parameters.AddWithValue(\"start\", e.start);\n- command.Parameters.AddWithValue(\"length\", e.length);\n- command.Parameters.AddWithValue(\"image\", e.image);\n- command.Parameters.AddWithValue(\"rel_ent\", String.Join(\",\", e.related_entities.Where(en => en != 0).ToArray())); // don't write 0 (notable flag)\n+ command.Parameters.Add(\"id\", DbType.Int32).Value = e.id;\n+ command.Parameters.Add(\"start\", DbType.Int32).Value = e.start;\n+ command.Parameters.Add(\"length\", DbType.Int32).Value = e.length;\n+ command.Parameters.Add(\"image\", DbType.String).Value = e.image;\n+ command.Parameters.Add(\"rel_ent\", DbType.String).Value = string.Join(\",\", e.related_entities.Where(en => en != 0).ToArray()); // don't write 0 (notable flag)\ncommand.ExecuteNonQuery();\nforeach (int ent in e.related_entities)\n{\n- if (ent != 0) // skip notable flag\n- sql.AppendFormat(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", ent, e.id);\n+ token.ThrowIfCancellationRequested();\n+ if (ent == 0) continue; // skip notable flag\n+ command2.Parameters.Add(\"@entityId\", DbType.Int32).Value = ent;\n+ command2.Parameters.Add(\"@excerptId\", DbType.Int32).Value = e.id;\n+ command2.ExecuteNonQuery();\n}\nprogress?.Add(1);\n}\n- command.Dispose();\n+\n// create links to notable clips in order of popularity\n+ Logger.Log(\"Adding notable clips...\");\n+ command.Parameters.Clear();\nvar notablesOnly = excerpts.Where(ex => ex.notable).OrderByDescending(ex => ex.highlights);\nforeach (Excerpt notable in notablesOnly)\n- sql.AppendFormat(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, notable.id);\n- // Populate some more notable clips if not enough were found,\n+ {\n+ command.CommandText = $\"insert into entity_excerpt (entity, excerpt) values (0, {notable.id})\";\n+ command.ExecuteNonQuery();\n+ }\n+\n+ // Populate some more clips if not enough were found initially\n// TODO: Add a config value in settings for this amount\n+ var toAdd = new List<Excerpt>(20);\nif (foundNotables <= 20 && foundNotables + excerpts.Count <= 20)\n- excerpts.ForEach(ex =>\n- {\n- if (!ex.notable)\n- sql.AppendFormat(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, ex.id);\n- });\n+ toAdd.AddRange(excerpts);\nelse if (foundNotables <= 20)\n{\nRandom rand = new Random();\n@@ -799,16 +809,18 @@ public int PopulateDb(SQLiteConnection db, IProgressBar progress, CancellationTo\nwhile (foundNotables <= 20 && eligible.Count > 0)\n{\nExcerpt randEx = eligible.ElementAt(rand.Next(eligible.Count));\n- sql.AppendFormat(\"insert into entity_excerpt (entity, excerpt) values ({0}, {1});\\n\", 0, randEx.id);\n+ toAdd.Add(randEx);\neligible.Remove(randEx);\nfoundNotables++;\n}\n}\n- token.ThrowIfCancellationRequested();\n- Logger.Log(\"Writing entity excerpt table...\");\n- command = new SQLiteCommand(sql.ToString(), db);\n+ foreach (var excerpt in toAdd)\n+ {\n+ command.CommandText = $\"insert into entity_excerpt (entity, excerpt) values (0, {excerpt.id})\";\ncommand.ExecuteNonQuery();\n+ }\ncommand.Dispose();\n+\ntoken.ThrowIfCancellationRequested();\nLogger.Log(\"Writing top mentions...\");\nList<int> sorted =\n",
        "lang": "C#",
        "codet5-history": "Add support for multiple entities in the same database"
    },
    {
        "msg": "allow chapter editing with safeshow for noww...",
        "diff": "diff --git a/src/XRay.cs b/src/XRay.cs @@ -304,7 +304,7 @@ public void ExportAndDisplayTerms()\n// return false;\n//}\n- public void HandleChapters(long mlLen, HtmlDocument doc, string rawMl)\n+ public void HandleChapters(long mlLen, HtmlDocument doc, string rawMl, SafeShowDelegate safeShow)\n{\n//Similar to aliases, if chapters definition exists, load it. Otherwise, attempt to build it from the book\nstring chapterFile = Environment.CurrentDirectory + @\"\\ext\\\" + asin + \".chapters\";\n@@ -388,7 +388,7 @@ public int ExpandFromRawMl(string rawMl, SafeShowDelegate safeShow, IProgressBar\n}\nweb.LoadHtml(readContents);\n- HandleChapters(new FileInfo(rawMl).Length, web, readContents);\n+ HandleChapters(new FileInfo(rawMl).Length, web, readContents, safeShow);\nLogger.Log(\"Scanning book content...\");\nSystem.Diagnostics.Stopwatch timer = new System.Diagnostics.Stopwatch();\n",
        "lang": "C#",
        "codet5-history": "Add SafeShowDelegate to HandleChapters"
    },
    {
        "msg": "timestamp function",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs @@ -486,6 +486,11 @@ public static bool ValidateFilename(string author, string title)\nvar newTitle = RemoveInvalidFileChars(title);\nreturn author.Equals(newAuthor) && title.Equals(newTitle);\n}\n+\n+ public static long UnixTimestampNow()\n+ {\n+ return (long) DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds;\n+ }\n}\ninternal static class NativeMethods\n",
        "lang": "C#",
        "codet5-history": "Add UnixTimestampNow()"
    },
    {
        "msg": "serialize to json instead of writing directly",
        "diff": "diff --git a/src/AuthorProfile.cs b/src/AuthorProfile.cs using System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing HtmlAgilityPack;\n+using Newtonsoft.Json;\nnamespace XRayBuilderGUI\n{\n@@ -227,24 +228,36 @@ public async Task<bool> Generate()\nLogger.Log(\"Writing Author Profile to file...\");\n- //Create list of Asin numbers and titles\n- List<string> authorsOtherBookList = new List<string>();\n- foreach (BookInfo bk in otherBooks)\n+ var authorOtherBooks = otherBooks.Select(book => new Model.AuthorProfile.Book\n{\n- authorsOtherBookList.Add($@\"{{\"\"e\"\":1,\"\"a\"\":\"\"{bk.asin}\"\",\"\"t\"\":\"\"{bk.title}\"\"}}\");\n+ E = 1,\n+ Asin = book.asin,\n+ Title = book.title\n+ }).ToArray();\n+\n+ var ap = new Model.AuthorProfile\n+ {\n+ Asin = _curBook.asin,\n+ CreationDate = Functions.UnixTimestampNow(),\n+ OtherBooks = authorOtherBooks,\n+ Authors = new []\n+ {\n+ new Model.AuthorProfile.Author\n+ {\n+ Asin = authorAsin,\n+ Bio = BioTrimmed,\n+ ImageHeight = ApAuthorImage.Height,\n+ Name = _curBook.author,\n+ OtherBookAsins = otherBooks.Select(book => book.asin).ToArray(),\n+ Picture = Functions.ImageToBase64(ApAuthorImage, ImageFormat.Jpeg)\n+ }\n}\n+ };\n+\n+ string authorProfileOutput = JsonConvert.SerializeObject(ap);\n- //Create finalAuthorProfile.profile.ASIN.asc\n- int unixTimestamp = (Int32) (DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;\ntry\n{\n- string base64Image = Functions.ImageToBase64(ApAuthorImage, ImageFormat.Jpeg);\n- string authorProfileOutput = @\"{\"\"u\"\":[{\"\"y\"\":\" + ApAuthorImage.Height + @\",\"\"l\"\":[\"\"\" +\n- string.Join(@\"\"\",\"\"\", otherBooks.Select(book => book.asin).ToArray()) + @\"\"\"],\"\"n\"\":\"\"\" +\n- _curBook.author + @\"\"\",\"\"a\"\":\"\"\" + authorAsin + @\"\"\",\"\"b\"\":\"\"\" + BioTrimmed +\n- @\"\"\",\"\"i\"\":\"\"\" + base64Image + @\"\"\"}],\"\"a\"\":\"\"\" +\n- $@\"{_curBook.asin}\"\",\"\"d\"\":{unixTimestamp},\"\"o\"\":[\" +\n- string.Join(\",\", authorsOtherBookList.ToArray()) + \"]}\";\nFile.WriteAllText(ApPath, authorProfileOutput);\nLogger.Log(\"Author Profile file created successfully!\\r\\nSaved to \" + ApPath);\n}\n",
        "lang": "C#",
        "codet5-history": "Update Author Profile to use Newtonsoft.Json"
    },
    {
        "msg": "fix for expandunicode",
        "diff": "diff --git a/src/Functions.cs b/src/Functions.cs @@ -417,7 +417,7 @@ public static string ExpandUnicode(string input)\nStringBuilder output = new StringBuilder(input.Length);\nfor (int i = 0; i < input.Length; i++)\n{\n- if (input[i] > 255)\n+ if (input[i] > 127)\n{\nbyte[] uniBytes = Encoding.Unicode.GetBytes(input.Substring(i, 1));\noutput.AppendFormat(@\"\\u{0:X2}{1:X2}\", uniBytes[1], uniBytes[0]);\n",
        "lang": "C#",
        "codet5-history": "Fix Unicode expansion"
    },
    {
        "msg": "add default classes and remove duplicate book classes",
        "diff": "diff --git a/src/Model/StartActions.cs b/src/Model/StartActions.cs @@ -20,7 +20,7 @@ public class StartActions\npublic class StartActionsBookInfo\n{\n[JsonProperty(\"class\")]\n- public string Class { get; set; }\n+ public string Class { get; set; } = \"bookInfo\";\n[JsonProperty(\"asin\")]\npublic string Asin { get; set; }\n@@ -233,7 +233,7 @@ public class Layout\npublic class SeriesPosition\n{\n[JsonProperty(\"class\")]\n- public string Class { get; set; }\n+ public string Class { get; set; } = \"seriesPosition\";\n[JsonProperty(\"positionInSeries\")]\npublic int PositionInSeries { get; set; }\n@@ -249,7 +249,7 @@ public class Subscription\n{\n[JsonProperty(\"class\")]\n- public string Class { get; set; }\n+ public string Class { get; set; } = \"authorSubscriptionInfo\";\n[JsonProperty(\"asin\")]\npublic string Asin { get; set; }\n@@ -264,10 +264,10 @@ public class Subscription\npublic string ImageUrl { get; set; }\n}\n- public class FollowSubscriptions\n+ public class AuthorSubscriptions\n{\n[JsonProperty(\"class\")]\n- public string Class { get; set; }\n+ public string Class { get; set; } = \"authorSubscriptionInfoList\";\n[JsonProperty(\"subscriptions\")]\npublic Subscription[] Subscriptions { get; set; }\n@@ -351,42 +351,10 @@ public class GrokShelfInfo\npublic bool IsAutoshelvingEnabled { get; set; }\n}\n- public class BookDescription\n- {\n-\n- [JsonProperty(\"class\")]\n- public string Class { get; set; }\n-\n- [JsonProperty(\"asin\")]\n- public string Asin { get; set; }\n-\n- [JsonProperty(\"title\")]\n- public string Title { get; set; }\n-\n- [JsonProperty(\"description\")]\n- public string Description { get; set; }\n-\n- [JsonProperty(\"authors\")]\n- public string[] Authors { get; set; }\n-\n- [JsonProperty(\"imageUrl\")]\n- public string ImageUrl { get; set; }\n-\n- [JsonProperty(\"hasSample\")]\n- public bool HasSample { get; set; }\n-\n- [JsonProperty(\"amazonRating\")]\n- public double AmazonRating { get; set; }\n-\n- [JsonProperty(\"numberOfReviews\")]\n- public int NumberOfReviews { get; set; }\n- }\n-\npublic class Author\n{\n-\n[JsonProperty(\"class\")]\n- public string Class { get; set; }\n+ public string Class { get; set; } = \"authorBio\";\n[JsonProperty(\"asin\")]\npublic string Asin { get; set; }\n@@ -403,9 +371,8 @@ public class Author\npublic class AuthorBios\n{\n-\n[JsonProperty(\"class\")]\n- public string Class { get; set; }\n+ public string Class { get; set; } = \"authorBioList\";\n[JsonProperty(\"authors\")]\npublic Author[] Authors { get; set; }\n@@ -413,9 +380,8 @@ public class AuthorBios\npublic class Recommendation\n{\n-\n[JsonProperty(\"class\")]\n- public string Class { get; set; }\n+ public string Class { get; set; } = \"recommendation\";\n[JsonProperty(\"asin\")]\npublic string Asin { get; set; }\n@@ -435,16 +401,16 @@ public class Recommendation\npublic class AuthorRecs\n{\n-\n[JsonProperty(\"class\")]\n- public string Class { get; set; }\n+ public string Class { get; set; } = \"recommendationList\";\n[JsonProperty(\"recommendations\")]\n- public Recommendation[] Recommendations { get; set; }\n+ public Book[] Recommendations { get; set; }\n}\n- public class CurrentBook\n+ public class Book\n{\n+ private double? _amazonRating;\n[JsonProperty(\"class\")]\npublic string Class { get; set; }\n@@ -455,7 +421,7 @@ public class CurrentBook\n[JsonProperty(\"title\")]\npublic string Title { get; set; }\n- [JsonProperty(\"description\")]\n+ [JsonProperty(\"description\", NullValueHandling = NullValueHandling.Ignore)]\npublic string Description { get; set; }\n[JsonProperty(\"authors\")]\n@@ -467,18 +433,21 @@ public class CurrentBook\n[JsonProperty(\"hasSample\")]\npublic bool HasSample { get; set; }\n- [JsonProperty(\"amazonRating\")]\n- public double AmazonRating { get; set; }\n+ [JsonProperty(\"amazonRating\", NullValueHandling = NullValueHandling.Ignore)]\n+ public double? AmazonRating\n+ {\n+ get => _amazonRating.HasValue ? (double?) Math.Round(_amazonRating.Value, 1) : null;\n+ set => _amazonRating = value;\n+ }\n- [JsonProperty(\"numberOfReviews\")]\n- public int NumberOfReviews { get; set; }\n+ [JsonProperty(\"numberOfReviews\", NullValueHandling = NullValueHandling.Ignore)]\n+ public int? NumberOfReviews { get; set; }\n}\npublic class ReadingTime\n{\n-\n[JsonProperty(\"class\")]\n- public string Class { get; set; }\n+ public string Class { get; set; } = \"time\";\n[JsonProperty(\"hours\")]\npublic int Hours { get; set; }\n@@ -490,52 +459,10 @@ public class ReadingTime\npublic LocalizedText FormattedTime { get; set; }\n}\n- public class PreviousBookInTheSeries\n- {\n-\n- [JsonProperty(\"class\")]\n- public string Class { get; set; }\n-\n- [JsonProperty(\"asin\")]\n- public string Asin { get; set; }\n-\n- [JsonProperty(\"title\")]\n- public string Title { get; set; }\n-\n- [JsonProperty(\"description\")]\n- public string Description { get; set; }\n-\n- [JsonProperty(\"authors\")]\n- public string[] Authors { get; set; }\n-\n- [JsonProperty(\"imageUrl\")]\n- public string ImageUrl { get; set; }\n-\n- [JsonProperty(\"hasSample\")]\n- public bool HasSample { get; set; }\n-\n- [JsonProperty(\"amazonRating\")]\n- public double AmazonRating { get; set; }\n-\n- [JsonProperty(\"numberOfReviews\")]\n- public int NumberOfReviews { get; set; }\n- }\n-\n- public class AuthorSubscriptions\n- {\n-\n- [JsonProperty(\"class\")]\n- public string Class { get; set; }\n-\n- [JsonProperty(\"subscriptions\")]\n- public Subscription[] Subscriptions { get; set; }\n- }\n-\npublic class ReadingPages\n{\n-\n[JsonProperty(\"class\")]\n- public string Class { get; set; }\n+ public string Class { get; set; } = \"pages\";\n[JsonProperty(\"pagesInBook\")]\npublic int PagesInBook { get; set; }\n@@ -543,12 +470,11 @@ public class ReadingPages\npublic class DataJson\n{\n-\n[JsonProperty(\"seriesPosition\")]\npublic SeriesPosition SeriesPosition { get; set; }\n[JsonProperty(\"followSubscriptions\")]\n- public FollowSubscriptions FollowSubscriptions { get; set; }\n+ public AuthorSubscriptions FollowSubscriptions { get; set; }\n[JsonProperty(\"welcomeText\")]\npublic WelcomeText WelcomeText { get; set; }\n@@ -560,7 +486,7 @@ public class DataJson\npublic GrokShelfInfo GrokShelfInfo { get; set; }\n[JsonProperty(\"bookDescription\")]\n- public BookDescription BookDescription { get; set; }\n+ public Book BookDescription { get; set; }\n[JsonProperty(\"authorBios\")]\npublic AuthorBios AuthorBios { get; set; }\n@@ -569,13 +495,13 @@ public class DataJson\npublic AuthorRecs AuthorRecs { get; set; }\n[JsonProperty(\"currentBook\")]\n- public CurrentBook CurrentBook { get; set; }\n+ public Book CurrentBook { get; set; }\n[JsonProperty(\"readingTime\")]\npublic ReadingTime ReadingTime { get; set; }\n[JsonProperty(\"previousBookInTheSeries\")]\n- public PreviousBookInTheSeries PreviousBookInTheSeries { get; set; }\n+ public Book PreviousBookInTheSeries { get; set; }\n[JsonProperty(\"authorSubscriptions\")]\npublic AuthorSubscriptions AuthorSubscriptions { get; set; }\n",
        "lang": "C#",
        "codet5-history": "Add support for null values in JSON properties"
    }
]