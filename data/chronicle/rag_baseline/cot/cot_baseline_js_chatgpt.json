[
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -284,7 +284,7 @@ class FilterCollapse extends Component {\n}\ncomponentDidUpdate(prevProps, prevState) {\n- if (prevProps.filter === this.props.filter) {\n+ if (prevProps.filter !== this.props.filter) {\nQuery.set('f', this.state.filterInput);\n}\n}\n",
        "org_msg": "Fix update condition for the filter query param",
        "sim_msg": "[pgs + pgr] feature (wixCode): add support for new items dto",
        "sim_diff": "diff --git a/pro-gallery-renderer/src/components/gallery/galleryContainer.js b/pro-gallery-renderer/src/components/gallery/galleryContainer.js @@ -427,11 +427,11 @@ export class GalleryContainer extends React.Component {\n}\nloadItemsDimensions() {\n- if (!this.layoutItems()) {\n+ if (!this.galleryItems()) {\nreturn;\n}\n- const itemsWithoutDimensions = this.layoutItems().filter((item, idx) => {\n+ const itemsWithoutDimensions = this.galleryItems().filter((item, idx) => {\ntry {\nreturn (item.isVisible && item.isDimensionless);\n} catch (e) {\n@@ -1534,6 +1534,10 @@ export class GalleryContainer extends React.Component {\nreturn this.galleryStructure.layoutItems;\n}\n+ galleryItems() {\n+ return this.galleryStructure.galleryItems;\n+ }\n+\nfindVisibleItems() {\nconst container = this.getLatestState('container', {});\n",
        "chatgpt_cot": "\"Fix componentDidUpdate method in FilterCollapse to update query when filter changes\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2109,19 +2109,16 @@ router.get(\nrouter.post(\n'/api/saveshowtagcolors',\n+ ensureAuth,\n+ body('show_tag_colors').toBoolean(),\n+ jsonValidationErrors,\nutil.wrapAsyncApi(async (req, res) => {\n- if (req.user) {\nreq.user.hide_tag_colors = !req.body.show_tag_colors;\nawait req.user.save();\nreturn res.status(200).send({\nsuccess: 'true',\n});\n- }\n-\n- return res.status(401).send({\n- success: 'false',\n- });\n}),\n);\n",
        "org_msg": "Add body validation.",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "\"Add authentication and validation for saving show tag colors in cube routes\""
    },
    {
        "org_diff": "diff --git a/src/components/Comment.js b/src/components/Comment.js @@ -121,7 +121,7 @@ class Comment extends React.Component {\nreturn (\n<div className='mb-1'>\n<div className={'comment border mt-1 px-2' + (this.state.highlighted ? ' comment-highlighted': '')}>\n- <a href={'/user/view/'+comment.owner}><img className=\"profile-thumbnail mt-2 mr-2\" src={comment.image} title={\"Art by \" + comment.artist}/></a>\n+ {true ? '' : <a href={'/user/view/'+comment.owner}><img className=\"profile-thumbnail mt-2 mr-2\" src={comment.image} title={\"Art by \" + comment.artist}/></a>}\n<div className=\"form-group mb-1\">\n{comment.ownerName ? <a href={'/user/view/'+comment.owner}><small>{comment.ownerName}</small></a> : <a><small>Anonymous</small></a>}\n{comment.timePosted && (comment.updated ? <em><small> - Updated <AgeText date={comment.timePosted}/></small></em> : <a><small> - <AgeText date={comment.timePosted}/></small></a>)}\n",
        "org_msg": "Disabled images\nThese won't be ready for the next release, but I want the other features in this branch through",
        "sim_msg": "Add user tooltip",
        "sim_diff": "diff --git a/src/comments/CommentItem.js b/src/comments/CommentItem.js @@ -6,29 +6,31 @@ import Body from '../post/Body';\nimport Avatar from '../widgets/Avatar';\nimport Icon from '../widgets/Icon';\nimport { sortCommentsFromSteem } from '../helpers/stateHelpers';\n+import ProfileTooltipOrigin from '../user/profileTooltip/ProfileTooltipOrigin';\nimport './CommentItem.scss';\n-const renderOptimisticComment = (comment) => {\n- return (\n+const renderOptimisticComment = (comment) =>\n<div className=\"CommentItem\">\n<div className={`CommentItem__content CommentItem__content--level-${comment.depth}`}>\n<div className=\"CommentUser\">\n+ <ProfileTooltipOrigin username={comment.author} >\n<Link to={`/@${comment.author}`}>\n<Avatar xs username={comment.author} />\n</Link>\n+ </ProfileTooltipOrigin>\n</div>\n<div className=\"CommentBody\">\n<span className=\"CommentBody__username\">\n+ <ProfileTooltipOrigin username={comment.author} >\n<Link to={`/@${comment.author}`}>\n{comment.author}\n</Link>\n+ </ProfileTooltipOrigin>\n</span>\n<Body body={comment.body} />\n</div>\n</div>\n- </div>\n- );\n-};\n+ </div>;\nexport default class CommentItem extends Component {\nconstructor(props) {\n@@ -81,15 +83,22 @@ export default class CommentItem extends Component {\n<div className=\"CommentItem\">\n<div className={`CommentItem__content CommentItem__content--level-${comment.depth} pb-2`}>\n<div className=\"CommentUser\">\n+ <ProfileTooltipOrigin username={comment.author} >\n<Link to={`/@${comment.author}`}>\n<Avatar\nclassName={this.props.isSinglePage ? 'Avatar--md' : 'Avatar--xs'}\nusername={comment.author}\n/>\n</Link>\n+ </ProfileTooltipOrigin>\n</div>\n<div className=\"CommentBody\">\n<span className=\"CommentBody__username\">\n+ <ProfileTooltipOrigin username={comment.author} >\n+ <Link to={`/@${comment.author}`}>\n+ {comment.author}\n+ </Link>\n+ </ProfileTooltipOrigin>\n<Link to={`/@${comment.author}`}>\n{comment.author}\n</Link>\n",
        "chatgpt_cot": "Fix conditional rendering issue in Comment component. Added ternary operator to ensure correct display of profile thumbnail based on condition."
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -35,7 +35,7 @@ function getPlaceholderCard(_id) {\nparsed_cost: [],\ncolorcategory: 'c',\nerror: true\n- }\n+ };\n}\nfunction cardFromId(id) {\n@@ -58,7 +58,6 @@ function getCardDetails(card) {\nreturn getPlaceholderCard(id);\n};\n}\n-}\nfunction loadJSONFile(filename, attribute) {\nreturn new Promise((resolve, reject) => {\n@@ -111,5 +110,6 @@ data.normalizedName = card => card.name.toLowerCase().normalize(\"NFD\").replace(/\ndata.allIds = card => data.nameToId[data.normalizedName(card)];\ndata.initializeCardDb = initializeCardDb;\ndata.loadJSONFile = loadJSONFile;\n+data.getPlaceholderCard = getPlaceholderCard;\nmodule.exports = data;\n\\ No newline at end of file\n",
        "org_msg": "add getPlaceholderCard to public interface",
        "sim_msg": "Update fetchdata to skip over incomplete data",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -43,12 +43,14 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- var imagesrc = card.pack_cards[0].image_url;\n+ if(card.pack_cards.length > 0 && card.pack_cards[0].image_url) {\n+ var imagesrc = card.pack_cards[0].image_url;\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n+ }\n});\nreturn cards;\n",
        "chatgpt_cot": "Add getPlaceholderCard method, fix syntax error, and export method in cards.js."
    },
    {
        "org_diff": "diff --git a/public/css/stylesheet.css b/public/css/stylesheet.css }\n}\n+/* make autocard text more obvious in comments and descriptions */\n+.card-text .autocard {\n+ font-weight: bolder;\n+ opacity: 0.9; /* hack to lighten the color so bold isn't quite so strong */\n+}\n+\n.form-check {\nborder: none;\n}\n",
        "org_msg": "Make autocarded text in descriptions semi-bold",
        "sim_msg": "Fix the aspect ratio fix",
        "sim_diff": "diff --git a/src/web/stylesheets/components/_pane.css b/src/web/stylesheets/components/_pane.css line-height: 30px;\nbackground-color: var(--primary-background-colour);\nflex-direction: row;\n+ padding-left: 10px;\n}\n.io-card.card:hover {\nmargin-top: auto;\nmargin-right: auto;\nmargin-bottom: auto;\n- padding: 10px;\n- padding-right: 0px;\n+ padding: 0px;\n}\n",
        "chatgpt_cot": "\"Enhance autocard text visibility in comments and descriptions in stylesheet.css\""
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -262,22 +262,7 @@ function getLabelsRaw(cube, sort) {\nreturn ['White', 'Blue', 'Black', 'Red', 'Green', 'Colorless'];\n}\nif (sort === 'Type') {\n- return [\n- 'Creature',\n- 'Planeswalker',\n- 'Instant',\n- 'Sorcery',\n- 'Artifact',\n- 'Enchantment',\n- 'Conspiracy',\n- 'Contraption',\n- 'Phenomenon',\n- 'Plane',\n- 'Scheme',\n- 'Vanguard',\n- 'Land',\n- 'Other',\n- ];\n+ return CARD_TYPES.concat(['Other']);\n}\nif (sort === 'Supertype') {\nreturn ['Snow', 'Legendary', 'Tribal', 'Basic', 'Elite', 'Host', 'Ongoing', 'World'];\n@@ -352,48 +337,11 @@ function getLabelsRaw(cube, sort) {\nreturn [...types];\n}\nif (sort === 'Types-Multicolor') {\n- return [\n- 'Creature',\n- 'Planeswalker',\n- 'Instant',\n- 'Sorcery',\n- 'Artifact',\n- 'Enchantment',\n- 'Conspiracy',\n- 'Contraption',\n- 'Phenomenon',\n- 'Plane',\n- 'Scheme',\n- 'Vanguard',\n- 'Azorius',\n- 'Dimir',\n- 'Rakdos',\n- 'Gruul',\n- 'Selesnya',\n- 'Orzhov',\n- 'Golgari',\n- 'Simic',\n- 'Izzet',\n- 'Boros',\n- 'Bant',\n- 'Esper',\n- 'Grixis',\n- 'Jund',\n- 'Naya',\n- 'Abzan',\n- 'Jeskai',\n- 'Sultai',\n- 'Mardu',\n- 'Temur',\n- 'Non-White',\n- 'Non-Blue',\n- 'Non-Black',\n- 'Non-Red',\n- 'Non-Green',\n- 'Five Color',\n- 'Land',\n- 'Other',\n- ];\n+ return CARD_TYPES.slice(0, -1)\n+ .concat(GUILDS)\n+ .concat(SHARDS_AND_WEDGES)\n+ .concat(FOUR_AND_FIVE_COLOR)\n+ .concat(['Land', 'Other']);\n}\nif (sort === 'Legality') {\nreturn ['Standard', 'Modern', 'Legacy', 'Vintage', 'Pioneer', 'Brawl', 'Historic', 'Pauper', 'Penny', 'Commander'];\n",
        "org_msg": "chore: Replace static Type sort labels",
        "sim_msg": "Changes to deck for stronghold",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -13,11 +13,12 @@ class Deck {\nvar result = {\nconflictDrawCards: [],\ndynastyDrawCards: [],\n- provinceCards: []\n+ provinceCards: [],\n+ stronghold: []\n};\n//conflict\n- this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ this.eachRepeatedCard(this.data.conflictDrawCards, cardData => {\nif(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\ndrawCard.location = 'conflict draw deck';\n@@ -26,7 +27,7 @@ class Deck {\n});\n//dynasty\n- this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ this.eachRepeatedCard(this.data.dynastyDrawCards, cardData => {\nif(['dynsaty'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\ndrawCard.location = 'dynasty draw deck';\n@@ -42,18 +43,15 @@ class Deck {\n}\n});\n- if(this.data.stronghold) {\n- result.stronghold = new DrawCard(player, _.extend({\n- code: this.data.stronghold.value,\n- type_code: 'stronghold',\n- stronghold_code: this.data.stronghold.value\n- }, this.data.stronghold));\n- } else {\n- result.stronghold = new DrawCard(player, { type_code: 'stronghold' });\n+ this.eachRepeatedCard(this.data.stronghold, cardData => {\n+ if(cardData.type_code === 'stronghold') {\n+ var strongholdCard = this.createCard(StrongholdCard, player, cardData);\n+ strongholdCard.location = 'stronghold deck';\n+ result.stronghold.push(strongholdCard);\n}\n- result.stronghold.moveTo('stronghold');\n+ });\n- result.allCards = [result.stronghold].concat(result.drawCards).concat(result.provinceCards).concat(result.conflictDrawCards).concat(result.dynastyDrawCards);\n+ result.allCards = [result.stronghold].concat(result.provinceCards).concat(result.conflictDrawCards).concat(result.dynastyDrawCards);\nreturn result;\n}\n",
        "chatgpt_cot": "\"Refactor getLabelsRaw function to use constants and arrays for card types, guilds, shards, wedges, and legality for better organization and readability.\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -131,7 +131,7 @@ const specialCaseCards = {\n'Westvale Abbey': ['94ed2eca-1579-411d-af6f-c7359c65de30'],\n};\n-function getTokensForCard(card) {\n+function getScryfallTokensForCard(card) {\nconst allParts = card.all_parts || [];\nreturn allParts\n.filter((element) => element.component === 'token' || element.type_line.startsWith('Emblem'))\n@@ -167,10 +167,9 @@ function arraySetEqual(target, candidate) {\nreturn isValid;\n}\n-function addTokens(card) {\n+function getTokens(card, catalogCard) {\nconst mentionedTokens = [];\n- const catalogCard = catalog.dict[card.id];\n- const recordedTokens = getTokensForCard(card);\n+ const recordedTokens = getScryfallTokensForCard(card);\nconst specialTokens = getTokensForSpecialCaseCard(card);\nif (specialTokens.length > 0) {\nmentionedTokens.push(...recordedTokens);\n@@ -233,7 +232,7 @@ function addTokens(card) {\n// populate\ncontinue; // eslint-disable-line no-continue\n- const cardTokens = getTokensForCard(card);\n+ const cardTokens = getScryfallTokensForCard(card);\nif (cardTokens.length > 0) {\nmentionedTokens.push(...cardTokens);\n@@ -359,9 +358,7 @@ function addTokens(card) {\n}\n}\n- if (mentionedTokens.length > 0) {\n- catalogCard.tokens = mentionedTokens.filter((id) => id !== card.id);\n- }\n+ return mentionedTokens;\n}\nfunction convertCmc(card, isExtra) {\n@@ -583,6 +580,11 @@ function convertCard(card, isExtra) {\nnewcard.colorcategory = newcard.color_identity[0].toLowerCase();\n}\n+ const tokens = getTokens(card, newcard);\n+ if (tokens.length > 0) {\n+ newcard.tokens = tokens;\n+ }\n+\nreturn newcard;\n}\n@@ -637,7 +639,6 @@ function saveEnglishCard(card) {\naddCardToCatalog(convertCard(card, true), true);\n}\naddCardToCatalog(convertCard(card));\n- addTokens(card);\n}\nasync function saveAllCards(basePath = 'private', defaultPath = null, allPath = null) {\n@@ -691,4 +692,5 @@ module.exports = {\nconvertColors,\nconvertParsedCost,\nconvertCmc,\n+ getTokens,\n};\n",
        "org_msg": "Get tests working.",
        "sim_msg": "fix: Fixes Concatenate balances to 2 decimal places on account overview page without rounding",
        "sim_diff": "diff --git a/packages/fether-ui/src/TokenCard/TokenCard.js b/packages/fether-ui/src/TokenCard/TokenCard.js @@ -9,6 +9,14 @@ import PropTypes from 'prop-types';\nimport { Card } from '../Card';\nimport { Placeholder } from '../Placeholder';\n+// Concatenates a string balance value by an amount of characters after the decimal place\n+function concatBalanceByDecimalPlaces (value, decimals) {\n+ return value\n+ .split('.')\n+ .map((el, i) => (i === 1 ? el.slice(0, decimals) : el))\n+ .join('.');\n+}\n+\nexport const TokenCard = ({\nbalance,\nchildren,\n@@ -35,7 +43,9 @@ export const TokenCard = ({\n</div>\n<div className='token_balance'>\n{balance ? (\n- <span>{balance.toFixed(decimals)} </span>\n+ <span>\n+ {concatBalanceByDecimalPlaces(balance.toString(), decimals)}{' '}\n+ </span>\n) : showBalance ? (\n<Placeholder height={20} width={50} />\n) : null}\n",
        "chatgpt_cot": "Add getScryfallTokensForCard method, replace getTokensForCard references, and improve token handling in updatecards.js."
    },
    {
        "org_diff": "diff --git a/views/cube/cube_playtest.pug b/views/cube/cube_playtest.pug @@ -75,6 +75,6 @@ block cube_content\ninput#customDraftHiddenId(type='hidden', name='id')\ninput.btn.btn-success(type='submit',value='Save')\nbutton.btn.btn-secondary(type='button', data-dismiss='modal') Close\n- script(src='/js/packcraft.js')\ninclude ../react\nscript(src='/js/cube_playtest.bundle.js')\n+ script(src='/js/packcraft.js')\n",
        "org_msg": "Include packcraft script in correct order.",
        "sim_msg": "Bugfix addManager -> appManager typo",
        "sim_diff": "diff --git a/game.js b/game.js @@ -365,7 +365,7 @@ const _selectLoadout = index => {\nif (isNaN(id)) {\nid = contentId;\n}\n- selectedLoadoutObject = await world.addManager.addObject(id);\n+ selectedLoadoutObject = await world.appManager.addObject(id);\nif (selectedLoadoutObject.getComponents().some(component => component.type === 'use')) {\nif (selectedLoadoutObject.getPhysicsIds) {\n@@ -423,7 +423,7 @@ const _use = () => {\nstart_url = URL.createObjectURL(blob);\nstart_url += '/' + filename;\n}\n- world.addManager.addObject(start_url, null, deployMesh.position, deployMesh.quaternion, deployMesh.scale);\n+ world.appManager.addObject(start_url, null, deployMesh.position, deployMesh.quaternion, deployMesh.scale);\nweaponsManager.setMenu(0);\ncameraManager.requestPointerLock();\n@@ -441,7 +441,7 @@ const _use = () => {\nconst inventory = loginManager.getInventory();\nconst itemSpec = inventory[selectedItemIndex];\n- world.addManager.addObject(itemSpec.id, null, deployMesh.position, deployMesh.quaternion, deployMesh.scale);\n+ world.appManager.addObject(itemSpec.id, null, deployMesh.position, deployMesh.quaternion, deployMesh.scale);\nweaponsManager.setMenu(0);\ncameraManager.requestPointerLock();\n@@ -790,7 +790,7 @@ const _handleUpload = async (item, transform = null) => {\n}\nconst {position, quaternion} = transform;\n- world.addManager.addObject(u, position, quaternion, oneVector);\n+ world.appManager.addObject(u, position, quaternion, oneVector);\n};\n/* const bindUploadFileInput = uploadFileInput => {\nbindUploadFileButton(uploadFileInput, _handleUpload);\n@@ -1916,7 +1916,7 @@ const _loadItemSpec1 = async u => {\n}, {once: true});\n});\n- world.addManager.addObject(u, null, deployMesh.position, deployMesh.quaternion, deployMesh.scale);\n+ world.appManager.addObject(u, null, deployMesh.position, deployMesh.quaternion, deployMesh.scale);\nconst object = await p;\neditedObject = object;\n",
        "chatgpt_cot": "\"Include packcraft.js script in cube_playtest.pug file for functionality enhancement.\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -102,11 +102,11 @@ app.get('/', function(req, res)\nif(req.user) user_id = req.user._id;\nCube.find({\n'card_count':{$gt : 200},\n- $or:[ {'isListed':true}, {'owner':user_id} ]\n+ $or:[ {'isListed':true},{'isListed':null}, {'owner':user_id} ]\n}).sort({'date_updated': -1}).limit(12).exec(function(err, recents)\n{\nCube.find({\n- $or:[ {'isListed':true}, {'owner':user_id} ]\n+ $or:[ {'isListed':true},{'isListed':null}, {'owner':user_id} ]\n}).sort({'numDecks': -1}).limit(12).exec(function(err, drafted)\n{\nBlog.find({dev:'true'}).sort({'date': -1}).exec(function(err, blog)\n",
        "org_msg": "Fixed issue with unlisted cubes",
        "sim_msg": "Add datastore implementation.",
        "sim_diff": "diff --git a/assets/js/googlesitekit/datastore/user/user-info.js b/assets/js/googlesitekit/datastore/user/user-info.js @@ -37,6 +37,7 @@ const { createRegistrySelector } = Data;\nconst RECEIVE_CONNECT_URL = 'RECEIVE_CONNECT_URL';\nconst RECEIVE_USER_INFO = 'RECEIVE_USER_INFO';\nconst RECEIVE_USER_IS_VERIFIED = 'RECEIVE_USER_IS_VERIFIED';\n+const RECEIVE_USER_INPUT_STATE = 'RECEIVE_USER_INPUT_STATE';\nconst initialState = {\nconnectURL: undefined,\n@@ -110,6 +111,23 @@ export const actions = {\ntype: RECEIVE_USER_IS_VERIFIED,\n};\n},\n+\n+ /**\n+ * Stores the user input state in the datastore.\n+ *\n+ * @since n.e.x.t\n+ * @private\n+ *\n+ * @param {Object} userInputState User input state.\n+ * @return {Object} Redux-style action.\n+ */\n+ receiveUserInputState( userInputState ) {\n+ invariant( userInputState, 'userInputState is required.' );\n+ return {\n+ payload: { userInputState },\n+ type: RECEIVE_USER_INPUT_STATE,\n+ };\n+ },\n};\nexport const controls = {};\n@@ -137,6 +155,13 @@ export const reducer = ( state, { type, payload } ) => {\nverified,\n};\n}\n+ case RECEIVE_USER_INPUT_STATE: {\n+ const { userInputState } = payload;\n+ return {\n+ ...state,\n+ userInputState,\n+ };\n+ }\ndefault: {\nreturn state;\n}\n@@ -189,6 +214,21 @@ export const resolvers = {\nconst { verified } = global._googlesitekitUserData;\nyield actions.receiveUserIsVerified( verified );\n},\n+\n+ *getUserInputState() {\n+ const { select } = yield Data.commonActions.getRegistry();\n+\n+ if ( select( STORE_NAME ).getUserInputState() ) {\n+ return;\n+ }\n+\n+ if ( ! global._googlesitekitUserData ) {\n+ global.console.error( 'Could not load core/user info.' );\n+ return;\n+ }\n+ const { userInputState } = global._googlesitekitUserData;\n+ yield actions.receiveUserInputState( userInputState );\n+ },\n};\nexport const selectors = {\n@@ -320,6 +360,19 @@ export const selectors = {\nreturn verified;\n},\n+ /**\n+ * Gets the user input state.\n+ *\n+ * @since n.e.x.t\n+ *\n+ * @param {Object} state Data store's state.\n+ * @return {string} The user input state.\n+ */\n+ getUserInputState( state ) {\n+ const { userInputState } = state;\n+ return userInputState;\n+ },\n+\n};\nexport default {\n",
        "chatgpt_cot": "Fix query condition to include items with null 'isListed' value in Cube.find() method in app.js."
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -54,8 +54,8 @@ function getCardDetails(card) {\ndetails.display_image = util.getCardImageURL(card);\nreturn details;\n} else {\n- console.log(\"Could not find: \" + id);\n- return getPlaceholderCard(id);\n+ console.log(\"Could not find: \" + card.cardID);\n+ return getPlaceholderCard(card.cardID);\n};\n}\n",
        "org_msg": "fix uninitialized variable error in getCardDetails",
        "sim_msg": "Update fetchdata to skip over incomplete data",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -43,12 +43,14 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- var imagesrc = card.pack_cards[0].image_url;\n+ if(card.pack_cards.length > 0 && card.pack_cards[0].image_url) {\n+ var imagesrc = card.pack_cards[0].image_url;\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n+ }\n});\nreturn cards;\n",
        "chatgpt_cot": "Refactored error message in getCardDetails function to include correct card ID."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -106,7 +106,7 @@ function setCubeType(cube, carddb) {\nlet peasant = false;\nlet type = FORMATS.length - 1;\nfor (const card of cube.cards) {\n- if (pauper && !['legal', 'banned'].includes(carddb.cardFromId(card.cardID).legalities.Pauper)) {\n+ if (pauper && !cardIsLegal(carddb.cardFromId(card.cardID), 'Pauper')) {\npauper = false;\npeasant = true;\n}\n",
        "org_msg": "replaced inline legality check with method call",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "Refactor setCubeType function to use cardIsLegal helper function for pauper legality check. Fixes issue with pauper legality check in cubefn.js."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -466,10 +466,6 @@ function convertParsedCost(card, isExtra = false) {\nreturn [];\n}\n- if (!card.mana_cost) {\n- return [''];\n- }\n-\nlet parsedCost = [];\nif (typeof card.card_faces === 'undefined' || card.layout === 'flip') {\nparsedCost = card.mana_cost\n@@ -484,7 +480,7 @@ function convertParsedCost(card, isExtra = false) {\n.toLowerCase()\n.split('}{')\n.reverse();\n- } else if (card.card_faces[0].colors) {\n+ } else if (Array.isArray(card.card_faces) && card.card_faces[0].colors) {\nparsedCost = card.card_faces[0].mana_cost\n.substr(1, card.card_faces[0].mana_cost.length - 2)\n.toLowerCase()\n",
        "org_msg": "fixed DFC mana cost parsing",
        "sim_msg": "Serve additional card data",
        "sim_diff": "diff --git a/server/services/CardService.js b/server/services/CardService.js @@ -25,7 +25,7 @@ class CardService {\n_.each(result, card => {\nif(options && options.shortForm) {\n- cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'unicity', 'influence_cost', 'pack_cards');\n+ cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'element', 'unicity', 'influence_cost', 'influence_pool', 'pack_cards');\n} else {\ncards[card.id] = card;\n}\n",
        "chatgpt_cot": "Refactor convertParsedCost function to handle new card format. Remove unnecessary check for mana_cost existence and update condition for card_faces colors."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2520,11 +2520,9 @@ router.delete('/remove/:id', ensureAuth, function(req, res) {\nres.redirect('/' + req.params.id);\n}\n- let query = {\n- _id: req.params.id\n- };\n+ let query = build_id_query(req.params.id)\n- Cube.findOne(build_id_query(req.params.id), function(err, cube) {\n+ Cube.findOne(query, function(err, cube) {\nif (err || !cube || (cube.owner != req.user._id)) {\nreq.flash('danger', 'Cube not found');\nres.redirect('/404/');\n",
        "org_msg": "Fix ID generation in delete cube route",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Refactor cube_routes.js to use build_id_query function for query creation in delete route for better code organization and readability."
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -259,6 +259,7 @@ class FilterCollapse extends Component {\nsuper(props);\nthis.state = {\n+ loading: false,\nadvancedOpen: false,\nfilterInput: this.props.defaultFilterText || '',\n...fromEntries(allFields.map((n) => [n, ''])),\n@@ -277,7 +278,13 @@ class FilterCollapse extends Component {\n}\ncomponentDidMount() {\n- this.updateFilters();\n+ const defaultFilter = Query.get('f', '');\n+ this.setState({ filterInput: defaultFilter });\n+ this.updateFilters(defaultFilter);\n+ }\n+\n+ componentDidUpdate() {\n+ Query.set('f', this.state.filterInput);\n}\ntoggleAdvanced() {\n@@ -286,7 +293,7 @@ class FilterCollapse extends Component {\n});\n}\n- applyAdvanced() {\n+ async applyAdvanced() {\n// Advanced Filter change. Render to filter input.\nconst tokens = [];\nfor (const name of allFields) {\n@@ -316,10 +323,10 @@ class FilterCollapse extends Component {\nadvancedOpen: false,\nfilterInput,\n});\n- this.updateFilters(filterInput);\n+ await this.updateFilters(filterInput);\n}\n- updateFilters(overrideFilter) {\n+ async updateFilters(overrideFilter) {\nconst filterInput = typeof overrideFilter === 'undefined' ? this.state.filterInput : overrideFilter;\nif (filterInput === '') {\nthis.props.setFilter([], '');\n@@ -333,8 +340,9 @@ class FilterCollapse extends Component {\nif (tokens.length > 0) {\nconst filters = [Filter.parseTokens(tokens)];\n// TODO: Copy to advanced filter boxes.\n- this.props.setFilter(filters, filterInput);\n- Query.set('f', filterInput);\n+ this.setState({ loading: true });\n+ await this.props.setFilter(filters, filterInput);\n+ this.setState({ loading: false });\n}\n}\n@@ -348,15 +356,15 @@ class FilterCollapse extends Component {\n});\n}\n- handleApply(event) {\n+ async handleApply(event) {\nevent.preventDefault();\n- this.updateFilters();\n+ await this.updateFilters();\n}\n- handleKeyDown(event) {\n+ async handleKeyDown(event) {\nif (event.keyCode === 13 /* ENTER */) {\nevent.preventDefault();\n- this.updateFilters();\n+ await this.updateFilters();\n}\n}\n@@ -368,7 +376,7 @@ class FilterCollapse extends Component {\nrender() {\nconst { filter, setFilter, numCards, numShown, useQuery, defaultFilterText, ...props } = this.props;\n- const { filterInput, advancedOpen } = this.state;\n+ const { loading, filterInput, advancedOpen } = this.state;\nconst tokens = [];\nconst valid = Filter.tokenizeInput(filterInput, tokens) && Filter.verifyTokens(tokens);\nconst appliedText =\n@@ -398,7 +406,7 @@ class FilterCollapse extends Component {\nonKeyDown={this.handleKeyDown}\n/>\n<InputGroupAddon addonType=\"append\">\n- <LoadingButton color=\"success\" className=\"square-left\" onClick={this.handleApply}>\n+ <LoadingButton color=\"success\" className=\"square-left\" onClick={this.handleApply} loading={loading}>\nApply\n</LoadingButton>\n</InputGroupAddon>\n",
        "org_msg": "Fix loading button.",
        "sim_msg": "Add useEffect to filters",
        "sim_diff": "diff --git a/components/table-list/index.js b/components/table-list/index.js @@ -20,7 +20,7 @@ const getPropsToFilter = (list, filters) => {\nconst TableList = ({title, subtitle, list, textFilter, filters, cols, selected, handleSelect}) => {\nconst [text, setText] = useState('')\n- const [propsFilter] = useState(filters ? getPropsToFilter(list, filters) : null)\n+ const [propsFilter, setPropsFilter] = useState()\nconst [selectedPropsFilter, setSelectedPropsFilter] = useState({})\nconst [filteredList, setFilteredList] = useState([])\n@@ -47,6 +47,13 @@ const TableList = ({title, subtitle, list, textFilter, filters, cols, selected,\nsetSelectedPropsFilter(propsFilter)\n}\n+ useEffect(() => {\n+ if (filters) {\n+ const propsFilter = getPropsToFilter(list, filters)\n+ setPropsFilter(propsFilter)\n+ }\n+ }, [list, filters])\n+\nuseEffect(() => {\nconst filteredList = list.filter(item => {\nreturn (\n",
        "chatgpt_cot": "\"Add loading state to FilterCollapse component and updateFilters method, apply async/await to updateFilters and handleApply methods for better performance.\""
    },
    {
        "org_diff": "diff --git a/src/components/TokenAnalysis.js b/src/components/TokenAnalysis.js @@ -7,17 +7,38 @@ import withAutocard from './WithAutocard';\nconst AutocardLink = withAutocard('a');\n+const compareCards = (x, y) => {\n+ if (x.name === y.name) {\n+ return 0;\n+ } else {\n+ return x.name < y.name ? -1 : 1;\n+ }\n+}\n+\n+const compareTokens = (x, y) => compareCards(x[0], y[0]);\n+\n+const sortTokens = tokens => [...tokens].sort(compareTokens);\n+const sortCards = cards => [...cards].sort(compareCards);\n+\n+const dedupeCards = cards => {\n+ const map = new Map();\n+ for (const card of [...cards].reverse()) {\n+ map.set(card.name, card);\n+ }\n+ return [...map.values()];\n+}\n+\nconst TokenAnalysis = ({ tokens }) =>\n<Row>\n- {tokens.map(token =>\n- <Col key={token[0]._id} xs={6} md={4} lg={3}>\n- <Card className=\"mb-2\">\n- <a href={Affiliate.getTCGLink({details:token[0]})}>\n- <img src={token[0].image_normal} className='card-img-top' />\n+ {sortTokens(tokens).map(([token, tokenCards]) =>\n+ <Col key={token._id} xs={6} md={4} lg={3}>\n+ <Card className=\"mb-3\">\n+ <a href={Affiliate.getTCGLink({ details: token })}>\n+ <img src={token.image_normal} className='card-img-top' />\n</a>\n<CardBody>\n<p className=\"card-text\">\n- {token[1].map(card =>\n+ {dedupeCards(sortCards(tokenCards)).map(card =>\n<>\n<AutocardLink\nkey={card.name}\n",
        "org_msg": "Sort and deduplicate tokens.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "fix sorting issue on TokenAnalysis. The modification adds new functions to sort, dedupe, and compare cards, which solves the sorting issue on TokenAnalysis."
    },
    {
        "org_diff": "diff --git a/src/analytics/Suggestions.js b/src/analytics/Suggestions.js @@ -79,8 +79,8 @@ const Suggestions = ({ adds, cuts, loading, cube, filter }) => {\n<Card>\n<CardHeader>\n<ListGroupItemHeading>Recommended Additions</ListGroupItemHeading>\n+ <input className=\"mr-2\" type=\"checkbox\" checked={maybeOnly} onClick={toggleMaybeOnly} />\n<Label for=\"toggleMaybeboard\">Show cards from my Maybeboard only.</Label>\n- <input type=\"checkbox\" checked={maybeOnly} onClick={toggleMaybeOnly} />\n</CardHeader>\n<ListGroup>\n{loading && (\n",
        "org_msg": "Fix recomender styling",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "\"Add checkbox to toggle maybeboard cards in Suggestions.js\""
    },
    {
        "org_diff": "diff --git a/public/css/editcube.css b/public/css/editcube.css .invalid-filter:focus {\ncolor: red;\n}\n+\n+#groupContextModalAreaContainer {\n+ overflow: scroll;\n+ height: 41.6em;\n+}\n",
        "org_msg": "limit size of card list in groupcontextmodalarea and scroll overflow",
        "sim_msg": "Fixed search box appaerance in Firefox",
        "sim_diff": "diff --git a/src/web/stylesheets/utils/_overrides.css b/src/web/stylesheets/utils/_overrides.css @@ -82,14 +82,6 @@ a:focus {\nborder-color: var(--btn-success-hover-border-colour);\n}\n-input[type=\"search\"] {\n- appearance: searchfield;\n-}\n-\n-input[type=\"search\"]::-webkit-search-cancel-button {\n- appearance: searchfield-cancel-button;\n-}\n-\nselect.form-control:not([size]):not([multiple]), select.custom-file-control:not([size]):not([multiple]) {\nheight: unset !important;\n}\n",
        "chatgpt_cot": "Add overflow and height properties to #groupContextModalAreaContainer to enable scrolling within modal."
    },
    {
        "org_diff": "diff --git a/src/components/Markdown.js b/src/components/Markdown.js @@ -78,7 +78,7 @@ const renderCode = (node) => {\nreturn (\n<SyntaxHighlighter language={node.language || 'text'} style={style}>\n- {node.value}\n+ {node.value || ''}\n</SyntaxHighlighter>\n);\n};\n",
        "org_msg": "fixed syntax highlighter crash",
        "sim_msg": "capture http links",
        "sim_diff": "diff --git a/components/system/components/Markdown.js b/components/system/components/Markdown.js @@ -11,7 +11,8 @@ export const Markdown = ({ md, options }) => {\n{\nunified()\n.use(parse)\n- .use(linkifyRegex(/[@#](\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g))\n+ .use(linkifyRegex(/[@#](\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g)) // @user #tag\n+ .use(linkifyRegex(/^(https?):\\/\\/[^\\s$.?#].[^\\s]*$/gm)) // http(s) links\n.use(remark2react, options)\n.processSync(md).result\n}\n",
        "chatgpt_cot": "Fix rendering issue for code block in Markdown component"
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -22,7 +22,7 @@ let Draft = require('../models/draft');\nlet CardRating = require('../models/cardrating');\n// Add Submit POST Route\n-router.post('/add',ensureAuth, function(req,res,next)\n+router.post('/add',ensureAuth, function(req,res)\n{\nif(req.body.name.length < 5)\n{\n@@ -592,7 +592,7 @@ router.get('/analysis/:id', function(req, res)\n});\n});\n-router.post('/importcubetutor/:id',ensureAuth, function(req,res,next) {\n+router.post('/importcubetutor/:id',ensureAuth, function(req,res) {\nCube.findById(req.params.id, function(err,cube)\n{\nif(err)\n@@ -733,7 +733,11 @@ router.post('/importcubetutor/:id',ensureAuth, function(req,res,next) {\n{\nmissing:missing,\nadded:JSON.stringify(added),\n- cube:cube\n+ cube:cube,\n+ user:{\n+ id:req.user._id,\n+ username:req.user.username\n+ }\n});\n}\nelse\n@@ -766,8 +770,9 @@ router.post('/importcubetutor/:id',ensureAuth, function(req,res,next) {\n});\n});\n-router.post('/bulkupload/:id',ensureAuth, function(req,res,next)\n+router.post('/bulkupload/:id',ensureAuth, function(req,res)\n{\n+ console.log(res);\nCube.findById(req.params.id, function(err,cube)\n{\nif(err)\n@@ -789,7 +794,7 @@ router.post('/bulkupload/:id',ensureAuth, function(req,res,next)\n});\n});\n-router.post('/bulkuploadfile/:id',ensureAuth, function(req,res,next)\n+router.post('/bulkuploadfile/:id',ensureAuth, function(req,res)\n{\nif(!req.files)\n{\n@@ -912,7 +917,11 @@ function bulkuploadCSV(req, res, cards, cube) {\n{\nmissing:missing,\nadded:JSON.stringify(added),\n- cube:cube\n+ cube:cube,\n+ user:{\n+ id:req.user._id,\n+ username:req.user.username\n+ }\n});\n}\nelse\n@@ -1067,7 +1076,11 @@ function bulkUpload(req, res, list, cube) {\n{\nmissing:missing,\nadded:JSON.stringify(added),\n- cube:cube\n+ cube:cube,\n+ user:{\n+ id:req.user._id,\n+ username:req.user.username\n+ }\n});\n}\nelse\n@@ -1548,7 +1561,7 @@ router.get('/draft/:id', function(req, res)\n});\n// Edit Submit POST Route\n-router.post('/editoverview/:id',ensureAuth, function(req,res,next)\n+router.post('/editoverview/:id',ensureAuth, function(req,res)\n{\nreq.body.html = cubefn.sanitize(req.body.html);\nCube.findById(req.params.id, function(err, cube)\n@@ -1607,7 +1620,7 @@ router.post('/editoverview/:id',ensureAuth, function(req,res,next)\n});\n// Edit Submit POST Route\n-router.post('/edit/:id',ensureAuth, function(req,res,next)\n+router.post('/edit/:id',ensureAuth, function(req,res)\n{\nreq.body.blog = cubefn.sanitize(req.body.blog);\nCube.findById(req.params.id, function(err, cube)\n",
        "org_msg": "Fixed: Bulk upload logged in renders correctly",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "\"Fix user authentication issue for bulk upload and import cubetutor routes by including user details in the response.\""
    },
    {
        "org_diff": "diff --git a/src/components/CardModal.js b/src/components/CardModal.js @@ -15,15 +15,15 @@ import {\nRow,\n} from 'reactstrap';\n-import Affiliate from '../utils/Affiliate';\n-import { getLabels } from '../utils/Sort';\n+import Affiliate from 'utils/Affiliate';\n+import { getLabels } from 'utils/Sort';\n-import ButtonLink from './ButtonLink';\n-import { ColorChecksAddon } from './ColorCheck';\n-import LoadingButton from './LoadingButton';\n-import FoilCardImage from './FoilCardImage';\n-import TagInput from './TagInput';\n-import TextBadge from './TextBadge';\n+import ButtonLink from 'components/ButtonLink';\n+import { ColorChecksAddon } from 'components/ColorCheck';\n+import LoadingButton from 'components/LoadingButton';\n+import FoilCardImage from 'components/FoilCardImage';\n+import TagInput from 'components/TagInput';\n+import TextBadge from 'components/TextBadge';\nconst CardModal = ({\ncard,\n",
        "org_msg": "Update import format.",
        "sim_msg": "Fix UserCard propTypes",
        "sim_diff": "diff --git a/src/components/UserCard.js b/src/components/UserCard.js @@ -5,27 +5,22 @@ import FollowButton from '../widgets/FollowButton';\nimport Avatar from '../components/Avatar';\nimport './UserCard.less';\n-const UserCard = ({ username, alt }) =>\n- (<div className=\"UserCard\">\n+const UserCard = ({ username, alt }) => (\n+ <div className=\"UserCard\">\n<div className=\"UserCard__left\">\n<Link to={`/@${username}`}>\n<Avatar username={username} size={40} />\n</Link>\n- <Link to={`/@${username}`}>\n- {username}\n- </Link>\n- {alt &&\n- <span className=\"UserCard__alt\">\n- {alt}\n- </span>\n- }\n+ <Link to={`/@${username}`}>{username}</Link>\n+ {alt && <span className=\"UserCard__alt\">{alt}</span>}\n</div>\n<FollowButton username={username} />\n- </div>);\n+ </div>\n+);\nUserCard.propTypes = {\nusername: PropTypes.string.isRequired,\n- alt: PropTypes.oneOf(PropTypes.string, PropTypes.bool),\n+ alt: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n};\nUserCard.defaultProps = {\n",
        "chatgpt_cot": "\"Refactor import paths for components in CardModal.js\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -141,16 +141,16 @@ test('generateShortId returns a valid short ID with profanity', async () => {\nconst queryMock = jest.fn().mockReturnValue(queryMockPromise);\nconst initialCubeFind = Cube.find;\nCube.find = queryMock;\n- const initialHasProfanity = util.has_profanity;\n+ const initialHasProfanity = util.hasProfanity;\nconst mockHasProfanity = jest\n.fn()\n.mockReturnValue(false)\n.mockReturnValueOnce(true);\n- util.has_profanity = mockHasProfanity;\n+ util.hasProfanity = mockHasProfanity;\nconst result = await cubefn.generateShortId();\nexpect(result).toBe('1z');\nCube.find = initialCubeFind;\n- util.has_profanity = initialHasProfanity;\n+ util.hasProfanity = initialHasProfanity;\n});\ntest('getBasics returns the expected set of basic lands', () => {\n",
        "org_msg": "has_profanity -> hasProfanity in cubefn tests",
        "sim_msg": "test(tostring): throws if provided empty string",
        "sim_diff": "diff --git a/test/test.js b/test/test.js @@ -27,3 +27,9 @@ test('It throws if first argument is not an HTML string', async t => {\nawait renderString(false)\n}, {instanceOf: TypeError, message: 'first argument must be an HTML string, received false'})\n})\n+\n+test('It throws if first argument is an empty string', async t => {\n+ await t.throwsAsync(async () => {\n+ await renderString('')\n+ }, {instanceOf: RangeError, message: 'received empty string'})\n+})\n",
        "chatgpt_cot": "fix: update variable name and method call in cubefn.test.js"
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/draftutil.test.js b/__tests__/serverjs/draftutil.test.js @@ -34,7 +34,11 @@ test(\"it can get bots with the correct properties\", () => {\n});\ntest(\"it returns the index of the first instance of a tag from a list of cards\", () => {\n- const cards = [{}, {}, { tags: [\"test\"] }, { tags: [\"test\"] }];\n+ const cards = [{}, {}, {\n+ tags: [\"test\"]\n+ }, {\n+ tags: [\"test\"]\n+ }];\nconst tag = \"TEST\";\nconst result = methods.indexOfTag(cards, tag);\n@@ -50,7 +54,11 @@ test(\"it returns -1 if a tag is not found in a list of cards\", () => {\n});\ntest(\"getCardRatings returns a mapping of card names to values\", () => {\n- var dummyModel = {\"value\": 1, \"picks\": 1, \"name\": \"Giant Growth\"};\n+ var dummyModel = {\n+ \"value\": 1,\n+ \"picks\": 1,\n+ \"name\": \"Giant Growth\"\n+ };\nvar expected = {};\nexpected[dummyModel.name] = dummyModel.value;\nCardRating.find.yields(null, [dummyModel]);\n",
        "org_msg": "beautify tests",
        "sim_msg": "Add some basic API functions",
        "sim_diff": "diff --git a/test/boardTests.js b/test/boardTests.js @@ -15,7 +15,7 @@ describe('Board', () => {\n})\nit('should have no capture information', () => {\nlet board = new Board()\n- assert.deepEqual(board.captures, {'-1': 0, '1': 0})\n+ assert.deepEqual(board.captures, [0, 0])\n})\nit('should have no markups and lines', () => {\nlet board = new Board()\n@@ -244,8 +244,8 @@ describe('Board', () => {\nwhite.forEach(x => board.set(x, -1))\nlet move = board.makeMove(1, [3, 1])\n- assert.equal(move.captures[-1], 0)\n- assert.equal(move.captures[1], white.length)\n+ assert.equal(move.captures[1], 0)\n+ assert.equal(move.captures[0], white.length)\nboard = new Board()\n@@ -253,8 +253,8 @@ describe('Board', () => {\nmove = board.makeMove(1, [1, 0])\n- assert.equal(move.captures[-1], 0)\n- assert.equal(move.captures[1], 1)\n+ assert.equal(move.captures[1], 0)\n+ assert.equal(move.captures[0], 1)\n})\nit('should handle suicide correctly', () => {\nlet board = new Board()\n",
        "chatgpt_cot": "Refactor test cases to improve code readability and maintainability. Add proper formatting and structure to the test cases for better understanding."
    },
    {
        "org_diff": "diff --git a/src/analytics/HyperGeom.js b/src/analytics/HyperGeom.js @@ -56,16 +56,35 @@ const HyperGeom = () => {\nconst [lte, setlte] = useState('');\nconst [et, setet] = useState('');\n- const factorial = (n) => {\n- let total = 1;\n+ const combination = (n, r) => {\n+ const topArray = [];\n+ const botArray = [];\n+ const comboArray = [];\n+\nfor (let i = 1; i <= n; i++) {\n- total *= i;\n+ topArray.push(i);\n+ }\n+ for (let i = 1; i <= r; i++) {\n+ botArray.push(i);\n+ }\n+ for (let i = 1; i <= n - r; i++) {\n+ comboArray.push(i);\n}\n- return total;\n- };\n- const combination = (n, r) => {\n- return factorial(n) / (factorial(r) * factorial(n - r));\n+ let sum = 1;\n+\n+ for (let i = 0; i < Math.max(topArray.length, botArray.length, comboArray.length); i++) {\n+ if (topArray[i]) {\n+ sum *= topArray[i];\n+ }\n+ if (botArray[i]) {\n+ sum /= botArray[i];\n+ }\n+ if (comboArray[i]) {\n+ sum /= comboArray[i];\n+ }\n+ }\n+ return sum;\n};\nconst hyp = (N, S, n, s) => {\n@@ -178,8 +197,6 @@ const HyperGeom = () => {\n});\nconst length = possible.length > 0 ? Math.max(...possible.map((x) => parseInt(x, 10))) + 1 : 0;\n- console.log(length);\n-\nconst plotPopSize = (dataset, size) => {\nconst res = [];\nfor (let i = 0; i < size; i++) {\n@@ -192,7 +209,6 @@ const HyperGeom = () => {\nfor (let i = 0; i < size; i++) {\nres.push(calculate(dataset.populationSize, i, dataset.sampleSize, dataset.sampleSuccesses).greaterThanEqual);\n}\n- console.log(res);\nreturn res;\n};\nconst plotSampleSize = (dataset, size) => {\n@@ -234,7 +250,6 @@ const HyperGeom = () => {\ndata: plotData(dataset, length),\n})),\n};\n- console.log(plotdata);\nreturn (\n<>\n",
        "org_msg": "Fixed hyper geom for large numbers",
        "sim_msg": "Pass dataValue and dataLabel to dynamically create 100% data",
        "sim_diff": "diff --git a/packages/component-library/src/HorizontalBarChart/HorizontalBarChart.js b/packages/component-library/src/HorizontalBarChart/HorizontalBarChart.js @@ -60,7 +60,7 @@ const HorizontalBarChart = ({\nreturn colorScheme;\n};\n- const transformDatato100 = dataset => {\n+ const transformDatato100 = (dataset, value, label) => {\nconst totals = dataset[0].map((currentData, i) => {\nreturn dataset.reduce((memo, curr) => {\nreturn memo + curr[i].y;\n@@ -68,7 +68,10 @@ const HorizontalBarChart = ({\n});\nconst newData = dataset.map(indvData => {\nreturn indvData.map((datum, i) => {\n- const newObj = { x: datum.x, y: datum.y / totals[i] };\n+ const newObj = {\n+ [`${value}`]: datum[value],\n+ [`${label}`]: datum[label] / totals[i]\n+ };\nreturn newObj;\n});\n});\n@@ -191,7 +194,7 @@ const HorizontalBarChart = ({\n)}\n{stacked && (\n<VictoryStack colorScale={categoricalColors(data.length)}>\n- {transformDatato100(data).map((arr, i) => {\n+ {transformDatato100(data, dataValue, dataLabel).map((arr, i) => {\nreturn (\n<VictoryBar\ndomainPadding={0}\n@@ -205,7 +208,7 @@ const HorizontalBarChart = ({\n</VictoryStack>\n)}\n{stacked &&\n- transformDatato100(data).map((arr, i) => {\n+ transformDatato100(data, dataValue, dataLabel).map((arr, i) => {\nreturn (\n<VictoryAxis\nstyle={{\n",
        "chatgpt_cot": "Add combination method, remove factorial method, and clean up console logs in HyperGeom.js."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1192,6 +1192,7 @@ router.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\ndeck.comments = [];\ndeck.cubename = cube.name;\ndeck.cube = cube._id;\n+ deck.cubeOWner = cube.owner;\ndeck.seats = [\n{\nuserid: req.user._id,\n@@ -1663,6 +1664,7 @@ router.post('/startsealed/:id', body('packs').toInt({ min: 1, max: 16 }), body('\nconst deck = new Deck();\ndeck.cube = cube._id;\n+ deck.cubeOWner = cube.owner;\ndeck.date = Date.now();\ndeck.comments = [];\ndeck.cubename = cube.name;\n@@ -2792,6 +2794,7 @@ router.post('/submitdeck/:id', body('skipDeckbuilder').toBoolean(), async (req,\nconst deck = new Deck();\ndeck.cube = draft.cube;\n+ deck.cubeOWner = cube.owner;\ndeck.date = Date.now();\ndeck.comments = [];\ndeck.draft = draft._id;\n@@ -2959,6 +2962,7 @@ router.get('/rebuild/:id/:index', ensureAuth, async (req, res) => {\nconst deck = new Deck();\ndeck.cube = base.cube;\n+ deck.cubeOWner = base.owner;\ndeck.date = Date.now();\ndeck.cubename = cube.name;\ndeck.comments = [];\n",
        "org_msg": "correctly populate new field",
        "sim_msg": "Import from public decks as well",
        "sim_diff": "diff --git a/client/DeckEditor.jsx b/client/DeckEditor.jsx @@ -238,17 +238,26 @@ class InnerDeckEditor extends React.Component {\nimportDeck() {\n$(findDOMNode(this.refs.modal)).modal('hide');\n- let strainUrl = document.getElementById('strainUrl').value;\n+ let importUrl = document.getElementById('importUrl').value;\nlet apiUrl = 'https://api.fiveringsdb.com/';\n- let path = 'strains';\n+ let strainPath = 'strains';\n+ let deckPath = 'decks';\nlet deckResponse = {};\n- let strainId = String(strainUrl).split('/')[4];\n+ let importId = String(importUrl).split('/')[4];\n+ let selector = String(importUrl).split('/')[3];\n+\n+ let path = '';\n+ if(selector === 'decks') {\n+ path = deckPath;\n+ } else if(selector === 'strains') {\n+ path = strainPath;\n+ }\n$.ajax({\ntype: 'GET',\n- url: apiUrl + path + '/' + strainId,\n+ url: apiUrl + path + '/' + importId,\ndataType: 'json',\nasync: false,\nsuccess: function(data) {\n@@ -256,12 +265,26 @@ class InnerDeckEditor extends React.Component {\n}\n});\n+ let deckClan = '';\n+ let deckAlliance = '';\n+ let deckName = '';\n+ let deckList = '';\n+ let cardList = '';\n+\n+\nif(deckResponse.success) {\nlet deckRecord = deckResponse.record;\n- let deckClan = deckRecord.head.clan;\n- let deckName = deckRecord.head.name;\n- let deckList = deckRecord.head.cards;\n- let cardList = '';\n+ if(selector === 'decks') {\n+ deckClan = deckRecord.primary_clan;\n+ deckAlliance = deckRecord.secondary_clan;\n+ deckName = deckRecord.name;\n+ deckList = deckRecord.cards;\n+ } else if(selector === 'strains') {\n+ deckClan = deckRecord.head.primary_clan;\n+ deckAlliance = deckRecord.head.secondary_clan;\n+ deckName = deckRecord.head.name;\n+ deckList = deckRecord.head.cards;\n+ }\nlet deck = this.copyDeck(this.state.deck);\n@@ -272,12 +295,14 @@ class InnerDeckEditor extends React.Component {\ndeck.faction = this.props.factions['crab'];\n}\n+ if(deckAlliance) {\n+ deck.alliance = this.props.factions[deckAlliance];\n+ } else {\n+ deck.alliance = this.props.factions['crab'];\n+ }\n+\n_.each(deckList, (count, card) => {\ncardList += count + ' ' + this.props.cards[card].name + '\\n';\n- let allianceClan = this.props.cards[card].clan;\n- if(allianceClan !== 'neutral' && allianceClan !== deckClan) {\n- deck.alliance = this.props.factions[this.props.cards[card].clan];\n- }\n});\n//Duplicate onCardListChange to get this working correctly\n@@ -361,7 +386,7 @@ class InnerDeckEditor extends React.Component {\n<h4 className='modal-title'>Provide Permalink</h4>\n</div>\n<div className='modal-body'>\n- <Input name='strainUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n+ <Input name='importUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n<div className='col-sm-1'>\n<button className='btn btn-default' onClick={ this.importDeck.bind(this) }>Import</button>\n</div>\n",
        "chatgpt_cot": "Add cube owner to deck object in cube_routes.js for better data organization and association with cube owner."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.test.js b/__tests__/serverjs/updatecards.test.js @@ -5,7 +5,6 @@ const updatecards = require('../../serverjs/updatecards');\nconst carddb = require('../../serverjs/cards');\nconst examplecards = require('../../fixtures/examplecards');\nconst cardutil = require('../../dist/util/Card.js');\n-const fs = require('fs');\nconst cardsFixturePath = 'fixtures/cards_small.json';\n",
        "org_msg": "Removed duplicated line",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Remove unnecessary import and update file paths for fixtures in updatecards.test.js."
    },
    {
        "org_diff": "diff --git a/src/components/CubeOverviewModal.js b/src/components/CubeOverviewModal.js @@ -247,7 +247,8 @@ class CubeOverviewModal extends Component {\n<Row>\n<Col>\n<FormGroup tag=\"fieldset\">\n- {['Vintage', 'Legacy+', 'Legacy', 'Modern', 'Pioneer', 'Historic', 'Standard', 'Set'].map((label) => (\n+ {['Vintage', 'Legacy+', 'Legacy', 'Modern', 'Pioneer', 'Historic', 'Standard', 'Set'].map(\n+ (label) => (\n<FormGroup check key={label}>\n<Label check>\n<Input\n@@ -261,7 +262,8 @@ class CubeOverviewModal extends Component {\n{label}\n</Label>\n</FormGroup>\n- ))}\n+ ),\n+ )}\n</FormGroup>\n</Col>\n<Col>\n",
        "org_msg": "Now Prettified.",
        "sim_msg": "fix(vue3): correctly reference a vue method",
        "sim_diff": "diff --git a/ui/src/components/carousel/QCarousel.js b/ui/src/components/carousel/QCarousel.js @@ -239,7 +239,7 @@ export default defineComponent({\nclass: this.classes,\nstyle: this.style\n}, [\n- this.withDirectives(node, this.panelDirectives)\n+ withDirectives(node, this.panelDirectives)\n].concat(this.__getContent()))\n}\n},\n",
        "chatgpt_cot": "\"Fix mapping issue in CubeOverviewModal.js by correcting syntax for mapping array of labels to form group check boxes.\""
    },
    {
        "org_diff": "diff --git a/src/analytics/Suggestions.js b/src/analytics/Suggestions.js @@ -74,7 +74,7 @@ const Suggestions = ({ cards, cube }) => {\n</CardHeader>\n<CardBody>\n<ListGroup>\n- {loading ? <em>Loading...</em> : adds.map((add) => <ListGroupItem key={add.name}>{add.name}</ListGroupItem>)}\n+ {loading ? <em>Loading...</em> : adds.map((add) => <ListGroupItem key={add.cardID}>{add.details.name}</ListGroupItem>)}\n</ListGroup>\n</CardBody>\n</Card>\n",
        "org_msg": "fix name display",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Refactor Suggestions.js to display add details. Changed key to add.cardID and displayed add details.name in ListGroupItem."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -36,17 +36,17 @@ function botCardRating(botColors, card) {\n// of picking it by a factor of (100 * 10**(x/400)) - 100 percent\nif (isLand) {\nif ((subset || contains) && isFetch) {\n- rating += 191; // Increase value of picking by roughly 200%\n+ rating += 280; // Increase value of picking by roughly 400%\n} else if (subset || contains) {\nswitch (colors.length) {\ncase 1:\n- rating += 176; // Increase value of picking by roughly 175%\n+ rating += 191; // Increase value of picking by roughly 200%\nbreak;\ncase 2:\n- rating += 218; // Increase value of picking by roughly 250%\n+ rating += 262; // Increase value of picking by roughly 350%\nbreak;\ndefault:\n- rating += 265; // Increase value of picking by roughly 360%\n+ rating += 311; // Increase value of picking by roughly 500%\nbreak;\n}\n} else if (overlap && isFetch) {\n",
        "org_msg": "Make lands more valuable.",
        "sim_msg": "override this in updatePresence",
        "sim_diff": "diff --git a/src/bot.js b/src/bot.js @@ -289,7 +289,7 @@ class Genesis {\nconst self = this;\nsetInterval(checkPrivateRooms, self.channelTimeout, self, self.shardId);\n- setInterval(this.updatePresence, 60000);\n+ setInterval(this.updatePresence, 60000, this);\n}\n/**\n@@ -393,8 +393,8 @@ class Genesis {\n}\n}\n- async updatePresence() {\n- const cetusState = (await this.caches['pc'].getDataJson()).cetusCycle;\n+ async updatePresence(this) {\n+ const cetusState = (await this.caches.pc.getDataJson()).cetusCycle;\nif (cetusState) {\nthis.client.user.setPresence({\nstatus: 'online',\n",
        "chatgpt_cot": "\"Adjust card rating values for land and color subset in Draft.js\""
    },
    {
        "org_diff": "diff --git a/src/analytics/Chart.js b/src/analytics/Chart.js @@ -21,9 +21,10 @@ const Chart = ({ cards, characteristics }) => {\nColorless: '#ADADAD',\nMulticolored: '#DBC467',\n};\n+ const colors = [...Object.values(colorMap), '#000000'];\n- const getColor = (label) => {\n- return colorMap[label] ?? '#000000';\n+ const getColor = (label, index) => {\n+ return colorMap[label] ?? colors[index % colors.length];\n};\nconst options = {\n@@ -60,11 +61,11 @@ const Chart = ({ cards, characteristics }) => {\nconst labels = getLabels(cards, characteristic);\nconst data = {\nlabels,\n- datasets: Object.keys(groups).map((key) => ({\n+ datasets: Object.keys(groups).map((key, index) => ({\nlabel: key,\ndata: labels.map((label) => groups[key].filter((card) => cardIsLabel(card, label, characteristic)).length),\n- backgroundColor: getColor(key),\n- borderColor: getColor(key),\n+ backgroundColor: getColor(key, index),\n+ borderColor: getColor(key, index),\n})),\n};\n",
        "org_msg": "Add color to chart groupings.",
        "sim_msg": "Update Scatterplot story per review comments.",
        "sim_diff": "diff --git a/packages/component-library/stories/Scatterplot.story.js b/packages/component-library/stories/Scatterplot.story.js @@ -56,7 +56,7 @@ const customLegend = legendData => {\nmargin-left: 5px;\n`}\n>\n- Students\n+ Experience\n</span>\n</span>\n</legend>\n@@ -106,8 +106,7 @@ export default () =>\n{ experience: 17, students: 25, series: \"elementary\" },\n{ experience: 18, students: 26, series: \"elementary\" }\n];\n- const sampleDataSeries = \"series\";\n- const sampledataSeriesLabel = [\n+ const sampleDataSeriesLabel = [\n{ category: \"high\", label: \"High School\" },\n{ category: \"middle\", label: \"Middle School\" },\n{ category: \"elementary\", label: \"Elementary School\" }\n@@ -143,14 +142,10 @@ export default () =>\n);\nconst dataKey = text(\"Data key\", \"experience\", GROUP_IDS.DATA);\nconst dataValue = text(\"Data value\", \"students\", GROUP_IDS.DATA);\n- const dataSeries = text(\n- \"Data series\",\n- sampleDataSeries,\n- GROUP_IDS.DATA\n- );\n+ const dataSeries = text(\"Data series\", \"series\", GROUP_IDS.DATA);\nconst dataSeriesLabel = object(\n\"Data series labels\",\n- sampledataSeriesLabel,\n+ sampleDataSeriesLabel,\nGROUP_IDS.DATA\n);\nconst data = object(\"Data\", sampleData, GROUP_IDS.DATA);\n@@ -214,8 +209,7 @@ export default () =>\n{ experience: 17, students: 25, series: \"elementary\" },\n{ experience: 18, students: 26, series: \"elementary\" }\n];\n- const sampleDataSeries = \"series\";\n- const sampledataSeriesLabel = [\n+ const sampleDataSeriesLabel = [\n{ category: \"high\", label: \"High School\" },\n{ category: \"middle\", label: \"Middle School\" },\n{ category: \"elementary\", label: \"Elementary School\" }\n@@ -252,14 +246,10 @@ export default () =>\nconst dataKey = text(\"Data key\", \"experience\", GROUP_IDS.DATA);\nconst dataValue = text(\"Data value\", \"students\", GROUP_IDS.DATA);\n- const dataSeries = text(\n- \"Data series\",\n- sampleDataSeries,\n- GROUP_IDS.DATA\n- );\n+ const dataSeries = text(\"Data series\", \"series\", GROUP_IDS.DATA);\nconst dataSeriesLabel = object(\n\"Data Series Labels\",\n- sampledataSeriesLabel,\n+ sampleDataSeriesLabel,\nGROUP_IDS.DATA\n);\nconst data = object(\"Data\", sampleData, GROUP_IDS.DATA);\n@@ -358,18 +348,8 @@ export default () =>\n];\nconst xLabel = text(\"X-axis label\", \"X\", GROUP_IDS.LABELS);\nconst yLabel = text(\"Y-axis label\", \"Y\", GROUP_IDS.LABELS);\n- // const dataKey = text(\"Data key\", \"x\", GROUP_IDS.DATA);\n- // const dataValue = text(\"Data value\", \"y\", GROUP_IDS.DATA);\nconst data = object(\"Data\", sampleData, GROUP_IDS.DATA);\n- return (\n- <Scatterplot\n- data={data}\n- // dataKey={dataKey}\n- // dataValue={dataValue}\n- xLabel={xLabel}\n- yLabel={yLabel}\n- />\n- );\n+ return <Scatterplot data={data} xLabel={xLabel} yLabel={yLabel} />;\n},\n{\nnotes\n",
        "chatgpt_cot": "\"Add new color handling logic and update dataset background and border colors based on label and index in Chart.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2801,7 +2801,7 @@ router.get(\nreturn res.status(404).send('Cube not found.');\n}\n- res.contentType('text/json');\n+ res.contentType('application/json');\nres.set('Access-Control-Allow-Origin', '*');\nreturn res.status(200).send(JSON.stringify(cube));\n}),\n",
        "org_msg": "Correct Content Type for /cube/api/cubejson/:id",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Update content type to 'application/json' in cube_routes.js for proper response format. Fix issue with cube not found response."
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -44,6 +44,7 @@ const numFields = ['cmc', 'price', 'priceFoil', 'power', 'toughness', 'rarity'];\nconst AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props }) =>\n<Modal isOpen={isOpen} toggle={toggle} size=\"lg\" {...props}>\n+ <Form onSubmit={e => { e.preventDefault(); apply(); }}>\n<ModalHeader toggle={toggle}>Advanced Filters</ModalHeader>\n<ModalBody>\n<TextField name=\"name\" humanName=\"Card Name\" placeholder={'Any words in the name, e.g. \"Fire\"'} value={values.name} onChange={onChange} />\n@@ -86,8 +87,9 @@ const AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props\n</ModalBody>\n<ModalFooter>\n<Button color=\"danger\" aria-label=\"Close\" onClick={toggle}>Cancel</Button>\n- <Button color=\"success\" onClick={apply}>Apply</Button>\n+ <Button color=\"success\" type=\"submit\">Apply</Button>\n</ModalFooter>\n+ </Form>\n</Modal>;\nclass FilterCollapse extends Component {\n",
        "org_msg": "Submit advanced filter modal on enter.",
        "sim_msg": "refactor checkbox change handler",
        "sim_diff": "diff --git a/src/screens/FilterModal/component.js b/src/screens/FilterModal/component.js @@ -30,6 +30,17 @@ type Props = {\nonCancel: () => void\n};\n+const toggleTagFilter = (\n+ selectedValues: Set<string> | Set<Area>,\n+ sectionValue: string\n+) => {\n+ const values: Set<string> = new Set([...selectedValues]);\n+ if (!values.delete(sectionValue)) {\n+ values.add(sectionValue);\n+ }\n+ return values;\n+};\n+\nclass FilterModal extends PureComponent<Props> {\ncomponentDidMount() {\nconst { navigation, onCancel } = this.props;\n@@ -44,27 +55,24 @@ class FilterModal extends PureComponent<Props> {\nremove: () => void\n};\n- toggleTagFilter = (\n- selectedValues: Set<string> | Set<Area>,\n- sectionValue: string\n- ) => {\n- const values: Set<string> = new Set([...selectedValues]);\n- if (!values.delete(sectionValue)) {\n- values.add(sectionValue);\n- }\n- return values;\n- };\n-\nclearTagFilters = () =>\nthis.props.onChange(\nObject.keys(tags).reduce((acc, key) => ({ ...acc, [key]: new Set() }), {})\n);\n+ handleCheckboxChange = (sectionName: string, sectionValue: string) => {\n+ this.props.onChange({\n+ [sectionName]: toggleTagFilter(\n+ this.props.eventFilters[sectionName],\n+ sectionValue\n+ )\n+ });\n+ };\n+\nrender() {\nconst {\napplyButtonText,\nonApply,\n- onChange,\neventFilters,\nnavigation,\nnumEventsSelected,\n@@ -99,14 +107,9 @@ class FilterModal extends PureComponent<Props> {\ntags[sectionName].map(sectionValue => (\n<CheckBox\nkey={sectionValue}\n- onChange={() => {\n- onChange({\n- [sectionName]: this.toggleTagFilter(\n- eventFilters[sectionName],\n- sectionValue\n- )\n- });\n- }}\n+ onChange={() =>\n+ this.handleCheckboxChange(sectionName, sectionValue)\n+ }\nchecked={eventFilters[sectionName].has(sectionValue)}\n// $FlowFixMe\nlabel={text.tags[sectionValue] || sectionValue}\n",
        "chatgpt_cot": "\"Add form submission to AdvancedFilterModal for applying filters\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3370,7 +3370,7 @@ router.post(\n'/api/adds/:id',\nutil.wrapAsyncApi(async (req, res) => {\nconst response = await fetch(\n- `http://127.0.0.1:8000/?cube_name=${req.params.id}&num_recs=${100}&root=${encodeURIComponent(\n+ `http://127.0.0.1:8000/?cube_name=${req.params.id}&num_recs=${1000}&root=${encodeURIComponent(\n'http://localhost:5000',\n)}`,\n);\n",
        "org_msg": "increased suggestions to 1k",
        "sim_msg": "add job id to start board for task",
        "sim_diff": "diff --git a/core/api-server/api/rest-api/routes/v1/boards.js b/core/api-server/api/rest-api/routes/v1/boards.js @@ -62,8 +62,8 @@ const routes = (options) => {\n});\nrouter.all('/tensor/start/:taskId?', methods(['POST']), logger(), async (req, res, next) => {\nconst { taskId } = req.params;\n- const { nodeName, pipelineName } = req.body;\n- await boards.startTensorboard({ taskId, nodeName, pipelineName }, 'task');\n+ const { nodeName, pipelineName, jobId } = req.body;\n+ await boards.startTensorboard({ taskId, jobId, nodeName, pipelineName }, 'task');\nres.json({ message: 'OK' });\nnext();\n});\n",
        "chatgpt_cot": "Update num_recs parameter to 1000 in cube_routes.js post request to improve data retrieval efficiency and accuracy."
    },
    {
        "org_diff": "diff --git a/src/pages/CardPage.js b/src/pages/CardPage.js -import React from 'react';\n+import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport UserPropType from 'proptypes/UserPropType';\nimport CardPricePropType from 'proptypes/CardPricePropType';\n@@ -20,6 +20,7 @@ import {\nTable,\nBadge,\nButton,\n+ Input,\n} from 'reactstrap';\nimport ChartComponent from 'react-chartjs-2';\n@@ -45,6 +46,7 @@ import Tab from 'components/Tab';\nimport { cardPrice, cardFoilPrice, cardPriceEur, cardTix, cardElo } from 'utils/Card';\nimport { getTCGLink, getCardMarketLink, getCardHoarderLink, getCardKingdomLink } from 'utils/Affiliate';\n+import { CheckIcon, ClippyIcon } from '@primer/octicons-react';\nconst AutocardA = withAutocard('a');\nconst AddModal = withModal(Button, AddToCubeModal);\n@@ -177,6 +179,33 @@ LegalityBadge.propTypes = {\nstatus: PropTypes.string.isRequired,\n};\n+const CardIdBadge = ({ id }) => {\n+ const [copied, setCopied] = useState(false);\n+\n+ const onCopyClick = async () => {\n+ await navigator.clipboard.writeText(id);\n+ setCopied(true);\n+ };\n+\n+ return (\n+ <InputGroup className=\"flex-nowrap mb-3\" size=\"sm\">\n+ <InputGroupAddon addonType=\"prepend\">\n+ <InputGroupText>Card ID</InputGroupText>\n+ </InputGroupAddon>\n+ <Input id=\"card-id\" className=\"bg-white\" value={id} disabled />\n+ <InputGroupAddon addonType=\"append\" style={{ width: 'auto' }}>\n+ <Button className=\"btn-sm\" onClick={onCopyClick}>\n+ {copied ? <CheckIcon size={16} /> : <ClippyIcon size={16} />}\n+ </Button>\n+ </InputGroupAddon>\n+ </InputGroup>\n+ );\n+};\n+\n+CardIdBadge.propTypes = {\n+ id: PropTypes.string.isRequired,\n+};\n+\nconst getPriceTypeUnit = {\nprice: 'USD',\nprice_foil: 'USD',\n@@ -231,11 +260,12 @@ const CardPage = ({ user, card, data, versions, related, cubes, loginCallback })\ncolor=\"success\"\nblock\noutline\n- className=\"mb-2 mr-2\"\n+ className=\"mb-1 mr-2\"\nmodalProps={{ card, cubes, hideAnalytics: true }}\n>\nAdd to Cube...\n</AddModal>\n+ <CardIdBadge id={card._id} />\n{card.prices && Number.isFinite(cardPrice({ details: card })) && (\n<TextBadge name=\"Price\" className=\"mt-1\" fill>\n<Tooltip text=\"TCGPlayer Market Price\">${cardPrice({ details: card }).toFixed(2)}</Tooltip>\n",
        "org_msg": "added card ID to card pages",
        "sim_msg": "Fix dashboard card alignment for non-en languages",
        "sim_diff": "diff --git a/renderer/pages/home.js b/renderer/pages/home.js @@ -5,7 +5,7 @@ import Raven from 'raven-js'\nimport * as chroma from 'chroma-js'\nimport styled from 'styled-components'\nimport { MdHelp, MdClear } from 'react-icons/md'\n-import { Button, Box, Flex, Heading, Card } from 'ooni-components'\n+import { Button, Text, Box, Flex, Heading, Card } from 'ooni-components'\nimport { FormattedMessage } from 'react-intl'\nimport Layout from '../components/Layout'\n@@ -68,6 +68,8 @@ const FrontCardContent = ({\n}) => (\n<Box width={1 / 2} pr={3} pb={3}>\n<Card\n+ // fontSize={0} because padding on Card is controlled by `fontSizeMult`\n+ fontSize={0}\ndata-test-id={`card-${id}`}\nbg={color}\ncolor=\"white\"\n@@ -77,18 +79,20 @@ const FrontCardContent = ({\n<MdHelp onClick={toggleCard} size={30} />\n</TopLeftFloatingButton>\n<CardContent>\n- <Heading h={2}>{name}</Heading>\n- <BgIcon>{icon}</BgIcon>\n- <Flex pt={5} alignItems=\"center\">\n- <Box width={3 / 4} pr={4}>\n+ <Flex flexDirection='column' justifyContent='space-between' style={{ height: '200px'}}>\n+ <Text fontSize={4} fontWeight={300} m={0}>{name}</Text>\n+ <Text fontSize={1}>\n{description}\n- </Box>\n- <Box width={1 / 4} mr={2}>\n+ </Text>\n+ <BgIcon>{icon}</BgIcon>\n+ <Flex justifyContent='flex-end'>\n+ <Box>\n<Button inverted fontSize={1} onClick={onRun}>\n<FormattedMessage id=\"Dashboard.Card.Run\" />\n</Button>\n</Box>\n</Flex>\n+ </Flex>\n</CardContent>\n</Card>\n</Box>\n",
        "chatgpt_cot": "\"Add CardIdBadge component to CardPage.js to display and copy card ID information.\""
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -23,22 +23,14 @@ function buildIdQuery(id) {\nasync function generateShortId() {\nconst cubes = await Cube.find({}, ['shortID']);\n-\nconst shortIds = cubes.map((cube) => cube.shortID);\n-\n- const ids = cubes.map((cube) => util.fromBase36(cube.shortID));\n- let max = Math.max(...ids);\n-\n- if (max < 0) {\n- max = 0;\n- }\n+ const space = shortIds.length * 2;\nlet newId = '';\nlet isGoodId = false;\nwhile (!isGoodId) {\n- max += 1;\n- newId = util.toBase36(max);\n-\n+ const rand = Math.floor(Math.random() * space);\n+ newId = util.toBase36(rand);\nisGoodId = !util.hasProfanity(newId) && !shortIds.includes(newId);\n}\n",
        "org_msg": "change shortId generation method",
        "sim_msg": "[server] Convert second param of dbQuery to options blob\nSummary: Going to add another parameter and I thought it would be cleaner this way.\nTest Plan: Flow\nReviewers: atul\nSubscribers: KatPo, palys-swm, Adrian",
        "sim_diff": "diff --git a/server/src/database/database.js b/server/src/database/database.js @@ -76,7 +76,11 @@ function FakeSQLResult() {\nFakeSQLResult.prototype = Array.prototype;\nconst fakeResult: any = new FakeSQLResult();\n-async function dbQuery(statement: SQLStatement, triesLeft?: number = 2) {\n+type QueryOptions = {|\n+ +triesLeft?: number,\n+|};\n+async function dbQuery(statement: SQLStatement, options?: QueryOptions) {\n+ const triesLeft = options?.triesLeft ?? 2;\nconst connectionPool = getPool();\nconst timeoutID = setTimeout(\n() => databaseMonitor.reportLaggingQuery(statement.sql),\n@@ -99,7 +103,7 @@ async function dbQuery(statement: SQLStatement, triesLeft?: number = 2) {\n} catch (e) {\nif (e.errno === 1213 && triesLeft > 0) {\nconsole.log('deadlock occurred, trying again', e);\n- return await dbQuery(statement, triesLeft - 1);\n+ return await dbQuery(statement, { ...options, triesLeft: triesLeft - 1 });\n}\ne.query = statement.sql;\nthrow e;\n",
        "chatgpt_cot": "Refactor generateShortId function, improve randomness in newId generation by using space calculation, and simplify logic for checking profanity."
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"scripts\": {\n\"beautify\": \"npm run prettier\",\n\"prettier\": \"prettier --write {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js' webpack.'*'.js\",\n+ \"prettier-master\": \"prettier --write $(git diff master --name-only | grep -E '.js$')\",\n+ \"prettier-head\": \"prettier --write $(git diff HEAD --name-only | grep -E '.js$')\",\n\"lint\": \"prettier --check {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js'\",\n\"nodemon\": \"nodemon --ignore src --ignore public\",\n\"webpack-dev-server\": \"webpack-dev-server --config webpack.dev.js\",\n",
        "org_msg": "Add shorter prettier scripts.",
        "sim_msg": "Do not lint layout.worker.bundled.js",
        "sim_diff": "diff --git a/package.json b/package.json \"prepare\": \"lerna run --stream --sort prepublishOnly\",\n\"prettier-comment\": \"https://github.com/yarnpkg/yarn/issues/6300\",\n\"prettier\":\n- \"./node_modules/prettier/bin-prettier.js --write '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n+ \"./node_modules/prettier/bin-prettier.js --write '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(layout.worker.bundled|react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n\"prettier-lint\":\n- \"./node_modules/prettier/bin-prettier.js --list-different '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n+ \"./node_modules/prettier/bin-prettier.js --list-different '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(layout.worker.bundled|react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n\"test\": \"lerna run test\",\n\"tsc-lint\": \"tsc\",\n\"tsc-lint-debug\": \"tsc --listFiles\",\n",
        "chatgpt_cot": "Add prettier commands for diffing with master and HEAD to ensure consistent code formatting. Improve code readability and maintainability."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1603,7 +1603,10 @@ router.post('/startsealed/:id', body('packs').toInt({ min: 1, max: 16 }), body('\nconst numCards = packs * cards;\n- const cube = await Cube.findOne(buildIdQuery(req.params.id), '_id name draft_formats card_count type cards owner');\n+ const cube = await Cube.findOne(\n+ buildIdQuery(req.params.id),\n+ '_id name draft_formats card_count type cards owner numDecks',\n+ );\nif (!cube) {\nreq.flash('danger', 'Cube not found');\n",
        "org_msg": "fix cube popularity rating",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Add numDecks field to Cube findOne method to fix Cube not found issue\""
    },
    {
        "org_diff": "diff --git a/models/cube.js b/models/cube.js @@ -17,11 +17,13 @@ let cubeSchema = mongoose.Schema({\n},\nowner: {\ntype: String,\n- required: true\n+ required: true,\n+ index: true\n},\nisListed: {\ntype: Boolean,\n- default: true\n+ default: true,\n+ index: true\n},\nprivatePrices: {\ntype: Boolean,\n@@ -29,7 +31,8 @@ let cubeSchema = mongoose.Schema({\n},\nisFeatured: {\ntype: Boolean,\n- default: false\n+ default: false,\n+ index: true\n},\ncards: [{\ntags: [String],\n@@ -62,14 +65,4 @@ let cubeSchema = mongoose.Schema({\ndraft_formats: {}\n});\n-// Indexes for home page queries\n-cubeSchema.index({\n- isFeatured: 1,\n-});\n-\n-cubeSchema.index({\n- owner: 1,\n- isListed: 1,\n-});\n-\nlet Cube = module.exports = mongoose.model('Cube', cubeSchema)\n",
        "org_msg": "Move indexes into definition.",
        "sim_msg": "allOf uses schema merge",
        "sim_diff": "diff --git a/bin/random.js b/bin/random.js * limitations under the License.\n**/\n'use strict';\n+const Exception = require('./exception');\n+const schemas = require('./schemas');\nconst traverse = require('./traverse');\nconst util = require('./util');\n@@ -50,6 +52,15 @@ const stringChoices = [\n'Donec auctor nisl in felis pharetra tincidunt.'\n];\n+module.exports = function(version, schema, options) {\n+ let exception = schemas.validate(version, schema, { throw: false });\n+ if (!exception) {\n+ exception = Exception('Unable to generate random value');\n+\n+ }\n+};\n+\n+\n// generate random array\nexports.array = function(exception, schema) {\nreturn common(schema, () => {\n@@ -354,6 +365,7 @@ function randomTraverse(schema, version, options) {\nconst schema = data.schema;\nlet index;\nlet schemas;\n+ let results;\nswitch (data.modifier) {\ncase 'anyOf':\n@@ -365,8 +377,12 @@ function randomTraverse(schema, version, options) {\nreturn;\ncase 'allOf':\n- if (!options.skipInvalid) {\n- data.exception('Random value generator does not work for \"allOf\" directive');\n+ results = Schemas.merge(version.value, schema.allOf, { throw: false });\n+ if (results.error) {\n+ data.exception(results.error);\n+ } else {\n+ data.schema = results.value;\n+ data.again();\n}\nreturn;\n",
        "chatgpt_cot": "Add indexes to owner, isListed, isFeatured in cube model to improve query performance. Remove redundant indexes for home page queries."
    },
    {
        "org_diff": "diff --git a/src/pages/CardPage.js b/src/pages/CardPage.js @@ -46,7 +46,7 @@ import Tab from 'components/Tab';\nimport { cardPrice, cardFoilPrice, cardPriceEur, cardTix, cardElo } from 'utils/Card';\nimport { getTCGLink, getCardMarketLink, getCardHoarderLink, getCardKingdomLink } from 'utils/Affiliate';\n-import { CheckIcon, ClippyIcon } from '@primer/octicons-react';\n+import { ArrowSwitchIcon, CheckIcon, ClippyIcon } from '@primer/octicons-react';\nconst AutocardA = withAutocard('a');\nconst AddModal = withModal(Button, AddToCubeModal);\n@@ -250,6 +250,7 @@ const CardPage = ({ user, card, data, versions, related, cubes, loginCallback })\n<ImageFallback className=\"w-100\" src={imageUsed} fallbackSrc=\"/content/default_card.png\" alt={card.name} />\n{card.image_flip && (\n<Button\n+ className=\"mt-1\"\ncolor=\"success\"\noutline\nblock\n@@ -261,7 +262,7 @@ const CardPage = ({ user, card, data, versions, related, cubes, loginCallback })\n}\n}}\n>\n- Flip\n+ <ArrowSwitchIcon size={16} /> Transform\n</Button>\n)}\n<CardBody className=\"breakdown p-1\">\n",
        "org_msg": "visual update",
        "sim_msg": "Fix dashboard card alignment for non-en languages",
        "sim_diff": "diff --git a/renderer/pages/home.js b/renderer/pages/home.js @@ -5,7 +5,7 @@ import Raven from 'raven-js'\nimport * as chroma from 'chroma-js'\nimport styled from 'styled-components'\nimport { MdHelp, MdClear } from 'react-icons/md'\n-import { Button, Box, Flex, Heading, Card } from 'ooni-components'\n+import { Button, Text, Box, Flex, Heading, Card } from 'ooni-components'\nimport { FormattedMessage } from 'react-intl'\nimport Layout from '../components/Layout'\n@@ -68,6 +68,8 @@ const FrontCardContent = ({\n}) => (\n<Box width={1 / 2} pr={3} pb={3}>\n<Card\n+ // fontSize={0} because padding on Card is controlled by `fontSizeMult`\n+ fontSize={0}\ndata-test-id={`card-${id}`}\nbg={color}\ncolor=\"white\"\n@@ -77,18 +79,20 @@ const FrontCardContent = ({\n<MdHelp onClick={toggleCard} size={30} />\n</TopLeftFloatingButton>\n<CardContent>\n- <Heading h={2}>{name}</Heading>\n- <BgIcon>{icon}</BgIcon>\n- <Flex pt={5} alignItems=\"center\">\n- <Box width={3 / 4} pr={4}>\n+ <Flex flexDirection='column' justifyContent='space-between' style={{ height: '200px'}}>\n+ <Text fontSize={4} fontWeight={300} m={0}>{name}</Text>\n+ <Text fontSize={1}>\n{description}\n- </Box>\n- <Box width={1 / 4} mr={2}>\n+ </Text>\n+ <BgIcon>{icon}</BgIcon>\n+ <Flex justifyContent='flex-end'>\n+ <Box>\n<Button inverted fontSize={1} onClick={onRun}>\n<FormattedMessage id=\"Dashboard.Card.Run\" />\n</Button>\n</Box>\n</Flex>\n+ </Flex>\n</CardContent>\n</Card>\n</Box>\n",
        "chatgpt_cot": "\"Add ArrowSwitchIcon and update button text on CardPage\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -4289,7 +4289,7 @@ router.get(\n'/api/date_updated/:id',\nutil.wrapAsyncApi(async (req, res) => {\nconst { id } = req.params;\n- const result = await Cube.findOne(buildIdQuery(id), { date_updated: 1, _id: 0 }).lean();\n+ const result = await Cube.findOne(buildIdQuery(id), 'date_updated').lean();\nif (!result) {\nreturn res.status(404).send({\nsuccess: 'false',\n",
        "org_msg": "Change to simpler projection for consistency",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "\"Refactor date_updated query to Cube.findOne to only return date_updated field\""
    },
    {
        "org_diff": "diff --git a/src/pages/LandingPage.js b/src/pages/LandingPage.js @@ -5,8 +5,12 @@ import { Row, Col, Button } from 'reactstrap';\nimport RenderToRoot from 'utils/RenderToRoot';\nimport Footer from 'layouts/Footer';\n+import LoginModal from 'components/LoginModal';\n+import withModal from 'components/WithModal';\nimport CardSearchBar from 'components/CardSearchBar';\n+const LoginModalButton = withModal(Button, LoginModal);\n+\nconst LandingPage = ({ numusers, numcubes, numdrafts }) => {\nreturn (\n<div className=\"flex-container flex-vertical viewport\">\n@@ -29,12 +33,12 @@ const LandingPage = ({ numusers, numcubes, numdrafts }) => {\n<strong>{numdrafts}</strong>\n{' Completed Drafts'}\n</h5>\n- <Button className=\"landing-btn my-3\" color=\"success\">\n+ <Button href=\"/user/register\" className=\"landing-btn my-3\" color=\"success\">\nSign Up\n</Button>\n- <Button className=\"landing-btn mb-3\" color=\"success\" outline>\n+ <LoginModalButton className=\"landing-btn mb-3\" color=\"success\" outline>\nLogin\n- </Button>\n+ </LoginModalButton>\n</div>\n<Footer />\n</Col>\n",
        "org_msg": "linked buttons",
        "sim_msg": "[2/n] [landing] add team to footer component\nSummary:\nadd team link to footer\n{F6678}\nTest Plan: click the footer link, make sure it goes to team page\nReviewers: atul, ashoat\nSubscribers: ashoat, palys-swm, Adrian, karol-bisztyga, boristopalov",
        "sim_diff": "diff --git a/landing/footer.react.js b/landing/footer.react.js @@ -5,6 +5,8 @@ import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n+import { isDev } from 'lib/utils/dev-utils';\n+\nimport css from './footer.css';\nimport SubscriptionForm from './subscription-form.react';\n@@ -16,6 +18,15 @@ const navLinkProps = {\n};\nfunction Footer(): React.Node {\n+ let teamLink;\n+ if (isDev) {\n+ teamLink = (\n+ <NavLink to=\"/team\" exact {...navLinkProps}>\n+ Team\n+ </NavLink>\n+ );\n+ }\n+\nreturn (\n<footer className={css.wrapper}>\n<div className={css.contentWrapper}>\n@@ -29,6 +40,7 @@ function Footer(): React.Node {\n<NavLink to=\"/support\" exact {...navLinkProps}>\nSupport\n</NavLink>\n+ {teamLink}\n<NavLink to=\"/terms\" exact {...navLinkProps}>\nTerms of Use\n</NavLink>\n",
        "chatgpt_cot": "Add LoginModal and withModal components, and use LoginModalButton in LandingPage for improved user experience."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1642,10 +1642,14 @@ router.post('/editoverview/:id', ensureAuth, function(req, res) {\nreq.flash('danger', 'Cube name should not use profanity.');\nres.redirect('/cube/overview/' + req.params.id);\n} else {\n+ let urlAliasMaxLength = 100;\nif (req.body.urlAlias && cube.urlAlias !== req.body.urlAlias) {\nif (!req.body.urlAlias.match(/^[0-9a-zA-Z_]*$/)) {\nreq.flash('danger', 'Custom URL must contain only alphanumeric characters or underscores.');\nres.redirect('/cube/overview/' + req.params.id);\n+ } else if (req.body.urlAlias.length > urlAliasMaxLength) {\n+ req.flash('danger', 'Custom URL may not be longer than ' + urlAliasMaxLength + ' characters.');\n+ res.redirect('/cube/overview/' + req.params.id);\n} else {\nif (util.has_profanity(req.body.urlAlias)) {\nreq.flash('danger', 'Custom URL may not contain profanity.');\n",
        "org_msg": "Enforce a maximum cube alias length",
        "sim_msg": "Handle partially encoded url query strings in request node",
        "sim_diff": "diff --git a/packages/node_modules/@node-red/nodes/core/network/21-httprequest.js b/packages/node_modules/@node-red/nodes/core/network/21-httprequest.js @@ -134,7 +134,29 @@ in your Node-RED user directory (${RED.settings.userDir}).\nurl = \"http://\"+url;\n}\n}\n- url = encodeURI(url);\n+\n+ // The Request module used in Node-RED 1.x was tolerant of query strings that\n+ // were partially encoded. For example - \"?a=hello%20there&b=20%\"\n+ // The GOT module doesn't like that.\n+ // The following is an attempt to normalise the url to ensure it is properly\n+ // encoded. We cannot just encode it directly as we don't want any valid\n+ // encoded entity to end up doubly encoded.\n+ if (url.indexOf(\"?\") > -1) {\n+ // Only do this if there is a query string to deal with\n+ const [hostPath, ...queryString] = url.split(\"?\")\n+ const query = queryString.join(\"?\");\n+ if (query) {\n+ // Look for any instance of % not followed by two hex chars.\n+ // Replace any we find with %25.\n+ const escapedQueryString = query.replace(/(%.?.?)/g, function(v) {\n+ if (/^%[a-f0-9]{2}/i.test(v)) {\n+ return v;\n+ }\n+ return v.replace(/%/,\"%25\")\n+ })\n+ url = hostPath+\"?\"+escapedQueryString;\n+ }\n+ }\nvar method = nodeMethod.toUpperCase() || \"GET\";\nif (msg.method && n.method && (n.method !== \"use\")) { // warn if override option not set\n",
        "chatgpt_cot": "Add validation for custom URL length in cube overview. Fixes compilation issue with new URL alias length validation."
    },
    {
        "org_diff": "diff --git a/src/components/CubeOverviewModal.js b/src/components/CubeOverviewModal.js @@ -26,13 +26,10 @@ class CubeOverviewModal extends Component {\nconstructor(props) {\nsuper(props);\n- props.cube.descriptionhtml= props.cube.descriptionhtml && props.cube.descriptionhtml !== 'undefined' ? props.cube.descriptionhtml : props.cube.description;\n-\nthis.state = {\nisOpen: false,\ntags: props.cube.tags.map((tag) => ({ id: tag, text: tag })),\ncube: JSON.parse(JSON.stringify(props.cube)),\n- description: props.cube.descriptionhtml,\nimage_dict: {},\n};\n@@ -224,7 +221,6 @@ class CubeOverviewModal extends Component {\nrender() {\nconst { cube, cubeID, tags, isOpen } = this.state;\n- console.log(cube);\nreturn (\n<>\n<a className=\"nav-link\" href=\"#\" onClick={this.open}>\n@@ -372,7 +368,7 @@ class CubeOverviewModal extends Component {\n<h6>Description</h6>\n<TextEntry\nname=\"blog\"\n- value={this.state.cube.descriptionhtml}\n+ value={cube.descriptionhtml && cube.descriptionhtml !== 'undefined' ? cube.descriptionhtml :cube.description}\nonChange={this.handleDescriptionChange}\n/>\n<br />\n",
        "org_msg": "Fixed to correct react practice",
        "sim_msg": "feat: cleaning up product image loading",
        "sim_diff": "diff --git a/src/components/ProductGrid/ProductItem.js b/src/components/ProductGrid/ProductItem.js @@ -157,6 +157,8 @@ class ProductItem extends Component {\n}\nonImageLoad = () => {\n+ const { hasImageLoaded } = this.state;\n+ if (hasImageLoaded) return;\nthis.setState({ hasImageLoaded: true });\n};\n@@ -173,7 +175,16 @@ class ProductItem extends Component {\n<source srcSet={tempImgs[weight].lg} media={`(min-width: ${values.lg}px)`} />\n<source srcSet={tempImgs[weight].md} media={`(min-width: ${values.md}px)`} />\n<source srcSet={tempImgs[weight].sm} media={`(min-width: ${values.sm}px)`} />\n- <img className={img} src={tempImgs[weight].xs} alt={description} onLoad={this.onImageLoad} />\n+ <img\n+ className={img}\n+ src={tempImgs[weight].xs}\n+ alt={description}\n+ onLoad={this.onImageLoad}\n+ ref={(image) => {\n+ if (image && image.complete) this.onImageLoad();\n+ return;\n+ }}\n+ />\n</picture>\n);\n",
        "chatgpt_cot": "refactor CubeOverviewModal to handle descriptionhtml with value fallback to description for consistency. Fix state initialization and remove console log."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -412,7 +412,7 @@ var specialCaseCardsList = {\"Outlaws' Merriment\":[{\n//the cards below are transform cards that are on here due to the way\n//we currently do not populate the oracle text of transform cards.\n\"Arlinn Kord\":[{\n- tokenId: \"94ed2eca-1579-411d-af6f-c7359c65de30\"\n+ tokenId: \"88452ed7-1065-41c3-94a6-dc41108c45c1\"\n}],\n\"Bloodline Keeper\":[{\ntokenId: \"71496671-f7ba-4014-a895-d70a27979db7\"\n@@ -427,7 +427,7 @@ var specialCaseCardsList = {\"Outlaws' Merriment\":[{\ntokenId: \"11d25bde-a303-4b06-a3e1-4ad642deae58\"\n}],\n\"Garruk Relentless\":[{\n- tokenId: \"94ed2eca-1579-411d-af6f-c7359c65de30\"\n+ tokenId: \"88452ed7-1065-41c3-94a6-dc41108c45c1\"\n},{\ntokenId: \"7a49607c-427a-474c-ad77-60cd05844b3c\"\n}],\n@@ -438,7 +438,7 @@ var specialCaseCardsList = {\"Outlaws' Merriment\":[{\ntokenId: \" 94ed2eca-1579-411d-af6f-c7359c65de30\"\n}],\n\"Huntmaster of the Fells\":[{\n- tokenId: \"94ed2eca-1579-411d-af6f-c7359c65de30\"\n+ tokenId: \"88452ed7-1065-41c3-94a6-dc41108c45c1\"\n}],\n\"Legion's Landing\":[{\ntokenId: \"09293ae7-0629-417b-9eda-9bd3f6d8e118\"\n",
        "org_msg": "Fixed cleric to wolf",
        "sim_msg": "Add KNIGHT to the token list",
        "sim_diff": "diff --git a/token-list/tokenlist.json b/token-list/tokenlist.json {\n\"name\": \"DeFi Token List\",\n- \"timestamp\": \"2020-10-02T13:38:30.175Z\",\n+ \"timestamp\": \"2020-10-02T13:41:10.020Z\",\n\"version\": {\n\"major\": 1,\n- \"minor\": 4059,\n+ \"minor\": 4060,\n\"patch\": 0\n},\n\"keywords\": [\n\"symbol\": \"RNUTV2\",\n\"address\": \"0x78A268464a5F705791deFac3690D8525F4B212a3\",\n\"decimals\": 18\n+ },\n+ {\n+ \"chainId\": 1,\n+ \"name\": \"Dungeon Knight\",\n+ \"symbol\": \"KNIGHT\",\n+ \"address\": \"0xf168FAdC164949282FDe1a8cE036a212f4312536\",\n+ \"decimals\": 18\n}\n]\n}\n\\ No newline at end of file\n",
        "chatgpt_cot": "Update the token ID for several cards in the special case cards list to fix an issue with the way transform cards are currently populated."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -881,7 +881,7 @@ router.get('/analysis/:id', async (req, res) => {\naddedTmsp: new Date(),\nimgUrl: undefined,\nfinish: 'Non-foil',\n- details: { ...tokenDetails },\n+ details: { ...(element.tokenId === card.cardID ? {} : tokenDetails) },\n};\n}\n}\n",
        "org_msg": "Fix circular reference issue.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "\"Modify details object in cube_routes to conditionally use tokenDetails based on element's tokenId and card's cardID\""
    },
    {
        "org_diff": "diff --git a/src/utils/Util.js b/src/utils/Util.js @@ -192,7 +192,7 @@ export function isInternalURL(to) {\nexport function isSamePageURL(to) {\ntry {\n- const url = new URL(to, window.location.origin);\n+ const url = new URL(to, window.location.href);\nreturn (\nurl.hostname === window.location.hostname &&\nurl.pathname === window.location.pathname &&\n",
        "org_msg": "fixed base URL for relative links",
        "sim_msg": "Add createRelativeUrl method to util.js",
        "sim_diff": "diff --git a/util.js b/util.js @@ -819,6 +819,16 @@ export const proxifyUrl = u => {\nreturn u;\n}\n};\n+export const createRelativeUrl = (u, baseUrl) => {\n+ if (/^(?:[\\.\\/]|([a-z0-9]+):\\/\\/)/i.test(u)) {\n+ return u;\n+ } else {\n+ if (!/([a-z0-9]+):\\/\\//i.test(baseUrl)) {\n+ baseUrl = new URL(baseUrl, window.location.href).href;\n+ }\n+ return new URL(u, baseUrl).href;\n+ }\n+};\nexport const getDropUrl = o => {\nlet u = null;\nif (typeof o?.start_url === 'string') {\n",
        "chatgpt_cot": "Update URL creation in isSamePageURL function to use current window location for comparison."
    },
    {
        "org_diff": "diff --git a/src/utils/draftbots.js b/src/utils/draftbots.js @@ -118,7 +118,7 @@ export const getSynergy = (combination, card, picked, synergies) => {\n}\n}\n}\n- return Math.max(0, (synergy + internalSynergy) * 10);\n+ return Math.max(0, (synergy + internalSynergy) * 7);\n};\nexport const getOpenness = (combination, seen) => {\n",
        "org_msg": "update synergy scaling",
        "sim_msg": "Card generator default constants update",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -79,8 +79,8 @@ export const generateObjectUrlCard = async ({\n};\nexport const generateObjectCard = async ({\napp,\n- width,\n- height,\n+ width = 300,\n+ height = 300,\n}) => {\nconst stats = generateStats(app.contentId);\nconst {name, description} = app;\n",
        "chatgpt_cot": "Adjust synergy calculation weight from 10 to 7 in getSynergy function for more accurate results in draftbots.js."
    },
    {
        "org_diff": "diff --git a/src/pages/CardPage.js b/src/pages/CardPage.js @@ -222,7 +222,7 @@ const CardPage = ({ user, card, data, versions, related, cubes, loginCallback })\n});\nconst filteredVersions = sortedVersions.filter((version) => {\n- return version._id != card._id;\n+ return version._id !== card._id;\n});\nreturn (\n",
        "org_msg": "fixed != to !== typo",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "fix comparison operator in filteredVersions in CardPage"
    },
    {
        "org_diff": "diff --git a/webpack.common.js b/webpack.common.js @@ -52,6 +52,7 @@ const clientConfig = merge(config, {\nconst serverConfig = merge(config, {\ntarget: 'node',\nentry: {\n+ BulkUploadPage: './src/components/BulkUploadPage.js',\nCubeListPage: './src/components/CubeListPage.js',\nCubePlaytestPage: './src/components/CubePlaytestPage.js',\nDashboardPage: './src/components/DashboardPage.js',\n",
        "org_msg": "Add BulkUploadPage to webpack config.",
        "sim_msg": "Make webpack dev server more like pre-webpack update",
        "sim_diff": "diff --git a/webpack.config.js b/webpack.config.js @@ -21,9 +21,9 @@ const common = {\n},\ndevServer: {\n- contentBase: path.join(__dirname, 'examples', 'local_files'),\n+ contentBase: path.join( __dirname ),\ncompress: true,\n- port: 9001,\n+ port: 8080,\ndisableHostCheck: true,\nhost: '0.0.0.0',\npublicPath: '/dist/'\n",
        "chatgpt_cot": "Add BulkUploadPage component entry point in webpack config for server-side rendering."
    },
    {
        "org_diff": "diff --git a/src/topcards.js b/src/topcards.js @@ -52,7 +52,7 @@ class TopCards extends Component {\n/>\n</div>\n<SortableTable\n- sorts={{ Rating: row => -row[3], 'Total Picks': row => -row[4] }}\n+ sorts={{ Rating: row => row[3], 'Total Picks': row => -row[4] }}\ndefaultSort=\"Rating\"\nheaders={{ Name: {}, Rating: { style: { width: '10rem' } }, 'Total Picks': { style: { width: '10rem' } } }}\ndata={this.state.data}\n",
        "org_msg": "Reverse direction of rating sort.",
        "sim_msg": "Click on checkbox for bulk action doesn't work",
        "sim_diff": "diff --git a/lib/shared/addon/components/sortable-table/component.js b/lib/shared/addon/components/sortable-table/component.js @@ -530,7 +530,7 @@ export default Component.extend(Sortable, StickyHeader, {\n},\nset(key, value) {\n- var content = this.get('pagedContent').filterBy('canBulkRemove').filterBy('canRemove');\n+ var content = this.get('pagedContent').filterBy('canBulkRemove');\nif ( value ) {\nthis.toggleMulti(content, []);\n",
        "chatgpt_cot": "\"Fix sorting issue in TopCards component\""
    },
    {
        "org_diff": "diff --git a/public/js/main.js b/public/js/main.js @@ -6,46 +6,52 @@ $(document).ready(function() {\n$('.delete-cube').on('click', function(e) {\n$target = $(e.target);\nvar id = $target.attr('data-id');\n- $.ajax({\n- type: 'DELETE',\n- url: '/cube/remove/' + id,\n- success: function() {\n- window.location.href = '/';\n- },\n- error: function(err) {\n- console.log(err)\n+ csrfFetch('/cube/remove/' + id, {\n+ method: 'DELETE',\n+ headers: {}\n+ }).then(response => {\n+ if (!response.ok) {\n+ console.log(response);\n+ }\n+ else\n+ {\n+ window.location.href = '';\n}\n});\n})\n$('.delete-blog').on('click', function(e) {\n$target = $(e.target);\nvar id = $target.attr('data-id');\n- $.ajax({\n- type: 'DELETE',\n- url: '/cube/blog/remove/' + id,\n- success: function() {\n+ csrfFetch('/cube/blog/remove/' + id, {\n+ method: 'DELETE',\n+ headers: {}\n+ }).then(response => {\n+ if (!response.ok) {\n+ console.log(response);\n+ }\n+ else\n+ {\nwindow.location.href = '';\n- },\n- error: function(err) {\n- console.log(err)\n}\n});\n- })\n+ });\n$('.delete-format').on('click', function(e) {\n$target = $(e.target);\nvar id = $target.attr('data-id');\nvar cube = $target.attr('data-cube');\n- $.ajax({\n- type: 'DELETE',\n- url: '/cube/format/remove/' + cube + ';' + id,\n- success: function() {\n+ csrfFetch('/cube/format/remove/' + cube + ';' + id, {\n+ method: 'DELETE',\n+ headers: {}\n+ }).then(response => {\n+ if (!response.ok) {\n+ console.log(response);\n+ }\n+ else\n+ {\nwindow.location.href = '';\n- },\n- error: function(err) {\n- console.log(err)\n}\n});\n- })\n+ });\n});\nfunction ISODateToYYYYMMDD(dateString) {\n",
        "org_msg": "Fixed issue with deleting objects",
        "sim_msg": "Always save the recipe before leaving/reloading the page (this now closes",
        "sim_diff": "diff --git a/public/viewjs/recipeform.js b/public/viewjs/recipeform.js @@ -133,11 +133,10 @@ $(document).on('click', '.recipe-pos-delete-button', function(e)\n{\nif (result === true)\n{\n- Grocy.Api.Put('objects/recipes/' + Grocy.EditObjectId, $('#recipe-form').serializeJSON(), function() { }, function() { });\nGrocy.Api.Delete('objects/recipes_pos/' + objectId, {},\nfunction(result)\n{\n- window.location.href = U('/recipe/' + Grocy.EditObjectId);\n+ window.postMessage(WindowMessageBag(\"IngredientsChanged\"), Grocy.BaseUrl);\n},\nfunction(xhr)\n{\n@@ -171,11 +170,10 @@ $(document).on('click', '.recipe-include-delete-button', function(e)\n{\nif (result === true)\n{\n- Grocy.Api.Put('objects/recipes/' + Grocy.EditObjectId, $('#recipe-form').serializeJSON(), function() { }, function() { });\nGrocy.Api.Delete('objects/recipes_nestings/' + objectId, {},\nfunction(result)\n{\n- window.location.href = U('/recipe/' + Grocy.EditObjectId);\n+ window.postMessage(WindowMessageBag(\"IngredientsChanged\"), Grocy.BaseUrl);\n},\nfunction(xhr)\n{\n@@ -305,7 +303,7 @@ $('#save-recipe-include-button').on('click', function(e)\nGrocy.Api.Post('objects/recipes_nestings', jsonData,\nfunction(result)\n{\n- window.location.href = U('/recipe/' + Grocy.EditObjectId);\n+ window.postMessage(WindowMessageBag(\"IngredientsChanged\"), Grocy.BaseUrl);\n},\nfunction(xhr)\n{\n@@ -318,7 +316,7 @@ $('#save-recipe-include-button').on('click', function(e)\nGrocy.Api.Put('objects/recipes_nestings/' + nestingId, jsonData,\nfunction(result)\n{\n- window.location.href = U('/recipe/' + Grocy.EditObjectId);\n+ window.postMessage(WindowMessageBag(\"IngredientsChanged\"), Grocy.BaseUrl);\n},\nfunction(xhr)\n{\n@@ -344,8 +342,17 @@ $(window).on(\"message\", function(e)\nvar data = e.originalEvent.data;\nif (data.Message === \"IngredientsChanged\")\n+ {\n+ Grocy.Api.Put('objects/recipes/' + Grocy.EditObjectId, $('#recipe-form').serializeJSON(),\n+ function(result)\n{\nwindow.location.href = U('/recipe/' + Grocy.EditObjectId);\n+ },\n+ function(xhr)\n+ {\n+ console.error(xhr);\n+ }\n+ );\n}\n});\n",
        "chatgpt_cot": "\"Refactor delete actions to use csrfFetch and improve error handling\""
    },
    {
        "org_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -75,6 +75,10 @@ We have a fairly active discord and would love for you to join the discussion.\nPrivate Message 'DEKKARU', the admin on Discord, to gain the contributor role and unlock the contributor-only channels.\n+# Community feedback / product ideas\n+\n+Feedback from the community is collected and synthesized into roadmap ideas in a shared document [here](https://www.notion.so/CubeCobra-community-feedback-142b06cd81994a61bd850fb5bc817cc8). To gain read/write access, PM 'DEKKARU' or 'emmett9001' on Discord.\n+\n### Commit Message Style\nPlease keep commit messages brief and informative.\n",
        "org_msg": "add note and link to product ideas document",
        "sim_msg": "Correct issue link in CONTRIBUTING.md",
        "sim_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -8,7 +8,7 @@ We welcome any type of contribution, not only code. You can help with\n- **QA**: file bug reports, the more details you can give the better (e.g. screenshots with the console open)\n- **Marketing**: writing blog posts, howto's, printing stickers, ...\n- **Community**: presenting the project at meetups, organizing a dedicated meetup for the local community, ...\n-- **Code**: take a look at the [open issues](issues). Even if you can't write code, commenting on them, showing that you care about a given issue matters. It helps us triage them. To get started you can also [sign up to triage react-slick issues on CodeTriage](https://www.codetriage.com/akiran/react-slick).\n+- **Code**: take a look at the [open issues](https://github.com/akiran/react-slick/issues). Even if you can't write code, commenting on them, showing that you care about a given issue matters. It helps us triage them. To get started you can also [sign up to triage react-slick issues on CodeTriage](https://www.codetriage.com/akiran/react-slick).\n- **Money**: we welcome financial contributions in full transparency on our [open collective](https://opencollective.com/react-slick).\n## Your First Contribution\n@@ -31,7 +31,7 @@ Anyone can file an expense. If the expense makes sense for the development of th\n## Questions\n-If you have any questions, create an [issue](issue) (protip: do a quick search first to see if someone else didn't ask the same question before!).\n+If you have any questions, create an [issue](https://github.com/akiran/react-slick/issues) (protip: do a quick search first to see if someone else didn't ask the same question before!).\nYou can also reach us at hello@react-slick.opencollective.com.\n## Credits\n",
        "chatgpt_cot": "Add community feedback and product ideas section to CONTRIBUTING.md file. Include link to shared document for roadmap ideas."
    },
    {
        "org_diff": "diff --git a/public/js/deckbuilder.js b/public/js/deckbuilder.js @@ -172,33 +172,47 @@ function renderDraft() {\nvar lands = 0;\nvar cards = 0;\n+ var creatures = 0;\n//fill up deck\ndeck.playerdeck.forEach(function(col, index) {\nvar colhtml = \"\";\n+ var i = 0;\ncol.forEach(function(card, index2) {\n+ i= i+1;\ncards++;\nif (card.details.type.toLowerCase().includes('land')) {\nlands++;\n}\n+ if (card.details.type.toLowerCase().includes('creature')){\n+ creatures++;\n+ }\nif (card.details.card_flip) {\ncolhtml += '<a style=\"z-index:' + index2 + '; position: relative; top:-' + 155 * (index2) + 'px;\" class=\"autocard\" card=\"' + card.details.display_image + '\" card_flip=\"' + card.details.image_flip + '\" href=\"#\"><img class=\"deckcard defaultCardImage\" data-id=\"' + index2 + '\" data-col=\"' + index + '\" src=\"' + card.details.display_image + '\" width=\"' + cardWidth + '\" height=\"' + cardHeight + '\"/></a>';\n} else {\ncolhtml += '<a style=\"z-index:' + index2 + '; position: relative; top:-' + 155 * (index2) + 'px;\" class=\"autocard\" card=\"' + card.details.display_image + '\" href=\"#\"><img class=\"deckcard defaultCardImage\" data-id=\"' + index2 + '\" data-col=\"' + index + '\" src=\"' + card.details.display_image + '\" width=\"' + cardWidth + '\" height=\"' + cardHeight + '\"/></a>';\n}\n});\n+ if (i>0){\n+ colhtml = '<p style=\"text-align:center;margin:0\">' + i.toString() + '</p>' + colhtml;\n+ }\n$('#deckColumn' + index).html(colhtml);\n});\n- $('#deckName').text('Deck (' + cards + ' cards, ' + lands + ' lands)')\n+ $('#deckName').text('Deck (' + cards + ' cards, ' + lands + ' lands, '+ creatures + ' creatures)')\n//fill up sideboard\ndeck.playersideboard.forEach(function(col, index) {\n- var colhtml = \"\";\n+ var colhtml ='';\n+ var i = 0;\ncol.forEach(function(card, index2) {\n+ i= i+1;\nif (card.details.card_flip) {\ncolhtml += '<a style=\"z-index:' + index2 + '; position: relative; top:-' + 155 * (index2) + 'px;\" class=\"autocard\" card=\"' + card.details.display_image + '\" card_flip=\"' + card.details.image_flip + '\" href=\"#\"><img class=\"sideboardcard\" data-id=\"' + index2 + '\" data-col=\"' + index + '\" src=\"' + card.details.display_image + '\" width=\"' + cardWidth + '\" height=\"' + cardHeight + '\"/></a>';\n} else {\ncolhtml += '<a style=\"z-index:' + index2 + '; position: relative; top:-' + 155 * (index2) + 'px;\" class=\"autocard\" card=\"' + card.details.display_image + '\" href=\"#\"><img class=\"sideboardcard\" data-id=\"' + index2 + '\" data-col=\"' + index + '\" src=\"' + card.details.display_image + '\" width=\"' + cardWidth + '\" height=\"' + cardHeight + '\"/></a>';\n}\n});\n+ if (i > 0){\n+ colhtml = '<p style=text-align:center>' + i.toString() + '</p>' + colhtml;\n+ }\n$('#sideboardColumn' + index).html(colhtml);\n});\n",
        "org_msg": "Added count to the top of each column in deck editor and creature count to top of deck editor",
        "sim_msg": "Adjust css for l5r elements",
        "sim_diff": "diff --git a/less/gameboard.less b/less/gameboard.less flex: 1;\n}\n+.province-pane {\n+ display: flex;\n+ flex-direction: column;\n+ justify-content: center;\n+ align-items: center;\n+}\n+\n+.provinces-group {\n+ display: flex;\n+ flex: 1;\n+ flex-direction: column;\n+ justify-content: flex-start;\n+\n+ &.our-side {\n+ justify-content: flex-end;\n+ }\n+}\n+\n.arrow {\ncontent: '';\ndisplay: block;\n}\n.province {\n+ padding: 0px;\n+ position: relative;\n+ margin: 5px 7px;\n+\n+ &.vertical {\n+ height: @card-height;\n+ width: @card-width;\n+ }\n+\n+ &.horizontal {\n+ height: @card-width;\n+ width: @card-height;\n+ }\n+}\n+\n+.province-merge {\nmargin: 5px;\n.popup {\n@@ -473,6 +507,26 @@ span.down-arrow {\ndisplay: flex;\n}\n+.player-deck-row {\n+ display: flex;\n+ margin-top: 5px;\n+\n+ &.our-side {\n+ margin-top: 0;\n+ margin-bottom: 5px;\n+ }\n+}\n+\n+.player-stronghold-row {\n+ display: flex;\n+ margin-top: 5px;\n+\n+ &.our-side {\n+ margin-top: 0;\n+ margin-bottom: 5px;\n+ }\n+}\n+\n.deck-cards {\ndisplay: flex;\n}\n@@ -560,9 +614,7 @@ span.down-arrow {\n}\n.honor-fan {\n- position: relative;\n- margin: 5px;\n- padding: 5px 10px;\n+ padding: 0px 10px;\n}\nimg.honor-fan-value {\n@@ -637,3 +689,22 @@ div.placeholder .panel-header {\nbackground: #efeade;\npadding: 0px;\n}\n+\n+.placeholder {\n+ background-color: #efeade;\n+ border: 0px;\n+ box-shadow: none;\n+ padding: 0px;\n+ position: relative;\n+ margin: 5px 7px;\n+\n+ &.vertical {\n+ height: @card-height;\n+ width: @card-width;\n+ }\n+\n+ &.horizontal {\n+ height: @card-width;\n+ width: @card-height;\n+ }\n+}\n\\ No newline at end of file\n",
        "chatgpt_cot": "Add creature count to deck and sideboard, update deck name to include creature count, and display the number of cards in each column."
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -114,7 +114,9 @@ router.get('/explore', async (req, res) => {\nrouter.get('/random', async (req, res) => {\nconst count = await Cube.count();\nconst random = Math.floor(Math.random() * count);\n- const cube = await Cube.findOne().skip(random);\n+ const cube = await Cube.findOne()\n+ .skip(random)\n+ .lean();\nres.redirect(`/cube/overview/${cube.urlAlias ? cube.urlAlias : cube.shortID}`);\n});\n@@ -130,7 +132,9 @@ router.get('/dashboard', async (req, res) => {\nowner: user._id,\n},\nCUBE_PREVIEW_FIELDS,\n- ).sort({\n+ )\n+ .lean()\n+ .sort({\ndate_updated: -1,\n});\nconst postsq = Blog.find({\n@@ -207,6 +211,7 @@ router.get('/dashboard/decks/:page', async (req, res) => {\nconst cubes = await Cube.find({\nowner: user._id,\n})\n+ .lean()\n.sort({\ndate_updated: -1,\n})\n@@ -346,10 +351,10 @@ router.get('/search/:query/:page', async (req, res) => {\nconst count = await Cube.count(query);\nconst cubes = await Cube.find(query, CUBE_PREVIEW_FIELDS)\n+ .lean()\n.sort(sort)\n.skip(perPage * page)\n- .limit(perPage)\n- .lean();\n+ .limit(perPage);\nconst reactProps = {\nquery: req.params.query,\n",
        "org_msg": "perf updates",
        "sim_msg": "Add missing route back in",
        "sim_diff": "diff --git a/app/router.js b/app/router.js @@ -125,6 +125,9 @@ Router.map(function() {\nthis.route('add', {path: '/add/:cloud_id'});\n});\n+ this.route('new', {path: '/add'}, function() {\n+ this.route('index', {path: '/'});\n+ });\nthis.route('host', {path: '/:host_id', resetNamespace: true}, function() {\nthis.route('containers');\n",
        "chatgpt_cot": "Refactor Cube route methods, add .lean() to improve performance, and fix formatting issues for better code readability."
    },
    {
        "org_diff": "diff --git a/src/utils/draftbots.js b/src/utils/draftbots.js @@ -160,7 +160,7 @@ export const getFixing = (combination, _, card) => {\nconst isLand = typeLine.indexOf('Land') > -1;\nconst isFetch = !!fetchLands[cardName(card)];\nconst hasBasicTypes = basics.filter((basic) => typeLine.toLowerCase().includes(basic.toLowerCase())).length > 1;\n- let score = card.rating;\n+ let score = 1;\n// Guaranteed contains by botRatingAndCombination\nif (isLand || isFetch) {\nscore /= COLOR_SCALING_FACTOR[combination.length];\n@@ -187,7 +187,7 @@ export const getFixing = (combination, _, card) => {\n} else {\nscore *= 0.5 * COLOR_SCALING_FACTOR[combination.length];\n}\n- return Math.min(10, score / 1000);\n+ return Math.min(10, score);\n};\nexport const getRatingWeight = (pack, pick, initialState) => {\n",
        "org_msg": "Make  fixing agnostic from rating",
        "sim_msg": "Implmented Seal of the Crab",
        "sim_diff": "diff --git a/server/game/cards/02.3-ItFC/SealOfTheCrab.js b/server/game/cards/02.3-ItFC/SealOfTheCrab.js @@ -2,9 +2,15 @@ const DrawCard = require('../../drawcard.js');\nclass SealOfTheCrab extends DrawCard {\nsetupCardAbilities(ability) {\n+ this.whileAttached({\n+ effect: [\n+ ability.effects.addFaction('crab'),\n+ ability.effects.addTrait('berserker')\n+ ]\n+ });\n}\n}\n-SealOfTheCrab.id = 'seal-of-the-crab'; // This is a guess at what the id might be - please check it!!!\n+SealOfTheCrab.id = 'seal-of-the-crab';\nmodule.exports = SealOfTheCrab;\n",
        "chatgpt_cot": "Update scoring logic in draftbots.js to set a minimum score of 1 and adjust the return value calculation for better card evaluation."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1161,7 +1161,7 @@ router.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\nuserid: req.user._id,\nusername: req.user.username,\npickorder: [],\n- deckname: `${req.user.username}'s decklist upload on ${deck.date.toLocaleString('en-US')}`,\n+ name: `${req.user.username}'s decklist upload on ${deck.date.toLocaleString('en-US')}`,\ncols: 16,\ndeck: added,\nsideboard: [],\n",
        "org_msg": "fix root cause",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "\"Update deckname attribute to name attribute in decklist upload to fix display issue\""
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -77,17 +77,6 @@ function legalityToInt(legality) {\n}\n}\n-function arraysEqual(a, b) {\n- if (a === b) return true;\n- if (a == null || b == null) return false;\n- if (a.length != b.length) return false;\n-\n- for (var i = 0; i < a.length; ++i) {\n- if (a[i] !== b[i]) return false;\n- }\n- return true;\n-}\n-\nfunction cardsAreEquivalent(card, details) {\nif (card.cardID != details.cardID) {\nreturn false;\n@@ -101,10 +90,10 @@ function cardsAreEquivalent(card, details) {\nif (card.type_line != details.type_line) {\nreturn false;\n}\n- if (!arraysEqual(card.tags, details.tags)) {\n+ if (!util.arraysEqual(card.tags, details.tags)) {\nreturn false;\n}\n- if (!arraysEqual(card.colors, details.colors)) {\n+ if (!util.arraysEqual(card.colors, details.colors)) {\nreturn false;\n}\n",
        "org_msg": "remove duplicate arraysEqual function definition",
        "sim_msg": "chore(utils/is): code style refactor",
        "sim_diff": "diff --git a/ui/src/utils/is.js b/ui/src/utils/is.js @@ -4,59 +4,109 @@ const\nhasArrayBuffer = typeof ArrayBuffer === 'function'\nexport function isDeepEqual (a, b) {\n- if (a === b) return true\n+ if (a === b) {\n+ return true\n+ }\n+\nif (a !== null && b !== null && typeof a === 'object' && typeof b === 'object') {\n- if (a.constructor !== b.constructor) return false\n+ if (a.constructor !== b.constructor) {\n+ return false\n+ }\n+\nlet length, i, keys\n+\nif (a.constructor === Array) {\nlength = a.length\n- if (length !== b.length) return false\n+\n+ if (length !== b.length) {\n+ return false\n+ }\n+\nfor (i = length; i-- !== 0;) {\n- if (isDeepEqual(a[i], b[i]) !== true) return false\n+ if (isDeepEqual(a[i], b[i]) !== true) {\n+ return false\n}\n+ }\n+\nreturn true\n}\n- if (hasMap && a.constructor === Map) {\n- if (a.size !== b.size) return false\n+ if (hasMap === true && a.constructor === Map) {\n+ if (a.size !== b.size) {\n+ return false\n+ }\n+\nfor (i of a.entries()) {\n- if (b.has(i[0]) !== true) return false\n+ if (b.has(i[0]) !== true) {\n+ return false\n+ }\n}\n+\nfor (i of a.entries()) {\n- if (isDeepEqual(i[1], b.get(i[0])) !== true) return false\n+ if (isDeepEqual(i[1], b.get(i[0])) !== true) {\n+ return false\n+ }\n}\n+\nreturn true\n}\n- if (hasSet && a.constructor === Set) {\n- if (a.size !== b.size) return false\n+ if (hasSet === true && a.constructor === Set) {\n+ if (a.size !== b.size) {\n+ return false\n+ }\n+\nfor (i of a.entries()) {\n- if (b.has(i[0]) !== true) return false\n+ if (b.has(i[0]) !== true) {\n+ return false\n+ }\n}\n+\nreturn true\n}\n- if (hasArrayBuffer && a.buffer != null && a.buffer.constructor === ArrayBuffer) {\n+ if (hasArrayBuffer === true && a.buffer != null && a.buffer.constructor === ArrayBuffer) {\nlength = a.length\n- if (length !== b.length) return false\n+\n+ if (length !== b.length) {\n+ return false\n+ }\n+\nfor (i = length; i-- !== 0;) {\n- if (a[i] !== b[i]) return false\n+ if (a[i] !== b[i]) {\n+ return false\n+ }\n}\n+\nreturn true\n}\n- if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags\n- if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf()\n- if (a.toString !== Object.prototype.toString) return a.toString() === b.toString()\n+ if (a.constructor === RegExp) {\n+ return a.source === b.source && a.flags === b.flags\n+ }\n+\n+ if (a.valueOf !== Object.prototype.valueOf) {\n+ return a.valueOf() === b.valueOf()\n+ }\n+\n+ if (a.toString !== Object.prototype.toString) {\n+ return a.toString() === b.toString()\n+ }\nkeys = Object.keys(a)\nlength = keys.length\n- if (length !== Object.keys(b).length) return false\n+\n+ if (length !== Object.keys(b).length) {\n+ return false\n+ }\nfor (i = length; i-- !== 0;) {\nconst key = keys[i]\n- if (isDeepEqual(a[key], b[key]) !== true) return false\n+ if (isDeepEqual(a[key], b[key]) !== true) {\n+ return false\n}\n+ }\n+\nreturn true\n}\n",
        "chatgpt_cot": "\"Refactor arraysEqual function to use util module for code organization and reusability in cardsAreEquivalent function.\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -329,10 +329,12 @@ app.get('*', function(req, res){\nres.redirect('/404');\n});\n+/*\nschedule.scheduleJob('0 0 * * *', function(){\nconsole.log(\"Starting midnight cardbase update...\");\nupdatedb.updateCardbase();\n});\n+*/\n// Start server\nhttp.createServer(app).listen(5000,'localhost', function()\n",
        "org_msg": "Disabling midnight update\nDisabling midnight update due to bug where the download fails and crashes server. Upon startup attempt, the server fails to restart due to bad download. I will fix the issue, but currently need to disable the feature until I do to keep the server up.",
        "sim_msg": "refactor: allows for web routes to worked on locally even if powergate and devnet are not running",
        "sim_diff": "diff --git a/server.js b/server.js @@ -67,6 +67,7 @@ app.prepare().then(async () => {\nif (!production) {\n// TODO(jim): Remove later.\n// We wipe all of the local data each time you run the application.\n+ try {\nawait Utilities.resetFileSystem();\nconst updates = await Utilities.refresh({ PG: PowerGate });\n@@ -120,6 +121,11 @@ app.prepare().then(async () => {\nconst parsedLibrary = FS.readFileSync(\"./.data/library.json\", \"utf8\");\nstate.library = JSON.parse(parsedLibrary).library;\n}\n+ } catch (e) {\n+ console.log(\n+ \"[ prototype ] you can not run the filecoin client, only web views allowed.\"\n+ );\n+ }\n}\nconst server = express();\n@@ -324,7 +330,7 @@ app.prepare().then(async () => {\n});\nserver.get(\"/\", async (req, res) => {\n- if (production) {\n+ if (production || !state.token) {\nreturn res.redirect(Constants.GITHUB_URL);\n}\n",
        "chatgpt_cot": "Add scheduled job to update cardbase at midnight. Fixes issue with cardbase not being updated regularly."
    },
    {
        "org_diff": "diff --git a/src/components/ListView.js b/src/components/ListView.js @@ -2,19 +2,19 @@ import React, { useCallback, useContext, useState, useEffect } from 'react';\nimport { Form, Input } from 'reactstrap';\n-import { cardsAreEquivalent } from '../util/Card';\n-import { csrfFetch } from '../util/CSRF';\n-import { getLabels, sortDeep } from '../util/Sort';\n-\n-import CubeContext from './CubeContext';\n-import GroupModalContext from './GroupModalContext';\n-import PagedTable from './PagedTable';\n-import SortContext from './SortContext';\n-import TagContext from './TagContext';\n-import TagInput from './TagInput';\n-import withAutocard from './WithAutocard';\n-import withLoading from './WithLoading';\n-import useAlerts from '../hooks/UseAlerts';\n+import { cardsAreEquivalent } from 'util/Card';\n+import { csrfFetch } from 'util/CSRF';\n+import { getLabels, sortDeep } from 'util/Sort';\n+\n+import CubeContext from 'components/CubeContext';\n+import GroupModalContext from 'components/GroupModalContext';\n+import PagedTable from 'components/PagedTable';\n+import SortContext from 'components/SortContext';\n+import TagContext from 'components/TagContext';\n+import TagInput from 'components/TagInput';\n+import withAutocard from 'components/WithAutocard';\n+import withLoading from 'components/WithLoading';\n+import useAlerts from 'hooks/UseAlerts';\nconst colorCombos = [\n'C',\n",
        "org_msg": "Update ListView imports.",
        "sim_msg": "Align core TableHeadingCellContainer with LocalPlugin",
        "sim_diff": "diff --git a/src/components/TableHeadingCellContainer.js b/src/components/TableHeadingCellContainer.js @@ -5,16 +5,16 @@ import compose from 'recompose/compose';\nimport mapProps from 'recompose/mapProps';\nimport getContext from 'recompose/getContext';\nimport withHandlers from 'recompose/withHandlers';\n-import { sortPropertyByIdSelector, iconsForComponentSelector, classNamesForComponentSelector, stylesForComponentSelector, customHeadingComponentSelector, cellPropertiesSelector } from '../selectors/dataSelectors';\n+import { sortPropertyByIdSelector, iconsForComponentSelector, customHeadingComponentSelector, stylesForComponentSelector, classNamesForComponentSelector, cellPropertiesSelector } from '../selectors/dataSelectors';\nimport { setSortColumn } from '../actions';\nimport { combineHandlers } from '../utils/compositionUtils';\nimport { getSortIconProps, setSortProperties } from '../utils/sortUtils';\nimport { valueOrResult } from '../utils/valueUtils';\n-const DefaultTableHeadingCellContent = ({title, icon}) => (\n+const DefaultTableHeadingCellContent = ({title, icon, iconClassName}) => (\n<span>\n{ title }\n- { icon && <span>{icon}</span> }\n+ { icon && <span className={iconClassName}>{icon}</span> }\n</span>\n)\n@@ -28,6 +28,8 @@ const EnhancedHeadingCell = OriginalComponent => compose(\ncustomHeadingComponent: customHeadingComponentSelector(state, props),\ncellProperties: cellPropertiesSelector(state, props),\nclassName: classNamesForComponentSelector(state, 'TableHeadingCell'),\n+ sortAscendingClassName: classNamesForComponentSelector(state, 'TableHeadingCellAscending'),\n+ sortDescendingClassName: classNamesForComponentSelector(state, 'TableHeadingCellDescending'),\nstyle: stylesForComponentSelector(state, 'TableHeadingCell'),\n...iconsForComponentSelector(state, 'TableHeadingCell'),\n}),\n@@ -42,6 +44,7 @@ const EnhancedHeadingCell = OriginalComponent => compose(\nonClick: props.cellProperties.sortable === false ? (() => () => {}) :\nprops.events.setSortProperties || setSortProperties,\n})),\n+ //TODO: use with props on change or something more performant here\nmapProps(props => {\nconst iconProps = getSortIconProps(props);\nconst title = props.customHeadingComponent ?\n",
        "chatgpt_cot": "\"Refactor imports to use absolute paths and organize imports in ListView.js\""
    },
    {
        "org_diff": "diff --git a/src/components/CustomDraftFormatModal.js b/src/components/CustomDraftFormatModal.js @@ -226,7 +226,7 @@ const CustomDraftFormatModal = ({ isOpen, toggle, formatIndex, format, setFormat\n<CardBody>\n<Form inline className=\"mb-3\">\n<Label>\n- Discard last\n+ Discard the last\n<Input\ntype=\"number\"\nsize=\"sm\"\n@@ -237,11 +237,11 @@ const CustomDraftFormatModal = ({ isOpen, toggle, formatIndex, format, setFormat\nonChange={handleChangeTrash}\ndata-index={index}\n/>\n- cards left in the pack during drafting.\n+ cards left in each pack.\n</Label>\n<Label className=\"ml-4\">\n<Input type=\"checkbox\" checked={pack.sealed} onClick={handleChangeSealed} data-index={index} />\n- This pack is a sealed pack.\n+ Is a sealed pack.\n</Label>\n</Form>\n<Form inline className=\"mb-3\">\n",
        "org_msg": "Some small changes to the text in the Custom Format UI.",
        "sim_msg": "Add numeric formatting to civicFormat.dollars",
        "sim_diff": "diff --git a/packages/component-library/src/utils/civicFormat.js b/packages/component-library/src/utils/civicFormat.js @@ -38,7 +38,7 @@ const numeric = d => {\nconst year = format('.0f');\nconst percentage = format('.0%');\n-const dollars = d => `$${d}`;\n+const dollars = d => `$${numeric(d)}`;\nconst titleCase = str => startCase(toLower(str));\nconst unformatted = d => d;\n",
        "chatgpt_cot": "Refactor text in CustomDraftFormatModal for clarity and consistency in descriptions of pack contents."
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -28,15 +28,13 @@ html(lang='en')\nbody\nnav.navbar.navbar-expand-md.navbar-dark.bg-dark\n.container\n- .d-flex.flex-row.flex-nowrap.justify-content-between(style='flex: 1 1 auto; min-width: 0')\n- .overflow-hidden\n+ .d-flex.flex-nowrap.w-100(style='flex: 10000 1 auto; min-width: 0')\n+ .overflow-hidden.mr-auto\na(href='/')\nimg(src=\"/content/banner.png\" style='height: 45px; margin: 0 0' alt=\"Cube Cobra: a site for Magic: the Gathering Cubing\")\nbutton.navbar-toggler(type='button', data-toggle='collapse', data-target='#navbar', aria-controls='navbar', aria-expanded='false', aria-label='Toggle navigation')\nspan.navbar-toggler-icon\n- #navbar.collapse.navbar-collapse(style='flex: 10000 1 auto')\n- ul.navbar-nav.mr-auto\n-\n+ #navbar.collapse.navbar-collapse(style='flex: 0 1 auto')\nul.navbar-nav\nli.nav-item.dropdown\na#navbarDropdownMenuLink.nav-link.dropdown-toggle(href='#', role='button', data-toggle='dropdown', aria-haspopup='true', aria-expanded='false')\n",
        "org_msg": "Fix mobile navbar.",
        "sim_msg": "Add nested menus support to nav fragment",
        "sim_diff": "diff --git a/layouts/partials/fragments/nav.html b/layouts/partials/fragments/nav.html {{- end }}\n{{- if .Site.Menus.main -}}\n{{- range sort .Site.Menus.main }}\n- {{- $isMenuCurrent := or (eq $.root.Permalink .URL) (eq (printf \"%s/\" $.root.Permalink) .URL) (eq $.root.Permalink (printf \"%s/\" .URL)) -}}\n- <li class=\"nav-item\">\n- <a href=\"{{ .URL | relLangURL }}\"\n+ {{- $isMenuCurrent := or ($.root.HasMenuCurrent \"main\" .) (eq $.root.Permalink .URL) (eq (printf \"%s/\" $.root.Permalink) .URL) (eq $.root.Permalink (printf \"%s/\" .URL)) -}}\n+ <li class=\"nav-item {{ if .HasChildren }}dropdown{{ end }}\">\n+ <a\n{{- if hasPrefix .URL \"#\" }}\nclass=\"nav-link anchor\"\n{{- else }}\n- class=\"nav-link {{- if $isMenuCurrent }} active default-active {{- end -}}\"\n- {{- end }}>\n+ class=\"nav-link {{- if $isMenuCurrent }} active default-active {{- end -}} {{ if .HasChildren }} dropdown-toggle{{ end }}\"\n+ {{- end }}\n+ {{if .HasChildren}}\n+ id=\"navbarDropdown\"\n+ role=\"button\"\n+ data-toggle=\"dropdown\"\n+ aria-haspopup=\"true\"\n+ aria-expanded=\"false\"\n+ href=\"#\"\n+ {{ else }}\n+ href=\"{{ .URL | relLangURL }}\"\n+ {{ end }}>\n{{ .Name }}\n</a>\n+ {{ if .HasChildren }}\n+ <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n+ {{ range .Children }}\n+ <a class=\"dropdown-item {{ if $.root.IsMenuCurrent \"main\" . }}active{{ end }}\" href=\"{{ .URL }}\">{{ .Name }}</a>\n+ {{ end }}\n+ </div>\n+ {{ end }}\n</li>\n{{- end -}}\n{{- end }}\n",
        "chatgpt_cot": "Refactor layout.pug for improved responsiveness and layout consistency. Updated flex properties and removed unnecessary classes for better alignment and presentation."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -8,7 +8,7 @@ var _catalog = {};\nfunction initializeCatalog() {\n_catalog.dict = {};\n_catalog.names = [];\n- _catalog.nameToId = [];\n+ _catalog.nameToId = {};\n_catalog.full_names = [];\n_catalog.imagedict = {};\n_catalog.cardimages = {};\n",
        "org_msg": "init nameToId to the correct datatype",
        "sim_msg": "wrench: Use default values for json structure to be backwards compatible",
        "sim_diff": "diff --git a/common/ItemRegistry.js b/common/ItemRegistry.js @@ -724,12 +724,17 @@ var getItemTypes = () => {\n// individual items.\nlet _transformConfig =\n(config) => {\n- const icon = config.icon != undefined ? config.icon : '';\n- const name = config.name != undefined ? config.name : '';\n- const type = config.type != undefined ? config.type : '';\n+ const name = config.name != undefined ? config.name : _('Unnamed Item');\n+ const icon = config.icon != undefined ? config.icon : 'image-missing';\nconst data = config.data != undefined ? config.data : '';\nconst angle = config.angle != undefined ? config.angle : -1;\n+ let type = config.type;\n+\n+ if (type == undefined) {\n+ type = config.children != undefined ? 'Submenu' : 'DBusSignal';\n+ }\n+\nconst result = getItemTypes()[type].createItem(name, icon, angle, data);\n// Load all children recursively.\n@@ -744,8 +749,11 @@ let _transformConfig =\nvar transformConfig = (config) => {\n// Transform the configuration into a menu structure.\n- const structure =\n- getItemTypes()['Menu'].createItem(config.name, config.icon, config.centered);\n+ const name = config.name != undefined ? config.name : _('Unnamed Menu');\n+ const icon = config.icon != undefined ? config.icon : 'image-missing';\n+ const centered = config.centered != undefined ? config.centered : false;\n+\n+ const structure = getItemTypes()['Menu'].createItem(name, icon, centered);\nfor (let j = 0; j < config.children.length; j++) {\nstructure.children.push(_transformConfig(config.children[j]));\n",
        "chatgpt_cot": "\"Fix bug in initializeCatalog function by changing _catalog.nameToId from array to object\""
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -167,14 +167,16 @@ const SelectEmptyModal = ({ isOpen, toggle }) => (\nconst CompareCollapse = (props) => {\nconst { cubeID } = useContext(CubeContext);\nconst [compareID, setCompareID] = useState('');\n- const handleChange = useCallback((event) => setCompareID(event.target.value));\n+ const handleChange = useCallback((event) => setCompareID(event.target.value), []);\n+\n+ const targetUrl = `/cube/compare/${cubeID}/to/${compareID}`;\nreturn (\n<Collapse {...props}>\n<Container>\n<Row>\n<Col>\n- <Form inline>\n+ <Form method=\"GET\" action={targetUrl} inline>\n<Input\ntype=\"text\"\nclassName=\"mb-2 mr-2\"\n@@ -182,7 +184,7 @@ const CompareCollapse = (props) => {\nvalue={compareID}\nonChange={handleChange}\n/>\n- <Button type=\"submit\" color=\"success\" className=\"mb-2\" href={`/cube/compare/${cubeID}/to/${compareID}`}>\n+ <Button color=\"success\" className=\"mb-2\" href={targetUrl}>\nCompare Cubes\n</Button>\n</Form>\n",
        "org_msg": "Fix enter button on CompareCollapse.",
        "sim_msg": "docs(yoga/doc): remove unused return",
        "sim_diff": "diff --git a/packages/doc/src/components/Navigation/Navigation.jsx b/packages/doc/src/components/Navigation/Navigation.jsx @@ -196,8 +196,7 @@ ListItem.propTypes = {\nprefix: bool.isRequired,\n};\n-const List = ({ tree, level, toggleMenu, prefix }) => {\n- return (\n+const List = ({ tree, level, toggleMenu, prefix }) => (\n<StyledList>\n{Object.values(tree)\n.sort((t1, t2) => (t1.order > t2.order ? 1 : -1))\n@@ -215,7 +214,6 @@ const List = ({ tree, level, toggleMenu, prefix }) => {\n))}\n</StyledList>\n);\n-};\nList.propTypes = {\ntree: shape({}).isRequired,\n",
        "chatgpt_cot": "Add missing dependencies and fix form submission to compare cubes in CubeListNavbar."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/filterCubes.test.js b/__tests__/serverjs/filterCubes.test.js @@ -2,6 +2,7 @@ const sinon = require('sinon');\nconst carddb = require('../../serverjs/cards');\nconst Card = require('../../models/card');\nconst { makeFilter } = require('../../serverjs/filterCubes');\n+const { arraysAreEqualSets } = require('../../dist/utils/Util');\nconst TEST_IDS = ['123', '456', '7890'];\n@@ -56,8 +57,37 @@ describe('filterCubes', () => {\nexpect(err).toBeFalsy();\nconst { query, fieldsUsed } = filter;\n- expect(fieldsUsed).toEqual(['categoryPrefixes']);\n- expect(query).toEqual({ categoryPrefixes: { $regex: 'Commander', $options: 'i' } });\n+ expect(arraysAreEqualSets(fieldsUsed, ['categoryPrefixes', 'type', 'overrideCategory'])).toBeTruthy();\n+ expect(query).toEqual({\n+ $or: [\n+ {\n+ $and: [\n+ {\n+ overrideCategory: true,\n+ },\n+ {\n+ categoryPrefixes: {\n+ $options: 'i',\n+ $regex: 'Commander',\n+ },\n+ },\n+ ],\n+ },\n+ {\n+ $and: [\n+ {\n+ overrideCategory: false,\n+ },\n+ {\n+ type: {\n+ $options: 'i',\n+ $regex: 'Commander',\n+ },\n+ },\n+ ],\n+ },\n+ ],\n+ });\n});\nit('correctly parses categoryOverride condition', async () => {\n@@ -65,8 +95,37 @@ describe('filterCubes', () => {\nexpect(err).toBeFalsy();\nconst { query, fieldsUsed } = filter;\n- expect(fieldsUsed).toEqual(['categoryOverride']);\n- expect(query).toEqual({ categoryOverride: { $regex: 'Legacy', $options: 'i' } });\n+ expect(arraysAreEqualSets(fieldsUsed, ['categoryOverride', 'type', 'overrideCategory'])).toBeTruthy();\n+ expect(query).toEqual({\n+ $or: [\n+ {\n+ $and: [\n+ {\n+ overrideCategory: true,\n+ },\n+ {\n+ categoryOverride: {\n+ $options: 'i',\n+ $regex: 'Legacy',\n+ },\n+ },\n+ ],\n+ },\n+ {\n+ $and: [\n+ {\n+ overrideCategory: false,\n+ },\n+ {\n+ type: {\n+ $options: 'i',\n+ $regex: 'Legacy',\n+ },\n+ },\n+ ],\n+ },\n+ ],\n+ });\n});\nit('correctly parses card condition', async () => {\n",
        "org_msg": "Fix tests for cube filters.",
        "sim_msg": "Add createdAt filter to ListReplies",
        "sim_diff": "diff --git a/src/graphql/queries/ListReplies.js b/src/graphql/queries/ListReplies.js @@ -7,6 +7,7 @@ import {\ncreateConnectionType,\ngetSortArgs,\npagingArgs,\n+ getArithmeticExpressionType,\n} from 'graphql/util';\nimport scrapUrls from 'util/scrapUrls';\n@@ -34,6 +35,16 @@ export default {\ntype: ReplyTypeEnum,\ndescription: 'List the replies of certain types',\n},\n+ createdAt: {\n+ type: getArithmeticExpressionType(\n+ 'ListRepliesCreatedAtExpr',\n+ GraphQLString\n+ ),\n+ description: `\n+ List only the replies that were created between the specific time range.\n+ The time range value is in elasticsearch date format (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html)\n+ `,\n+ },\n}),\n},\norderBy: {\n@@ -133,6 +144,20 @@ export default {\nfilterQueries.push({ term: { userId } }, { term: { appId } });\n}\n+ if (filter.createdAt) {\n+ // @todo: handle invalid type error?\n+ // @todo: extract repetitive logic\n+ const q = Object.fromEntries(\n+ Object.entries(filter.createdAt)\n+ .filter(([key]) => ['GT', 'GTE', 'LT', 'LTE'].includes(key))\n+ .map(([key, value]) => [key.toLowerCase(), value])\n+ );\n+\n+ filterQueries.push({\n+ range: { createdAt: q },\n+ });\n+ }\n+\nbody.query = {\nbool: {\nshould:\n",
        "chatgpt_cot": "Add arraysAreEqualSets method, update filterCubes test to check multiple fields, and conditions for categoryPrefixes, type, and overrideCategory."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -786,7 +786,7 @@ async function updateCardbase(ratings = [], basePath = 'private', defaultPath =\nawait module.exports.downloadDefaultCards(basePath, defaultPath, allPath);\n} catch (error) {\nwinston.error('Downloading card data failed:');\n- winston.error(error.message);\n+ winston.error(error.message, error);\nwinston.error('Cardbase was not updated');\nreturn;\n}\n@@ -796,7 +796,7 @@ async function updateCardbase(ratings = [], basePath = 'private', defaultPath =\nawait saveAllCards(ratings, basePath, defaultPath, allPath);\n} catch (error) {\nwinston.error('Updating cardbase objects failed:');\n- winston.error(error.message);\n+ winston.error(error.message, error);\nwinston.error('Cardbase update may not have fully completed');\n}\n",
        "org_msg": "added error metadata to logger",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "\"Fix error message handling in updateCardbase.js\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.js b/__tests__/serverjs/updatecards.js @@ -5,7 +5,7 @@ beforeEach(() => {\n// delete /private\n});\n-test(\"updateCardBase\", () => {\n+test(\"updateCardBase creates the expected files\", () => {\nexpect.assertions(7);\nvar promise = new Promise((resolve, reject) => {\nprocess.nextTick(() => {\n",
        "org_msg": "better test description",
        "sim_msg": "\"Fix\" race conditions in ssdp restart tests",
        "sim_diff": "diff --git a/test/www/jxcore/bv_tests/testSSDPServer.js b/test/www/jxcore/bv_tests/testSSDPServer.js @@ -137,7 +137,8 @@ test(\nclientStopStub.reset();\nreturn new Promise(function (resolve) {\nchangeBssid(newBssid);\n- setImmediate(function () {\n+ // TODO: #1805\n+ setTimeout(function () {\nt.equal(serverStartStub.callCount, 1, 'server start called once');\nt.equal(serverStopStub.callCount, 1, 'server stop called once');\nt.equal(clientStartStub.callCount, 1, 'client start called once');\n@@ -147,7 +148,7 @@ test(\nt.ok(clientStopStub.calledBefore(clientStartStub),\n'client stop called before start');\nresolve();\n- });\n+ }, 200);\n});\n}\n@@ -202,13 +203,14 @@ test(\nfunction testBssidChangeReaction (newBssid) {\nreturn new Promise(function (resolve) {\nchangeBssid(newBssid);\n- setImmediate(function () {\n+ // TODO: #1805\n+ setTimeout(function () {\nt.equal(serverStartStub.callCount, 0, 'server start never called');\nt.equal(serverStopStub.callCount, 0, 'server stop never called');\nt.equal(clientStartStub.callCount, 0, 'client start never called');\nt.equal(clientStopStub.callCount, 0, 'client start never called');\nresolve();\n- });\n+ }, 200);\n});\n}\n",
        "chatgpt_cot": "Update test for updateCardBase to ensure creation of expected files. Fix assertion count and add description for clarity."
    },
    {
        "org_diff": "diff --git a/__tests__/src/components/CubeListPage.test.js b/__tests__/src/components/CubeListPage.test.js @@ -5,10 +5,20 @@ import '@testing-library/jest-dom/extend-expect'\nimport exampleCardsFull from '../../../fixtures/examplecardsdetails';\nimport CubeListPage from 'components/CubeListPage';\n+const element = () =><CubeListPage cards={exampleCardsFull} cubeID=\"1\" canEdit={true} maybe={exampleCardsFull} defaultTagColors={[]} defaultShowTagColors={true} defaultSorts={['Color Category', 'Types-Multicolor']} />;\n+\ndescribe('CubeListPage', () => {\ntest('displays cards', () => {\n- const { getByText } = render(<CubeListPage cards={exampleCardsFull} cubeID=\"1\" canEdit={true} maybe={exampleCardsFull} defaultTagColors={[]} defaultShowTagColors={true} defaultSorts={['Color Category', 'Types-Multicolor']} />);\n+ const { getByText } = render(element());\nexpect(getByText('Ayara, First of Locthwain'));\n});\n+\n+ test('opens edit collapse', () => {\n+ const { getByPlaceholderText, getByText } = render(element());\n+\n+ fireEvent.click(getByText('Add/Remove'));\n+\n+ expect(getByPlaceholderText('Card to Add'));\n+ });\n});\n\\ No newline at end of file\n",
        "org_msg": "Add second test.",
        "sim_msg": "[test] Conformance to handle wrapped elements",
        "sim_diff": "diff --git a/test/utils/describeConformanceV5.js b/test/utils/describeConformanceV5.js @@ -43,7 +43,7 @@ function testThemeDefaultProps(element, getOptions) {\ndescribe('theme: default components', () => {\nit(\"respect theme's defaultProps\", () => {\nconst testProp = 'data-id';\n- const { muiName } = getOptions();\n+ const { muiName, render: testRender = render } = getOptions();\nconst theme = createMuiTheme({\ncomponents: {\n[muiName]: {\n@@ -54,7 +54,7 @@ function testThemeDefaultProps(element, getOptions) {\n},\n});\n- const { container } = render(<ThemeProvider theme={theme}>{element}</ThemeProvider>);\n+ const { container } = testRender(<ThemeProvider theme={theme}>{element}</ThemeProvider>);\nexpect(container.firstChild).to.have.attribute(testProp, 'testProp');\n});\n@@ -75,8 +75,7 @@ function testThemeStyleOverrides(element, getOptions) {\nif (/jsdom/.test(window.navigator.userAgent)) {\nthis.skip();\n}\n-\n- const { muiName, testStateOverrides } = getOptions();\n+ const { muiName, testStateOverrides, render: testRender = render } = getOptions();\nif (!testStateOverrides) {\nreturn;\n@@ -96,13 +95,14 @@ function testThemeStyleOverrides(element, getOptions) {\n},\n});\n- const { container } = render(\n+ const { container } = testRender(\n<ThemeProvider theme={theme}>\n{React.cloneElement(element, {\n[testStateOverrides.prop]: testStateOverrides.value,\n})}\n</ThemeProvider>,\n);\n+\nexpect(container.firstChild).to.toHaveComputedStyle(testStyle);\n});\n@@ -111,7 +111,7 @@ function testThemeStyleOverrides(element, getOptions) {\nthis.skip();\n}\n- const { muiName, testDeepOverrides } = getOptions();\n+ const { muiName, testDeepOverrides, render: testRender = render } = getOptions();\nconst testStyle = {\nmarginTop: '13px',\n@@ -139,7 +139,7 @@ function testThemeStyleOverrides(element, getOptions) {\n},\n});\n- const { container } = render(<ThemeProvider theme={theme}>{element}</ThemeProvider>);\n+ const { container } = testRender(<ThemeProvider theme={theme}>{element}</ThemeProvider>);\nexpect(container.firstChild).to.toHaveComputedStyle(testStyle);\n@@ -166,7 +166,7 @@ function testThemeStyleOverrides(element, getOptions) {\n},\n});\n- const { container: containerWithoutRootOverrides } = render(\n+ const { container: containerWithoutRootOverrides } = testRender(\n<ThemeProvider theme={themeWithoutRootOverrides}>{element}</ThemeProvider>,\n);\n@@ -198,7 +198,7 @@ function testThemeVariants(element, getOptions) {\nthis.skip();\n}\n- const { muiName, testVariantProps = {} } = getOptions();\n+ const { muiName, testVariantProps = {}, render: testRender = render } = getOptions();\nconst testStyle = {\nmarginTop: '13px',\n@@ -217,7 +217,7 @@ function testThemeVariants(element, getOptions) {\n},\n});\n- const { getByTestId } = render(\n+ const { getByTestId } = testRender(\n<ThemeProvider theme={theme}>\n{React.cloneElement(element, { ...testVariantProps, 'data-testid': 'with-props' })}\n{React.cloneElement(element, { 'data-testid': 'without-props' })}\n",
        "chatgpt_cot": "Add test for opening edit collapse in CubeListPage. Refactor code to render CubeListPage component using element function for reusability."
    },
    {
        "org_diff": "diff --git a/src/analytics/tokenGrid.js b/src/analytics/tokenGrid.js @@ -8,20 +8,22 @@ const dedupeCards = (cards) => {\nfunction tokenGrid(cards) {\nconst positioned = cards.map((card, index) => ({ ...card, position: index }));\n- const byTokenId = {};\n+ const byOracleId = {};\nfor (const card of positioned) {\nfor (const token of card.details.tokens || []) {\n- if (!byTokenId[token.cardID]) {\n- byTokenId[token.cardID] = {\n+ const oracleId = token.details.oracle_id;\n+ if (!byOracleId[oracleId]) {\n+ byOracleId[oracleId] = {\ntoken,\ncards: [],\n};\n}\n- byTokenId[token.cardID].cards.push(card);\n+ // TODO: Use most recent printing for this oracle ID.\n+ byOracleId[oracleId].cards.push(card);\n}\n}\n- const sorted = [...Object.entries(byTokenId)];\n+ const sorted = [...Object.entries(byOracleId)];\nsorted.sort((x, y) => compareCards(x[1].token, y[1].token));\nconst data = sorted.map(([, tokenData]) => ({\ncard: tokenData.token,\n",
        "org_msg": "Collapse identical tokens.",
        "sim_msg": "Add token selection support",
        "sim_diff": "diff --git a/ethereum.js b/ethereum.js @@ -506,12 +506,12 @@ let {Account: AccountAbi, FT: FTAbi, FTProxy: FTProxyAbi, NFT: NFTAbi, NFTProxy:\nconst nftBalance = await contracts['main'].NFT.methods.balanceOf(testAddress).call();\nconst tokens = [];\nfor (let i = 0; i < nftBalance; i++) {\n- const tokenId = await contracts['main'].NFT.methods.tokenOfOwnerByIndex(testAddress, i).call();\n- const url = await contracts['main'].NFT.methods.tokenURI(tokenId).call();\n+ const id = await contracts['main'].NFT.methods.tokenOfOwnerByIndex(testAddress, i).call();\n+ const url = await contracts['main'].NFT.methods.tokenURI(id).call();\nconst res = await fetch(url);\nconst j = await res.json();\ntokens.push({\n- tokenId,\n+ id,\nimage: j.image,\n});\n}\n@@ -520,6 +520,9 @@ let {Account: AccountAbi, FT: FTAbi, FTProxy: FTProxyAbi, NFT: NFTAbi, NFTProxy:\nconst el = document.createElement('div');\nel.classList.add('token');\nel.innerHTML = `<img src=\"${token.image}\">`;\n+ el.addEventListener('click', e => {\n+ sidechainNftIdInput.innerText = token.id;\n+ });\nethTokensEl.appendChild(el);\n}\n}\n@@ -533,12 +536,12 @@ let {Account: AccountAbi, FT: FTAbi, FTProxy: FTProxyAbi, NFT: NFTAbi, NFTProxy:\nconst nftBalance = await contracts['sidechain'].NFT.methods.balanceOf(testAddress).call();\nconst tokens = [];\nfor (let i = 0; i < nftBalance; i++) {\n- const tokenId = await contracts['sidechain'].NFT.methods.tokenOfOwnerByIndex(testAddress, i).call();\n- const url = await contracts['sidechain'].NFT.methods.tokenURI(tokenId).call();\n+ const id = await contracts['sidechain'].NFT.methods.tokenOfOwnerByIndex(testAddress, i).call();\n+ const url = await contracts['sidechain'].NFT.methods.tokenURI(id).call();\nconst res = await fetch(url);\nconst j = await res.json();\ntokens.push({\n- tokenId,\n+ id,\nimage: j.image,\n});\n}\n@@ -547,6 +550,9 @@ let {Account: AccountAbi, FT: FTAbi, FTProxy: FTProxyAbi, NFT: NFTAbi, NFTProxy:\nconst el = document.createElement('div');\nel.classList.add('token');\nel.innerHTML = `<img src=\"${token.image}\">`;\n+ el.addEventListener('click', e => {\n+ sidechainNftIdInput.innerText = token.id;\n+ });\nsidechainTokensEl.appendChild(el);\n}\n}\n",
        "chatgpt_cot": "\"Refactor tokenGrid to use oracle ID instead of token ID for sorting and grouping cards, and add TODO for using most recent printing for oracle ID.\""
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -731,8 +731,8 @@ function getLabels(sort) {\n}\nelse if (sort == 'Types-Multicolor')\n{\n- return ['Creature','Instant','Sorcery','Enchantment','Artifact','Planeswalker','Conspiracy','Scheme','Vanguard','Phenomenon','Contraption','Plane','Land','Azorius','Dimir','Rakdos','Gruul','Selesnya','Orzhov','Golgari','Simic','Izzet','Boros',\n- 'Bant','Esper','Grixis','Jund','Naya','Abzan','Jeskai','Sultai','Mardu','Temur','Non-White','Non-Blue','Non-Black','Non-Red','Non-Green','Five Color','Other'];\n+ return ['Creature','Planeswalker','Instant','Sorcery','Artifact','Enchantment','Conspiracy','Contraption','Phenomenon','Plane','Scheme','Vanguard','Azorius','Dimir','Rakdos','Gruul','Selesnya','Orzhov','Golgari','Simic','Izzet','Boros',\n+ 'Bant','Esper','Grixis','Jund','Naya','Abzan','Jeskai','Sultai','Mardu','Temur','Non-White','Non-Blue','Non-Black','Non-Red','Non-Green','Five Color','Land','Other'];\n}\nelse if (sort=='Legality')\n{\n",
        "org_msg": "updated sort of headings in table",
        "sim_msg": "add setup functions",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -133,6 +133,21 @@ class Player extends Spectator {\nreturn cardsToReturn;\n}\n+ attachStronghold(){\n+ this.moveCard(this.stronghold, 'stronghold province');\n+ }\n+\n+ fillProvinces(){\n+ var provinces = ['province 1', 'province 2', 'province 3', 'province 4'];\n+ _.each(provinces, province => {\n+ if(_.find(this.getSourceList(province), card => { return card.isDynasty })) {\n+ //Noop\n+ } else {\n+ this.moveCard(this.dynastyDeck.first(), province);\n+ }\n+ });\n+ }\n+\nanyCardsInPlay(predicate) {\nreturn this.allCards.any(card => card.location === 'play area' && predicate(card));\n}\n@@ -402,10 +417,6 @@ class Player extends Spectator {\n});\n}\n- isCharacterDead(card) {\n- return card.getType() === 'character' && card.isUnique() && this.isCardNameInList(this.deadPile, card);\n- }\n-\nplayCard(card) {\nif(!card) {\nreturn false;\n@@ -433,15 +444,7 @@ class Player extends Spectator {\ncanPutIntoPlay(card) {\nvar owner = card.owner;\n- return (\n- (!this.isCharacterDead(card) || this.canResurrect(card)) &&\n- (\n- owner === this ||\n- !this.getDuplicateInPlay(card) &&\n- !owner.getDuplicateInPlay(card) &&\n- (!owner.isCharacterDead(card) || owner.canResurrect(card))\n- )\n- );\n+ return true;\n}\ncanResurrect(card) {\n",
        "chatgpt_cot": "Reorder card types in getLabels() function to fix sorting issue."
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -117,7 +117,10 @@ const UploadBulkReplaceModal = ({ isOpen, toggle }) => {\n</ModalHeader>\n<CSRFForm method=\"POST\" action={`/cube/bulkreplacefile/${cubeID}`} encType=\"multipart/form-data\">\n<ModalBody>\n- <p>Acceptable files are .csv files with the exact format as our .csv export.</p>\n+ <p>\n+ Replaces all cards in your cube and Maybeboard. Acceptable files are .csv files with the exact format as our\n+ .csv export.\n+ </p>\n<CustomInput type=\"file\" id=\"uploadReplacementFile\" type=\"file\" name=\"document\" />\n<Label for=\"uploadReplacementFile\" className=\"sr-only\">\nChoose file\n",
        "org_msg": "Move helper functions to cubefn",
        "sim_msg": "Clean up inventory.js dependencies",
        "sim_diff": "diff --git a/inventory.js b/inventory.js import * as THREE from './three.module.js';\nimport {bindUploadFileButton} from './util.js';\nimport {loginManager} from './login.js';\n-import {world} from './world.js';\n+// import {world} from './world.js';\n// import {getContractSource} from './blockchain.js';\nimport {getState, setState} from './state.js';\n-import {renderer, scene, camera} from './app-object.js';\n+// import {renderer, scene, camera} from './app-object.js';\nimport {getExt} from './util.js';\nimport {storageHost, previewExt} from './constants.js';\n@@ -26,8 +26,6 @@ inventory.uploadFile = async file => {\ndata: files,\n}));\n};\n-bindUploadFileButton(document.getElementById('load-package-input'), inventory.uploadFile);\n-\ninventory.discardFile = async id => {\nconst fileIndex = files.findIndex(file => file.id === id);\nif (fileIndex !== -1) {\n@@ -89,6 +87,7 @@ loginManager.addEventListener('inventorychange', async e => {\n}));\n});\n+/* bindUploadFileButton(document.getElementById('load-package-input'), inventory.uploadFile);\ndocument.addEventListener('dragover', e => {\ne.preventDefault();\n});\n@@ -124,6 +123,6 @@ document.addEventListener('drop', async e => {\nawait inventory.uploadFile(file);\n}\n}\n-});\n+}); */\nexport default inventory;\n\\ No newline at end of file\n",
        "chatgpt_cot": "Add explanation to acceptable files and replace all cards in cube and Maybeboard in CubeListNavbar file."
    },
    {
        "org_diff": "diff --git a/src/utils/Card.js b/src/utils/Card.js @@ -250,8 +250,13 @@ export const cardElo = (card) => card.details.elo;\nexport const cardLayout = (card) => card.details.layout;\n-export const cardDevotion = (card, color) =>\n- cardCost(card)?.reduce((count, symbol) => count + (symbol.includes(color.toLowerCase()) ? 1 : 0), 0) ?? 0;\n+export const cardDevotion = (card, color) => {\n+ console.log(card.details.name);\n+ console.log(card);\n+ let cost = cardCost(card);\n+ if (cost && cardLayout(card) === 'adventure') cost = cost.slice(cost.findIndex((x) => x === 'split') + 1);\n+ return cost?.reduce((count, symbol) => count + (symbol.includes(color.toLowerCase()) ? 1 : 0), 0) ?? 0;\n+};\nexport const cardIsSpecialZoneType = (card) => {\nreturn (\n",
        "org_msg": "fixed devotion for adventurer cards",
        "sim_msg": "Card render debugging",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -137,30 +137,39 @@ export const generateCard = async ({\nsvg.setAttribute('height', cardHeight);\nsvg.innerHTML = cardSvgSource;\n+ // window.svg = svg;\n+\n{\nconst el = svg;\n- const titleTextEl = el.querySelector('#title-text');\n- titleTextEl.innerHTML = name;\n+ // name\n+ const nameEl = el.querySelector('#name');\n+ nameEl.innerHTML = name;\n+\n+ // type icon\nfor (let i = 0; i < types.length; i++) {\nconst type = types[i];\nconst typeEl = el.querySelector('#type-' + type);\ntypeEl.style.display = type === spec.stats.type ? 'block' : 'none';\n}\n+\n+ // stat values\n[\n+ 'level',\n'hp',\n'mp',\n- 'attack',\n- 'defense',\n- 'speed',\n- 'luck',\n+ 'atk',\n+ 'def',\n+ 'mag',\n+ 'spr',\n+ 'dex',\n+ 'lck',\n].forEach(statName => {\n- const statEl = el.querySelector('#' + statName);\n- const texts = statEl.querySelectorAll('text');\n- const textEl = texts[texts.length - 1];\n- textEl.innerHTML = escape(spec.stats[statName] + '');\n+ const statEl = el.querySelector('#' + statName + '-value');\n+ statEl.innerHTML = escape(spec.stats[statName] + '');\n});\n- {\n+\n+ /* {\nconst imageEl = el.querySelector('#Image image');\nimageEl.setAttribute('xlink:href', objectImage);\n}\n@@ -190,7 +199,7 @@ export const generateCard = async ({\ng.id = 'background-' + id;\nconst p = g.nextElementSibling;\np.style = `fill:url(#${g.id});`;\n- }\n+ } */\n}\nconst image = await new Promise((accept, reject) => {\n",
        "chatgpt_cot": "\"Refactor cardDevotion method to handle adventure layout and log card details for debugging\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3381,6 +3381,8 @@ router.post(\n});\n}\nconst data = await response.json();\n+ const pids = new Set();\n+ const cardNames = new Set();\nconst list = Object.entries(data)\n.sort((a, b) => {\nif (a[1] > b[1]) return -1;\n@@ -3391,8 +3393,21 @@ router.post(\nconst details = carddb.getMostReasonable(tuple[0]);\nconst card = util.newCard(details);\ncard.details = details;\n+\n+ if (card.details.tcgplayer_id) {\n+ pids.add(card.details.tcgplayer_id);\n+ }\n+ cardNames.add(card.details.name);\n+\nreturn card;\n});\n+\n+ cube.cards = addDetails(cube.cards);\n+ cube.maybe = addDetails(cube.maybe ? cube.maybe : []);\n+\n+ const priceDictQ = GetPrices([...pids]);\n+ const eloDictQ = getElo([...cardNames], true);\n+ const [priceDict, eloDict] = await Promise.all([priceDictQ, eloDictQ]);\nconst addPriceAndElo = (cards) => {\nfor (const card of cards) {\nif (card.details.tcgplayer_id) {\n",
        "org_msg": "Fix price and elo",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "Add functionality to retrieve prices and elo ratings for cards, update cube data with new details. Fix compilation issues related to card properties."
    },
    {
        "org_diff": "diff --git a/src/util/Filter.js b/src/util/Filter.js @@ -250,9 +250,13 @@ const verifyTokens = (tokens) => {\nreturn false;\n}\nbreak;\n- case 'cmc':\ncase 'power':\ncase 'toughness':\n+ if (token(i).arg.search(/^[-\\+]?((\\d+(\\.5)?)|(\\.5))$/) < 0) return false;\n+ break;\n+ case 'cmc':\n+ if (token(i).arg.search(/^\\+?((\\d+(\\.5)?)|(\\.5))$/) < 0) return false;\n+ break;\ncase 'loyalty':\nif (token(i).arg.search(/^\\d+$/) < 0) return false;\nbreak;\n",
        "org_msg": "Allow half values for cmc as well as negative values for power/toughness for",
        "sim_msg": "Add PASS to the token list",
        "sim_diff": "diff --git a/token-list/tokenlist.json b/token-list/tokenlist.json {\n\"name\": \"DeFi Token List\",\n- \"timestamp\": \"2020-10-07T07:46:14.460Z\",\n+ \"timestamp\": \"2020-10-07T08:17:07.288Z\",\n\"version\": {\n\"major\": 1,\n- \"minor\": 5017,\n+ \"minor\": 5018,\n\"patch\": 0\n},\n\"keywords\": [\n\"symbol\": \"ISW\",\n\"address\": \"0xfd30503375087d6De639bBa83DA9184e59F354A0\",\n\"decimals\": 18\n+ },\n+ {\n+ \"chainId\": 1,\n+ \"name\": \"PASSPORT.FINANCE\",\n+ \"symbol\": \"PASS\",\n+ \"address\": \"0xC63A96fA73bE0b71A79c6a9aa3Af3E161dc158B4\",\n+ \"decimals\": 18\n}\n]\n}\n\\ No newline at end of file\n",
        "chatgpt_cot": "Refactor token verification in Filter.js for 'power' and 'cmc' cases to include positive numbers, fixing validation issue."
    },
    {
        "org_diff": "diff --git a/src/analytics/Suggestions.js b/src/analytics/Suggestions.js @@ -59,7 +59,7 @@ const Suggestions = ({ adds, cuts, loading }) => {\n{!loading &&\n(adds.length > 0 ? (\n<PagedList\n- pageSize={1}\n+ pageSize={20}\nshowBottom\npageWrap={(element) => <CardBody>{element}</CardBody>}\nrows={adds.slice(0).map((add, index) => (\n@@ -82,7 +82,7 @@ const Suggestions = ({ adds, cuts, loading }) => {\n{!loading &&\n(cuts.length > 0 ? (\n<PagedList\n- pageSize={2}\n+ pageSize={20}\nshowBottom\npageWrap={(element) => <CardBody>{element}</CardBody>}\nrows={cuts.slice(0).map((add, index) => (\n",
        "org_msg": "fix page size",
        "sim_msg": "[docs] Add the new demo page",
        "sim_diff": "diff --git a/docs/src/pages.js b/docs/src/pages.js @@ -126,6 +126,7 @@ const pages = [\npathname: '/components/data-grid',\ntitle: 'Overview',\n},\n+ { pathname: '/components/data-grid/demo' },\n{ pathname: '/components/data-grid/getting-started' },\n{ pathname: '/components/data-grid/columns' },\n{ pathname: '/components/data-grid/rows' },\n",
        "chatgpt_cot": "Increase page size in Suggestions.js to 20 to display more data, fixing the issue of not showing all the data."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -61,7 +61,7 @@ function intToLegality(val) {\ncase 3:\nreturn 'Pioneer';\ncase 4:\n- return 'Standard'\n+ return 'Standard';\ndefault:\nreturn undefined;\n}\n@@ -78,7 +78,7 @@ function legalityToInt(legality) {\ncase 'Pioneer':\nreturn 3;\ncase 'Standard':\n- return 4\n+ return 4;\ndefault:\nreturn undefined;\n}\n",
        "org_msg": "updating prettier formatting",
        "sim_msg": "properties in alphabetical order",
        "sim_diff": "diff --git a/bin/util.js b/bin/util.js @@ -29,10 +29,6 @@ exports.copy = function(value) {\nreturn copy(map, value);\n};\n-exports.ucFirst = function(value) {\n- return value[0].toUpperCase() + value.substr(1);\n-};\n-\nexports.isDate = function (value) {\nreturn value && !isNaN(value) && value instanceof Date;\n};\n@@ -170,6 +166,9 @@ exports.smart = function(value) {\nreturn String(value);\n};\n+exports.ucFirst = function(value) {\n+ return value[0].toUpperCase() + value.substr(1);\n+};\nfunction copy(map, value) {\n",
        "chatgpt_cot": "Fix syntax error in cubefn.js by adding missing semicolons after return statements."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -12,6 +12,7 @@ const http = require('http');\nvar fileUpload = require('express-fileupload');\nvar util = require('./serverjs/util.js');\nvar updatedb = require('./serverjs/updatecards.js');\n+const secrets = require('../cubecobrasecrets/secrets');\n// Connect db\nmongoose.connect(config.database);\n@@ -56,7 +57,7 @@ app.use(express.static(path.join(__dirname, 'public')));\n// Express session middleware\napp.use(session({\n- secret: 'zzzzzzzzdddzzzzzzzzzzzzzzzz',\n+ secret: secrets.session,\nresave: true,\nsaveUninitialized: true,\ncooke: {\n",
        "org_msg": "Added new session secret",
        "sim_msg": "chore(ui/dev/upload): small tweaks",
        "sim_diff": "diff --git a/ui/dev/upload-server/server.js b/ui/dev/upload-server/server.js -const\n- express = require('express'),\n- app = express(),\n- formidable = require('formidable'),\n- path = require('path'),\n- rimraf = require('rimraf'),\n- fs = require('fs'),\n- throttle = require('express-throttle-bandwidth')\n+const express = require('express')\n+const app = express()\n+const formidable = require('formidable')\n+const path = require('path')\n+const rimraf = require('rimraf')\n+const fs = require('fs')\n+const throttle = require('express-throttle-bandwidth')\nconst\nport = process.env.PORT || 4444,\n@@ -25,7 +24,7 @@ process.on('exit', () => {\napp.set('port', port)\napp.use(throttle(1024 * 128))\n-app.use((req, res, next) => {\n+app.use((_, res, next) => {\nres.header('Access-Control-Allow-Origin', '*')\nres.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept')\nnext()\n",
        "chatgpt_cot": "\"Add secrets file for session encryption in app.js\""
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -48,24 +48,24 @@ function botRating(botColors, card) {\nlet rating = draft.ratings[card.details.name];\nconst colors = card.colors || card.details.color_identity;\nconst subset = arrayIsSubset(colors, botColors) && colors.length > 0;\n+ const colorless = colors.length === 0;\nconst overlap = botColors.some((c) => colors.includes(c));\nconst typeLine = card.type_line || card.details.type;\nconst isLand = typeLine.indexOf('Land') > -1;\nconst isFetch = fetchLands.includes(card.details.name);\nif (isLand) {\n- if (subset) {\n- // if fetches don't have the color identity override, they get lumped into this category\n- rating *= 1.4;\n- } else if (overlap || isFetch) {\n- rating *= 1.2;\n- } else {\n- rating *= 1.1;\n+ if (subset || (overlap && isFetch)) {\n+ rating += 300;\n+ } else if (overlap) {\n+ rating += 150;\n}\n} else if (subset) {\n- rating *= 1.3;\n+ rating += 225;\n+ } else if (colorless) {\n+ rating += 150;\n} else if (overlap) {\n- rating *= 1.1;\n+ rating += 75;\n}\nreturn rating;\n",
        "org_msg": "Tweak draftbot ratings.",
        "sim_msg": "make (regular) colorbar use trace._meta,\n... and shared colorbar use fullLayout._meta.",
        "sim_diff": "diff --git a/src/components/colorbar/draw.js b/src/components/colorbar/draw.js @@ -140,6 +140,7 @@ function makeColorBarData(gd) {\nopts._id = 'cb' + trace.uid + (allowsMultiplotCbs && contName ? '-' + contName : '');\nopts._traceIndex = trace.index;\nopts._propPrefix = (contName ? contName + '.' : '') + 'colorbar.';\n+ opts._meta = trace._meta;\ncalcOpts();\nout.push(opts);\n}\n@@ -156,6 +157,7 @@ function makeColorBarData(gd) {\nopts = initOpts(cont.colorbar);\nopts._id = 'cb' + k;\nopts._propPrefix = k + '.colorbar.';\n+ opts._meta = fullLayout._meta;\ncbOpt = {min: 'cmin', max: 'cmax'};\nif(colorAxOpts[0] !== 'heatmap') {\n@@ -281,6 +283,7 @@ function drawColorBar(g, opts, gd) {\npropContainer: ax,\npropName: opts._propPrefix + 'title',\ntraceIndex: opts._traceIndex,\n+ _meta: opts._meta,\nplaceholder: fullLayout._dfltTitle.colorbar,\ncontainerGroup: g.select('.' + cn.cbtitle)\n};\n",
        "chatgpt_cot": "\"Refactor botRating function in Draft.js to improve rating calculation. Add handling for colorless cards and adjust ratings for different card types.\""
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -102,10 +102,16 @@ router.get('/explore', async (req, res) => {\n});\nrouter.get('/random', async (req, res) => {\n- const count = await Cube.estimatedDocumentCount();\n- const random = Math.floor(Math.random() * count);\n- const cube = await Cube.findOne().skip(random).lean();\n- res.redirect(`/cube/overview/${encodeURIComponent(getCubeId(cube))}`);\n+ const lastMonth = () => {\n+ const ret = new Date();\n+ ret.setMonth(ret.getMonth() - 1);\n+ return ret;\n+ };\n+\n+ const [randCube] = await Cube.aggregate()\n+ .match({ isListed: true, card_count: { $gte: 360 }, date_updated: { $gte: lastMonth() } })\n+ .sample(1);\n+ res.redirect(`/cube/overview/${encodeURIComponent(getCubeId(randCube))}`);\n});\nrouter.get('/dashboard', async (req, res) => {\n",
        "org_msg": "limited random cube results",
        "sim_msg": "Update DashboardSummaryWidget widget.",
        "sim_diff": "diff --git a/assets/js/modules/adsense/components/dashboard/DashboardSummaryWidget.js b/assets/js/modules/adsense/components/dashboard/DashboardSummaryWidget.js import Data from 'googlesitekit-data';\nimport { STORE_NAME } from '../../datastore/constants';\nimport { STORE_NAME as CORE_USER } from '../../../../googlesitekit/datastore/user/constants';\n-import whenActive from '../../../../util/when-active';\n+// import whenActive from '../../../../util/when-active';\nimport ErrorText from '../../../../components/error-text';\n+import PreviewBlock from '../../../../components/preview-block';\nconst { useSelect } = Data;\nfunction DashboardSummaryWidget() {\n- const { error } = useSelect( ( select ) => {\n+ const {\n+ todayData,\n+ todayError,\n+ rangeData,\n+ rangeError,\n+ lastMonthData,\n+ lastMonthError,\n+ } = useSelect( ( select ) => {\nconst store = select( STORE_NAME );\n- const args = {\n+\n+ const now = new Date();\n+ const today = `${ now.getFullYear() }-${ now.getMonth() + 1 }-${ now.getDate() }`;\n+\n+ now.setMonth( now.getMonth() - 1 );\n+ const lastMonth = `${ now.getFullYear() }-${ now.getMonth() + 1 }-${ now.getDate() }`;\n+\n+ const todayArgs = {\n+ startDate: today,\n+ endDate: today,\n+ };\n+\n+ const rangeArgs = {\ndateRange: select( CORE_USER ).getDateRange(),\n};\n+ const lastMonthArgs = {\n+ startDate: today,\n+ endDate: lastMonth,\n+ dimensions: [ 'DATE' ],\n+ };\n+\nreturn {\n- report: store.getReport( args ),\n- error: store.getErrorForSelector( 'getReport', [ args ] ),\n+ todayData: store.getReport( todayArgs ),\n+ todayError: store.getErrorForSelector( 'getReport', [ todayArgs ] ),\n+ rangeData: store.getReport( rangeArgs ),\n+ rangeError: store.getErrorForSelector( 'getReport', [ rangeArgs ] ),\n+ lastMonthData: store.getReport( lastMonthArgs ),\n+ lastMonthError: store.getErrorForSelector( 'getReport', [ lastMonthArgs ] ),\n};\n} );\n- if ( error ) {\n+ if ( todayError || rangeError || lastMonthError ) {\nreturn (\n<div className=\"mdc-layout-grid__cell mdc-layout-grid__cell--span-12\">\n- <ErrorText message={ error.message } />\n+ <ErrorText message={ ( todayError || rangeError || lastMonthError ).message } />\n</div>\n);\n}\n+ if ( ! todayData || ! rangeData || ! lastMonthData ) {\n+ return <PreviewBlock width=\"100%\" height=\"276px\" />;\n+ }\n+\nreturn 'DashboardSummaryWidget';\n}\n-export default whenActive( { moduleName: 'adsence' } )( DashboardSummaryWidget );\n+export default DashboardSummaryWidget;\n+// export default whenActive( { moduleName: 'adsence' } )( DashboardSummaryWidget );\n",
        "chatgpt_cot": "Add functionality to generate a random cube from the last month, and redirect to its overview page, improving user experience."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3091,10 +3091,22 @@ router.delete('/format/remove/:cubeid/:index', ensureAuth, param('index').toInt(\ntry {\nconst { cubeid, index } = req.params;\nconst cube = await Cube.findOne(build_id_query(cubeid));\n- if (!cube || !req.user._id.equals(cube.owner) || index < 0 || index >= cube.draft_formats.length) {\n+ if (!cube) {\n+ return res.status(404).send({\n+ success: 'false',\n+ message: 'No such cube.',\n+ });\n+ }\n+ if (!req.user._id.equals(cube.owner)) {\nreturn res.status(401).send({\nsuccess: 'false',\n- message: 'Invalid request.',\n+ message: 'Not authorized.',\n+ });\n+ }\n+ if (index < 0 || index >= cube.draft_formats.length) {\n+ return res.status(400).send({\n+ success: 'false',\n+ message: 'Invalid request format.',\n});\n}\n",
        "org_msg": "Better errors.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Add error handling and authorization checks for cube removal to cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -27,8 +27,7 @@ db.on('error', (err) => {\n// Init app\nconst app = express();\n-const store = new MongoDBStore(\n- {\n+const store = new MongoDBStore({\nuri: mongosecrets.connectionString,\ndatabaseName: mongosecrets.dbname,\ncollection: 'session_data',\n",
        "org_msg": "beautifying to pass CI",
        "sim_msg": "Fix: error when listing db sizes with couchdb v1\nFirst try to use the new 'sizes.active' field in CouchDB v2 and fallback to 'data_size' if it doesn't exist.\nFixes",
        "sim_diff": "diff --git a/app/addons/databases/stores.js b/app/addons/databases/stores.js @@ -113,7 +113,7 @@ const DatabasesStoreConstructor = FauxtonAPI.Store.extend({\nreturn {};\n}\nconst {sizes} = details;\n- const dataSize = sizes.active || 0;\n+ const dataSize = (sizes && sizes.active) || details.data_size || 0;\nreturn {\ndataSize: Helpers.formatSize(dataSize),\n",
        "chatgpt_cot": "\"Refactor MongoDBStore initialization in app.js to use object literal syntax for better readability and consistency with the rest of the code.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3772,7 +3772,7 @@ router.post(\n'/api/addtocube/:id',\nensureAuth,\nutil.wrapAsyncApi(async (req, res) => {\n- const cube = await Cube.findOne(buildIdQuery(req.params.id));\n+ let cube = await Cube.findOne(buildIdQuery(req.params.id));\nif (!cube) {\nreturn res.status(400).send({\n@@ -3789,7 +3789,7 @@ router.post(\n}\ncube.cards.push(util.newCard(req.body.add.details));\n- setCubeType(cube, carddb);\n+ cube = setCubeType(cube, carddb);\nawait cube.save();\nreturn res.status(200).send({\n",
        "org_msg": "consistent usage of setCubeType",
        "sim_msg": "add job id to start board for task",
        "sim_diff": "diff --git a/core/api-server/api/rest-api/routes/v1/boards.js b/core/api-server/api/rest-api/routes/v1/boards.js @@ -62,8 +62,8 @@ const routes = (options) => {\n});\nrouter.all('/tensor/start/:taskId?', methods(['POST']), logger(), async (req, res, next) => {\nconst { taskId } = req.params;\n- const { nodeName, pipelineName } = req.body;\n- await boards.startTensorboard({ taskId, nodeName, pipelineName }, 'task');\n+ const { nodeName, pipelineName, jobId } = req.body;\n+ await boards.startTensorboard({ taskId, jobId, nodeName, pipelineName }, 'task');\nres.json({ message: 'OK' });\nnext();\n});\n",
        "chatgpt_cot": "Fix variable redeclaration and update cube type in cube_routes file."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -25,20 +25,19 @@ const PAGE_SIZE = 96;\nasync function matchingCards(filter) {\nlet cards = carddb.printedCardList;\ncards = filterCardsDetails(cards, filter);\n- // In the first pass, cards don't have rating or picks, and so match all those filters.\n+ // In the first pass, cards don't have picks or cube information, and so match all those filters.\n// In the second pass, we add that information.\n- if (filterUses(filter, 'rating') || filterUses(filter, 'picks') || filterUses(filter, 'cubes')) {\n+ if (filterUses(filter, 'picks') || filterUses(filter, 'cubes')) {\nconst oracleIds = cards.map(({ oracle_id }) => oracle_id); // eslint-disable-line camelcase\nconst historyObjects = await CardHistory.find(\n{ oracleId: { $in: oracleIds } },\n- 'oracleId current.rating current.picks current.cubes',\n+ 'oracleId current.picks current.cubes',\n).lean();\nconst historyDict = new Map(historyObjects.map((h) => [h.oracleId, h]));\ncards = cards.map((card) => {\nconst history = historyDict.get(card.oracle_id);\nreturn {\n...card,\n- rating: history ? history.current.rating : null,\npicks: history ? history.current.picks : null,\ncubes: history ? history.current.cubes : null,\n};\n",
        "org_msg": "removed rating from filter info, since there's no filter for it",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Refactor matchingCards function to match filters based on picks and cubes. Remove unnecessary rating filter and update card details accordingly."
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -103,7 +103,7 @@ const AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props\n<InputGroupAddon addonType=\"prepend\">\n<InputGroupText>Color</InputGroupText>\n</InputGroupAddon>\n- <ColorChecksAddon prefix=\"color\" values={values} onChange={onChange} />\n+ <ColorChecksAddon colorless prefix=\"color\" values={values} onChange={onChange} />\n<CustomInput type=\"select\" id=\"colorOp\" name=\"colorOp\" value={values.colorOp} onChange={onChange}>\n<option value=\"=\">Exactly these colors</option>\n<option value=\">=\">Including these colors</option>\n@@ -114,7 +114,7 @@ const AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props\n<InputGroupAddon addonType=\"prepend\">\n<InputGroupText>Color Identity</InputGroupText>\n</InputGroupAddon>\n- <ColorChecksAddon prefix=\"identity\" values={values} onChange={onChange} />\n+ <ColorChecksAddon colorless prefix=\"identity\" values={values} onChange={onChange} />\n<CustomInput type=\"select\" id=\"identityOp\" name=\"identityOp\" value={values.identityOp} onChange={onChange}>\n<option value=\"=\">Exactly these colors</option>\n<option value=\">=\">Including these colors</option>\n",
        "org_msg": "Add cololress options to advanced filter modal",
        "sim_msg": "fix(Filters): adjust filters' icons alignment",
        "sim_diff": "diff --git a/components/core/Filter/Filters.js b/components/core/Filter/Filters.js @@ -67,8 +67,7 @@ const STYLES_FILTERS_GROUP = css`\n`;\nconst STYLES_ICON_CONTAINER = css`\n- height: 20px;\n- width: 20px;\n+ padding: 2px;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n",
        "chatgpt_cot": "\"Update ColorChecksAddon to handle colorless prefix, fix colorless prefix issue in AdvancedFilterModal\""
    },
    {
        "org_diff": "diff --git a/src/components/AutocardListGroup.js b/src/components/AutocardListGroup.js @@ -31,7 +31,10 @@ const AutocardListGroup = ({ cards, heading, sort }) => {\n<Row key={cmc} noGutters className=\"cmc-group\">\n<Col>\n{groups[cmc].sort(alphaCompare).map(card =>\n- <AutocardListItem key={card.details.name} card={card} />\n+ <AutocardListItem\n+ key={typeof card.index === 'undefined' ? card.details.name : card.index}\n+ card={card}\n+ />\n)}\n</Col>\n</Row>\n",
        "org_msg": "Fix UI's handling of duplicate cards.\nFixes",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Refactor AutocardListGroup to handle unique keys for card items, preventing duplicate key errors."
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -18,8 +18,6 @@ if (NODE_ENV === 'production') {\nconst carddb = require('../serverjs/cards.js');\n-carddb.initializeCardDb();\n-\nconst { addAutocard } = require('../serverjs/cubefn.js');\nconst { csrfProtection } = require('./middleware');\n",
        "org_msg": "Make sure carddb is initialized only once.",
        "sim_msg": "routes/index.js linting complete",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js var fs = require(\"fs\");\nvar path = require(\"path\");\nvar log = require(\"../log\").logger(\"routes\");\n-var restify = require(\"restify\");\n-var util = require(\"../util\");\n-var authentication = require(\"../authentication\");\nvar config = require(\"../config\");\nvar getStaticServeFunction = require(\"../static\");\n@@ -12,13 +9,13 @@ module.exports = function (server) {\nvar routeDir = __dirname;\nvar files = fs.readdirSync(routeDir);\nfiles.forEach(function (file) {\n- filePath = path.resolve(\"./\", routeDir, file);\n+ var filePath = path.resolve(\"./\", routeDir, file);\nif (\npath.extname(filePath) == \".js\" &&\npath.basename(filePath) != \"index.js\"\n) {\ntry {\n- routes = require(filePath);\n+ var routes = require(filePath);\nif (typeof routes == \"function\") {\nroutes(server);\nlog.debug(' Loaded routes from \"' + filePath + '\"');\n",
        "chatgpt_cot": "Remove unnecessary function call in production environment setup in root.js."
    },
    {
        "org_diff": "diff --git a/public/css/stylesheet.css b/public/css/stylesheet.css width: calc(100% / 8);\n}\n+@media(max-width: 649.98px) {\n+ .compressed .table-col {\n+ margin-top: 0.375rem !important;\n+ }\n+ .compressed .card-list-heading {\n+ font-size: 7pt;\n+ margin-bottom: 0.375rem !important;\n+ overflow: hidden;\n+ text-overflow: ellipsis;\n+ }\n+ .compressed .list-group-heading {\n+ padding: 2px 4px;\n+ font-size: 5pt;\n+ }\n+ .compressed .card-list-item {\n+ font-size: 5pt;\n+ padding: 1px 1px;\n+ text-overflow: clip;\n+ }\n+}\n+\n.card-list-item button.close {\nfont-size: 1rem;\n}\n",
        "org_msg": "Update CSS for compressed view.",
        "sim_msg": "Set img max width to 100% with css",
        "sim_diff": "diff --git a/public/student.css b/public/student.css body {color: #333;margin: 2em auto;font: 14px/1.42 \"Helvetica Neue\", Helvetica, Arial, sans-serif;max-width: 900px;}\n.answer { border: 1px solid #aaa; padding: 5px; box-sizing: content-box; min-height: 100px; }\n+.answer img { max-width: 100%; max-height: 1000px; }\n.list {border: 1px solid #eee;margin-bottom: 10px;}\n.expanded .list { display: block; }\n.special-characters { font-size: 12px; padding: 8px 0; display: block; border: none; color: #68b4df; background: none; text-transform: uppercase; }\n",
        "chatgpt_cot": "\"Add responsive design for smaller screens in stylesheet.css\""
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -9,7 +9,7 @@ const CardRating = require('../models/cardrating');\nconst router = express.Router();\n/* Minimum number of picks to show up in Top Cards list. */\n-const MIN_PICKS = 2;\n+const MIN_PICKS = 20;\n/* Maximum results to return on a vague filter string. */\nconst MAX_RESULTS = 300;\n",
        "org_msg": "Update MIN_PICKS.",
        "sim_msg": "feat: add product route for a shop",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,6 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"product\", \"/product/:slug\", \"product\")\n+ .add(\"product\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Increase the minimum number of picks to show up in Top Cards list from 2 to 20, and update the maximum results to return on a vague filter string."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -47,8 +47,8 @@ async function matchingCards(filter) {\nconst history = historyDict.get(card.oracle_id);\nreturn {\n...card,\n- picks: history ? history.current.picks : undefined,\n- cubes: history ? history.current.cubes : undefined,\n+ picks: history?.current.picks,\n+ cubes: history?.current.cubes,\nsecondPass: true,\n};\n});\n",
        "org_msg": "simplified syntax",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Refactor history retrieval in matchingCards function to use optional chaining. Fixes potential undefined error in picks and cubes."
    },
    {
        "org_diff": "diff --git a/serverjs/draftutil.js b/serverjs/draftutil.js -function shuffle(array) {\n- var currentIndex = array.length;\n- var temporaryValue, randomIndex;\n- while (0 !== currentIndex) {\n- randomIndex = Math.floor(Math.random() * currentIndex);\n- currentIndex -= 1;\n- temporaryValue = array[currentIndex];\n- array[currentIndex] = array[randomIndex];\n- array[randomIndex] = temporaryValue;\n- }\n-\n- return array;\n-\n-}\n+var util = require('./util.js');\nvar methods = {\ngetDraftBots: function(params) {\n@@ -25,7 +12,7 @@ var methods = {\ncolors.push('R');\ncolors.push('G');\n}\n- shuffle(colors);\n+ util.shuffle(colors);\nfor (i = 0; i < params.seats - 1; i++) {\nvar colorcombo = [colors.pop(), colors.pop()];\ndraftbots.push(colorcombo);\n",
        "org_msg": "remove shuffle() implementation by replacing it with library function",
        "sim_msg": "Add shuffle method to utils.js",
        "sim_diff": "diff --git a/util.js b/util.js @@ -767,3 +767,20 @@ export const memoize = fn => {\nreturn cache;\n};\n};\n+export function shuffle(array, rng = Math.random) {\n+ let currentIndex = array.length, randomIndex;\n+\n+ // While there remain elements to shuffle...\n+ while (currentIndex != 0) {\n+\n+ // Pick a remaining element...\n+ randomIndex = Math.floor(rng() * currentIndex);\n+ currentIndex--;\n+\n+ // And swap it with the current element.\n+ [array[currentIndex], array[randomIndex]] = [\n+ array[randomIndex], array[currentIndex]];\n+ }\n+\n+ return array;\n+}\n\\ No newline at end of file\n",
        "chatgpt_cot": "Refactor shuffle function to use util module and add getDraftBots method."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1285,7 +1285,6 @@ async function bulkUpload(req, res, list, cube) {\nfor (let i = 0; i < cards.length; i++) {\nconst item = cards[i].toLowerCase().trim();\nconst numericMatch = item.match(/([0-9]+)x? (.*)/);\n- console.warn(numericMatch);\nif (numericMatch) {\nlet count = parseInt(numericMatch[1], 10);\nif (!Number.isInteger(count)) {\n",
        "org_msg": "Remove extraneous console statement.",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "Remove console.warn statement and add validation for count to check if it is an integer in bulkUpload function in cube_routes file."
    },
    {
        "org_diff": "diff --git a/public/css/editcube.css b/public/css/editcube.css -.nostretch{\n- width:1%;\n- white-space:nowrap;\n-}\n-.tdcheck{\n- margin-top:10px;\n-}\n-.tdcard:hover {\n- cursor: pointer;\n-}\n-.tdcard{\n- font-size: 12px;\n- color: black;\n- text-decoration: none;\n-}\n-.listviewrow{\n- line-height:15px;\n- margin:0px;\n-}\n-.nospace\n-{\n- padding: 0px;\n- margin: 0px;\n-}\n-.compactControl\n-{\n- font-size: 12px;\n- padding:2px;\n-}\n-.tdname\n-{\n- padding-top:10px;\n-}\n-.inputsm\n-{\n- width:50px;\n-}\n-.inputmd\n-{\n- width:80px;\n-}\n-.inputl\n-{\n- width:100px;\n-}\n-.inputxl\n-{\n- width:130px;\n-}\n.clickx\n{\ncolor:black;\ntext-decoration:none;\n}\n-.compare-col\n-{\n- float: none;\n- margin: 0 auto;\n- width: 100%;\n-}\n-\n.compare-header\n{\nmargin-top:40px;\nmargin-top:0px;\n}\n-.compare-title\n-{\n- padding-top:10px;\n-}\n-\n.cmc-group\n{\nbackground:#fbfbfb;\nborder-top: 1px solid #dee2e6;\n}\n-.tag-color-select\n-{\n- margin: 10px;\n-}\n-\n#showTagColors {\npadding: 20px;\npadding-left: 45px;\nborder-bottom: 1px solid #dee2e6;\n}\n-\n-.invalid-filter,\n-.invalid-filter:focus {\n- color: red;\n-}\n-\n-#groupContextModalAreaContainer {\n- overflow: scroll;\n- height: 41.6em;\n-}\n",
        "org_msg": "Remove more dead code.",
        "sim_msg": "Add toolbar for adding special characters",
        "sim_diff": "diff --git a/public/newMain.css b/public/newMain.css body { color: #333; margin: 5em; font: 14px/1.42 \"Helvetica Neue\", Helvetica, Arial, sans-serif; }\n.answer { border: 1px solid #aaa; padding: 5px; box-sizing: content-box;}\n+.list { border: 1px solid #eee;margin-bottom: 10px;}\n+.toggle { border: none; color: #68b4df; background: none; text-transform: uppercase; cursor: pointer;}\n+.button { padding: 5px; display: inline-block; cursor: pointer; width: 20px; text-align: center;}\n+.button:hover { background: #eee;}\n.editMode {\ndisplay: none;\n}\n@@ -7,12 +11,12 @@ body { color: #333; margin: 5em; font: 14px/1.42 \"Helvetica Neue\", Helvetica, Ar\n.equationEditor {\nwidth: 200px;\n}\n-.toolbar {\n+.mathToolbar {\nmargin-bottom: 5px;\ndisplay: flex;\nfont-size: 10px;\n}\n-.toolbar button { margin-right: 5px; }\n+.mathToolbar button { margin-right: 5px; }\n.latexEditor {\nwidth: 200px;\nheight: 50px;\n",
        "chatgpt_cot": "Remove unnecessary CSS styles for improved code readability and maintenance."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3369,7 +3369,7 @@ router.post(\nrouter.post(\n'/api/adds/:id',\nutil.wrapAsyncApi(async (req, res) => {\n- /* const response = await fetch(\n+ const response = await fetch(\n`http://127.0.0.1:8000/?cube_name=${req.params.id}&num_recs=${1000}&root=${encodeURIComponent(\n'http://localhost:5000',\n)}`,\n@@ -3380,8 +3380,10 @@ router.post(\nresult: {},\n});\n}\n- const data = await response.json(); */\n- const data = { island: 1, mountain: 1, plains: 1, forest: 1, swamp: 1, wastes: 1 };\n+ const data = await response.json();\n+\n+ // use this instead if you want debug data\n+ // const data = { island: 1, mountain: 1, plains: 1, forest: 1, swamp: 1, wastes: 1 };\nconst pids = new Set();\nconst cardNames = new Set();\n",
        "org_msg": "removed debug data",
        "sim_msg": "cors: fixes broken host conditional",
        "sim_diff": "diff --git a/common/actions.js b/common/actions.js @@ -8,9 +8,6 @@ const REQUEST_HEADERS = {\n\"Content-Type\": \"application/json\",\n};\n-const dev = process.env.NODE_ENV !== \"www\";\n-const SERVER_PATH = dev ? \"http://localhost:1337\" : \"https://slate.host\";\n-\nexport const setDefaultConfig = async (data) => {\nconst options = {\nmethod: \"POST\",\n@@ -19,7 +16,7 @@ export const setDefaultConfig = async (data) => {\nbody: JSON.stringify(data),\n};\n- const response = await fetch(`${SERVER_PATH}/_/settings`, options);\n+ const response = await fetch(`/_/settings`, options);\nconst json = await response.json();\nreturn json;\n@@ -37,7 +34,7 @@ export const createWalletAddress = async (data) => {\nbody: JSON.stringify(data),\n};\n- const response = await fetch(`${SERVER_PATH}/_/wallet/create`, options);\n+ const response = await fetch(`/_/wallet/create`, options);\nconst json = await response.json();\nreturn json;\n@@ -63,7 +60,7 @@ export const sendWalletAddressFilecoin = async (data) => {\nbody: JSON.stringify(data),\n};\n- const response = await fetch(`${SERVER_PATH}/_/wallet/send`, options);\n+ const response = await fetch(`/_/wallet/send`, options);\nconst json = await response.json();\nreturn json;\n@@ -79,7 +76,7 @@ export const hydrateAuthenticatedUser = async (data) => {\nbody: JSON.stringify({ data }),\n};\n- const response = await fetch(`${SERVER_PATH}/api/hydrate`, options);\n+ const response = await fetch(`/api/hydrate`, options);\nconst json = await response.json();\nreturn json;\n@@ -93,7 +90,7 @@ export const deleteUser = async (data) => {\nbody: JSON.stringify({ data }),\n};\n- const response = await fetch(`${SERVER_PATH}/api/users/delete`, options);\n+ const response = await fetch(`/api/users/delete`, options);\nconst json = await response.json();\nreturn json;\n};\n@@ -106,7 +103,7 @@ export const createUser = async (data) => {\nbody: JSON.stringify({ data }),\n};\n- const response = await fetch(`${SERVER_PATH}/api/users/create`, options);\n+ const response = await fetch(`/api/users/create`, options);\nconst json = await response.json();\nreturn json;\n};\n@@ -119,7 +116,7 @@ export const health = async (data) => {\nbody: JSON.stringify({ data: { success: true } }),\n};\n- const response = await fetch(`${SERVER_PATH}/api/_`, options);\n+ const response = await fetch(`/api/_`, options);\nconst json = await response.json();\nreturn json;\n};\n",
        "chatgpt_cot": "\"Fix fetch request and response handling in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -531,6 +531,8 @@ router.get('/blog/:id/:page', async (req, res) => {\nconst cubeID = req.params.id;\nconst cube = await Cube.findOne(build_id_query(cubeID), Cube.LAYOUT_FIELDS).lean();\n+ const page = parseInt(req.params.page, 10) || 0;\n+\nif (!cube) {\nreq.flash('danger', 'Cube not found');\nreturn res.status(404).render('misc/404', {});\n@@ -551,16 +553,8 @@ router.get('/blog/:id/:page', async (req, res) => {\n}\n}\n- let blogPage = [];\n- if (blogs.length > 0) {\nblogs.reverse();\n-\n- let page = parseInt(req.params.page, 10);\n- if (Number.isNaN(page)) {\n- page = 0;\n- }\n- blogPage = blogs.slice(page * 10, (page + 1) * 10);\n- }\n+ const blogPage = blogs.slice(page * 10, (page + 1) * 10);\nconst reactProps = {\ncube,\n",
        "org_msg": "Fix blog code.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Refactor pagination logic in cube_routes.js to use page variable consistently and simplify code."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -34,9 +34,6 @@ function updateCardbase(filepath) {\nif (filepath === undefined) {\nfilepath = 'private/cards.json';\n}\n- if (!fs.existsSync('private')) {\n- fs.mkdirSync('private');\n- }\nreturn module.exports.downloadDefaultCards().then(function() {\nconsole.log(\"Running save\");\nvar contents = fs.readFileSync(filepath);\n@@ -93,6 +90,9 @@ function saveAllCards(arr) {\n}\naddCardToCatalog(convertCard(card));\n});\n+ if (!fs.existsSync('private')) {\n+ fs.mkdirSync('private');\n+ }\nvar pendingWrites = [];\npendingWrites.push(writeFile('private/names.json', JSON.stringify(_catalog.names)));\npendingWrites.push(writeFile('private/cardtree.json', JSON.stringify(util.turnToTree(_catalog.names))));\n",
        "org_msg": "create private directory in saveAllCards to enable repeated test setup/teardown",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "Ensure private directory exists before writing files to fix potential runtime error in updatecards.js."
    },
    {
        "org_diff": "diff --git a/src/topcards.js b/src/topcards.js @@ -3,15 +3,16 @@ import ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport URLSearchParams from 'core-js-pure/features/url-search-params';\n-import { encodeName } from 'utils/Card';\n-import { makeFilter } from 'filtering/FilterCards';\n-\nimport DynamicFlash from 'components/DynamicFlash';\nimport ErrorBoundary from 'components/ErrorBoundary';\nimport FilterCollapse from 'components/FilterCollapse';\nimport SortableTable from 'components/SortableTable';\nimport withAutocard from 'components/WithAutocard';\n+import { makeFilter } from 'filtering/FilterCards';\n+import { encodeName } from 'utils/Card';\n+import Query from 'utils/Query';\n+\nconst AutocardA = withAutocard('a');\nclass TopCards extends Component {\n@@ -21,7 +22,7 @@ class TopCards extends Component {\nconst { defaultData, defaultNumResults, defaultFilterText } = props;\nthis.state = {\n- filter: (defaultFilterText && makeFilter(defaultFilterText).filter) || null,\n+ filter: defaultFilterText,\ndata: defaultData || [],\nnumResults: defaultNumResults || 0,\n};\n@@ -29,16 +30,24 @@ class TopCards extends Component {\nthis.setFilter = this.setFilter.bind(this);\n}\n- async setFilter(filter, filterInput) {\n+ componentDidMount() {\n+ const queryFilter = Query.get('f');\n+ if (queryFilter) {\n+ this.setFilter(null, queryFilter);\n+ }\n+ }\n+\n+ async setFilter(_, filterInput) {\nconst params = new URLSearchParams([['f', filterInput]]);\n- this.setState({ filter });\nconst response = await fetch(`/tool/api/topcards?${params.toString()}`);\nif (!response.ok) {\nreturn;\n}\n+ Query.set('f', filterInput);\nconst json = await response.json();\nthis.setState({\n+ filter: filterInput,\ndata: json.data,\nnumResults: json.numResults,\n});\n@@ -46,7 +55,7 @@ class TopCards extends Component {\nrender() {\nconst { defaultFilterText } = this.props;\n- const { data, numResults } = this.state;\n+ const { data, filter, numResults } = this.state;\nconst rowF = ([name, img, imgFlip, rating, picks, elo, cubes]) => (\n<tr key={name}>\n@@ -69,7 +78,7 @@ class TopCards extends Component {\n<FilterCollapse\nisOpen\ndefaultFilterText={defaultFilterText}\n- filter\n+ filter={filter}\nsetFilter={this.setFilter}\nnumCards={numResults}\nnumShown={data.length}\n",
        "org_msg": "Handle filters better on topcards page.",
        "sim_msg": "Wrap all CivicCards in error boundaries",
        "sim_diff": "diff --git a/packages/component-library/src/CivicCard/CivicCard.js b/packages/component-library/src/CivicCard/CivicCard.js @@ -2,9 +2,13 @@ import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DataChecker from \"./utils/DataChecker\";\nimport CivicCardLayoutFull from \"./CivicCardLayoutFull\";\n+import ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\nimport { cardMetaKeys, optionalCardMetaKeys } from \"./cardMetaTypes\";\nconst CivicCard = ({ cardMeta, data, isLoading, Layout }) => (\n+ <ErrorBoundary\n+ customMessage={`CivicCard: \"${cardMeta(data).title}\" failed to load`}\n+ >\n<DataChecker\ndata={cardMeta(data)}\ndataAccessors={cardMetaKeys}\n@@ -14,6 +18,7 @@ const CivicCard = ({ cardMeta, data, isLoading, Layout }) => (\n>\n<Layout cardMeta={cardMeta(data)} isLoading={isLoading} data={data} />\n</DataChecker>\n+ </ErrorBoundary>\n);\nCivicCard.propTypes = {\n",
        "chatgpt_cot": "Fix defaultFilterText not updating when filter is set, setFilter method async, add queryFilter check in componentDidMount, update Query params."
    },
    {
        "org_diff": "diff --git a/routes/comment_routes.js b/routes/comment_routes.js @@ -10,6 +10,8 @@ const { sanitize } = require('../serverjs/cubefn.js');\nconst Comment = require('../models/comment');\nconst User = require('../models/user');\nconst Report = require('../models/report');\n+const Deck = require('../models/deck');\n+const Blog = require('../models/blog');\nconst router = express.Router();\n@@ -29,6 +31,22 @@ router.get(\n}),\n);\n+const getReplyContext = {\n+ comment: async (id) => {\n+ const comment = await Comment.findById(id);\n+ return [comment.owner, 'comment'];\n+ },\n+ blog: async (id) => {\n+ const blog = await Blog.findById(id);\n+ return [blog.owner, 'blogpost'];\n+ },\n+ deck: async (id) => {\n+ const deck = await Deck.findById(id);\n+ return [deck.owner, 'deck'];\n+ },\n+ default: async () => null, // nobody gets a notification for this\n+};\n+\nrouter.post(\n'/:type/:parent',\nensureAuth,\n@@ -50,6 +68,19 @@ router.post(\nawait comment.save();\n+ const [ownerid, type] = await getReplyContext[req.params.type](req.params.parent);\n+\n+ const owner = await User.findById(ownerid);\n+\n+ if (owner) {\n+ await util.addNotification(\n+ owner,\n+ poster,\n+ `/comment/${comment._id}`,\n+ `${poster.username} left a comment in response to your ${type}.`,\n+ );\n+ }\n+\nreturn res.status(200).send({\nsuccess: 'true',\ncomment,\n",
        "org_msg": "Update comment_routes.js",
        "sim_msg": "feat: add product route for a shop",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,6 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"product\", \"/product/:slug\", \"product\")\n+ .add(\"product\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Add functionality for retrieving context and sending notifications based on the type of parent comment."
    },
    {
        "org_diff": "diff --git a/jobs/download_drafts.js b/jobs/download_drafts.js @@ -34,7 +34,8 @@ const processDeck = async (deck) => {\n!deck.draft ||\n!deck.seats[0].sideboard ||\n!deck.seats[0].pickorder.length ||\n- deck.cards\n+ deck.cards ||\n+ deck.seats[0].bot\n) {\nreturn null;\n}\n",
        "org_msg": "Don't download bot decks for drafts.",
        "sim_msg": "Fix onHover/tooltip flickering",
        "sim_diff": "diff --git a/modules/core/src/lib/deck.js b/modules/core/src/lib/deck.js @@ -530,7 +530,7 @@ export default class Deck {\nif (_pickRequest.event) {\n// Perform picking\nconst {result, emptyInfo} = this._pick('pickObject', 'pickObject Time', _pickRequest);\n- const pickedInfo = result[0] || emptyInfo;\n+ const pickedInfo = result.find(info => info.picked) || emptyInfo;\n// Update tooltip\nif (this.props.getTooltip) {\n",
        "chatgpt_cot": "Add condition for deck.seats[0].bot in processDeck function to handle draft deck with bot."
    },
    {
        "org_diff": "diff --git a/routes/cube/download.js b/routes/cube/download.js @@ -9,8 +9,8 @@ const filterutil = require('../../dist/filtering/FilterCards.js');\nconst carddb = require('../../serverjs/cards.js');\nconst util = require('../../serverjs/util.js');\n-const { buildIdQuery, CSV_HEADER, exportToMtgo } = require('../../serverjs/cubefn.js');\n-const { writeCard } = require('./helper.js')\n+const { buildIdQuery, exportToMtgo } = require('../../serverjs/cubefn.js');\n+const { CSV_HEADER, writeCard } = require('./helper.js')\n// Bring in models\nconst Cube = require('../../models/cube');\n",
        "org_msg": "Fix CSV_HEADER import",
        "sim_msg": "missing limit",
        "sim_diff": "diff --git a/server/game/cards/01 - Core/KitsukiInvestigator.js b/server/game/cards/01 - Core/KitsukiInvestigator.js const DrawCard = require('../../drawcard.js');\nclass KitsukiInvestigator extends DrawCard {\n- setupCardAbilities() {\n+ setupCardAbilities(ability) {\nthis.action({\ntitle: 'Look at opponent\\'s hand',\ncondition: () => this.game.currentConflict && this.game.currentConflict.isParticipating(this) && this.game.currentConflict.conflictType === 'political',\n+ limit: ability.limit.perConflict(1),\nhandler: () => {\nthis.game.promptWithHandlerMenu(this.controller, {\nactivePromptTitle: 'Choose card to discard',\n",
        "chatgpt_cot": "Refactor import statements in download.js for better organization and readability."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/util.js b/__tests__/serverjs/util.js @@ -133,3 +133,17 @@ test(\"getCardImageURL falls back to image_normal\", () => {\nconst result = util.getCardImageURL(testCard);\nexpect(result).toBe(testCard.details.image_normal);\n});\n+\n+test(\"arraysEqual returns true for equal arrays\", () => {\n+ const testArrayA = [1, 2, 3, 4];\n+ const testArrayB = [1, 2, 3, 4];\n+ const result = util.arraysEqual(testArrayA, testArrayB);\n+ expect(result).toBe(true);\n+});\n+\n+test(\"arraysEqual returns false for unequal arrays\", () => {\n+ const testArrayA = [1, 2, 3, 5];\n+ const testArrayB = [1, 2, 3, 4];\n+ const result = util.arraysEqual(testArrayA, testArrayB);\n+ expect(result).toBe(false);\n+});\n\\ No newline at end of file\n",
        "org_msg": "add tests for arraysEqual",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add tests for arraysEqual function in util.js. Tests check for both equal and unequal arrays, ensuring correct functionality of the arraysEqual function."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1632,6 +1632,11 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\nreq.body.blog = sanitize(req.body.blog);\nlet cube = await Cube.findOne(build_id_query(req.params.id));\n+ if (!req.user._id.equals(cube.owner)) {\n+ req.flash('danger', 'Only cube owner may edit.');\n+ return res.redirect(`/cube/list/${req.params.id}`);\n+ }\n+\ncube.date_updated = Date.now();\ncube.updated_string = cube.date_updated.toLocaleString('en-US');\n",
        "org_msg": "Add check to edit route.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Add owner verification before editing cube to prevent unauthorized edits. Fixes potential security issue in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/nearley/values.ne b/nearley/values.ne @@ -136,7 +136,13 @@ stringContainOpValue -> equalityOperator stringValue {% ([op, value]) => stringC\nstringValue -> (noQuoteStringValue | dqstring | sqstring) {% ([[value]]) => value.toLowerCase() %}\n# anything that isn't a special character and isn't \"and\" or \"or\"\n-noQuoteStringValue -> ([^aAoO \\t\\n\"'\\\\=<>:] | \"a\"i [^nN \\t\\n\"'\\\\=<>:] | \"an\"i:+ [^dD \\t\\n\"'\\\\=<>:] | \"o\"i:+ [^rR \\t\\n\"'\\\\=<>:]) [^ \\t\\n\"'\\\\=<>:]:* {% ([startChars, chars]) => startChars.concat(chars).join('').toLowerCase() %}\n+noQuoteStringValue -> ([^aAoO \\t\\n\"'\\\\=<>:]\n+ | \"a\"i [^nN \\t\\n\"'\\\\=<>:]\n+ | \"an\"i:+ [^dD \\t\\n\"'\\\\=<>:]\n+ | \"and\"i:+ [^ \\t\\n\"'\\\\=<>:]\n+ | \"o\"i:+ [^rR \\t\\n\"'\\\\=<>:]\n+ | \"or\"i:+ [^ \\t\\n\"'\\\\=<>:]\n+) [^ \\t\\n\"'\\\\=<>:]:* {% ([startChars, chars]) => startChars.concat(chars).join('').toLowerCase() %}\n# \"\nmanaCostOpValue -> equalityOperator manaCostValue {% ([op, value]) => manaCostOperation(op, value) %}\n",
        "org_msg": "Allow or and and as prefixes.",
        "sim_msg": "Update other comparisons to boolean",
        "sim_diff": "diff --git a/index.d.ts b/index.d.ts @@ -321,7 +321,7 @@ return _.multiply(sum, product)\n* nerdamer('8').lt(100)\n* // true\n*/\n- lt(value: number | string | Expression): Expression\n+ lt(value: number | string | Expression): boolean\n/**\n* Checks if a value is less than or equal to another\n@@ -332,7 +332,7 @@ return _.multiply(sum, product)\n* nerdamer('x').lte(100)\n* // false\n*/\n- lte(value: number | string | Expression): Expression\n+ lte(value: number | string | Expression): boolean\n/**\n* Checks if a value is greater than another\n@@ -343,7 +343,7 @@ return _.multiply(sum, product)\n* nerdamer('800').gt(100)\n* // true\n*/\n- gt(value: number | string | Expression): Expression\n+ gt(value: number | string | Expression): boolean\n/**\n* Checks if a value is greater than or equal to another\n@@ -354,7 +354,7 @@ return _.multiply(sum, product)\n* nerdamer('x').gte(100)\n* // false\n*/\n- gte(value: number | string | Expression): Expression\n+ gte(value: number | string | Expression): boolean\n/**\n* Expands a function or expression.\n",
        "chatgpt_cot": "Refactor noQuoteStringValue method in values.ne to handle \"and\" and \"or\" cases, improving string manipulation and readability."
    },
    {
        "org_diff": "diff --git a/public/js/autocard.js b/public/js/autocard.js @@ -133,28 +133,30 @@ function autocard_show_card(card_image, card_flip, show_art_crop, tags, foil, in\n}\n// only show the three autocard divs once the images are done loading\n- autocardLoadListeners[popupImg.id] = popupImg.addEventListener('load', () => {\n+ autocardLoadListeners[popupImg.id] = () => {\nif (card_flip && !popupImgBack.complete) {\nreturn;\n}\n// only fill in tags area once the image is done loading\nif (autocardTimeout) autocardTimeout = clearTimeout(autocardTimeout);\n- autocardTimeout = setTimeout(() => document.getElementById('autocardPopup').classList.remove('d-none'), 50);\n- });\n+ autocardTimeout = setTimeout(() => document.getElementById('autocardPopup').classList.remove('d-none'), 10);\n+ };\n+ popupImg.addEventListener('load', autocardLoadListeners[popupImg.id]);\nif (card_flip) {\n- autocardLoadListeners[popupImgBack.id] = popupImgBack.addEventListener('load', () => {\n+ autocardLoadListeners[popupImgBack.id] = () => {\nif (!popupImg.complete) {\nreturn;\n}\n// only fill in tags area once the image is done loading\nif (autocardTimeout) autocardTimeout = clearTimeout(autocardTimeout);\n- autocardTimeout = setTimeout(() => document.getElementById('autocardPopup').classList.remove('d-none'), 50);\n- });\n+ autocardTimeout = setTimeout(() => document.getElementById('autocardPopup').classList.remove('d-none'), 10);\n+ };\n+ popupImgBack.addEventListener('load', autocardLoadListeners[popupImgBack.id]);\n}\nif (popupImg.complete && (!card_flip || popupImgBack.complete)) {\n// cached workaround\nif (autocardTimeout) autocardTimeout = clearTimeout(autocardTimeout);\n- autocardTimeout = setTimeout(() => document.getElementById('autocardPopup').classList.remove('d-none'), 50);\n+ autocardTimeout = setTimeout(() => document.getElementById('autocardPopup').classList.remove('d-none'), 10);\n}\n}\n@@ -163,9 +165,8 @@ function autocard_hide_card() {\nif (autocardTimeout) autocardTimeout = clearTimeout(autocardTimeout);\nfor (const id in autocardLoadListeners) {\nconst img = document.getElementById(id);\n- const listener = autocardLoadListeners[img];\n- img.removeEventListener('load', listener);\n- delete autocardLoadListeners[img];\n+ img.removeEventListener('load', autocardLoadListeners[id]);\n+ delete autocardLoadListeners[id];\n}\ndocument.getElementById('autocardPopup').classList.add('d-none');\n",
        "org_msg": "Fix sticky autocard.",
        "sim_msg": "feat(ClickOutside): Only close on click when the mousedown was not inside the monitored element",
        "sim_diff": "diff --git a/ui/src/components/menu/ClickOutside.js b/ui/src/components/menu/ClickOutside.js @@ -76,7 +76,7 @@ export default {\nif (handlers.click.length === 0) {\n// use click to be able to prevent click in handler\n- document.addEventListener('click', globalHandler, notPassiveCapture)\n+ document.addEventListener('mousedown', globalHandler, notPassiveCapture)\ndocument.addEventListener('touchstart', globalHandler, notPassiveCapture)\ndocument.addEventListener('focusin', globalHandler, passiveCapture)\n}\n@@ -113,7 +113,7 @@ export default {\nif (handlers.click.length === 0) {\nclearTimeout(timer)\n- document.removeEventListener('click', globalHandler, notPassiveCapture)\n+ document.removeEventListener('mousedown', globalHandler, notPassiveCapture)\ndocument.removeEventListener('touchstart', globalHandler, notPassiveCapture)\ndocument.removeEventListener('focusin', globalHandler, passiveCapture)\n}\n",
        "chatgpt_cot": "Improve autocard.js file by reducing the timeout for the autocardPopup to be displayed and removing event listeners when hiding the card."
    },
    {
        "org_diff": "diff --git a/nearley/values.ne b/nearley/values.ne @@ -128,7 +128,7 @@ colorCombinationValue ->\n@builtin \"string.ne\"\n-stringSetElementOpValue -> equalityOperator stringValue {% ([, value]) => setElementOperation(value) %}\n+stringSetElementOpValue -> equalityOperator stringValue {% ([op, value]) => setElementOperation(op, value) %}\nstringOpValue -> equalityOperator stringValue {% ([op, value]) => stringOperation(op, value) %}\n",
        "org_msg": "Fix tags again.",
        "sim_msg": "Add image format pattern.\n(\"borrowed\" from RenderImage)",
        "sim_diff": "diff --git a/src/core/operations/ParseQRCode.mjs b/src/core/operations/ParseQRCode.mjs @@ -33,6 +33,14 @@ class ParseQRCode extends Operation {\n\"value\": false\n}\n];\n+ this.patterns = [\n+ {\n+ \"match\": \"^(?:\\\\xff\\\\xd8\\\\xff|\\\\x89\\\\x50\\\\x4e\\\\x47|\\\\x47\\\\x49\\\\x46|.{8}\\\\x57\\\\x45\\\\x42\\\\x50|\\\\x42\\\\x4d)\",\n+ \"flags\": \"\",\n+ \"args\": [false],\n+ \"useful\": true\n+ }\n+ ];\n}\n/**\n",
        "chatgpt_cot": "Refactor setElementOperation method in values.ne to accept two parameters, fixing potential functionality issues related to string set element operations."
    },
    {
        "org_diff": "diff --git a/cubecobrasecrets.example/mongodb.js b/cubecobrasecrets.example/mongodb.js -module.exports =\n-{\n- connectionString:'mongodb://localhost:27017/nodecube',\n- dbname:'nodecube'\n-}\n+module.exports = {\n+ connectionString: 'mongodb://127.0.0.1:27017/nodecube',\n+ dbname: 'nodecube',\n+};\n",
        "org_msg": "Default to connecting over 127.0.0.1 to force IPv4.\nMongoDB by default refuses IPv6 queries which mongoose will use by default on some systems.",
        "sim_msg": "Prevent Overwite of configured creds",
        "sim_diff": "diff --git a/packages/node_modules/@node-red/nodes/core/network/21-httprequest.js b/packages/node_modules/@node-red/nodes/core/network/21-httprequest.js @@ -206,10 +206,11 @@ module.exports = function(RED) {\n}\n}\nvar parsedURL = new URL(url)\n- if (parsedURL.username) {\n+ this.credentials = this.credentials || {}\n+ if (parsedURL.username && !this.credentials.user) {\nthis.credentials.user = parsedURL.username\n}\n- if (parsedURL.password) {\n+ if (parsedURL.password && !this.credentials.password) {\nthis.credentials.password = parsedURL.password\n}\nif (Object.keys(this.credentials).length != 0) {\n",
        "chatgpt_cot": "Update mongodb.js with new connection string and dbname\n- The scope of changes is modifying the connection string and dbname attributes.\n- The file \"mongodb.js\" likely handles the configuration for MongoDB connection in the \"cubecobrasecrets\" project.\n- The purpose of the modifications is to update the connection details for the MongoDB database."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -138,7 +138,7 @@ function botPicks() {\n}\nratedPicks.sort((x, y) => {\n- return -botRating(botColors, pack[x]);\n+ return botRating(botColors, botPack[y]) - botRating(botColors, botPack[x]);\n});\narrayShuffle(unratedPicks);\n",
        "org_msg": "Update per review comments",
        "sim_msg": "Ability to add new line in case of img or code-block if last line is not editable",
        "sim_diff": "diff --git a/src/post/Write/PostEditor.js b/src/post/Write/PostEditor.js @@ -13,11 +13,14 @@ import 'draft-js-plugins/draft-js-image-plugin/lib/plugin.css';\nimport 'draft-js-plugins/draft-js-focus-plugin/lib/plugin.css';\nimport 'draft-js-delete-img-btn-plugin/lib/plugin.css';\nimport {\n+ genKey,\ngetVisibleSelectionRect as draftVSR,\nEditorState,\nContentState,\nRichUtils,\nconvertToRaw,\n+ ContentBlock,\n+ SelectionState,\nconvertFromRaw\n} from 'draft-js';\nimport Editor, { createEditorStateWithText, composeDecorators } from 'draft-js-plugins/draft-js-plugins-editor';\n@@ -300,6 +303,21 @@ class PostEditor extends Component {\n);\n}\n+ addEmptyLine = () => {\n+ let editorState = this.state.editorState;\n+ const contentState = editorState.getCurrentContent();\n+ const lastBlock = contentState.getLastBlock();\n+ if (lastBlock.getType() === 'code-block' || lastBlock.getType() === 'atomic') {\n+ const blockArray = contentState.getBlocksAsArray();\n+ const newBlock = new ContentBlock({ key: genKey(), type: 'unstyled', text: '' });\n+ const newContntState = ContentState.createFromBlockArray([...blockArray, newBlock]);\n+ const newSelectionState = SelectionState.createEmpty(newBlock.getKey());\n+ editorState = EditorState.push(editorState, newContntState, 'insert-characters');\n+ editorState = EditorState.forceSelection(editorState, newSelectionState);\n+ this.onChange(editorState);\n+ }\n+ }\n+\nrender() {\nconst { editorState } = this.state;\n@@ -335,6 +353,7 @@ class PostEditor extends Component {\n/>\n<EmojiSuggestions />\n<DeleteImgBtn />\n+ <div className=\"newLine\" onClick={this.addEmptyLine}>&nbsp;</div>\n</div>\n<div className={toolbarClasses} style={this.state.position} >\n<div style={{ position: 'absolute', bottom: 0 }}>\n",
        "chatgpt_cot": "\"Fix sorting algorithm in botPicks function to correctly calculate bot ratings for pack items\""
    },
    {
        "org_diff": "diff --git a/routes/comment_routes.js b/routes/comment_routes.js @@ -147,7 +147,7 @@ router.post(\n: 'https://img.scryfall.com/cards/art_crop/front/0/c/0c082aa8-bf7f-47f2-baf8-43ad253fd7d7.jpg?1562826021';\ncomment.artist = newComment.owner ? 'Allan Pollack' : req.user.artist;\ncomment.updated = true;\n- comment.content = newComment.content.substring(0, 500);\n+ comment.content = newComment.content.substring(0, 5000);\n// the -1000 is to prevent weird time display error\ncomment.timePosted = Date.now() - 1000;\n",
        "org_msg": "merged fix from master",
        "sim_msg": "Swap position of buttons",
        "sim_diff": "diff --git a/CommentFlagsHelper.user.js b/CommentFlagsHelper.user.js // @description Always expand comments (with deleted) and highlight expanded flagged comments, Highlight common chatty and rude keywords\n// @homepage https://github.com/samliew/SO-mod-userscripts\n// @author @samliew\n-// @version 3.1.2\n+// @version 3.1.3\n//\n// @include https://*stackoverflow.com/admin/dashboard?flag*=comment*\n// @include https://*serverfault.com/admin/dashboard?flag*=comment*\nconst actionBtns = $('<div id=\"actionBtns\"></div>');\n- // Hide recent comments button (week)\n- $('<button>Ignore week</button>')\n+ // Hide recent comments button (day)\n+ $('<button>Ignore day</button>')\n.click(function() {\n+ $(this).prev().remove();\n$(this).remove();\nlet now = Date.now();\n- // Remove comments < oneweek\n+ // Remove comments < oneday\n$('.comment-link').filter(function() {\n- return now - new Date($(this).children('.relativetime').attr('title')).getTime() <= oneweek;\n+ return now - new Date($(this).children('.relativetime').attr('title')).getTime() <= oneday;\n}).parent().parent().next().addBack().remove();\n// Remove posts without comment flags\n$('.comments').filter(function() {\n})\n.appendTo(actionBtns);\n- // Hide recent comments button (day)\n- $('<button>Ignore day</button>')\n+ // Hide recent comments button (week)\n+ $('<button>Ignore week</button>')\n.click(function() {\n- $(this).prev().remove();\n$(this).remove();\nlet now = Date.now();\n- // Remove comments < oneday\n+ // Remove comments < oneweek\n$('.comment-link').filter(function() {\n- return now - new Date($(this).children('.relativetime').attr('title')).getTime() <= oneday;\n+ return now - new Date($(this).children('.relativetime').attr('title')).getTime() <= oneweek;\n}).parent().parent().next().addBack().remove();\n// Remove posts without comment flags\n$('.comments').filter(function() {\n",
        "chatgpt_cot": "Update comment content substring limit to 5000 characters to prevent truncation and fix time display error in comment_routes."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -153,7 +153,7 @@ var methods = {\n},\nsanitize: function(html) {\nreturn sanitizeHtml(html, {\n- allowedTags: ['div', 'p', 'strike', 'strong', 'b', 'i', 'em', 'u', 'a', 'h5', 'h6', 'ul', 'ol', 'li', 'span'],\n+ allowedTags: ['div', 'p', 'strike', 'strong', 'b', 'i', 'em', 'u', 'a', 'h5', 'h6', 'ul', 'ol', 'li', 'span', 'br'],\nselfClosing: ['br']\n});\n},\n",
        "org_msg": "adding br to allowedTags to ensure empty lines are kept for cube description",
        "sim_msg": "bypass test-syntax",
        "sim_diff": "diff --git a/src/lib/svg_text_utils.js b/src/lib/svg_text_utils.js @@ -684,7 +684,8 @@ exports.sanitizeHTML = function sanitizeHTML(str) {\n);\n}\n}\n- return rootNode.innerHTML;\n+ var key = 'innerHTML'; // i.e. to avoid pass test-syntax\n+ return rootNode[key];\n};\nexports.lineCount = function lineCount(s) {\n",
        "chatgpt_cot": "Add 'br' tag to allowedTags in sanitize function to allow line breaks in sanitized HTML content."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -991,21 +991,23 @@ router.get('/samplepackimage/:id/:seed', async (req, res) => {\nreq.params.seed = req.params.seed.replace('.png', '');\nconst pack = await generatePack(req.params.id, carddb, req.params.seed);\n+ const imgScale = 0.9;\n+\nconst srcArray = pack.pack.map((card, index) => {\nreturn {\nsrc: card.imgUrl || card.details.image_normal,\n- x: CARD_WIDTH * (index % 5),\n- y: CARD_HEIGHT * Math.floor(index / 5),\n- w: CARD_WIDTH,\n- h: CARD_HEIGHT,\n- rX: 0.065 * CARD_WIDTH,\n- rY: 0.0464 * CARD_HEIGHT,\n+ x: imgScale * CARD_WIDTH * (index % 5),\n+ y: imgScale * CARD_HEIGHT * Math.floor(index / 5),\n+ w: imgScale * CARD_WIDTH,\n+ h: imgScale * CARD_HEIGHT,\n+ rX: imgScale * 0.065 * CARD_WIDTH,\n+ rY: imgScale * 0.0464 * CARD_HEIGHT,\n};\n});\nreturn generateSamplepackImage(srcArray, {\n- width: CARD_WIDTH * 5,\n- height: CARD_HEIGHT * 3,\n+ width: imgScale * CARD_WIDTH * 5,\n+ height: imgScale * CARD_HEIGHT * 3,\nCanvas,\n})\n.then((image) => {\n",
        "org_msg": "slightly shrink p1p1 image for discord",
        "sim_msg": "Add bitwse mode to Generate Image operation",
        "sim_diff": "diff --git a/src/core/operations/GenerateImage.mjs b/src/core/operations/GenerateImage.mjs import Operation from \"../Operation.mjs\";\nimport OperationError from \"../errors/OperationError.mjs\";\n+import Utils from \"../Utils.mjs\";\nimport {isImage} from \"../lib/FileType\";\nimport {toBase64} from \"../lib/Base64\";\nimport jimp from \"jimp\";\n+import {isWorkerEnvironment} from \"../Utils\";\n/**\n* Generate Image operation\n@@ -32,7 +34,7 @@ class GenerateImage extends Operation {\n{\n\"name\": \"Mode\",\n\"type\": \"option\",\n- \"value\": [\"Greyscale\", \"RG\", \"RGB\", \"RGBA\"]\n+ \"value\": [\"Greyscale\", \"RG\", \"RGB\", \"RGBA\", \"Bits\"]\n},\n{\n\"name\": \"Pixel Scale Factor\",\n@@ -70,18 +72,35 @@ class GenerateImage extends Operation {\n\"RG\": 2,\n\"RGB\": 3,\n\"RGBA\": 4,\n+ \"Bits\": 1/8,\n};\nconst bytesPerPixel = bytePerPixelMap[mode];\n- if (input.length % bytesPerPixel !== 0) {\n+ if (bytesPerPixel > 0 && input.length % bytesPerPixel !== 0) {\nthrow new OperationError(`Number of bytes is not a divisor of ${bytesPerPixel}`);\n}\nconst height = Math.ceil(input.length / bytesPerPixel / width);\nconst image = await new jimp(width, height, (err, image) => {});\n+ if (isWorkerEnvironment())\n+ self.sendStatusMessage(\"Generate image from data...\");\n+ if (mode === \"Bits\") {\n+ let index = 0;\n+ for (let j = 0; j < input.length; j++) {\n+ const curByte = Utils.bin(input[j]);\n+ for (let k = 0; k < 8; k++, index++) {\n+ const x = index % width;\n+ const y = Math.floor(index / width);\n+\n+ const value = curByte[k] === \"0\" ? 0xFF : 0x00;\n+ const pixel = jimp.rgbaToInt(value, value, value, 0xFF);\n+ image.setPixelColor(pixel, x, y);\n+ }\n+ }\n+ } else {\nlet i = 0;\nwhile (i < input.length) {\nconst index = i / bytesPerPixel;\n@@ -127,8 +146,12 @@ class GenerateImage extends Operation {\nthrow new OperationError(`Error while generating image from pixel values. (${err})`);\n}\n}\n+ }\nif (scale !== 1) {\n+ if (isWorkerEnvironment())\n+ self.sendStatusMessage(\"Scale image...\");\n+\nimage.scaleToFit(width*scale, height*scale, jimp.RESIZE_NEAREST_NEIGHBOR);\n}\n",
        "chatgpt_cot": "Refactor image scaling in cube_routes.js for sample pack generation. Introduce imgScale variable to adjust dimensions and positions for better image rendering."
    },
    {
        "org_diff": "diff --git a/src/util/Sort.js b/src/util/Sort.js @@ -416,7 +416,7 @@ export function cardGetLabels(card, sort) {\nif (colorIdentity(card).length < 4) {\nreturn [];\n} else if (colorIdentity(card).length === 5) {\n- return ['Five-Color'];\n+ return ['Five Color'];\n} else {\nreturn [...'WUBRG'].filter((c) => !colorIdentity(card).includes(c)).map((c) => `Non-${COLOR_MAP[c]}`);\n}\n",
        "org_msg": "Fix name of label.",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "\"Fix typo in cardGetLabels method to return correct color label for Five Color cards\""
    },
    {
        "org_diff": "diff --git a/src/layouts/UserLayout.js b/src/layouts/UserLayout.js @@ -6,8 +6,10 @@ import { Button, Nav, Navbar, NavItem, NavLink, Row } from 'reactstrap';\nimport ErrorBoundary from 'components/ErrorBoundary';\nimport FollowersModal from 'components/FollowersModal';\nimport withModal from 'components/WithModal';\n+import CreateCubeModal from 'components/CreateCubeModal';\nconst FollowersModalLink = withModal('a', FollowersModal);\n+const CreateCubeModalLink = withModal(NavLink, CreateCubeModal);\nconst UserLayout = ({ user, followers, following, canEdit, activeLink, children }) => {\nconst numFollowers = followers.length;\n@@ -61,9 +63,7 @@ const UserLayout = ({ user, followers, following, canEdit, activeLink, children\n<Navbar light className=\"usercontrols\">\n<Nav navbar>\n<NavItem>\n- <NavLink href=\"#\" data-toggle=\"modal\" data-target=\"#cubeModal\">\n- Create New Cube\n- </NavLink>\n+ <CreateCubeModalLink>Create New Cube</CreateCubeModalLink>\n</NavItem>\n</Nav>\n</Navbar>\n",
        "org_msg": "Fixed new cube link in profile page",
        "sim_msg": "fix(Widgets): Puts the training and logout widgets back. Closes",
        "sim_diff": "diff --git a/src/components/layouts/LayoutOdyssey/widgets.js b/src/components/layouts/LayoutOdyssey/widgets.js @@ -6,7 +6,8 @@ import {Tooltip} from \"helpers/reactstrap\";\nimport {Widget} from \"../LayoutCorners/Widgets\";\nimport useSoundEffect from \"../../../helpers/hooks/useSoundEffect\";\n-\n+import {FaQuestionCircle, FaSignOutAlt} from \"react-icons/fa\";\n+import {kebabCase} from \"change-case\";\nconst WIDGET_NOTIFY = gql`\nsubscription WidgetNotify($simulatorId: ID!, $station: String) {\nwidgetNotify(simulatorId: $simulatorId, station: $station)\n@@ -126,7 +127,7 @@ class WidgetsContainer extends Component {\n);\n})}\n<StaticWidget\n- icon={\"question-circle\"}\n+ icon={FaQuestionCircle}\nname=\"Training\"\nclassName=\"help\"\ncolor=\"#3363AA\"\n@@ -134,7 +135,7 @@ class WidgetsContainer extends Component {\ntouch={touch}\n/>\n<StaticWidget\n- icon={\"sign-out\"}\n+ icon={FaSignOutAlt}\nname=\"Logout\"\ncolor=\"#999\"\nonClick={this.logout}\n@@ -172,14 +173,14 @@ const StaticWidget = ({\nplayEffect(\"buttonClick\");\nonClick(e);\n}}\n- id={`widget-${icon}`}\n+ id={`widget-${kebabCase(name)}`}\nstyle={{color: color || \"rgb(200,150,255)\"}}\n/>\n{!touch && (\n<Tooltip\nplacement=\"bottom\"\nisOpen={tooltipOpen}\n- target={`widget-${icon}`}\n+ target={`widget-${kebabCase(name)}`}\ntoggle={toggle}\ndelay={{show: 0, hide: 20}}\n>\n",
        "chatgpt_cot": "Add CreateCubeModalLink component and replace NavLink with CreateCubeModalLink for creating new cube functionality in UserLayout."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -1057,6 +1057,14 @@ function show_contextModal(card) {\n$('.price-area').html(priceHtml);\n$('#contextModalTitle').html(card.details.name);\n$('#contextModalImg').attr('src', card.details.display_image);\n+ if (card.details.image_flip !== undefined) {\n+ $('#contextModalImg').mouseover(function() {\n+ $(this).attr('src', card.details.image_flip);\n+ });\n+ $('#contextModalImg').mouseout(function() {\n+ $(this).attr('src', card.details.display_image);\n+ });\n+ }\n$('#contextModalVersionSelect').html('');\nvar statusHTML = \"\";\nvar statuses = getLabels('Status');\n",
        "org_msg": "show image_flip on hover",
        "sim_msg": "Tokens cleanup",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -1150,7 +1150,7 @@ const _getTokenHtml = cardData => {\n</div>\n`;\n};\n-(async () => {\n+/* (async () => {\nconst totalObjects = await contract.methods.getNonce().call();\nconst ts = [];\nfor (let i = 1; i <= totalObjects; i++) {\n@@ -1173,7 +1173,7 @@ const _getTokenHtml = cardData => {\n});\n});\n}\n-})();\n+})(); */\n/* const scenes = document.getElementById('scenes');\n(async () => {\nconst res = await fetch(scenesEndpoint);\n",
        "chatgpt_cot": "Add image flip functionality to context modal in editcube.js. Fix issue with image not flipping on mouseover."
    },
    {
        "org_diff": "diff --git a/views/cube/cube_deck.pug b/views/cube/cube_deck.pug @@ -41,32 +41,25 @@ block content\n.row\neach deck, i in bot_decks\n.col\n- h6 #{bots[i]}\n- ul.list-group\n+\n+ div.list-group.list-outline\n+ span.list-group-heading.list-group-item #{bots[i]}\neach card, j in bot_decks[i]\nif card.colorcategory == 'w'\n- li.list-group-item.autocard.white(card=card.image_normal card_flip=card.image_flip)\n- a.card-list-item= card.name\n+ a.list-group-item.autocard.white.card-list-item(card=card.image_normal card_flip=card.image_flip)= card.name\nif card.colorcategory == 'u'\n- li.list-group-item.autocard.blue(card=card.image_normal card_flip=card.image_flip)\n- a.card-list-item= card.name\n+ a.list-group-item.autocard.blue.card-list-item(card=card.image_normal card_flip=card.image_flip)= card.name\nif card.colorcategory == 'b'\n- li.list-group-item.autocard.black(card=card.image_normal card_flip=card.image_flip)\n- a.card-list-item= card.name\n+ a.list-group-item.autocard.black.card-list-item(card=card.image_normal card_flip=card.image_flip)= card.name\nif card.colorcategory == 'r'\n- li.list-group-item.autocard.red(card=card.image_normal card_flip=card.image_flip)\n- a.card-list-item= card.name\n+ a.list-group-item.autocard.red.card-list-item(card=card.image_normal card_flip=card.image_flip)= card.name\nif card.colorcategory == 'g'\n- li.list-group-item.autocard.green(card=card.image_normal card_flip=card.image_flip)\n- a.card-list-item= card.name\n+ a.list-group-item.autocard.green.card-list-item(card=card.image_normal card_flip=card.image_flip)= card.name\nif card.colorcategory == 'c'\n- li.list-group-item.autocard.colorless(card=card.image_normal card_flip=card.image_flip)\n- a.card-list-item= card.name\n+ a.list-group-item.autocard.colorless.card-list-item(card=card.image_normal card_flip=card.image_flip)= card.name\nif card.colorcategory == 'm'\n- li.list-group-item.autocard.multi(card=card.image_normal card_flip=card.image_flip)\n- a.card-list-item= card.name\n+ a.list-group-item.autocard.multi.card-list-item(card=card.image_normal card_flip=card.image_flip)= card.name\nif card.colorcategory == 'l'\n- li.list-group-item.autocard.lands(card=card.image_normal card_flip=card.image_flip)\n- a.card-list-item= card.name\n+ a.list-group-item.autocard.lands.card-list-item(card=card.image_normal card_flip=card.image_flip)= card.name\nscript(src='/js/deck.js')\n",
        "org_msg": "Updates draft deck bot styling\nFixes:",
        "sim_msg": "Ensure buttons from previous response are included in response card. Ensure that lambdahook is called again as well for prior response however make sure no recursion can occur for the \"previous\" function.",
        "sim_diff": "diff --git a/templates/examples/examples/py/Previous.py b/templates/examples/examples/py/Previous.py @@ -2,7 +2,6 @@ from __future__ import print_function\nimport json\nimport boto3\nimport os\n-import botocore.response as br\ndef handler(event, context):\n@@ -62,7 +61,7 @@ def updateResult(event, response):\nevent[\"res\"][\"session\"][\"appContext\"][\"altMessages\"] = response.get(\"alt\",{})\nif \"outputDialogMode\" not in event[\"req\"] or event[\"req\"][\"outputDialogMode\"]!=\"Text\":\n- if response.get(\"alt\",False) and \"ssml\" in response[\"alt\"]:\n+ if response.get(\"alt\",False) and \"ssml\" in response[\"alt\"] and len(response[\"alt\"][\"ssml\"])>0:\nevent[\"res\"][\"type\"]=\"SSML\"\nevent[\"res\"][\"message\"]=response[\"alt\"][\"ssml\"].replace('\\n',' ')\nif \"r\" in response:\n@@ -78,6 +77,8 @@ def updateResult(event, response):\nevent[\"res\"][\"card\"][\"text\"] = \"\"\nif 'imageUrl' in card:\nevent[\"res\"][\"card\"][\"imageUrl\"] = card[\"imageUrl\"]\n+ if 'buttons' in card:\n+ event[\"res\"][\"card\"][\"buttons\"] = card[\"buttons\"]\nif 't' in response:\nevent[\"res\"][\"session\"][\"topic\"] = response[\"t\"]\n#for Lex\n@@ -92,5 +93,17 @@ def updateResult(event, response):\nevent[\"res\"][\"session\"][\"previous\"] ={\"qid\":response[\"qid\"],\"a\":response[\"a\"],\"alt\":response.get(\"alt\",{}),\"q\":event[\"req\"][\"question\"]}\nevent[\"res\"][\"session\"][\"navigation\"]={\"next\":response[\"next\"],\"previous\":tempList,\"hasParent\":navigationToJson[\"hasParent\"]}\n+ # Do not call lambdafunction from the previous item if the link actually points to this previous function\n+ if 'l' in response and response[\"l\"].find(os.environ.get('AWS_LAMBDA_FUNCTION_NAME'))<=0:\n+ event[\"res\"][\"result\"][\"args\"] = response[\"args\"]\n+ client = boto3.client('lambda')\n+ lhresp = client.invoke(\n+ FunctionName = response[\"l\"],\n+ Payload = json.dumps(event),\n+ InvocationType = \"RequestResponse\"\n+ )\n+ # Because the payload is of a streamable type object, we must explicitly read it and load JSON\n+ event = json.loads(lhresp['Payload'].read())\n+\nreturn event\n",
        "chatgpt_cot": "\"Refactor cube_deck.pug to use list-group items for card categories, improving readability and organization of the code.\""
    },
    {
        "org_diff": "diff --git a/src/components/SortCollapse.js b/src/components/SortCollapse.js @@ -84,6 +84,14 @@ const SortCollapse = ({\nconst addAlert = useCallback((color, message) => setAlerts((alertsB) => [...alertsB, { color, message }]), []);\n+ const handleReset = useCallback(() => {\n+ Query.del('s1');\n+ Query.del('s2');\n+ Query.del('s3');\n+ Query.del('s4');\n+ changeSort({ primary: defSorts[0], secondary: defSorts[1], tertiary: defSorts[2], quaternary: defSorts[3] });\n+ }, [defSorts, changeSort]);\n+\nconst handleSave = useCallback(async () => {\ntry {\nawait csrfFetch(`/cube/api/savesorts/${cubeID}`, {\n@@ -217,15 +225,7 @@ const SortCollapse = ({\n</Row>\n<Row className=\"mb-3\">\n<Col>\n- <Button\n- color=\"success\"\n- className=\"mr-sm-2 mb-3\"\n- onClick={() => {\n- Query.del('s1');\n- Query.del('s2');\n- changeSort({ primary: defSorts[0], secondary: defSorts[1] });\n- }}\n- >\n+ <Button color=\"success\" className=\"mr-sm-2 mb-3\" onClick={handleReset}>\nReset Sort\n</Button>\n{!canEdit ? (\n",
        "org_msg": "fixed reset sort",
        "sim_msg": "refactor(navigation): use values from sorting object for each sorting type",
        "sim_diff": "diff --git a/packages/doc/src/components/Navigation/Navigation.jsx b/packages/doc/src/components/Navigation/Navigation.jsx @@ -23,8 +23,8 @@ const SORTING = {\n*/\nconst getSorting = kind =>\n({\n- orderAscending: (a, b) => (a.order > b.order ? 1 : -1),\n- alphabeticAscending: (a, b) => (a.title > b.title ? 1 : -1),\n+ [SORTING.orderAscending]: (a, b) => (a.order > b.order ? 1 : -1),\n+ [SORTING.alphabeticAscending]: (a, b) => (a.title > b.title ? 1 : -1),\n}[kind ?? SORTING.orderAscending]);\nconst Wrapper = styled.aside`\n",
        "chatgpt_cot": "Add handleReset method, refactor reset sort functionality, and improve code readability in SortCollapse component."
    },
    {
        "org_diff": "diff --git a/src/contexts/SortContext.js b/src/contexts/SortContext.js @@ -6,6 +6,7 @@ const SortContext = React.createContext({\nsecondary: 'Types-Multicolor',\ntertiary: 'CMC',\nquaternary: 'Alphabetical',\n+ showOther: false,\n});\nexport class SortContextProvider extends React.Component {\n@@ -18,6 +19,7 @@ export class SortContextProvider extends React.Component {\ntertiary = 'CMC',\nquaternary = 'Alphabetical',\n],\n+ showOther = false,\n} = this.props;\nthis.state = {\n@@ -25,6 +27,7 @@ export class SortContextProvider extends React.Component {\nsecondary,\ntertiary,\nquaternary,\n+ showOther,\n};\nthis.changeSort = this.changeSort.bind(this);\n@@ -58,6 +61,7 @@ export class SortContextProvider extends React.Component {\nSortContextProvider.propTypes = {\ndefaultSorts: PropTypes.arrayOf(PropTypes.string).isRequired,\n+ showOther: PropTypes.bool.isRequired,\n};\nSortContext.Wrapped = (Tag) => (props) => (\n",
        "org_msg": "added showOther to SortContext and sort functions",
        "sim_msg": "changed the repo name lenght to 6 chars",
        "sim_diff": "diff --git a/vis/js/templates/contextfeatures/DataSource.jsx b/vis/js/templates/contextfeatures/DataSource.jsx @@ -2,13 +2,11 @@ import React from \"react\";\nimport { shorten } from \"../../utils/string\";\nimport HoverPopover from \"../HoverPopover\";\n-const MAX_CONTENT_PROVIDER_LENGTH = 20;\n+const MAX_CONTENT_PROVIDER_LENGTH = 6;\nconst DataSource = ({ label, source, contentProvider, popoverContainer }) => {\nif (contentProvider) {\n- const content = (\n- shorten(contentProvider, MAX_CONTENT_PROVIDER_LENGTH) + ` via ${source}`\n- ).replace(\"... via \", \"...via \");\n+ const content = shorten(contentProvider, MAX_CONTENT_PROVIDER_LENGTH);\nreturn (\n// html template starts here\n",
        "chatgpt_cot": "Add showOther property to SortContext, set default value to false, and add PropTypes validation for showOther."
    },
    {
        "org_diff": "diff --git a/populate_analytics.js b/populate_analytics.js @@ -2,7 +2,7 @@ const mongoose = require('mongoose');\nconst quickselect = require('quickselect');\nvar carddb = require('./serverjs/cards.js');\n-const Deck = require('./models/deck');\n+const Draft = require('./models/draft');\nconst Cube = require('./models/cube');\nconst Card = require('./models/card');\nconst mongosecrets = require('../cubecobrasecrets/mongodb');\n@@ -65,6 +65,33 @@ function attemptIncrement(obj, propname) {\nobj[propname] = 0;\n}\nobj[propname]++;\n+\n+}\n+\n+async function processDraft(draft) {\n+ if(draft.pickOrder) {\n+ draft.pickOrder.forEach(function(cid, index) {\n+ //could be an invalid card\n+ const cardname1 = carddb.cardFromId(cid);\n+ if(correlationIndex[cardname1]) {\n+ cubesWithCard[correlationIndex[cardname1]].push(cube._id);\n+ cardnames.forEach(function(cardname2, index2) {\n+ const cardname2 = carddb.cardFromId(cid);\n+ if(index != index2) {\n+ try{\n+ correlations[correlationIndex[cardname2.toLowerCase()]]\n+ [correlationIndex[cardname1.toLowerCase()]]++;\n+ correlations[correlationIndex[cardname1.toLowerCase()]]\n+ [correlationIndex[cardname2.toLowerCase()]]++;\n+ } catch(err)\n+ {\n+ console.log(cardname1.toLowerCase() + ' or ' + cardname2.toLowerCase() + ' cannot be indexed.');\n+ }\n+ }\n+ });\n+ }\n+ });\n+ }\n}\nasync function processCube(cube) {\n@@ -135,6 +162,8 @@ async function processCube(cube) {\n//set correlations\n+ //we will do only correlations on deck objects for now\n+ /*\ncardnames.forEach(function(cardname1, index) {\n//could be an invalid card\nif(correlationIndex[cardname1]) {\n@@ -153,7 +182,7 @@ async function processCube(cube) {\n}\n});\n}\n- });\n+ });*/\nreturn;\n}\n@@ -207,8 +236,8 @@ async function processCard(card) {\n//process all cube objects\nconsole.log('Started: cubes');\n- const count = await Cube.countDocuments();\n- const cursor = Cube.find().cursor();\n+ let count = await Cube.countDocuments();\n+ let cursor = Cube.find().cursor();\nfor (var i = 0; i < count; i ++) {\nawait processCube(await cursor.next());\nif((i+1)%10==0) {\n@@ -218,6 +247,16 @@ async function processCard(card) {\nconsole.log('Finished: all cubes');\n//process all deck objects\n+ console.log('Started: drafts');\n+ count = await Draft.countDocuments();\n+ cursor = Draft.find().cursor();\n+ for (var i = 0; i < count; i ++) {\n+ await processDraft(await cursor.next());\n+ if((i+1)%100==0) {\n+ console.log('Finished: ' + (i+1) + ' of ' + count + ' cubes.');\n+ }\n+ }\n+ console.log('Finished: all cubes');\n//save card models\nconst totalCards = carddb.cardnames.length;\n",
        "org_msg": "Swapped to decks for correlations",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "\"Fix compilation issue due to new method in populate_analytics.js\""
    },
    {
        "org_diff": "diff --git a/views/info/privacy_policy.pug b/views/info/privacy_policy.pug @@ -16,7 +16,7 @@ block content\np We use your data to provide and improve the Service. By using the Service, you agree to the collection and use of\n| information in accordance with this policy. Unless otherwise defined in this Privacy Policy, terms used in this Privacy\n| Policy have the same meanings as in our Terms and Conditions, accessible from\n- a(href='cubecobra.com/tos') here\n+ a(href='/tos') here\na .\ndl.row\ndt.col-3 Information Collection And Use\n",
        "org_msg": "Correct privacy policy link to TOS",
        "sim_msg": "Fix for flag history",
        "sim_diff": "diff --git a/PostIdsEverywhere.user.js b/PostIdsEverywhere.user.js // @description Inserts post IDs everywhere where there's a post or post link\n// @homepage https://github.com/samliew/SO-mod-userscripts\n// @author @samliew\n-// @version 1.12\n+// @version 1.12.1\n//\n// @include https://*stackoverflow.com/*\n// @include https://*serverfault.com/*\n.count-cell + td,\n.user-page .s-card .flex--item,\n.user-page .js-user-tab .flex--item,\n+.question-link,\n+.answer-link,\n.question-summary,\n.summary-table td,\n.history-table td,\n",
        "chatgpt_cot": "Update privacy policy link to point to the correct location to ensure consistency and accuracy in the terms and conditions page."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1743,12 +1743,7 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\n}\n}\n- //need to do numerical sort..\n- const removesArray = [...removes];\n- removesArray.sort((a, b) => a - b);\n- for (let i = removesArray.length - 1; i >= 0; i--) {\n- cube.cards.splice(removesArray[i], 1);\n- }\n+ cube.cards = cube.cards.filter((card, index) => !removes.has(index));\nfor (const add of adds) {\nutil.addCardToCube(cube, add);\nconst maybeIndex = cube.maybe.findIndex((card) => card.cardID === add._id);\n",
        "org_msg": "Clean cube remove code.",
        "sim_msg": "some cards appear in multiple packs, check all for match",
        "sim_diff": "diff --git a/client/DeckEditor.jsx b/client/DeckEditor.jsx @@ -178,7 +178,12 @@ class InnerDeckEditor extends React.Component {\nlet card = _.find(this.props.cards, function(card) {\nif(pack && card.pack_cards.length) {\n- return card.name.toLowerCase() === cardName.toLowerCase() && card.pack_cards[0].pack.id === pack.id;\n+ if(card.name.toLowerCase() === cardName.toLowerCase()) {\n+ return _.find(card.pack_cards, function(packCard) {\n+ return packCard.pack.id === pack.id;\n+ });\n+ }\n+ return false;\n}\nreturn card.name.toLowerCase() === cardName.toLowerCase();\n});\n",
        "chatgpt_cot": "Refactor numerical sorting of cube cards in cube_routes.js to use filter method for better readability and efficiency."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3449,15 +3449,20 @@ router.post('/resize/:id/:size', async (req, res) => {\nconst filter = JSON.parse(req.body.filter);\nlist = list.filter((card) => filterutil.filterCard(card, filter)).slice(0, Math.abs(newSize - cube.cards.length));\n+ let changelog = '';\nif (newSize > cube.cards.length) {\n// we add to cube\n- const toAdd = list.map((card) => util.newCard(card.details));\n+ const toAdd = list.map((card) => {\n+ changelog += addCardHtml(card.details);\n+ return util.newCard(card.details);\n+ });\ncube.cards = cube.cards.concat(toAdd);\n} else {\n// we cut from cube\nfor (const card of list) {\nfor (let i = 0; i < cube.cards.length; i++) {\nif (carddb.cardFromId(cube.cards[i].cardID).name === carddb.cardFromId(card.cardID).name) {\n+ changelog += removeCardHtml(card.details);\ncube.cards.splice(i, 1);\ni = cube.cards.length;\n}\n@@ -3467,8 +3472,18 @@ router.post('/resize/:id/:size', async (req, res) => {\ncube = setCubeType(cube, carddb);\n- // TODO: generate changelog\n+ const blogpost = new Blog();\n+ blogpost.title = 'Resize - Automatic Post';\n+ blogpost.html = changelog;\n+ blogpost.owner = cube.owner;\n+ blogpost.date = Date.now();\n+ blogpost.cube = cube._id;\n+ blogpost.dev = 'false';\n+ blogpost.date_formatted = blogpost.date.toLocaleString('en-US');\n+ blogpost.username = cube.owner_name;\n+ blogpost.cubename = cube.name;\n+ await blogpost.save();\nawait cube.save();\nreq.flash('success', 'Cube Resized succesfully.');\n",
        "org_msg": "resize trigger changelog",
        "sim_msg": "[slack-updates-bot] added automatic changes filter",
        "sim_diff": "diff --git a/tools/slack-updates-bot/index.ts b/tools/slack-updates-bot/index.ts import axios from 'axios';\nimport { makeMessageBody, makeMessageTitle } from './makeMessage';\n-import { collectComponentChangelogs } from '@semcore/changelog-handler';\n+import { Changelog, collectComponentChangelogs } from '@semcore/changelog-handler';\nimport dayjs from 'dayjs';\nimport isBetween from 'dayjs/plugin/isBetween.js';\ndayjs.extend(isBetween);\n+const filterByDate = (changelogs: Changelog[], startDate: string, endDate: string) =>\n+ changelogs.filter(\n+ (changelog) =>\n+ dayjs(changelog.date).isValid() &&\n+ dayjs(changelog.date).isBetween(startDate, endDate, 'd', '[)'),\n+ );\n+const filterAutomaticChanges = (changelogs: Changelog[]) =>\n+ changelogs\n+ .map(({ changes, ...changelog }) => ({\n+ ...changelog,\n+ changes: changes.filter(\n+ (change) => !change.description.includes('due to children dependencies update'),\n+ ),\n+ }))\n+ .filter((changelog) => changelog.changes.length > 0);\n+\nexport const sendUiKitUpdates = async ({\nstartDate,\nendDate,\n@@ -17,16 +33,10 @@ export const sendUiKitUpdates = async ({\ndryRun: boolean;\n}) => {\nconst packages = await collectComponentChangelogs();\n- const changelogs = packages\n- .map(({ changelogs }) => changelogs)\n- .flat()\n- .filter(\n- (changelog) =>\n- dayjs(changelog.date).isValid() &&\n- dayjs(changelog.date).isBetween(startDate, endDate, 'd', '[)'),\n- );\n+ const changelogs = packages.map(({ changelogs }) => changelogs).flat();\n+ const filteredChangelogs = filterAutomaticChanges(filterByDate(changelogs, startDate, endDate));\nconst title = makeMessageTitle(startDate, endDate);\n- const body = makeMessageBody(changelogs);\n+ const body = makeMessageBody(filteredChangelogs);\nreturn await sendMessage({ endpoints, title, body, dryRun });\n};\n",
        "chatgpt_cot": "\"Add changelog functionality to resize route in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -189,6 +189,11 @@ const specialCaseCardsList = {\ntokenId: 'bd05e304-1a16-436d-a05c-4a38a839759b',\n},\n],\n+ \"Jace, Vryn's Prodigy\": [\n+ {\n+ tokenId: '458e37b1-a849-41ae-b63c-3e09ffd814e4'\n+ },\n+ ],\n\"Legion's Landing\": [\n{\ntokenId: '09293ae7-0629-417b-9eda-9bd3f6d8e118',\n",
        "org_msg": "Add JaceVP emblem\nfixed Adds flip Jace's emblem to the special list of tokens.",
        "sim_msg": "Add DCT to the token list",
        "sim_diff": "diff --git a/token-list/tokenlist.json b/token-list/tokenlist.json {\n\"name\": \"DeFi Token List\",\n- \"timestamp\": \"2020-10-13T05:06:07.842Z\",\n+ \"timestamp\": \"2020-10-13T05:08:00.027Z\",\n\"version\": {\n\"major\": 1,\n- \"minor\": 6048,\n+ \"minor\": 6049,\n\"patch\": 0\n},\n\"keywords\": [\n\"symbol\": \"UNISTAKE\",\n\"address\": \"0x9Ed8e7C9604790F7Ec589F99b94361d8AAB64E5E\",\n\"decimals\": 18\n+ },\n+ {\n+ \"chainId\": 1,\n+ \"name\": \"DegensCasinoToken\",\n+ \"symbol\": \"DCT\",\n+ \"address\": \"0x9059C8F2bE28F7573D5B699147A150B9518856EE\",\n+ \"decimals\": 18\n}\n]\n}\n\\ No newline at end of file\n",
        "chatgpt_cot": "Add tokenId for \"Jace, Vryn's Prodigy\" and \"Legion's Landing\" in specialCaseCardsList."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.test.js b/__tests__/serverjs/updatecards.test.js @@ -28,8 +28,8 @@ const convertedExampleCard = {\nlegalities: {\nLegacy: true,\nModern: true,\n- Standard: false,\n- Pioneer: false,\n+ Standard: true,\n+ Pioneer: true,\nPauper: false,\n},\nparsed_cost: ['w', 'r'],\n@@ -146,7 +146,13 @@ const convertedExampleAdventureCard = {\nimage_small: 'https://img.scryfall.com/cards/small/front/0/6/06bd1ad2-fb5d-4aef-87d1-13a341c686fa.jpg?1572490543',\nisToken: false,\nlanguage: 'en',\n- legalities: { Legacy: true, Modern: true, Standard: true, Pauper: false },\n+ legalities: {\n+ Legacy: true,\n+ Modern: true,\n+ Pauper: false,\n+ Pioneer: true,\n+ Standard: true,\n+ },\nname: 'Flaxen Intruder',\nname_lower: 'flaxen intruder',\noracle_text:\n",
        "org_msg": "Updated card tests",
        "sim_msg": "updated address that owns NFT to be airswap's rinkeby address",
        "sim_diff": "diff --git a/utils/order-utils/test/orders.js b/utils/order-utils/test/orders.js @@ -14,7 +14,7 @@ describe('Orders', async () => {\nconst signerWallet = '0x9d2fb0bcc90c6f3fa3a98d2c760623a4f6ee59b4'\n// Owns a crypto kitty\n- const kittyWallet = '0x155862c29632E402d4068099B701891741221C25'\n+ const kittyWallet = '0x7F18BB4Dd92CF2404C54CBa1A9BE4A1153bdb078'\n// Mock ERC721Receiver wallet on rinkeby\nconst erc721Wallet = '0xF727956c4CFd20b9C8D463218a65e751891da3e6'\n",
        "chatgpt_cot": "Update legalities for Standard and Pioneer in updatecards.test.js, fixing card legality information for Flaxen Intruder and convertedExampleCard."
    },
    {
        "org_diff": "diff --git a/src/utils/draftbots.js b/src/utils/draftbots.js @@ -8,7 +8,7 @@ const COLOR_SCALING_FACTOR = [1, 1, 0.7, 0.45, 0.2, 0.1];\nconst COLORS_WEIGHTS = [\n[0, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.1, 2.2, 2.3, 2.4, 2.5],\n[3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.1, 4.2, 4.3, 4.4, 4.5],\n- [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n+ [5, 5.2, 5.4, 5.5, 5.6, 5.8, 6, 6.2, 6.4, 6.5, 6.6, 6.8, 7, 7.2, 7.5],\n];\nconst RATING_WEIGHTS = [\n[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n@@ -21,9 +21,9 @@ const FIXING_WEIGHTS = [\n[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n];\nconst SYNERGY_WEIGHTS = [\n- [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n- [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n+ [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4],\n+ [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7],\n];\nconst OPENNESS_WEIGHTS = [\n[2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.7, 2.6, 2.4, 2.3, 2.2, 2.1],\n",
        "org_msg": "Tweak weights.",
        "sim_msg": "refactor(tokens): remove unused variables",
        "sim_diff": "diff --git a/packages/tokens/index.js b/packages/tokens/index.js @@ -19,18 +19,7 @@ const typography = {\n},\n},\n};\n-const border = {\n- radius: {\n- sharp: 0,\n- rounded: 0,\n- circle: 0,\n- },\n- size: {\n- small: 0,\n- medium: 0,\n- large: 0,\n- },\n-};\n+\nconst colors = {\nmadrid: {\ncrossfit: null,\n@@ -93,27 +82,9 @@ const colors = {\nvilaOlimpia10: null,\n},\n};\n-const spacing = {\n- xtiny: 0,\n- tiny: 0,\n- xsmall: 0,\n- small: 0,\n- base: 0,\n- medium: 0,\n- large: 0,\n- xlarge: 0,\n- xxlarge: 0,\n-};\n+\nconst breakpoints = {\nsmall: {},\nmedium: {},\nlarge: {},\n};\n-const elevation = {\n- levels: {\n- 1: '0px 1px 2px rgba(0, 0, 0, 0.20)',\n- 2: '0px 2px 4px rgba(0, 0, 0, 0.20)',\n- 3: '0px 4px 8px rgba(0, 0, 0, 0.20)',\n- 4: '0px 8px 16px rgba(0, 0, 0, 0.20)',\n- },\n-};\n",
        "chatgpt_cot": "\"Adjust color scaling factor and weights in draftbots.js to improve rating, fixing, synergy, and openness weights for better performance.\""
    },
    {
        "org_diff": "diff --git a/views/cube/cube_layout.pug b/views/cube/cube_layout.pug @@ -12,14 +12,14 @@ block content\n| (#{cube.card_count} Card #{cube.type} Cube)\n.d-flex.flex-row.flex-wrap\nli.nav-item\n- a.nav-link(href='/cube/overview/'+cube._id, class=activeLink === 'overview' && 'active') Overview\n+ a.nav-link(href='/cube/overview/'+cube_id, class=activeLink === 'overview' && 'active') Overview\nli.nav-item\n- a.nav-link(href='/cube/list/'+cube._id, class=activeLink === 'list' && 'active') List\n+ a.nav-link(href='/cube/list/'+cube_id, class=activeLink === 'list' && 'active') List\nli.nav-item\n- a.nav-link(href='/cube/playtest/'+cube._id, class=activeLink === 'playtest' && 'active') Playtest\n+ a.nav-link(href='/cube/playtest/'+cube_id, class=activeLink === 'playtest' && 'active') Playtest\nli.nav-item\n- a.nav-link(href='/cube/analysis/'+cube._id, class=activeLink === 'analysis' && 'active') Analysis\n+ a.nav-link(href='/cube/analysis/'+cube_id, class=activeLink === 'analysis' && 'active') Analysis\nli.nav-item\n- a.nav-link(href='/cube/blog/'+cube._id, class=activeLink === 'blog' && 'active') Blog\n+ a.nav-link(href='/cube/blog/'+cube_id, class=activeLink === 'blog' && 'active') Blog\nblock cube_toolbar\nblock cube_content\n",
        "org_msg": "Finish restoring old handling of cube ids.",
        "sim_msg": "Fix logo url in nav fragment",
        "sim_diff": "diff --git a/layouts/partials/fragments/nav.html b/layouts/partials/fragments/nav.html {{- end -}}>\n<div class=\"container\">\n{{- if .Params.asset.image }}\n- <a class=\"navbar-brand py-0\" href=\"{{ \"#page-top\" | relLangURL }}\">\n+ <a class=\"navbar-brand py-0\" href=\"{{ \"#\" | relLangURL }}\">\n<img src=\"{{ partial \"helpers/image.html\" (dict \"root\" $self \"asset\" .Params.asset) }}\" height=\"35\" class=\"d-inline-block align-top\" alt=\"{{ .Params.asset.text }}\">\n</a>\n{{- else }}\n- <a class=\"navbar-brand py-0\" href=\"{{ \"#page-top\" | relLangURL }}\">\n+ <a class=\"navbar-brand py-0\" href=\"{{ \"#\" | relLangURL }}\">\n{{- .Params.asset.text -}}\n</a>\n{{- end }}\n",
        "chatgpt_cot": "Update cube layout links to use cube_id instead of cube._id for consistency and clarity. Fixing activeLink comparison for each link."
    },
    {
        "org_diff": "diff --git a/public/css/stylesheet.css b/public/css/stylesheet.css @@ -89,6 +89,8 @@ body {\n.list-group-item {\ndisplay: block;\nborder: none;\n+ background-color: var(--bg);\n+ color: var(--text);\n}\n.list-group-item.list-group-heading {\n@@ -231,6 +233,11 @@ body {\nbackground: var(--hover-inverse);\n}\n+.tag-color-row {\n+ background-color: var(--bg);\n+ color: var(--text);\n+}\n+\n.card-list-item:hover:after {\nopacity: 1;\n}\n",
        "org_msg": "Fix style issues in dark mode\nAdd background-color and color properties to .list-group-item rule\nCreate a .tag-color-row rule with these same properties",
        "sim_msg": "Fix the aspect ratio fix",
        "sim_diff": "diff --git a/src/web/stylesheets/components/_pane.css b/src/web/stylesheets/components/_pane.css line-height: 30px;\nbackground-color: var(--primary-background-colour);\nflex-direction: row;\n+ padding-left: 10px;\n}\n.io-card.card:hover {\nmargin-top: auto;\nmargin-right: auto;\nmargin-bottom: auto;\n- padding: 10px;\n- padding-right: 0px;\n+ padding: 0px;\n}\n",
        "chatgpt_cot": "\"Add custom styling for tag color row in stylesheet to match background and text color variables, improve visual consistency in list group items.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -56,8 +56,7 @@ let BulkUploadPage = null;\nlet CubeListPage = null;\nlet CubePlaytestPage = null;\nlet DraftView = null;\n-if (false) {\n- // NODE_ENV === 'production') {\n+if (NODE_ENV === 'production') {\nBulkUploadPage = require('../dist/components/BulkUploadPage').default;\nCubeListPage = require('../dist/components/CubeListPage').default;\nCubePlaytestPage = require('../dist/components/CubePlaytestPage').default;\n",
        "org_msg": "Reenable SSR.",
        "sim_msg": "feat: add product route for a shop",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,6 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"product\", \"/product/:slug\", \"product\")\n+ .add(\"product\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Fix conditional statement for NODE_ENV in cube_routes.js"
    },
    {
        "org_diff": "diff --git a/nearley/values.ne b/nearley/values.ne @@ -135,7 +135,8 @@ stringContainOpValue -> equalityOperator stringValue {% ([op, value]) => stringC\nstringValue -> (noQuoteStringValue | dqstring | sqstring) {% ([[value]]) => value.toLowerCase() %}\n-noQuoteStringValue -> [^ \\t\\n\"'\\\\=<>:]:+ {% ([chars]) => chars.join('').toLowerCase() %}\n+# anything that isn't a special character and isn't \"and\" or \"or\"\n+noQuoteStringValue -> ([^aAoO \\t\\n\"'\\\\=<>:] | \"a\"i [^nN \\t\\n\"'\\\\=<>:] | \"an\"i:+ [^dD \\t\\n\"'\\\\=<>:] | \"o\"i:+ [^rR \\t\\n\"'\\\\=<>:]) [^ \\t\\n\"'\\\\=<>:]:* {% ([startChars, chars]) => startChars.concat(chars).join('').toLowerCase() %}\n# \"\nmanaCostOpValue -> equalityOperator manaCostValue {% ([op, value]) => manaCostOperation(op, value) %}\n",
        "org_msg": "Fix and and or.",
        "sim_msg": "[INTERNAL] Translation delivery: commit by LX Lab\n[TEW related commits: 1c1cd91]",
        "sim_diff": "diff --git a/src/sap.ui.mdc/src/sap/ui/mdc/messagebundle_en_US_saprigi.properties b/src/sap.ui.mdc/src/sap/ui/mdc/messagebundle_en_US_saprigi.properties @@ -267,6 +267,14 @@ valuehelp.TOKENIZERTITLE=\\u206A\\u206A\\u206A\\u200C\\u200B\\u200B\\u200C\\u200D\\u200B\\\nvaluehelp.TOKENIZERTITLENONUMBER=\\u206A\\u206A\\u206A\\u200D\\u200C\\u200D\\u200B\\u200D\\u200D\\u200B\\u200B\\u200B\\u200D\\u200D\\u200B\\u200C\\u200B\\u200C\\u200B\\u200C\\u200B\\u200D\\u200C\\u200B\\u200C\\u200B\\u200B\\u200B\\u200B\\u200C\\u200B\\u200B\\u200D\\u200D\\u200C\\u200B\\u200C\\u200B\\u200B\\u200B\\u200B\\u200C\\u206ANo Items or Conditions Selected\\u206A\\u206A\n+valuehelp.SELECTFROMLIST.TokenizerTitle=\\u206A\\u206A\\u206A\\u200C\\u200B\\u200D\\u200C\\u200D\\u200C\\u200C\\u200B\\u200B\\u200B\\u200B\\u200B\\u200D\\u200C\\u200D\\u200D\\u200B\\u200C\\u200B\\u200B\\u200C\\u200D\\u200D\\u200B\\u200B\\u200B\\u200D\\u200D\\u200B\\u200C\\u200C\\u200C\\u200B\\u200B\\u200B\\u200B\\u200D\\u200D\\u200D\\u200B\\u200D\\u206ASelected Items (\\u200B\\u200B\\u200B{0}\\u200C\\u200C\\u200C)\\u206A\\u206A\n+\n+valuehelp.SELECTFROMLIST.TokenizerTitleNoCount=\\u206A\\u206A\\u206A\\u200C\\u200B\\u200C\\u200D\\u200B\\u200D\\u200C\\u200D\\u200C\\u200B\\u200C\\u200B\\u200D\\u200D\\u200C\\u200B\\u200C\\u200B\\u200B\\u200D\\u200C\\u200B\\u200B\\u200C\\u200B\\u200C\\u200B\\u200C\\u200D\\u200C\\u200C\\u200B\\u200C\\u200D\\u200D\\u200C\\u200C\\u200B\\u200B\\u200C\\u200D\\u206ANo Items Selected\\u206A\\u206A\n+\n+valuehelp.DEFINECONDITIONS.TokenizerTitle=\\u206A\\u206A\\u206A\\u200C\\u200C\\u200C\\u200B\\u200B\\u200D\\u200D\\u200C\\u200B\\u200D\\u200C\\u200C\\u200D\\u200B\\u200B\\u200D\\u200C\\u200B\\u200C\\u200C\\u200B\\u200B\\u200C\\u200C\\u200B\\u200B\\u200B\\u200C\\u200B\\u200C\\u200B\\u200D\\u200D\\u200D\\u200C\\u200D\\u200B\\u200B\\u200C\\u200D\\u200C\\u206AConditions (\\u200B\\u200B\\u200B{0}\\u200C\\u200C\\u200C)\\u206A\\u206A\n+\n+valuehelp.DEFINECONDITIONS.TokenizerTitleNoCount=\\u206A\\u206A\\u206A\\u200C\\u200C\\u200C\\u200D\\u200C\\u200C\\u200B\\u200C\\u200B\\u200B\\u200C\\u200C\\u200D\\u200B\\u200D\\u200B\\u200D\\u200B\\u200C\\u200C\\u200C\\u200C\\u200D\\u200B\\u200B\\u200C\\u200B\\u200D\\u200D\\u200D\\u200C\\u200B\\u200D\\u200D\\u200C\\u200C\\u200B\\u200C\\u200C\\u200C\\u206ANo Conditions Entered\\u206A\\u206A\n+\nvaluehelp.VALUE_NOT_EXIST=\\u206A\\u206A\\u206A\\u200C\\u200D\\u200C\\u200C\\u200B\\u200B\\u200C\\u200C\\u200B\\u200D\\u200B\\u200B\\u200B\\u200C\\u200B\\u200C\\u200B\\u200D\\u200C\\u200B\\u200D\\u200C\\u200D\\u200B\\u200C\\u200D\\u200D\\u200B\\u200D\\u200C\\u200C\\u200B\\u200C\\u200B\\u200B\\u200C\\u200D\\u206AThe value \"\\u200B\\u200B\\u200B{0}\\u200C\\u200C\\u200C\" does not exist.\\u206A\\u206A\nvaluehelp.VALUE_NOT_UNIQUE=\\u206A\\u206A\\u206A\\u200C\\u200C\\u200C\\u200C\\u200C\\u200D\\u200C\\u200C\\u200B\\u200B\\u200D\\u200C\\u200D\\u200C\\u200B\\u200D\\u200C\\u200D\\u200D\\u200D\\u200B\\u200C\\u200B\\u200D\\u200B\\u200B\\u200D\\u200D\\u200C\\u200B\\u200C\\u200B\\u200B\\u200D\\u200D\\u200D\\u200C\\u200D\\u200B\\u200C\\u206AThe value \"\\u200B\\u200B\\u200B{0}\\u200C\\u200C\\u200C\" is not unique.\\u206A\\u206A\n",
        "chatgpt_cot": "Add case-insensitive \"and\" and \"or\" checks to noQuoteStringValue to ensure proper handling of special characters and improve code readability."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -954,7 +954,7 @@ router.get('/samplepackimage/:id/:seed', async (req, res) => {\n}\n});\n-router.post('/importcubetutor/:id', ensureAuth, async function(req, res) {\n+router.post('/importcubetutor/:id', ensureAuth, async (req, res) => {\ntry {\nconst cube = await Cube.findOne(build_id_query(req.params.id));\nif (cube.owner != req.user._id) {\n@@ -1062,9 +1062,7 @@ router.post('/importcubetutor/:id', ensureAuth, async function(req, res) {\n}\n}\n} catch (err) {\n- console.error(err);\n- req.flash('danger', 'Error: Unable to import this cube.');\n- res.redirect('/cube/list/' + req.params.id);\n+ util.handleRouteError(res, err, '/cube/list/' + req.params.id);\n}\n});\n",
        "org_msg": "revise CT import route",
        "sim_msg": "refactor: update param name",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js const routes = require(\"next-routes\")();\nroutes\n- .add(\"product\", \"/product/:slug\", \"product\")\n.add(\"product\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n+ .add(\"product\", \"/product/:productSlug\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Refactor cube_routes.js to use arrow functions, handle error with util function."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -12,6 +12,7 @@ Canvas.Image = Image;\nconst React = require('react');\nconst ReactDOMServer = require('react-dom/server');\n+const secrets = require('../../cubecobrasecrets/secrets');\nconst {\naddAutocard,\n@@ -3369,7 +3370,7 @@ router.post(\n'/api/adds/:id',\nutil.wrapAsyncApi(async (req, res) => {\nconst response = await fetch(\n- `http://127.0.0.1:8000/?cube_name=${req.params.id}&num_recs=${1000}&root=${encodeURIComponent(\n+ `${secrets.flaskRoot}/?cube_name=${req.params.id}&num_recs=${1000}&root=${encodeURIComponent(\n'http://localhost:5000',\n)}`,\n);\n",
        "org_msg": "make flaskRoot a secret",
        "sim_msg": "feat: allow any route to be able to force a full page load",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js const routes = require(\"next-routes\")();\n+const getConfig = require(\"next/config\").default;\n+\n+if (process.browser) {\n+ const { publicRuntimeConfig } = getConfig();\n+\n+ const wrap = (method) => (route, params, options) => {\n+ const { byName, urls: { as, href } } = routes.findAndGetUrls(route, params);\n+\n+ // Force full page loads\n+ if (!publicRuntimeConfig.enableSPARouting && !options.replace) {\n+ window.location = as;\n+ return as;\n+ }\n+\n+ // History pushstate\n+ return routes.Router[method](href, as, byName ? options : params);\n+ };\n+\n+ // Override router push methods\n+ routes.Router.pushRoute = wrap(\"push\");\n+ routes.Router.replaceRoute = wrap(\"replace\");\n+ routes.Router.prefetchRoute = wrap(\"prefetch\");\n+}\nroutes\n.add(\"home\", \"/\", \"productGrid\")\n",
        "chatgpt_cot": "Add secrets file for flaskRoot URL and update fetch endpoint to use secrets in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/src/components/DraftView.js b/src/components/DraftView.js @@ -7,9 +7,8 @@ import { Card, CardBody, CardHeader, CardTitle, Col, Collapse, Input, Nav, Navba\nimport Draft from '../util/Draft';\nimport Location from '../util/DraftLocation';\n-import { arraysEqual, cmcColumn } from '../util/Util';\n+import { cmcColumn } from '../util/Util';\n-import CardStack from './CardStack';\nimport CSRFForm from './CSRFForm';\nimport CustomImageToggler from './CustomImageToggler';\nimport DeckStacks from './DeckStacks';\n@@ -65,6 +64,10 @@ Pack.propTypes = {\nonClickCard: PropTypes.func.isRequired,\n};\n+Pack.defaultProps = {\n+ picking: null,\n+};\n+\nconst DraftView = () => {\nconst [pack, setPack] = useState([...Draft.pack()]);\nconst [initialPackNumber, initialPickNumber] = Draft.packPickNumber();\n@@ -161,6 +164,7 @@ const DraftView = () => {\n<Input type=\"hidden\" name=\"body\" value={Draft.id()} />\n</CSRFForm>\n<DndProvider backend={HTML5Backend}>\n+ <ErrorBoundary>\n<Pack\npack={pack}\npackNumber={packNumber}\n@@ -169,6 +173,8 @@ const DraftView = () => {\nonMoveCard={handleMoveCard}\nonClickCard={handleClickCard}\n/>\n+ </ErrorBoundary>\n+ <ErrorBoundary>\n<DeckStacks\ncards={picks}\ntitle=\"Picks\"\n@@ -178,6 +184,7 @@ const DraftView = () => {\nonMoveCard={handleMoveCard}\nclassName=\"mt-3\"\n/>\n+ </ErrorBoundary>\n</DndProvider>\n</DisplayContextProvider>\n);\n",
        "org_msg": "Add error boundaries.",
        "sim_msg": "Improve drafts page layout",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -26,12 +26,10 @@ let DraftRow = (props) => {\nDraftRow = connect(() => ({}), { deleteDraft })(DraftRow);\nconst DraftList = ({ editor: { draftPosts } }) =>\n- (\n<div className=\"main-panel\">\n<Header />\n- <div className=\"my-3\">\n+ <div className=\"my-3 container container-small\">\n<h1 className=\"text-xs-center\">Drafts</h1>\n- <div className=\"container\">\n{ _.size(draftPosts) === 0 &&\n<h3 className=\"text-xs-center\">\nYou don't have any draft saved.\n@@ -41,8 +39,6 @@ const DraftList = ({ editor: { draftPosts } }) =>\n<DraftRow key={key} data={draft.postData} id={key} />)\n}\n</div>\n- </div>\n- </div>\n- );\n+ </div>;\nexport default connect(state => ({ editor: state.editor }))(DraftList);\n",
        "chatgpt_cot": "\"Remove unused import and add default prop for 'picking' in Pack component in DraftView\""
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -730,7 +730,7 @@ export function countGroup(group) {\nexport function downloadSort(cards) {\nvar exportCards = [];\n- cards = sortDeep(cards, 'Color Category', 'CMC');\n+ cards = sortDeep(cards, 'Color', 'CMC');\ncards.forEach((colorGroup) => {\ncolorGroup[1].forEach((cmc) => {\ncmc[1].forEach((card) => {\n",
        "org_msg": "changes Color Category sort to Color sort",
        "sim_msg": "set inital sort type",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -124,6 +124,7 @@ list.drawList = function() {\n}\n}\n} else {\n+ $('#curr-sort-type').text(config.localization[config.language][config.sort_options[0]])\nfor(var i=0; i<numberOfOptions; i++) {\naddSortOptionDropdownEntry(config.sort_options[i])\n}\n@@ -163,7 +164,7 @@ list.fit_list_height = function() {\nlet addSortOptionDropdownEntry = function(sort_option) {\nlet entry = sortDropdownEntryTemplate({\nsort_by_string: config.localization[config.language].sort_by_label,\n- sorter_label: config.localization[config.language][sort_option]\n+ sorter_label: config.localization[config.language][sort_option],\n})\nvar newEntry = $(entry).appendTo('#sort-menu-entries')\nnewEntry.on(\"click\", () => {\n",
        "chatgpt_cot": "Fix sorting issue in downloadSort function in Sort.js"
    },
    {
        "org_diff": "diff --git a/views/cube/cube_layout.pug b/views/cube/cube_layout.pug @@ -12,14 +12,14 @@ block content\n| (#{cube.card_count} Card #{cube.type} Cube)\n.d-flex.flex-row.flex-wrap\nli.nav-item\n- a.nav-link(href='/cube/overview/'+cube_id, class=activeLink === 'overview' && 'active') Overview\n+ a.nav-link(href='/cube/overview/'+cube._id, class=activeLink === 'overview' && 'active') Overview\nli.nav-item\n- a.nav-link(href='/cube/list/'+cube_id, class=activeLink === 'list' && 'active') List\n+ a.nav-link(href='/cube/list/'+cube._id, class=activeLink === 'list' && 'active') List\nli.nav-item\n- a.nav-link(href='/cube/playtest/'+cube_id, class=activeLink === 'playtest' && 'active') Playtest\n+ a.nav-link(href='/cube/playtest/'+cube._id, class=activeLink === 'playtest' && 'active') Playtest\nli.nav-item\n- a.nav-link(href='/cube/analysis/'+cube_id, class=activeLink === 'analysis' && 'active') Analysis\n+ a.nav-link(href='/cube/analysis/'+cube._id, class=activeLink === 'analysis' && 'active') Analysis\nli.nav-item\n- a.nav-link(href='/cube/blog/'+cube_id, class=activeLink === 'blog' && 'active') Blog\n+ a.nav-link(href='/cube/blog/'+cube._id, class=activeLink === 'blog' && 'active') Blog\nblock cube_toolbar\nblock cube_content\n",
        "org_msg": "Fix cube tab links.",
        "sim_msg": "Properly space/divide userentities in the newly arranged sidebar",
        "sim_diff": "diff --git a/views/layout/default.blade.php b/views/layout/default.blade.php @php $firstUserentity = true; @endphp\n@foreach($userentitiesForSidebar as $userentity)\n- <li class=\"nav-item @if($firstUserentity) mt-4 @endif\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"{{ $userentity->caption }}\" data-nav-for-page=\"userentity-{{ $userentity->name }}\">\n+ @if($firstUserentity)\n+ <div class=\"nav-item-divider\"></div>\n+ @endif\n+ <li class=\"nav-item\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"{{ $userentity->caption }}\" data-nav-for-page=\"userentity-{{ $userentity->name }}\">\n<a class=\"nav-link discrete-link\" href=\"{{ $U('/userobjects/' . $userentity->name) }}\">\n<i class=\"{{ $userentity->icon_css_class }}\"></i>\n<span class=\"nav-link-text\">{{ $userentity->caption }}</span>\n",
        "chatgpt_cot": "\"Fix active link issue in cube layout file by updating href with cube._id instead of cube_id.\""
    },
    {
        "org_diff": "diff --git a/src/analytics/Suggestions.js b/src/analytics/Suggestions.js @@ -38,7 +38,7 @@ const Suggestions = ({ cards, cube }) => {\nconst updateFilter = (val) => {\nsetFilter(val);\n- setAdds(suggestions.filter((card) => Filter.filterCard(card, val)));\n+ setAdds(suggestions.filter((card) => Filter.filterCard(card, val)).slice(20));\n};\nuseEffect(() => {\n",
        "org_msg": "view only top 20",
        "sim_msg": "fix await FS ready",
        "sim_diff": "diff --git a/src/lib/analytics/analytics.js b/src/lib/analytics/analytics.js @@ -71,7 +71,14 @@ const initAmplitude = async key => {\n/** @private */\n// eslint-disable-next-line require-await\nconst initFullStory = new Promise(resolve => {\n- const { _fs_ready } = window\n+ const { _fs_ready, _fs_host } = window // eslint-disable-line camelcase\n+ const fsScriptTag = document.querySelector(`script[src*='${_fs_host}']`) // eslint-disable-line camelcase\n+\n+ if (!fsScriptTag) {\n+ resolve(false)\n+ }\n+\n+ fsScriptTag.addEventListener('error', () => resolve(false))\nObject.assign(window, {\n_fs_ready: () => {\n@@ -79,35 +86,45 @@ const initFullStory = new Promise(resolve => {\n_fs_ready()\n}\n- resolve()\n+ resolve(true)\n},\n})\n})\n+\nlet Amplitude, Mautic, FS, GoogleAnalytics\nlet isFSEnabled, isSentryEnabled, isGoogleAnalyticsEnabled, isMauticEnabled, isAmplitudeEnabled\n+\nexport const initAnalytics = async () => {\nAmplitude = amplitude.getInstance()\nMautic = global.mt\nFS = global.FS\nGoogleAnalytics = global.dataLayer\n- isFSEnabled = !!FS && Config.env === 'production'\n+ const isFSAvailable = !!FS\n+\n+ isFSEnabled = isFSAvailable && Config.env === 'production'\nisSentryEnabled = !!sentryDSN\nisAmplitudeEnabled = !!amplitudeKey\nisGoogleAnalyticsEnabled = !!GoogleAnalytics\nisMauticEnabled = !!Mautic\n// pre-initializing & preloading FS & Amplitude\n- await Promise.all([isFSEnabled && initFullStory, isAmplitudeEnabled && initAmplitude(amplitudeKey)])\n+ await Promise.all([\n+ isFSEnabled && initFullStory.then(success => (isFSEnabled = success)),\n+ isAmplitudeEnabled && initAmplitude(amplitudeKey),\n+ ])\n- if (isFSEnabled === false && FS) {\n+ if (!isFSEnabled && isFSAvailable) {\nFS.shutdown()\n}\n+\nif (isAmplitudeEnabled) {\nconst identity = new Amplitude.Identify().setOnce('first_open_date', new Date().toString())\n+\nidentity.append('phase', String(phase))\nAmplitude.setVersionName(version)\nAmplitude.identify(identity)\n+\nif (isFSEnabled) {\nconst sessionUrl = FS.getCurrentSessionURL()\n",
        "chatgpt_cot": "\"Update Suggestions.js to limit filtered suggestions to 20 cards for better user experience.\""
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -615,7 +615,7 @@ function GetColorIdentity(colors) {\n}\nfunction getSorts() {\n- return ['Artist','CMC','Color Category','Color Count','Color Identity','Color','Guilds','Legality','Loyalty','Manacost Type','Power','Price','Price-Foil','Rarity','Set','Shards / Wedges','Status','Subtype','Supertype','Tags','Toughness','Type','Types-Multicolor'];\n+ return ['Artist','CMC','Color Category','Color Count','Color Identity','Color','Guilds','Legality','Loyalty','Manacost Type','Power','Rarity','Set','Shards / Wedges','Status','Subtype','Supertype','Tags','Toughness','Type','Types-Multicolor'];\n}\nfunction getLabels(sort) {\n",
        "org_msg": "Removed price sorts",
        "sim_msg": "feat(Notify): update API definitions",
        "sim_diff": "diff --git a/ui/src/plugins/Notify.json b/ui/src/plugins/Notify.json \"examples\": [ \"top-right\" ]\n},\n+ \"group\": {\n+ \"type\": \"String\",\n+ \"desc\": \"Inform this is part of a specific group, regardless of its options; When a new notification is triggered with same group name, it replaces the old one and shows a badge with how many times the notification was triggered\",\n+ \"default\": \"(message + caption)\",\n+ \"examples\": [ \"my-group\" ],\n+ \"addedIn\": \"v1.9.0\"\n+ },\n+\n+ \"badge\": {\n+ \"type\": \"Object\",\n+ \"desc\": \"Properties for the group badge\",\n+ \"definition\": {\n+ \"color\": {\n+ \"extends\": \"color\",\n+ \"desc\": \"Color name for the badge from the Quasar Color Palette\"\n+ },\n+ \"textColor\": {\n+ \"extends\": \"color\",\n+ \"desc\": \"Color name for the badge text from the Quasar Color Palette\"\n+ },\n+ \"style\": {\n+ \"type\": [ \"Array\", \"String\", \"Object\" ],\n+ \"desc\": \"Style definitions to be attributed to the badge\",\n+ \"examples\": [\n+ \"background-color: #ff0000\",\n+ \":content-style=\\\"{ backgroundColor: '#ff0000' }\\\"\"\n+ ]\n+ },\n+ \"class\": {\n+ \"type\": [ \"Array\", \"String\", \"Object\" ],\n+ \"desc\": \"Class definitions to be attributed to the badge\",\n+ \"examples\": [\n+ \"my-special-class\",\n+ \":content-class=\\\"{ 'my-special-class': <condition> }\\\"\"\n+ ]\n+ }\n+ },\n+ \"addedIn\": \"v1.9.0\"\n+ },\n+\n\"classes\": {\n\"type\": \"String\",\n\"desc\": \"Add CSS class(es) to the notification for easier customization\",\n\"examples\": [ \"top-right\" ]\n},\n+ \"group\": {\n+ \"type\": \"String\",\n+ \"desc\": \"Inform this is part of a specific group, regardless of its options; When a new notification is triggered with same group name, it replaces the old one and shows a badge with how many times the notification was triggered\",\n+ \"default\": \"(message + caption)\",\n+ \"examples\": [ \"my-group\" ],\n+ \"addedIn\": \"v1.9.0\"\n+ },\n+\n+ \"badge\": {\n+ \"type\": \"Object\",\n+ \"desc\": \"Properties for the group badge\",\n+ \"definition\": {\n+ \"color\": {\n+ \"extends\": \"color\",\n+ \"desc\": \"Color name for the badge from the Quasar Color Palette\"\n+ },\n+ \"textColor\": {\n+ \"extends\": \"color\",\n+ \"desc\": \"Color name for the badge text from the Quasar Color Palette\"\n+ },\n+ \"style\": {\n+ \"type\": [ \"Array\", \"String\", \"Object\" ],\n+ \"desc\": \"Style definitions to be attributed to the badge\",\n+ \"examples\": [\n+ \"background-color: #ff0000\",\n+ \":content-style=\\\"{ backgroundColor: '#ff0000' }\\\"\"\n+ ]\n+ },\n+ \"class\": {\n+ \"type\": [ \"Array\", \"String\", \"Object\" ],\n+ \"desc\": \"Class definitions to be attributed to the badge\",\n+ \"examples\": [\n+ \"my-special-class\",\n+ \":content-class=\\\"{ 'my-special-class': <condition> }\\\"\"\n+ ]\n+ }\n+ },\n+ \"addedIn\": \"v1.9.0\"\n+ },\n+\n\"classes\": {\n\"type\": \"String\",\n\"desc\": \"Add CSS class(es) to the notification for easier customization\",\n",
        "chatgpt_cot": "Remove duplicate 'Price-Foil' from getSorts() function in editcube.js"
    },
    {
        "org_diff": "diff --git a/src/components/Maybeboard.js b/src/components/Maybeboard.js @@ -34,6 +34,7 @@ const MaybeboardListItem = ({ card, className }) => {\nconst handleRemove = useCallback(\nasync (event) => {\nevent.preventDefault();\n+ event.stopPropagation();\nconst index = parseInt(event.currentTarget.getAttribute('data-index'));\nif (isNaN(index)) {\nconsole.error('Bad index');\n",
        "org_msg": "Fix maybeboard remove issue.",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Add event.stopPropagation() to handleRemove function to prevent event bubbling and improve user experience."
    },
    {
        "org_diff": "diff --git a/src/pages/CardPage.js b/src/pages/CardPage.js @@ -77,7 +77,8 @@ const Graph = ({ data, yFunc, unit, yRange }) => {\nlabels: [unit],\ndatasets: [\n{\n- lineTension: 0.2,\n+ lineTension: 0,\n+ pointRadius: 0,\nfill: false,\nborderColor: '#28A745',\nbackgroundColor: '#28A745',\n",
        "org_msg": "Adjust graph style to be more scalable",
        "sim_msg": "[docs] Add the new demo page",
        "sim_diff": "diff --git a/docs/src/pages.js b/docs/src/pages.js @@ -126,6 +126,7 @@ const pages = [\npathname: '/components/data-grid',\ntitle: 'Overview',\n},\n+ { pathname: '/components/data-grid/demo' },\n{ pathname: '/components/data-grid/getting-started' },\n{ pathname: '/components/data-grid/columns' },\n{ pathname: '/components/data-grid/rows' },\n",
        "chatgpt_cot": "\"Adjust lineTension and pointRadius in Graph component to improve data visualization\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -340,7 +340,13 @@ test(\"setCubeType correctly sets the type and card_count of its input cube\", ()\n});\n});\n-test(\"sanitize\", () => {});\n+test(\"sanitize allows the correct tags\", () => {\n+ const exampleHtml = \"<html><head></head><body><div>lkgdfsge</div><br/><strong>kjggggsgggg</strong><ol><li>gfgwwerer</li></ol></body></html>\";\n+ const expected = \"<div>lkgdfsge</div><strong>kjggggsgggg</strong><ol><li>gfgwwerer</li></ol>\";\n+ const result = cubefn.sanitize(exampleHtml);\n+ expect(result).toBe(expected);\n+});\n+\ntest(\"addAutocard\", () => {});\ntest(\"generatePack generates a valid pack of cards\", () => {\n",
        "org_msg": "add test for cubefn.sanitize",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add sanitize test to test that the sanitize function allows the correct HTML tags, ensuring the function behaves as expected."
    },
    {
        "org_diff": "diff --git a/nearley/values.ne b/nearley/values.ne @@ -150,12 +150,14 @@ stringContainOpValue -> equalityOperator stringValue {% ([op, value]) => stringC\nstringValue -> (noQuoteStringValue | dqstring | sqstring) {% ([[value]]) => value.toLowerCase() %}\n# anything that isn't a special character and isn't \"and\" or \"or\"\n-noQuoteStringValue -> ([^aAoO\\- \\t\\n\"'\\\\=<>:]\n+noQuoteStringValue ->\n+ (\"a\"i | \"an\"i | \"o\"i) {% ([[value]]) => value.toLowerCase() %}\n+ | ([^aAoO\\- \\t\\n\"'\\\\=<>:]\n| \"a\"i [^nN \\t\\n\"'\\\\=<>:]\n- | \"an\"i:+ [^dD \\t\\n\"'\\\\=<>:]\n- | \"and\"i:+ [^ \\t\\n\"'\\\\=<>:]\n- | \"o\"i:+ [^rR \\t\\n\"'\\\\=<>:]\n- | \"or\"i:+ [^ \\t\\n\"'\\\\=<>:]\n+ | \"an\"i [^dD \\t\\n\"'\\\\=<>:]\n+ | \"and\"i [^ \\t\\n\"'\\\\=<>:]\n+ | \"o\"i [^rR \\t\\n\"'\\\\=<>:]\n+ | \"or\"i [^ \\t\\n\"'\\\\=<>:]\n) [^ \\t\\n\"'\\\\=<>:]:* {% ([startChars, chars]) => startChars.concat(chars).join('').toLowerCase() %}\n# \"\n",
        "org_msg": "fixed grammar ambiguity",
        "sim_msg": "Updated verification status for 1UP",
        "sim_diff": "diff --git a/token-metadata/0x07597255910a51509CA469568B048F2597E72504/metadata.json b/token-metadata/0x07597255910a51509CA469568B048F2597E72504/metadata.json \"symbol\": \"1UP\",\n\"address\": \"0x07597255910a51509CA469568B048F2597E72504\",\n\"decimals\": 18,\n- \"dharmaVerificationStatus\": {\n\"dharmaVerificationStatus\": \"VERIFIED\"\n}\n\\ No newline at end of file\n-}\n\\ No newline at end of file\n",
        "chatgpt_cot": "Refactor string matching logic in values.ne to handle special cases \"a\", \"an\", \"and\", \"or\" more efficiently and case-insensitively."
    },
    {
        "org_diff": "diff --git a/src/components/CardModalForm.js b/src/components/CardModalForm.js @@ -186,7 +186,6 @@ const CardModalForm = ({ children, ...props }) => {\nimage_flip: details.image_flip,\nprice: details.price,\nprice_foil: details.price_foil,\n- elo: details.elo,\n},\n};\nreturn (\n",
        "org_msg": "Fix lack of elo in card modal.",
        "sim_msg": "merge row and touchable style;",
        "sim_diff": "diff --git a/src/components/EventCard.js b/src/components/EventCard.js @@ -59,10 +59,7 @@ class EventCard extends React.PureComponent<Props> {\nreturn (\n<View style={styles.container}>\n<View style={styles.eventCard}>\n- <Touchable\n- style={[styles.touchable, styles.row]}\n- onPress={() => onPress(id)}\n- >\n+ <Touchable style={styles.touchable} onPress={() => onPress(id)}>\n<ImageBackground\nstyle={styles.imageContainer}\nsource={image}\n@@ -131,15 +128,13 @@ const styles = StyleSheet.create({\nborderRadius: 5\n},\ntouchable: {\n- flexGrow: 1\n+ flexGrow: 1,\n+ flex: 0,\n+ flexDirection: \"row\"\n},\nimageContainer: {\nwidth: 114\n},\n- row: {\n- flex: 0,\n- flexDirection: \"row\"\n- },\neventPriceContainer: {\nminHeight: 23,\nbackgroundColor: lightNavyBlueColor,\n",
        "chatgpt_cot": "Remove elo attribute from CardModalForm component."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1149,13 +1149,14 @@ router.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\nconst deck = new Deck();\ndeck.playerdeck = added;\ndeck.owner = req.user._id;\n+ deck.username = req.user.username;\ndeck.cube = cube._id;\ndeck.date = Date.now();\ndeck.bots = [];\ndeck.playersideboard = [];\ndeck.pickOrder = [];\ndeck.newformat = true;\n- deck.name = `${req.user.username}'s decklist upload on ${deck.date.toLocaleString('en-US')}`;\n+ deck.name = 'Uploaded deck';\nawait deck.save();\nawait Cube.updateOne(\n",
        "org_msg": "Fix uploaded deck username.",
        "sim_msg": "add job id to start board for task",
        "sim_diff": "diff --git a/core/api-server/api/rest-api/routes/v1/boards.js b/core/api-server/api/rest-api/routes/v1/boards.js @@ -62,8 +62,8 @@ const routes = (options) => {\n});\nrouter.all('/tensor/start/:taskId?', methods(['POST']), logger(), async (req, res, next) => {\nconst { taskId } = req.params;\n- const { nodeName, pipelineName } = req.body;\n- await boards.startTensorboard({ taskId, nodeName, pipelineName }, 'task');\n+ const { nodeName, pipelineName, jobId } = req.body;\n+ await boards.startTensorboard({ taskId, jobId, nodeName, pipelineName }, 'task');\nres.json({ message: 'OK' });\nnext();\n});\n",
        "chatgpt_cot": "\"Add username to deck object and change default deck name to 'Uploaded deck'\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -972,7 +972,7 @@ router.post('/importcubetutor/:id', ensureAuth, async (req, res) => {\nreq.flash('danger', 'Not Authorized');\nreturn res.redirect(`/cube/list/${req.params.id}`);\n}\n- if (Number.isNaN(req.body.cubeid)) {\n+ if (!Number.isInteger(req.body.cubeid)) {\nreq.flash('danger', 'Error: Provided ID is not in correct format.');\nreturn res.redirect(`/cube/list/${req.params.id}`);\n}\n@@ -1652,7 +1652,7 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\n} else if (edit.charAt(0) === '-') {\n// remove id\nconst indexOut = parseInt(edit.substring(1), 10);\n- if (Number.isNaN(indexOut) || indexOut < 0 || indexOut >= cube.cards.length) {\n+ if (!Number.isInteger(indexOut) || indexOut < 0 || indexOut >= cube.cards.length) {\nreq.flash('danger', 'Bad request format.');\nreturn res.redirect(`/cube/list/${req.params.id}`);\n}\n@@ -1669,7 +1669,7 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\n}\nconst indexOut = parseInt(indexOutStr, 10);\n- if (Number.isNaN(indexOut) || indexOut < 0 || indexOut >= cube.cards.length) {\n+ if (!Number.isInteger(indexOut) || indexOut < 0 || indexOut >= cube.cards.length) {\nreq.flash('danger', 'Bad request format.');\nreturn res.redirect(`/cube/list/${req.params.id}`);\n}\n@@ -2872,7 +2872,7 @@ router.post(\n(updated.colors && !Array.isArray(updated.colors)) ||\n(updated.tags && !Array.isArray(updated.tags)) ||\n!Array.isArray(selected) ||\n- selected.some((index) => Number.isNaN(index) || index < 0)\n+ selected.some((index) => !Number.isInteger(index) || index < 0)\n) {\nreturn res.status(400).send({\nsuccess: 'false',\n@@ -3073,7 +3073,7 @@ router.delete('/format/remove/:id', ensureAuth, async (req, res) => {\nconst id = parseInt(req.params.id.split(';')[1], 10);\nconst cube = await Cube.findOne(build_id_query(cubeid));\n- if (!cube || cube.owner !== req.user.id || Number.isNaN(id) || id < 0 || id >= cube.draft_formats.length) {\n+ if (!cube || cube.owner !== req.user.id || !Number.isInteger(id) || id < 0 || id >= cube.draft_formats.length) {\nreturn res.sendStatus(401);\n}\n@@ -3138,13 +3138,13 @@ router.post(\nrating.picks = 1;\n}\n- if (Number.isNaN(rating.elo)) {\n+ if (!Number.isFinite(rating.elo)) {\nrating.elo = ELO_BASE + ELO_RANGE / (1 + ELO_SPEED ** -(0.5 - rating.value));\n}\n// Update ELO.\nfor (const other of packRatings) {\n- if (Number.isNaN(other.elo)) {\n- if (Number.isNaN(other.rating)) {\n+ if (!Number.isFinite(other.elo)) {\n+ if (!Number.isFinite(other.value)) {\nother.elo = ELO_BASE + ELO_RANGE / 2;\n} else {\nother.elo = ELO_BASE + ELO_RANGE / (1 + ELO_SPEED ** -(0.5 - other.value));\n",
        "org_msg": "Fix use of isNaN.",
        "sim_msg": "Update getScoreCategory and export.",
        "sim_diff": "diff --git a/assets/js/modules/pagespeed-insights/dashboard/util.js b/assets/js/modules/pagespeed-insights/dashboard/util.js * WordPress dependencies\n*/\nimport { __ } from '@wordpress/i18n';\n+import { CATEGORY_FAST, CATEGORY_AVERAGE, CATEGORY_SLOW } from '../components/constants';\n/**\n* Retrieve the score category slug based on the given score.\n@@ -28,16 +29,16 @@ import { __ } from '@wordpress/i18n';\n*\n* @return {string} Either 'fast', 'average', or 'slow'.\n*/\n-function getScoreCategory( score ) {\n+export function getScoreCategory( score ) {\nif ( 0.9 <= score ) {\n- return 'fast';\n+ return CATEGORY_FAST;\n}\nif ( 0.5 <= score ) {\n- return 'average';\n+ return CATEGORY_AVERAGE;\n}\n- return 'slow';\n+ return CATEGORY_SLOW;\n}\n/**\n",
        "chatgpt_cot": "fix data type validation for cube id and indexOut, and selected index; fix ELO data type validation."
    },
    {
        "org_diff": "diff --git a/src/components/CubePreview.js b/src/components/CubePreview.js @@ -35,7 +35,9 @@ const CubePreview = ({ cube }) => {\n<em className=\"cube-preview-artist\">Art by {cube.image_artist}</em>\n</AspectRatioBox>\n<div className=\"w-100 py-1 px-2\">\n- <h5 className=\"text-muted text-ellipsis my-0\">{cube.name}</h5>\n+ <h5 className=\"text-muted text-ellipsis my-0\" title={cube.name}>\n+ {cube.name}\n+ </h5>\n<div className=\"text-muted text-ellipsis\">{getCubeDescription(cube)}</div>\n<em className=\"text-muted text-ellipsis\">\nDesigned by{' '}\n",
        "org_msg": "Add mouseover text to cube preview cards",
        "sim_msg": "fix: update layout to match designs",
        "sim_diff": "diff --git a/src/components/ProductDetail/ProductDetail.js b/src/components/ProductDetail/ProductDetail.js @@ -27,6 +27,9 @@ const styles = (theme) => ({\nbreadcrumbGrid: {\nmarginBottom: theme.spacing.unit * 2,\nmarginTop: theme.spacing.unit * 2\n+ },\n+ info: {\n+ marginBottom: theme.spacing.unit\n}\n});\n@@ -255,9 +258,13 @@ class ProductDetail extends Component {\n<Fragment>\n<div className={classes.section}>\n<ProductDetailTitle pageTitle={product.pageTitle} title={product.title} />\n+ <div className={classes.info}>\n<ProductDetailVendor>{product.vendor}</ProductDetailVendor>\n+ </div>\n+ <div className={classes.info}>\n<ProductDetailPrice compareAtPrice={productPrice.compareAtPrice} isCompact price={productPrice.displayPrice} />\n</div>\n+ </div>\n<div className={classes.section}>\n<MediaGallery mediaItems={pdpMediaItems} />\n@@ -300,9 +307,15 @@ class ProductDetail extends Component {\n<Grid item xs={12} sm={6}>\n<ProductDetailTitle pageTitle={product.pageTitle} title={product.title} />\n+ <div className={classes.info}>\n<ProductDetailVendor>{product.vendor}</ProductDetailVendor>\n- <ProductDetailPrice compareAtPrice={productPrice.compareAtPrice} price={productPrice.displayPrice} />\n+ </div>\n+ <div className={classes.info}>\n+ <ProductDetailPrice className={classes.bottomMargin} compareAtPrice={productPrice.compareAtPrice} price={productPrice.displayPrice} />\n+ </div>\n+ <div className={classes.info}>\n<ProductDetailDescription>{product.description}</ProductDetailDescription>\n+ </div>\n<VariantList\nonSelectOption={this.handleSelectOption}\nonSelectVariant={this.handleSelectVariant}\n",
        "chatgpt_cot": "Add title attribute to cube name for better user experience. Fix issue with long cube names not displaying properly."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -82,11 +82,20 @@ initializeCatalog();\nfunction downloadFile(url, filePath) {\nconst file = fs.createWriteStream(filePath);\n- return new Promise((resolve) => {\n- https.get(url, (response) => {\n+ return new Promise((resolve, reject) => {\n+ https\n+ .get(url, (response) => {\n+ if (response.statusCode !== 200) {\n+ response.resume();\n+ reject(new Error(`Request to '${url}' failed with status code ${response.statusCode}`));\n+ return;\n+ }\n+\nconst stream = response.pipe(file);\n+ stream.on('error', (err) => reject(new Error(`Error downloading file from '${url}':\\n${err.message}`)));\nstream.on('finish', resolve);\n- });\n+ })\n+ .on('error', (err) => reject(new Error(`Download error for '${url}':\\n${err.message}`)));\n});\n}\n@@ -95,6 +104,7 @@ async function downloadDefaultCards(basePath = 'private', defaultSourcePath = nu\nlet allUrl;\nconst res = await fetch('https://api.scryfall.com/bulk-data');\n+ if (!res.ok) throw new Error(`Download of /bulk-data failed with code ${res.status}`);\nconst json = await res.json();\nfor (const data of json.data) {\n@@ -765,8 +775,15 @@ async function updateCardbase(ratings = [], basePath = 'private', defaultPath =\nwinston.info('Updating cardbase, this might take a little while...');\nwinston.info('Downloading files...');\n+ try {\n// the module.exports line is necessary to correctly mock this function in unit tests\nawait module.exports.downloadDefaultCards(basePath, defaultPath, allPath);\n+ } catch (error) {\n+ winston.error('Downloading card data failed:');\n+ winston.error(error.message);\n+ winston.error('\\nCardbase was not updated');\n+ return;\n+ }\nwinston.info('Creating objects...');\nawait saveAllCards(ratings, basePath, defaultPath, allPath);\n",
        "org_msg": "added error handlers to card data download",
        "sim_msg": "Autorun handling in runtime",
        "sim_diff": "diff --git a/runtime.js b/runtime.js @@ -131,7 +131,7 @@ const componentHandlers = {\n};\n// const thingFiles = {};\n-const _loadGltf = async (file, {optimize = false, physics = false, physics_url = false, components = [], dynamic = false, autoScale = true, files = null, parentUrl = null, instanceId = null, monetizationPointer = null, ownerAddress = null} = {}) => {\n+const _loadGltf = async (file, {optimize = false, physics = false, physics_url = false, components = [], dynamic = false, autoScale = true, autoRun = false, files = null, parentUrl = null, instanceId = null, monetizationPointer = null, ownerAddress = null} = {}) => {\nlet srcUrl = file.url || URL.createObjectURL(file);\nif (files && _isResolvableUrl(srcUrl)) {\nsrcUrl = files[_dotifyUrl(srcUrl)];\n@@ -906,7 +906,7 @@ const _loadScript = async (file, {files = null, parentUrl = null, instanceId = n\nreturn mesh;\n};\n-const _loadManifestJson = async (file, {files = null, instanceId = null, monetizationPointer = null, ownerAddress = null} = {}) => {\n+const _loadManifestJson = async (file, {files = null, instanceId = null, autoScale = true, autoRun = false, monetizationPointer = null, ownerAddress = null} = {}) => {\nlet srcUrl = file.url || URL.createObjectURL(file);\nif (files && _isResolvableUrl(srcUrl)) {\nsrcUrl = files[_dotifyUrl(srcUrl)];\n@@ -922,7 +922,12 @@ const _loadManifestJson = async (file, {files = null, instanceId = null, monetiz\nconst res = await fetch(srcUrl);\nconst j = await res.json();\nlet {start_url, physics, physics_url, components} = j;\n- const u = _dotifyUrl(start_url);\n+ if (typeof j.autoScale === 'boolean') {\n+ autoScale = j.autoScale;\n+ }\n+ if (typeof j.autoRun === 'boolean') {\n+ autoRun = j.autoRun;\n+ }\n/* if (physics_url) {\nif (files && _isResolvableUrl(physics_url)) {\n@@ -930,6 +935,7 @@ const _loadManifestJson = async (file, {files = null, instanceId = null, monetiz\n}\n} */\n+ const u = _dotifyUrl(start_url);\nreturn await runtime.loadFile({\nurl: u,\nname: u,\n@@ -939,13 +945,15 @@ const _loadManifestJson = async (file, {files = null, instanceId = null, monetiz\nphysics,\nphysics_url,\ncomponents,\n+ autoScale,\n+ autoRun,\ninstanceId,\nownerAddress,\nmonetizationPointer,\n});\n};\nlet appIds = 0;\n-const _loadWebBundle = async (file, {instanceId = null, monetizationPointer = null, ownerAddress = null} = {}) => {\n+const _loadWebBundle = async (file, {instanceId = null, autoScale = true, autoRun = false, monetizationPointer = null, ownerAddress = null} = {}) => {\nlet arrayBuffer;\nif (file.url) {\n@@ -984,6 +992,8 @@ const _loadWebBundle = async (file, {instanceId = null, monetizationPointer = nu\n}, {\nfiles,\ninstanceId,\n+ autoScale,\n+ autoRun,\nownerAddress,\nmonetizationPointer,\n});\n",
        "chatgpt_cot": "fix downloadFile function and update downloadDefaultCards function to handle errors and add error logging."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -5,6 +5,7 @@ const fs = require('fs');\nconst fetch = require('node-fetch');\nconst rp = require('request-promise');\nconst cheerio = require('cheerio');\n+const zlib = require('zlib');\nvar {\naddAutocard,\ngeneratePack,\n@@ -857,8 +858,8 @@ router.get('/samplepack/:id/:seed', function(req, res) {\nmetadata: generateMeta(\n'Cube Cobra Sample Pack',\n`A sample pack from ${cube.name}`,\n- `http://162.243.163.51/cube/samplepackimage/${req.params.id}/${pack.seed}.png`,\n- `http://162.243.163.51/cube/samplepack/${req.params.id}/${pack.seed}`\n+ `https://cubecobra.com/cube/samplepackimage/${req.params.id}/${pack.seed}.png`,\n+ `https://cubecobra.com/cube/samplepack/${req.params.id}/${pack.seed}`\n),\nloginCallback: '/cube/samplepack/' + req.params.id\n});\n@@ -888,9 +889,11 @@ router.get('/samplepackimage/:id/:seed', function(req, res) {\n}).then(function(image) {\nres.writeHead(200, {\n'Content-Type': 'image/png',\n- 'Content-Length': image.length\n+ 'Content-Encoding': 'gzip'\n+ });\n+ zlib.gzip(Buffer.from(image.replace(/^data:image\\/png;base64,/, ''), 'base64'), function (_, result) {\n+ res.end(result);\n});\n- res.end(Buffer.from(image.replace(/^data:image\\/png;base64,/, ''), 'utf8'));\n});\n}\n});\n",
        "org_msg": "Test gzip encoding",
        "sim_msg": "Add card renderer flipY support",
        "sim_diff": "diff --git a/card-renderer.js b/card-renderer.js @@ -77,6 +77,7 @@ export const generateObjectUrlCard = async ({\nstart_url,\nwidth = 300,\n// height = width,\n+ flipY = false,\nsignal = null,\n}) => {\nconst app = await metaversefile.createAppAsync({\n@@ -87,6 +88,7 @@ export const generateObjectUrlCard = async ({\napp,\nwidth,\n// height,\n+ flipY,\n});\nif (signal?.aborted) throw new Error();\nreturn result;\n@@ -95,6 +97,7 @@ export const generateObjectCard = async ({\napp,\nwidth = 300,\n// height = width,\n+ flipY = false,\n}) => {\nconst stats = generateStats(app.contentId);\nconst {\n@@ -131,6 +134,7 @@ export const generateObjectCard = async ({\nminterUsername,\nminterAvatarPreview,\nglyphImage,\n+ flipY,\n});\n// _previewImage(cardImg, width, height);\nreturn cardImg;\n@@ -147,6 +151,7 @@ export const generateCard = async ({\nminterUsername,\nminterAvatarPreview,\nglyphImage,\n+ flipY,\n} = {}) => {\ndescription = description || 'A great mystery.';\n@@ -286,6 +291,8 @@ export const generateCard = async ({\nURL.revokeObjectURL(url);\n}\n});\n- const imageBitmap = await createImageBitmap(image);\n+ const imageBitmap = await createImageBitmap(image, {\n+ imageOrientation: flipY ? 'flipY' : 'none',\n+ });\nreturn imageBitmap;\n};\n\\ No newline at end of file\n",
        "chatgpt_cot": "Add zlib for gzip compression in cube_routes.js to improve performance and reduce bandwidth usage. Update sample pack image URLs to use HTTPS."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1566,9 +1566,7 @@ router.post('/startdraft/:id', async (req, res) => {\nawait draft.save();\nreturn res.redirect('/cube/draft/' + draft._id);\n} catch (err) {\n- console.error(err);\n- req.flash('danger', err.message);\n- return res.redirect('/cube/playtest/' + req.params.id);\n+ util.handleRouteError(res, err, '/cube/playtest/' + req.params.id);\n}\n});\n@@ -1632,12 +1630,8 @@ router.get('/draft/:id', async function(req, res) {\n),\nloginCallback: '/cube/draft/' + req.params.id,\n});\n- } catch (e) {\n- console.error(e);\n- req.flash('danger', 'Error rendering draft');\n-\n- // FIXME: We should really have a 500 page for this.\n- return res.status(404).render('misc/404');\n+ } catch (err) {\n+ util.handleRouteError(res, err, '/404');\n}\n});\n",
        "org_msg": "revised draft and start draft",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Refactor error handling in cube_routes.js, using util.handleRouteError to handle errors and redirect to appropriate pages for better code organization and user experience.\""
    },
    {
        "org_diff": "diff --git a/nearley/cardFilters.ne b/nearley/cardFilters.ne @@ -91,7 +91,7 @@ foilPriceCondition -> (\"fp\"i | \"pf\"i | \"foil\"i | \"foilprice\"i | \"pricefoil\"i) do\nstatusCondition -> (\"stat\"i | \"status\"i) statusOpValue {% ([, valuePred]) => genericCondition('status', (card) => card.status, valuePred) %}\n-rarityCondition -> (\"r\"i | \"rar\"i | \"rarity\"i) rarityOpValue {% ([, valuePred]) => genericCondition('rarity', (card) => card.details.rarity, valuePred) %}\n+rarityCondition -> (\"r\"i | \"rar\"i | \"rarity\"i) rarityOpValue {% ([, valuePred]) => genericCondition('rarity', (card) => card.rarity ?? card.details.rarity, valuePred) %}\nloyaltyCondition -> (\"l\"i | \"loy\"i | \"loyal\"i | \"loyalty\"i) integerOpValue {% ([, valuePred]) => genericCondition('loyalty', (card) => card.details.loyalty, valuePred) %}\n",
        "org_msg": "Support overriden rarity for filters.",
        "sim_msg": "When a card is unselectable, gray out just the image, not the outline",
        "sim_diff": "diff --git a/less/cards.less b/less/cards.less }\n&.unselectable {\n- filter: grayscale(100%) brightness(60%);\n+ filter: brightness(60%);\n+\n+ .card-image {\n+ filter: grayscale(100%);\n+ }\n}\n&.in-danger {\n",
        "chatgpt_cot": "Fix null pointer exception in rarityCondition by adding null check for card.rarity."
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -732,7 +732,7 @@ router.post(\nrouter.post('/updateuserinfo', ensureAuth, [...usernameValid], flashValidationErrors, async (req, res) => {\ntry {\nconst { user } = req;\n- if (!req.validated || user.username !== req.body.username) {\n+ if (!req.validated) {\nreturn res.redirect('/user/account');\n}\n",
        "org_msg": "Fix username-changing.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Refactor user updateuserinfo route to simplify username validation and redirect logic.\""
    },
    {
        "org_diff": "diff --git a/src/pages/UserSocialPage.js b/src/pages/UserSocialPage.js @@ -13,6 +13,7 @@ const UserSocialPage = ({ followedCubes, followedUsers, followers }) => (\n<CardHeader>\n<h5 className=\"mb-0\">Followed Cubes</h5>\n</CardHeader>\n+ {followedCubes.length > 0 ? (\n<CardBody className=\"p-0\">\n<Row noGutters>\n{followedCubes.map((cube) => (\n@@ -22,6 +23,9 @@ const UserSocialPage = ({ followedCubes, followedUsers, followers }) => (\n))}\n</Row>\n</CardBody>\n+ ) : (\n+ <CardBody>You aren't following any cubes.</CardBody>\n+ )}\n</Card>\n</Col>\n<Col xs={6}>\n@@ -29,6 +33,7 @@ const UserSocialPage = ({ followedCubes, followedUsers, followers }) => (\n<CardHeader>\n<h5 className=\"mb-0\">Followed Users</h5>\n</CardHeader>\n+ {followedCubes.length > 0 ? (\n<CardBody className=\"p-0\">\n<Row noGutters>\n{followedUsers.map((user) => (\n@@ -38,10 +43,14 @@ const UserSocialPage = ({ followedCubes, followedUsers, followers }) => (\n))}\n</Row>\n</CardBody>\n+ ) : (\n+ <CardBody>You aren't following any users.</CardBody>\n+ )}\n</Card>\n</Col>\n+ {followers.length > 0 && (\n<Col xs={12}>\n- <Card>\n+ <Card className=\"mt-3\">\n<CardHeader>\n<h5 className=\"mb-0\">Followers</h5>\n</CardHeader>\n@@ -56,6 +65,7 @@ const UserSocialPage = ({ followedCubes, followedUsers, followers }) => (\n</CardBody>\n</Card>\n</Col>\n+ )}\n</Row>\n);\n",
        "org_msg": "Add better no-followers message.",
        "sim_msg": "Hide FollowButton if it's for same user as logged in",
        "sim_diff": "diff --git a/src/widgets/FollowButton.js b/src/widgets/FollowButton.js @@ -2,6 +2,7 @@ import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n+ getAuthenticatedUserName,\ngetFollowingList,\ngetPendingFollows,\n} from '../reducers';\n@@ -10,6 +11,7 @@ import { followUser, unfollowUser } from '../user/userActions';\nimport Follow from '../components/Button/Follow';\n@connect(state => ({\n+ authenticatedUserName: getAuthenticatedUserName(state),\nfollowingList: getFollowingList(state),\npendingFollows: getPendingFollows(state),\n}), {\n@@ -19,6 +21,7 @@ import Follow from '../components/Button/Follow';\nclass FollowButton extends React.Component {\nstatic propTypes = {\nusername: PropTypes.string.isRequired,\n+ authenticatedUserName: PropTypes.string,\nfollowingList: PropTypes.arrayOf(PropTypes.string).isRequired,\npendingFollows: PropTypes.arrayOf(PropTypes.string).isRequired,\nfollowUser: PropTypes.func,\n@@ -26,6 +29,7 @@ class FollowButton extends React.Component {\n};\nstatic defaultProps = {\n+ authenticatedUserName: undefined,\ngetAccountWithFollowingCount: () => {},\nfollowUser: () => {},\nunfollowUser: () => {},\n@@ -42,10 +46,12 @@ class FollowButton extends React.Component {\n};\nrender() {\n- const { username, followingList, pendingFollows } = this.props;\n+ const { authenticatedUserName, username, followingList, pendingFollows } = this.props;\nconst followed = followingList.includes(username);\nconst pending = pendingFollows.includes(username);\n+ if (authenticatedUserName === username) return null;\n+\nreturn <Follow isFollowed={followed} pending={pending} onClick={this.handleFollowClick} />;\n}\n}\n",
        "chatgpt_cot": "Add conditional rendering for followedCubes and followedUsers, display message when no cubes or users are followed, and adjust styling for followers card."
    },
    {
        "org_diff": "diff --git a/.eslintrc.json b/.eslintrc.json \"prettier/prettier\": [\"error\"],\n\"no-console\": \"off\",\n\"global-require\": \"off\",\n- \"no-param-reassign\": \"off\"\n+ \"no-param-reassign\": \"off\",\n+ \"no-underscore-dangle\": [\"error\", { \"allow\": [\"_id\"] }],\n+ \"camelcase\": [\"error\", { \"properties\": \"never\", \"ignoreDestructuring\": true, \"ignoreImports\": true }],\n+ \"no-plusplus\": [\"error\", {\"allowForLoopAfterthoughts\": true}],\n+ \"no-restricted-syntax\": [\"error\", \"FunctionExpression\", \"WithStatement\", \"BinaryExpression[operator='in']\"]\n}\n}\n",
        "org_msg": "Update eslintrc to match style.",
        "sim_msg": "Custom eslint settings: space-in-parens, infix-ops, arrow-spacing, curly-spacing, ...",
        "sim_diff": "diff --git a/.eslintrc.json b/.eslintrc.json 2,\n\"always\"\n],\n+ \"arrow-spacing\": [ \"error\", { \"before\": true, \"after\": true } ],\n\"no-undef\": 0,\n\"no-console\": [\n\"error\",\n\"warn\",\n\"error\",\n\"info\",\n- \"log\"\n+ \"log\",\n+ \"clear\n]\n}\n]\n",
        "chatgpt_cot": "\"Add new ESLint rules and update existing rules to improve code quality and maintainability\""
    },
    {
        "org_diff": "diff --git a/src/markdown/centering/micromark-centering.js b/src/markdown/centering/micromark-centering.js @@ -3,8 +3,8 @@ import assert from 'assert';\nimport markdownSpace from 'micromark/dist/character/markdown-space';\nimport markdownLineEnding from 'micromark/dist/character/markdown-line-ending';\nimport spaceFactory from 'micromark/dist/tokenize/factory-space';\n-import types from 'micromark/dist/constant/types';\n-import codes from 'micromark/dist/character/codes';\n+import types from 'micromark/lib/constant/types';\n+import codes from 'micromark/lib/character/codes';\nimport { shallowEqual } from 'markdown/utils';\nfunction centering() {\n",
        "org_msg": "fixed some micromark imports",
        "sim_msg": "Only call brush when we're not activately brushing",
        "sim_diff": "diff --git a/app/scripts/HeatmapTiledPixiTrack.js b/app/scripts/HeatmapTiledPixiTrack.js @@ -56,6 +56,8 @@ export class HeatmapTiledPixiTrack extends Tiled2DPixiTrack {\nthis.gMain = select(svgElement).append('g');\nthis.gColorscaleBrush = this.gMain.append('g');\n+ this.brushing = false;\n+\n/*\n*/\n@@ -205,6 +207,10 @@ export class HeatmapTiledPixiTrack extends Tiled2DPixiTrack {\nreturn newOptions;\n}\n+ brushStart() {\n+ this.brushing = true;\n+ }\n+\nbrushMoved() {\nlet newOptions = this.newBrushOptions(event.selection);\n@@ -243,6 +249,7 @@ export class HeatmapTiledPixiTrack extends Tiled2DPixiTrack {\n//this.rerender(newOptions);\n//this.animate();\n+ this.brushing = false;\n}\n@@ -277,25 +284,6 @@ export class HeatmapTiledPixiTrack extends Tiled2DPixiTrack {\nelse\nthis.scaleBrush.extent([[0, 0], [BRUSH_WIDTH - BRUSH_MARGIN, this.colorbarHeight]])\n- this.scaleBrush\n- .on(\"brush\", this.brushMoved.bind(this))\n- .on(\"end\", this.brushEnd.bind(this));\n- //\n- //\n- this.gColorscaleBrush.on('.brush', null);\n- this.gColorscaleBrush.call(this.scaleBrush);\n-\n- this.northHandle = this.gColorscaleBrush.selectAll('.handle--custom')\n- .data([{'type': 'n'}, {'type': 's'}])\n- .enter()\n- .append('rect')\n- .classed('handle--custom', true)\n- .attr('cursor', 'ns-resize')\n- .attr('width', BRUSH_WIDTH)\n- .attr('height', BRUSH_HEIGHT)\n- .style('fill', '#666')\n- .style('stroke', 'white');\n-\n/*\nthis.gColorscaleBrush.selectAll('.handle--n')\n.style('stroke', 'black')\n@@ -391,8 +379,32 @@ export class HeatmapTiledPixiTrack extends Tiled2DPixiTrack {\nlet endBrush = axisValueScale(this.options.scaleEndPercent * domainWidth + axisValueScale.domain()[0])\n// endBrush and startBrush are reversed because lower values come first\n+ // only set if the user isn't brushing at the moment\n+ if (!this.brushing) {\n+ this.scaleBrush\n+ .on(\"start\", this.brushStart.bind(this))\n+ .on(\"brush\", this.brushMoved.bind(this))\n+ .on(\"end\", this.brushEnd.bind(this));\n+ //\n+ //\n+ console.log('drawing colorbar...');\n+ this.gColorscaleBrush.on('.brush', null);\n+ this.gColorscaleBrush.call(this.scaleBrush);\n+\n+ this.northHandle = this.gColorscaleBrush.selectAll('.handle--custom')\n+ .data([{'type': 'n'}, {'type': 's'}])\n+ .enter()\n+ .append('rect')\n+ .classed('handle--custom', true)\n+ .attr('cursor', 'ns-resize')\n+ .attr('width', BRUSH_WIDTH)\n+ .attr('height', BRUSH_HEIGHT)\n+ .style('fill', '#666')\n+ .style('stroke', 'white');\n+\nthis.gColorscaleBrush.call(this.scaleBrush.move,\n[endBrush, startBrush]);\n+ }\n//let centerY = this.position[1] + this.dimensions[1] / 2;\nlet centerY = this.colorbarHeight / 2;\n",
        "chatgpt_cot": "Fix import paths for micromark library in micromark-centering.js. Updated paths to resolve import issues and ensure proper functionality."
    },
    {
        "org_diff": "diff --git a/src/components/CardModal.js b/src/components/CardModal.js @@ -75,8 +75,8 @@ const CardModal = ({\n</InputGroupAddon>\n<CustomInput\ntype=\"select\"\n- id=\"cardModalVersionSelect\"\nname=\"version\"\n+ id=\"cardModalVersion\"\nvalue={values.version}\nonChange={onChange}\n>\n@@ -96,7 +96,7 @@ const CardModal = ({\n<InputGroupAddon addonType=\"prepend\">\n<InputGroupText>Status</InputGroupText>\n</InputGroupAddon>\n- <CustomInput type=\"select\" name=\"status\" value={values.status} onChange={onChange}>\n+ <CustomInput type=\"select\" name=\"status\" id=\"cardModalStatus\" value={values.status} onChange={onChange}>\n{getLabels(null, 'Status').map((status) => (\n<option key={status}>{status}</option>\n))}\n@@ -106,7 +106,7 @@ const CardModal = ({\n<InputGroupAddon addonType=\"prepend\">\n<InputGroupText>Finish</InputGroupText>\n</InputGroupAddon>\n- <CustomInput type=\"select\" name=\"finish\" value={values.finish} onChange={onChange}>\n+ <CustomInput type=\"select\" name=\"finish\" id=\"cardModalFinish\" value={values.finish} onChange={onChange}>\n{getLabels(null, 'Finish').map((finish) => (\n<option key={finish}>{finish}</option>\n))}\n",
        "org_msg": "Add CustomInput ids.",
        "sim_msg": "Fix issue with deckbuilder",
        "sim_diff": "diff --git a/client/DeckEditor.jsx b/client/DeckEditor.jsx @@ -410,7 +410,7 @@ class InnerDeckEditor extends React.Component {\nonChange={ this.onAllianceChange.bind(this) } value={ this.state.deck.alliance ? this.state.deck.alliance.value : undefined }\nvalueKey='value' nameKey='name' blankOption={ { name: '- Select -', value: '' } } />\n- <Typeahead label='Card' labelClass={ 'col-sm-3' } fieldClass='col-sm-4' labelKey={ 'label' } options={ _.toArray(this.props.cards) }\n+ <Typeahead label='Card' labelClass={ 'col-sm-3' } fieldClass='col-sm-4' labelKey={ 'name' } options={ _.toArray(this.props.cards) }\nonChange={ this.addCardChange.bind(this) }>\n<Input name='numcards' type='text' label='Num' labelClass='col-sm-1' fieldClass='col-sm-2'\nvalue={ this.state.numberToAdd.toString() } onChange={ this.onNumberToAddChange.bind(this) }>\n",
        "chatgpt_cot": "Add id to CustomInput in CardModal for version, status, and finish to improve accessibility and make it easier to select elements."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.js b/__tests__/serverjs/updatecards.js const updatecards = require(\"../../serverjs/updatecards\");\nconst fs = require('fs');\n+beforeEach(() => {\n+ // delete /private\n+});\n+\ntest(\"updateCardBase\", () => {\n- expect.assertions(1);\n+ expect.assertions(7);\nvar promise = new Promise((resolve, reject) => {\nprocess.nextTick(() => {\nresolve();\n@@ -12,7 +16,12 @@ test(\"updateCardBase\", () => {\ndownloadMock.mockReturnValue(promise);\nupdatecards.downloadDefaultCards = downloadMock;\nreturn updatecards.updateCardbase('__tests__/fixtures/cards_small.json').then(function() {\n- const exists = fs.existsSync('private/imagedict.json');\n- expect(exists).toBe(true);\n+ expect(fs.existsSync('private/cardtree.json')).toBe(true);\n+ expect(fs.existsSync('private/imagedict.json')).toBe(true);\n+ expect(fs.existsSync('private/cardimages.json')).toBe(true);\n+ expect(fs.existsSync('private/names.json')).toBe(true);\n+ expect(fs.existsSync('private/carddict.json')).toBe(true);\n+ expect(fs.existsSync('private/nameToId.json')).toBe(true);\n+ expect(fs.existsSync('private/full_names.json')).toBe(true);\n});\n});\n\\ No newline at end of file\n",
        "org_msg": "add existence tests for other expected files\nstub beforeach",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Add beforeEach hook to delete /private directory, update assertions in updateCardBase test, and add checks for existence of multiple files."
    },
    {
        "org_diff": "diff --git a/src/components/DraftView.js b/src/components/DraftView.js @@ -23,10 +23,13 @@ export const subtitle = (cards) => {\nconst numNonlands = allTypes.filter(\n(type) => !type.includes('land') && !/^(plane|phenomenon|vanguard|scheme|conspiracy)$/.test(type),\n).length;\n+ const numCreatures = allTypes.filter((type) => type.includes('creature')).length;\nreturn (\n- `${numCards} card${numCards === 1 ? '' : 's'}, ` +\n+ `${numCards} card${numCards === 1 ? '' : 's'}: ` +\n`${numLands} land${numLands === 1 ? '' : 's'}, ` +\n- `${numNonlands} nonland`\n+ `${numNonlands} nonland: ` +\n+ `${numCreatures} creatures, ` +\n+ `${numNonlands - numCreatures} noncreatures`\n);\n};\n",
        "org_msg": "Add creature/non-creature counts to deck building UI",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Add count of creatures and non-creatures in DraftView.js subtitle function to provide more detailed card information."
    },
    {
        "org_diff": "diff --git a/populate_analytics.js b/populate_analytics.js +//run with: node --max-old-space-size=8192 populate_analytics.js\n+// will oom without the added tag\n+\nconst mongoose = require('mongoose');\nconst quickselect = require('quickselect');\n@@ -77,9 +80,11 @@ async function processDeck(deck) {\ndeck.playerdeck.forEach(function(col, index) {\nif(Array.isArray(col)) {\ncol.forEach(function(row, index2) {\n+ if(row && row.details) {\ndeckCards.push(row.details.name.toLowerCase().normalize('NFD')\n.replace(/[\\u0300-\\u036f]/g, '')\n.trim());\n+ }\n});\n} else {\ndeckCards.push(col.details.name.toLowerCase().normalize('NFD')\n",
        "org_msg": "Fixed analytics",
        "sim_msg": "fix: fullstory init stuck",
        "sim_diff": "diff --git a/src/lib/analytics/analytics.js b/src/lib/analytics/analytics.js @@ -68,8 +68,7 @@ const initAmplitude = async key => {\n/** @private */\n// eslint-disable-next-line require-await\n-const initFullStory = async () =>\n- new Promise(resolve => {\n+const initFullStory = new Promise(resolve => {\nconst { _fs_ready } = window\nObject.assign(window, {\n@@ -97,7 +96,7 @@ export const initAnalytics = async () => {\nisMauticEnabled = !!Mautic\n// pre-initializing & preloading FS & Amplitude\n- await Promise.all([isFSEnabled && initFullStory(), isAmplitudeEnabled && initAmplitude(amplitudeKey)])\n+ await Promise.all([isFSEnabled && initFullStory, isAmplitudeEnabled && initAmplitude(amplitudeKey)])\nif (isAmplitudeEnabled) {\nconst identity = new Amplitude.Identify().setOnce('first_open_date', new Date().toString())\n@@ -125,7 +124,7 @@ export const initAnalytics = async () => {\n})\n}\n- log.debug('Initialized analytics:', {\n+ log.debug('available analytics:', {\nFS: isFSEnabled,\nSentry: isSentryEnabled,\nAmplitude: isAmplitudeEnabled,\n",
        "chatgpt_cot": "Add condition to check for existence of row details before processing in populate_analytics.js to prevent potential out of memory error."
    },
    {
        "org_diff": "diff --git a/routes/cube/blog.js b/routes/cube/blog.js @@ -90,6 +90,42 @@ router.post('/post/:id', ensureAuth, async (req, res) => {\n}\n});\n+router.get('/blogpost/:id', async (req, res) => {\n+ try {\n+ const post = await Blog.findById(req.params.id);\n+\n+ return render(req, res, 'BlogPostPage', {\n+ post,\n+ });\n+ } catch (err) {\n+ return util.handleRouteError(req, res, err, '/404');\n+ }\n+});\n+\n+router.delete('/remove/:id', ensureAuth, async (req, res) => {\n+ try {\n+ const query = {\n+ _id: req.params.id,\n+ };\n+\n+ const blog = await Blog.findById(req.params.id);\n+\n+ if (!req.user._id.equals(blog.owner)) {\n+ req.flash('danger', 'Unauthorized');\n+ return res.redirect('/404');\n+ }\n+ await Blog.deleteOne(query);\n+\n+ req.flash('success', 'Post Removed');\n+ return res.send('Success');\n+ } catch (err) {\n+ return res.status(500).send({\n+ success: 'false',\n+ message: 'Error deleting post.',\n+ });\n+ }\n+});\n+\nrouter.get(\n'/src/:id',\nutil.wrapAsyncApi(async (req, res) => {\n@@ -157,40 +193,4 @@ router.get('/:id/:page', async (req, res) => {\n}\n});\n-router.get('/blogpost/:id', async (req, res) => {\n- try {\n- const post = await Blog.findById(req.params.id);\n-\n- return render(req, res, 'BlogPostPage', {\n- post,\n- });\n- } catch (err) {\n- return util.handleRouteError(req, res, err, '/404');\n- }\n-});\n-\n-router.delete('/remove/:id', ensureAuth, async (req, res) => {\n- try {\n- const query = {\n- _id: req.params.id,\n- };\n-\n- const blog = await Blog.findById(req.params.id);\n-\n- if (!req.user._id.equals(blog.owner)) {\n- req.flash('danger', 'Unauthorized');\n- return res.redirect('/404');\n- }\n- await Blog.deleteOne(query);\n-\n- req.flash('success', 'Post Removed');\n- return res.send('Success');\n- } catch (err) {\n- return res.status(500).send({\n- success: 'false',\n- message: 'Error deleting post.',\n- });\n- }\n-});\n-\nmodule.exports = router;\n",
        "org_msg": "Fix blogpost links",
        "sim_msg": "Complete convert to edit",
        "sim_diff": "diff --git a/AdditionalPostModActions.user.js b/AdditionalPostModActions.user.js // @description Adds a menu with mod-only quick actions in post sidebar\n// @homepage https://github.com/samliew/SO-mod-userscripts\n// @author @samliew\n-// @version 0.4.1\n+// @version 0.5\n//\n// @include https://*stackoverflow.com/*\n// @include https://*serverfault.com/*\nconst getQueryParam = key => new URLSearchParams(window.location.search).get(key);\n+ function goToPost(pid) {\n+ if(typeof pid === 'undefined' || pid === null) { return; }\n+\n+ // If in mod queues, do not reload\n+ if(location.pathname.includes('/admin/dashboard')) return false;\n+ location.href = `https://${location.hostname}/q/${pid}`;\n+ }\nfunction reloadPage() {\n// If in mod queues, do not reload\nif(location.pathname.includes('/admin/dashboard')) return false;\nfunction reloadWhenDone() {\n// Triggers when all ajax requests have completed\n- $(document).ajaxStop(reloadPage);\n+ $(document).ajaxStop(function() {\n+\n+ // Stop subsequent calls\n+ $(this).off(\"ajaxStop\");\n+\n+ reloadPage();\n+ });\n}\nfunction convertToComment(pid, targetId) {\nreturn new Promise(function(resolve, reject) {\nif(typeof pid === 'undefined' || pid === null) { reject(); return; }\n+ if(typeof targetId === 'undefined' || targetId === null) { reject(); return; }\n$.post({\nurl: `https://${location.hostname}/admin/posts/${pid}/convert-to-comment`,\n.fail(reject);\n});\n}\n+ // Convert to edit\n+ function convertToEdit(pid, targetId) {\n+ return new Promise(function(resolve, reject) {\n+ if(typeof pid === 'undefined' || pid === null) { reject(); return; }\n+ if(typeof targetId === 'undefined' || targetId === null) { reject(); return; }\n+\n+ $.post({\n+ url: `https://${location.hostname}/admin/posts/${pid}/convert-to-edit`,\n+ data: {\n+ 'mod-actions': 'convert-to-edit',\n+ 'duration': 1,\n+ 'target-post-id': targetId,\n+ 'fkey': fkey\n+ }\n+ })\n+ .done(resolve)\n+ .fail(reject);\n+ });\n+ }\n// Delete all comments on post\npost.find('.comments-list').html('');\npost.find('.comments-link').prev().addBack().remove();\nremovePostFromModQueue();\n+ reloadPage();\n});\nbreak;\ncase 'purge-comments':\npost.find('.comments-list').html('');\npost.find('.comments-link').prev().addBack().remove();\nremovePostFromModQueue();\n+ reloadPage();\n});\nbreak;\ncase 'convert-comment':\nundeletePost(pid).then(function() {\n- convertToComment(pid, qid).then(reloadPage);\n+ convertToComment(pid, qid).then(function() {\n+ goToPost(qid);\n+ });\n});\nbreak;\ncase 'convert-edit':\n- // needs undeletion first if deleted\n+ undeletePost(pid).then(function() {\n+ convertToEdit(pid, qid).then(function() {\n+ goToPost(qid);\n+ });\n+ });\nbreak;\ncase 'toggle-protect': {\nif(post.find('.question-status b').text().includes('protect')) unprotectPost(pid).then(reloadPage);\n",
        "chatgpt_cot": "Add new routes for fetching and deleting blog posts. Enhance user authorization and error handling. Fixes potential issues with post deletion and unauthorized access."
    },
    {
        "org_diff": "diff --git a/src/pages/UserViewPage.js b/src/pages/UserViewPage.js @@ -17,7 +17,7 @@ const UserViewPage = ({ user, followers, following, canEdit, cubes }) => (\nuser.about\n.trim()\n.split(/[\\r\\n]+/)\n- .map((para) => <p>{para}</p>)\n+ .map((para) => <p className=\"my-0\">{para}</p>)\n) : (\n<em>This user has not yet filled out their about section.</em>\n)}\n",
        "org_msg": "No paragraph margin on about.",
        "sim_msg": "removed unneccessary check for `authenticated` prop\n(fixing a layout https://github.com/busyorg/busy/pull/852)",
        "sim_diff": "diff --git a/src/app/Sidebar/UserInfo.js b/src/app/Sidebar/UserInfo.js @@ -59,7 +59,7 @@ const UserInfo = ({ intl, authenticated, authenticatedUser, user, ...props }) =>\n</div>\n</div>\n</div>}\n- {(user && authenticated && !isSameUser) && <Action\n+ {(user && !isSameUser) && <Action\nstyle={{ margin: '5px 0' }}\ntext={intl.formatMessage({\nid: 'transfer',\n",
        "chatgpt_cot": "\"Add className to user about paragraphs for consistent styling\""
    },
    {
        "org_diff": "diff --git a/src/cube_deckbuilder.js b/src/cube_deckbuilder.js @@ -4,4 +4,6 @@ import ReactDOM from 'react-dom';\nimport CubeDeckbuilderPage from 'pages/CubeDeckbuilderPage';\nconst wrapper = document.getElementById('react-root');\n-wrapper ? ReactDOM.render(<CubeDeckbuilderPage {...window.reactProps} />, wrapper) : false;\n+if (wrapper) {\n+ ReactDOM.render(<CubeDeckbuilderPage {...window.reactProps} />, wrapper);\n+}\n",
        "org_msg": "Fix cube_deckbuilder.js.",
        "sim_msg": "[react] explicitly set deck canvas position",
        "sim_diff": "diff --git a/modules/react/src/deckgl.js b/modules/react/src/deckgl.js @@ -29,6 +29,11 @@ const propTypes = Deck.getPropTypes(PropTypes);\nconst defaultProps = Deck.defaultProps;\n+const CANVAS_STYLE = {\n+ left: 0,\n+ top: 0\n+};\n+\nexport default class DeckGL extends React.Component {\nconstructor(props) {\nsuper(props);\n@@ -206,7 +211,8 @@ export default class DeckGL extends React.Component {\nconst canvas = createElement('canvas', {\nkey: 'canvas',\n- ref: this._canvasRef\n+ ref: this._canvasRef,\n+ style: CANVAS_STYLE\n});\n// Render deck.gl as the last child\n",
        "chatgpt_cot": "\"Fix rendering issue in CubeDeckbuilderPage by adding conditional check for wrapper element before rendering the page.\""
    },
    {
        "org_diff": "diff --git a/views/cube/cube_playtest.pug b/views/cube/cube_playtest.pug @@ -12,5 +12,3 @@ block scripts\nscript(type='text/javascript').\nvar reactProps = !{JSON.stringify(reactProps)};\nscript(src='/js/cube_playtest.bundle.js')\n- script(src='/js/packcraft.js', async)\n- script(src='/js/texteditor.js', async)\n",
        "org_msg": "Delete unused packcraft.js.",
        "sim_msg": "Remove dead peeks constants",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -4489,24 +4489,6 @@ const cubeMesh = (() => {\ncubeMesh.frustumCulled = false;\nscene.add(cubeMesh);\n-const PEEK_FACES = {\n- FRONT: 1,\n- BACK: 2,\n- LEFT: 3,\n- RIGHT: 4,\n- TOP: 5,\n- BOTTOM: 6,\n-};\n-const PEEK_DIRECTIONS = [\n- [new THREE.Vector3(0, 0, 1), PEEK_FACES.FRONT],\n- [new THREE.Vector3(0, 0, -1), PEEK_FACES.BACK],\n- [new THREE.Vector3(-1, 0, 0), PEEK_FACES.LEFT],\n- [new THREE.Vector3(1, 0, 0), PEEK_FACES.RIGHT],\n- [new THREE.Vector3(0, 1, 0), PEEK_FACES.TOP],\n- [new THREE.Vector3(0, -1, 0), PEEK_FACES.BOTTOM],\n-];\n-const PEEK_FACE_INDICES = Int32Array.from([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,255,255,255,255,255,255,255,255,255,255,0,255,5,6,7,8,255,255,255,255,255,255,255,255,255,255,1,5,255,9,10,11,255,255,255,255,255,255,255,255,255,255,2,6,9,255,12,13,255,255,255,255,255,255,255,255,255,255,3,7,10,12,255,14,255,255,255,255,255,255,255,255,255,255,4,8,11,13,14,255]);\n-\nconst velocity = new THREE.Vector3();\nconst lastGrabs = [false, false];\nconst lastAxes = [[0, 0], [0, 0]];\n",
        "chatgpt_cot": "Remove unnecessary async attribute from script tags in cube_playtest.pug view."
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"nodemon\": \"nodemon --ignore src --ignore public\",\n\"webpack-dev-server\": \"webpack-dev-server --config webpack.dev.js\",\n\"build\": \"webpack --mode production --config webpack.prod.js --progress\",\n- \"start\": \"nodemon --ignore src --ignore public & webpack-dev-server --config webpack.dev.js & webpack --config webpack.server.js --watch\",\n+ \"start\": \"nodemon --ignore src --ignore public & webpack-dev-server --config webpack.dev.js & webpack --mode development --config webpack.server.js --watch\",\n\"test\": \"jest --silent --detectOpenHandles --coverage\",\n- \"setup\": \"webpack --config webpack.server.js --progress && node --max-old-space-size=4096 force_update.js\"\n+ \"setup\": \"webpack --mode development --config webpack.server.js --progress && node --max-old-space-size=4096 force_update.js\"\n},\n\"author\": \"Gwen Dekker\",\n\"license\": \"ISC\",\n",
        "org_msg": "Fix webpack mode.",
        "sim_msg": "More & removal",
        "sim_diff": "diff --git a/package.json b/package.json \"scripts\": {\n\"start-server\":\n\"nodemon ./server/server.js -e js,graphql --ignore snapshots/ --ignore src/ --exec babel-node\",\n- \"start\": \"npm run start-server & npm run start-client\",\n+ \"start\": \"concurrently \\\"npm run start-server\\\" \\\"npm run start-client\\\"\",\n\"start-js\": \"react-scripts start\",\n\"start-client\": \"npm-run-all -p watch-css start-js\",\n\"build-js\": \"cross-env GENERATE_SOURCEMAP=false react-scripts build\",\n\"cloc . --exclude-dir=node_modules,config,scripts,build-server,snapshots,coverage,build --exclude-ext=css,json\",\n\"test:client\": \"react-scripts test --env=jsdom\",\n\"test:server\": \"jest server/tests --env=node\",\n- \"test\": \"npm run test:client & npm run test:server\",\n+ \"test\": \"concurrently \\\"npm run test:client\\\" \\\"npm run test:server\\\"\",\n\"flow\": \"flow\",\n\"precommit\": \"lint-staged\",\n\"add\": \"all-contributors add\",\n",
        "chatgpt_cot": "Refactor start script in package.json for better development environment setup. Update webpack mode to development and improve script readability."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -14,7 +14,7 @@ const Cube = require('../models/cube');\nconst router = express.Router();\n-/* Minimum number of picks to show up in Top Cards list. */\n+/* Minimum number of picks for data to show up in Top Cards list. */\nconst MIN_PICKS = 100;\n/* Maximum results to return on a vague filter string. */\nconst MAX_RESULTS = 1000;\n@@ -92,19 +92,19 @@ async function topCards(filter) {\nconst card = cardDataDict.get(v.name.toLowerCase());\n/* This is a Bayesian adjustment to the rating like IMDB does. */\nconst adjust = (r) => (r.picks * r.value + MIN_PICKS * 0.5) / (r.picks + MIN_PICKS);\n- const qualifies = rating && typeof rating.picks !== 'undefined' && rating.picks > MIN_PICKS;\n+ const qualifies = rating && rating.picks !== undefined && rating.picks > MIN_PICKS;\nreturn [\nv.name,\nv.image_normal,\nv.image_flip || null,\nqualifies && rating.value ? adjust(rating) : null,\n- rating && typeof rating.picks !== 'undefined' ? rating.picks : null,\n+ rating && rating.picks !== undefined ? rating.picks : null,\nqualifies && rating.elo ? rating.elo : null,\ncard ? card.cubes.length : null,\n];\n});\n/* Sort by number of picks for limit. */\n- const data = sortLimit(fullData, MAX_RESULTS, (x) => (x[4] === null ? -1 : x[4]));\n+ const data = sortLimit(fullData, MAX_RESULTS, (x) => (x[5] === null ? 1 : -x[5]));\nreturn {\nratings,\nversions,\n",
        "org_msg": "Fix top cards sort.",
        "sim_msg": "add function to find media type matches",
        "sim_diff": "diff --git a/bin/util.js b/bin/util.js @@ -41,6 +41,44 @@ exports.edgeSlashes = function(value, start, end) {\nreturn value;\n};\n+/**\n+ * Provide an accept media type string and possible matches and get the match.\n+ * @param {string} input\n+ * @param {string[]} matches\n+ * @returns {string|undefined} The match string that matches.\n+ */\n+exports.findMediaMatch = function(input, matches) {\n+ const accepts = input\n+ .split(/, */)\n+ .map(value => {\n+ const set = value.split(';');\n+ const type = set[0].split('/');\n+ const q = /q=(\\d\\.\\d)/.exec(set[1]);\n+ return {\n+ quality: +((q && q[1]) || 1),\n+ subType: type[1].split('+')[0],\n+ type: type[0]\n+ }\n+ });\n+ accepts.sort((a, b) => {\n+ if (a.quality === b.quality) return 0;\n+ return a.quality < b.quality ? 1 : -1\n+ });\n+\n+ const acceptsLength = accepts.length;\n+ const matchesLength = matches.length;\n+ for (let i = 0; i < acceptsLength; i++) {\n+ const accept = accepts[i];\n+ for (let j = 0; j < matchesLength; j++) {\n+ const ar = matches[j].split('/');\n+ const type = ar[0];\n+ const subtype = ar[1].split('+')[0];\n+ if ((accept.type === type || accept.type === '*' || type === '*') &&\n+ (accept.subtype === subtype || accept.subtype === '*' || subtype === '*')) return matches[j];\n+ }\n+ }\n+};\n+\n/**\n* If a property does not exist then set it to the value.\n* @param {object} obj\n",
        "chatgpt_cot": "\"Fix MIN_PICKS variable description and rating qualification check in topCards function for proper data display and sorting.\""
    },
    {
        "org_diff": "diff --git a/src/components/CubeOverviewModal.js b/src/components/CubeOverviewModal.js @@ -23,6 +23,7 @@ import { csrfFetch } from '../util/CSRF';\nimport { fromEntries } from '../util/Util';\nimport TagInput from './TagInput';\nimport TagContext from './TagContext';\n+import TextEntry from './TextEntry';\nclass CubeOverviewModal extends Component {\nconstructor(props) {\n@@ -30,8 +31,9 @@ class CubeOverviewModal extends Component {\nthis.state = {\nisOpen: false,\n- tags: [],\n- cube: JSON.parse(JSON.stringify(props.cube))\n+ tags: props.cube.tags,\n+ cube: JSON.parse(JSON.stringify(props.cube)),\n+ description: props.cube.descriptionhtml ? props.cube.descriptionhtml : props.cube.description\n};\nthis.open = this.open.bind(this);\n@@ -39,6 +41,7 @@ class CubeOverviewModal extends Component {\nthis.addTag = this.addTag.bind(this);\nthis.deleteTag = this.deleteTag.bind(this);\nthis.handleChange = this.handleChange.bind(this);\n+ this.handleDescriptionChange = this.handleDescriptionChange.bind(this);\nthis.tagActions = {\naddTag: this.addTag,\n@@ -70,6 +73,10 @@ class CubeOverviewModal extends Component {\n}));\n}\n+ handleDescriptionChange(event) {\n+ this.setState({ description: event.target.value });\n+ }\n+\naddTag(tag) {\nthis.setState(({ tags }) => ({\ntags: [...tags, tag],\n@@ -168,6 +175,7 @@ class CubeOverviewModal extends Component {\n<br/>\n<h6>Description</h6>\n+ <TextEntry content={this.state.description} handleChange={this.handleDescriptionChange}/>\n<br/>\n<h6>Tags</h6>\n",
        "org_msg": "Added description to modal",
        "sim_msg": "remove navigationTags query and use withTags",
        "sim_diff": "diff --git a/src/containers/tags/withNavigationTags.js b/src/containers/tags/withNavigationTags.js @@ -13,13 +13,20 @@ import navigationTagsQuery from \"./navigationTags.gql\";\n*/\nexport default (Component) => (\n@inject(\"primaryShopId\")\n+ @inject(\"tags\")\n@observer\nclass NavigationTags extends React.Component {\nstatic propTypes = {\n/**\n* ShopId used to obtain tags for\n*/\n- primaryShopId: PropTypes.string.isRequired\n+ primaryShopId: PropTypes.string.isRequired,\n+ /**\n+ * Object of tags available to shop\n+ */\n+ tags: PropTypes.shape({\n+ edges: PropTypes.arrayOf(PropTypes.object).isRequired\n+ })\n}\n@observable _data = {}\n@@ -72,71 +79,10 @@ export default (Component) => (\nreturn [];\n})\n- /**\n- * Generates a tree from the given array of subTagIds.\n- * @param {Function} fetchMore - Function used to fetch more data from a graphql endpoint\n- * @param {Object} data - Data from previous query, used for recursion to fetch all tags\n- * @return {undefined} no return value\n- */\n- fetchMoreDataIfNecessary = (fetchMore, data) => {\n- const { primaryShopId } = this.props;\n- const pageInfo = data && data.tags.pageInfo;\n-\n- if (pageInfo && pageInfo.hasNextPage) {\n- fetchMore({\n- variables: {\n- shopId: primaryShopId,\n- cursor: pageInfo.endCursor\n- },\n- updateQuery: (previousResult, { fetchMoreResult }) => {\n- const { tags: { edges: newEdges, pageInfo: newPageInfo } } = fetchMoreResult;\n-\n- // Return with additional results\n- if (newEdges.length) {\n- // Concat the previous and next data\n- let newEdgesArray = [...previousResult.tags.edges, ...newEdges];\n-\n- // Remove duplicates\n- newEdgesArray = newEdgesArray.filter((obj, pos, arr) => (\n- arr\n- .map(({ node }) => node._id)\n- .indexOf(obj.node._id) === pos\n- ));\n-\n- return {\n- tags: {\n- __typename: previousResult.tags.__typename,\n- edges: newEdgesArray,\n- pageInfo: newPageInfo\n- }\n- };\n- }\n-\n- // Send the previous result if the new result contains no additional data\n- return previousResult;\n- }\n- }).catch(() => {\n- /*\n- Catch errors, namely `TypeError: Cannot set property 'networkStatus' of undefined` which seems to be\n- an Apollo issue: https://github.com/apollographql/apollo-client/issues/2539\n- */\n- });\n- }\n- }\n-\nrender() {\n- const { primaryShopId } = this.props;\n-\n- return (\n- <Query query={navigationTagsQuery} variables={{ shopId: primaryShopId }}>\n- {({ loading, error, data, fetchMore }) => {\n- if (loading || error) return null;\n- if (!data || !data.tags) return null;\n+ const { tags } = this.props;\n- this.data = data;\n-\n- // Recursively more tags until we can fetch no more\n- this.fetchMoreDataIfNecessary(fetchMore, data);\n+ this.data = { tags };\nreturn (\n<Component\n@@ -144,9 +90,6 @@ export default (Component) => (\nnavItems={{ edges: this.getTagTree(null, this.data) }}\n/>\n);\n- }}\n- </Query>\n- );\n}\n}\n);\n",
        "chatgpt_cot": "Add TextEntry component for description input in CubeOverviewModal, handleDescriptionChange method to update state. Improves user experience in managing cube details."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -635,7 +635,7 @@ function getLabels(sort) {\n}\nelse if (sort == 'Supertype')\n{\n- return ['Basic','Elite','Host','Legendary','Ongoing','Tribal','World','Snow'];\n+ return ['Snow','Legendary','Tribal','Basic','Elite','Host','Ongoing','World'];\n}\nelse if (sort == 'Tags')\n{\n",
        "org_msg": "reverted supertype to previous sort",
        "sim_msg": "[Site] fixed color code for tag in Changelog",
        "sim_diff": "diff --git a/website/client/components/Changelog.js b/website/client/components/Changelog.js @@ -34,14 +34,14 @@ function getLabel(tag) {\nswitch (tag) {\ncase 'Added':\nlabel = (\n- <TagStyled size=\"l\" theme=\"#9EF2C9\" color=\"#007C65\">\n+ <TagStyled size=\"l\" theme=\"#9ef2c9\" color=\"#007c65\">\n{tag}\n</TagStyled>\n);\nbreak;\ncase 'Fixed':\nlabel = (\n- <TagStyled size=\"l\" theme=\"#C4E5FE\" color=\"#006DCA\">\n+ <TagStyled size=\"l\" theme=\"#c4e5fe\" color=\"#006dca\">\n{tag}\n</TagStyled>\n);\n@@ -50,7 +50,7 @@ function getLabel(tag) {\ncase 'Removed':\ncase 'Deprecated':\nlabel = (\n- <TagStyled size=\"l\" theme=\"#FFDCA2\" color=\"#C33909\">\n+ <TagStyled size=\"l\" theme=\"#ffdca2\" color=\"#c33909\">\n{tag}\n</TagStyled>\n);\n@@ -58,7 +58,7 @@ function getLabel(tag) {\ncase 'BREAK':\ncase 'Security':\nlabel = (\n- <TagStyled size=\"l\" theme=\"#FFD7DF\" color=\"#D1002F\">\n+ <TagStyled size=\"l\" theme=\"#ffd7df\" color=\"#d1002f\">\n{tag}\n</TagStyled>\n);\n",
        "chatgpt_cot": "\"Reorder the labels array based on sort type to match the expected order for 'Supertype' and 'Tags' sorting.\""
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -72,7 +72,11 @@ router.post('/lostpassword', function(req, res) {\nhtml: \"A password reset was requested for the account that belongs to this email.<br> To proceed, click <a href=\\\"https://cubecobra.com/user/passwordreset/\" +\npasswordReset._id + \"\\\">here</a>.<br> Your recovery code is: \" + passwordReset.code +\n\"<br> This link expires in 15 minutes.\" +\n- \"<br> If you did not request a password reset, ignore this email.\"\n+ \"<br> If you did not request a password reset, ignore this email.\",\n+ text: \"A password reset was requested for the account that belongs to this email.\\nTo proceed, go to https://cubecobra.com/user/passwordreset/\" +\n+ passwordReset._id + \"\\nYour recovery code is: \" + passwordReset.code +\n+ \"\\nThis link expires in 15 minutes.\" +\n+ \"\\nIf you did not request a password reset, ignore this email.\"\n}\nsmtpTransport.sendMail(mail, function(err, response) {\n@@ -253,7 +257,10 @@ router.post('/register', function(req, res) {\nsubject: \"Confirm Account\",\nhtml: \"Hi \" + newUser.username +\n\",</br> Thanks for joining! To confirm your email, click <a href=\\\"https://cubecobra.com/user/register/confirm/\" +\n- newUser._id + \"\\\">here</a>.\"\n+ newUser._id + \"\\\">here</a>.\",\n+ text: \"Hi \" + newUser.username +\n+ \",\\nThanks for joining! To confirm your email, go to https://cubecobra.com/user/register/confirm/\" +\n+ newUser._id\n}\nsmtpTransport.sendMail(mail, function(error, response) {\n",
        "org_msg": "Add text only versions to emails",
        "sim_msg": "do not expose which email exists when requesting password reset\ncloses",
        "sim_diff": "diff --git a/generators/server/templates/src/main/java/package/web/rest/AccountResource.java.ejs b/generators/server/templates/src/main/java/package/web/rest/AccountResource.java.ejs @@ -442,15 +442,27 @@ public class AccountResource {\n@PostMapping(path = \"/account/reset-password/init\")\n<%_ if (!reactive) { _%>\npublic void requestPasswordReset(@RequestBody String mail) {\n- mailService.sendPasswordResetMail(\n- userService.requestPasswordReset(mail)\n- .orElseThrow(EmailNotFoundException::new)\n- );\n+ Optional<User> user = userService.requestPasswordReset(mail);\n+ if (user.isPresent()) {\n+ mailService.sendPasswordResetMail(user.get());\n+ } else {\n+ // Pretend the request has been successful to prevent checking which emails really exist\n+ // but log that an invalid attempt has been made\n+ log.warn(\"Password reset requested for non existing mail '{}'\", mail);\n+ }\n<%_ } else { _%>\npublic Mono<Void> requestPasswordReset(@RequestBody String mail) {\nreturn userService.requestPasswordReset(mail)\n- .switchIfEmpty(Mono.error(new EmailNotFoundException()))\n- .doOnSuccess(mailService::sendPasswordResetMail)\n+ .log()\n+ .doOnSuccess(user -> {\n+ if (Objects.nonNull(user)) {\n+ mailService.sendPasswordResetMail(user);\n+ } else {\n+ // Pretend the request has been successful to prevent checking which emails really exist\n+ // but log that an invalid attempt has been made\n+ log.warn(\"Password reset requested for non existing mail '{}'\", mail);\n+ }\n+ })\n.then();\n<%_ } _%>\n}\n",
        "chatgpt_cot": "Add text field for email confirmation and password reset emails to improve accessibility and user experience."
    },
    {
        "org_diff": "diff --git a/README.md b/README.md @@ -10,7 +10,7 @@ If you are interested in contributing towards Cube Cobra, please read the [Contr\n### Install Prerequisites\n-You will need to install NodeJS, MongoDB, and an IDE of your preference (I reccomend Atom). You can find the neccesary resources here:\n+You will need to install NodeJS, MongoDB, and an IDE of your preference (I recommend Atom). You can find the necessary resources here:\nNodeJS: https://nodejs.org/en/download/\n@@ -25,8 +25,10 @@ Atom (optional): https://atom.io/\nClone the project into a folder of your choice. Create a symbolic link from\n`../cubecobrasecrets` to `cubecobrasecrets.example`:\n+```bash\ncd CubeCobra/..\nln -s CubeCobra/cubecobrasecrets.example cubecobrasecrets\n+```\nThe resulting directory structure should look like this:\n",
        "org_msg": "Fixing spelling and formatting of console block in README",
        "sim_msg": "Remove outdated Readme content",
        "sim_diff": "diff --git a/Readme.md b/Readme.md @@ -46,14 +46,3 @@ Before doing this be sure you ran the script to build gooni:\n```\nGOONI_DIR=/path/to/gooni ./scripts/build-binaries.sh\n```\n-\n-### Troubleshooting\n-\n-You may encounter (particularly in the results page) errors related to the\n-`sqlite3` module not being found. If that happens you will have to rebuild\n-electron with your current sqlite3 version with:\n-\n-```\n-npm run electron-rebuild\n-```\n-\n",
        "chatgpt_cot": "Fix spelling and grammar errors in README.md and add symbolic link creation instructions for cubecobrasecrets."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -489,27 +489,22 @@ router.get('/overview/:id', async (req, res) => {\nloginCallback: '/cube/overview/' + req.params.id,\n});\n} catch (err) {\n- req.flash('danger', 'Server Error');\n- return res.redirect('/cube/overview/' + req.params.id);\n+ util.handleRouteError(res, err, '/cube/overview/' + req.params.id);\n}\n});\n-router.get('/blogsrc/:id', function(req, res) {\n- Blog.findById(req.params.id, function(err, blog) {\n- if (err || !blog) {\n- res.status(400).send({\n- success: 'false',\n- });\n- } else {\n+router.get(\n+ '/blogsrc/:id',\n+ util.wrapAsyncApi(async (req, res) => {\n+ const blog = await Blog.findById(req.params.id);\nres.status(200).send({\nsuccess: 'true',\nsrc: blog.html,\ntitle: blog.title,\nbody: blog.body,\n});\n- }\n- });\n-});\n+ }),\n+);\nrouter.get('/blog/:id', function(req, res) {\nres.redirect('/cube/blog/' + req.params.id + '/0');\n",
        "org_msg": "Revised overview and blogsrc",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Refactor cube_routes.js, replace error handling with util function, and use async/await for blogsrc/:id route."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -413,7 +413,7 @@ router.get('/overview/:id', async (req, res) => {\nfor (const card of allVersions) {\ncard.details = { ...carddb.cardFromId(card.cardID, 'name tcgplayer_id') };\n}\n- const pricesQ = addPrices(allVersions);\n+ const priceDictQ = GetPrices([...pids]);\nconst blogsQ = Blog.find({\ncube: cube._id,\n})\n@@ -425,9 +425,13 @@ router.get('/overview/:id', async (req, res) => {\n},\n'_id username image artist users_following',\n).lean();\n- const [blogs, followers] = await Promise.all([blogsQ, followersQ, pricesQ]);\n+ const [blogs, followers, priceDict] = await Promise.all([blogsQ, followersQ, priceDictQ]);\nconst allVersionsLookup = {};\nfor (const card of allVersions) {\n+ if (card.tcgplayer_id) {\n+ card.details.price = priceDict[card.tcgplayer_id];\n+ card.details.price_foil = priceDict[`${card.tcgplayer_id}_foil`];\n+ }\nif (!allVersionsLookup[card.related]) {\nallVersionsLookup[card.related] = [];\n}\n",
        "org_msg": "Fix error with addPrices.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "\"Add priceDictQ to fix compilation issue and improve performance in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/README.md b/README.md @@ -32,7 +32,7 @@ Once your `.env` file is filled out, run the following commands in the root of t\n```sh\nnpm install\nnpm run setup # This will bundle modules and download Scryfall assets.\n-node seed.js # This will create and seed the mongo database specified in cubecobrasecrets.\n+node one_shot_scripts/seed.js # This will create and seed the mongo database specified in the .env file.\n```\nIf you are on Windows, you will need to set bash as your script shell:\n",
        "org_msg": "Updated readme to reflect recent changes\ncubecobrasecrets changed to .env\nseed.js has been moved to the one_shot_scripts/ folder.",
        "sim_msg": "README error hint for people on OS X",
        "sim_diff": "diff --git a/README.md b/README.md @@ -44,7 +44,7 @@ The game uses mongodb as storage so you'll need that installed and running.\nClone the repository\ngit submodule init\ngit submodule update\n-Run npm install\n+npm install # See https://github.com/JustinTulloss/zeromq.node/issues/283 for zmq errors on OS X\nmkdir server/logs\ncd server\nnode fetchdata.js\n",
        "chatgpt_cot": "Update seed.js path in README.md to reflect the correct location for seeding the mongo database as specified in the .env file."
    },
    {
        "org_diff": "diff --git a/public/css/stylesheet.css b/public/css/stylesheet.css @@ -1214,4 +1214,3 @@ a{\n.pvtTable {\nfont-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\" !important\n}\n-\n",
        "org_msg": "deleted extra space",
        "sim_msg": "Update font stack & support emojis",
        "sim_diff": "diff --git a/style/app.css b/style/app.css @@ -16,7 +16,7 @@ html, body {\n}\nbody, input, button, select, option, textarea {\n- font: menu;\n+ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Ubuntu, Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\nfont-size: 14px;\nline-height: 1.5;\n}\n",
        "chatgpt_cot": "Remove unnecessary code from stylesheet.css."
    },
    {
        "org_diff": "diff --git a/src/components/CardModalForm.js b/src/components/CardModalForm.js @@ -152,7 +152,7 @@ const CardModalForm = ({ children, ...props }) => {\n}, [card, addChange]);\nconst openCardModal = useCallback(\n- async (newCardIndex, newMaybe) => {\n+ (newCardIndex, newMaybe) => {\nconst card = newMaybe ? maybeboard[newCardIndex] : cube.cards[newCardIndex];\nconst colors = card.colors || card.details.colors;\nconst typeLine = card.type_line || card.details.type;\n",
        "org_msg": "Remove unnecessary async.",
        "sim_msg": "added numberoflines to eventcard",
        "sim_diff": "diff --git a/src/components/EventCard.js b/src/components/EventCard.js @@ -58,7 +58,7 @@ const EventCard = ({\n{timeDisplay}\n</Text>\n<View style={styles.eventNameContainer}>\n- <Text type=\"h3\" style={styles.eventName}>\n+ <Text type=\"h3\" style={styles.eventName} numberOfLines={2}>\n{name}\n</Text>\n</View>\n",
        "chatgpt_cot": "\"Remove async keyword from openCardModal function to simplify the code and improve readability\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -406,6 +406,7 @@ router.get('/overview/:id', async (req, res) => {\nfor (const card of cube.cards) {\ncard.details = { ...carddb.cardFromId(card.cardID, 'name tcgplayer_id') };\n}\n+ const pids = new Set();\nconst allVersions = [];\nfor (const card of cube.cards) {\nconst allVersionsOfCard = carddb.getIdsFromName(card.details.name) || [];\n@@ -413,6 +414,9 @@ router.get('/overview/:id', async (req, res) => {\n}\nfor (const card of allVersions) {\ncard.details = { ...carddb.cardFromId(card.cardID, 'name tcgplayer_id') };\n+ if (card.details.tcgplayer_id) {\n+ pids.add(card.details.tcgplayer_id);\n+ }\n}\nconst priceDictQ = GetPrices([...pids]);\nconst blogsQ = Blog.find({\n",
        "org_msg": "Define pids.",
        "sim_msg": "Update card types",
        "sim_diff": "diff --git a/server/game/cards/index.js b/server/game/cards/index.js @@ -2,8 +2,9 @@ const _ = require('underscore');\nconst path = require('path');\nconst fs = require('fs');\n-const plots = require('./plots');\n-const locations = require('./locations');\n+const strongholds = require('./strongholds');\n+const provinces = require('./provinces');\n+const holdings = require('./holdings');\nconst characters = require('./characters');\nconst attachments = require('./attachments');\nconst events = require('./events');\n@@ -16,6 +17,6 @@ _.each(fs.readdirSync(path.join(__dirname, 'agendas')), file => {\ncards[card.code] = card;\n});\n-cards = _.extend(cards, plots, locations, characters, attachments, events);\n+cards = _.extend(cards, strongholds, provinces, holdings, characters, attachments, events);\nmodule.exports = cards;\n",
        "chatgpt_cot": "Add TCGPlayer ID to card details and update priceDictQ with TCGPlayer IDs for cube overview in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/views/cube/cube_list.pug b/views/cube/cube_list.pug @@ -357,9 +357,10 @@ block content\nlabel.form-check-label(for='contextModalCheckboxG')\nimg(src='/content/symbols/g.png' alt='Green' title='Green')\nh5 Tags\n- .tags-input#contextModalTagsArea(data-name='tags-input')\n- span#contextModalTagsDiv.tags\n- input#contextModalTagsHiddenInput.tags-input(type='hidden')\n+ .tags-area#contextTags\n+ .tags-input(data-name='tags-input')\n+ span.tags\n+ input.hidden-input(type='hidden')\n.modal-footer\na#contextScryfallButton(href=\"#\", target=\"_blank\")\nbutton.btn.btn-secondary(type='button') View on Scryfall\n",
        "org_msg": "Fixed issue with tag view",
        "sim_msg": "Swapped 3.3.7, 4.0.0-beta posistions, added info panel",
        "sim_diff": "diff --git a/views/index.pug b/views/index.pug @@ -2,11 +2,11 @@ extends layout\nblock content\nh2.text-center=title\n- h3.text-center='v' + config.bootstrap4[0].version\n+ h3.text-center='v' + config.bootstrap[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].stylesheet\n- - var sri = config.bootstrap4[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].stylesheet\n+ - var sri = config.bootstrap[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -20,9 +20,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].javascript\n- - var sri = config.bootstrap4[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].javascript\n+ - var sri = config.bootstrap[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n@@ -35,12 +35,21 @@ block content\nspan.help-block Click to copy\ninclude _partials/jscode.pug\n+ hr\n+ .panel.panel-info\n+ .panel-heading\n+ h3.panel-title Info\n+ .panel-body\n+ | Bootstrap 4 is currently in Beta release and should be treated as such. For details check out\n+ a(href='https://blog.getbootstrap.com/2017/08/10/bootstrap-4-beta/', target='_blank', rel='noopener').\n+ the Bootstrap 4 Beta announcement\n+ | .\n- h3.text-center='v' + config.bootstrap[0].version\n+ h3.text-center='v' + config.bootstrap4[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].stylesheet\n- - var sri = config.bootstrap[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].stylesheet\n+ - var sri = config.bootstrap4[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -54,9 +63,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].javascript\n- - var sri = config.bootstrap[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].javascript\n+ - var sri = config.bootstrap4[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n",
        "chatgpt_cot": "\"Add tags area with input and span elements in cube_list.pug to improve user experience.\""
    },
    {
        "org_diff": "diff --git a/src/cube_overview.js b/src/cube_overview.js @@ -223,7 +223,7 @@ class CubeOverview extends Component {\n<CardText>{cube.description || ''}</CardText>\n)}\n</CardBody>\n- {cube.tags.length > 0 && (\n+ {(cube.tags || []).length > 0 && (\n<CardFooter>\n<div className=\"autocard-tags\">\n{cube.tags.map((tag) => (\n",
        "org_msg": "Fix cube.tags issue.",
        "sim_msg": "Remove see also from the library. It's a pain, and always breaks. Closes",
        "sim_diff": "diff --git a/client/src/components/views/Library/index.js b/client/src/components/views/Library/index.js @@ -17,10 +17,6 @@ const SUB = gql`\ntype\ntitle\nimage\n- seeAlso {\n- id\n- title\n- }\ncategories\n}\n}\n@@ -198,7 +194,7 @@ class Library extends Component {\n)}\n</Asset>\n)}\n- <h4>See Also</h4>\n+ {/* <h4>See Also</h4>\n<Card className=\"entry-seeAlso\">\n<CardBody>\n{sEntry &&\n@@ -217,7 +213,7 @@ class Library extends Component {\n</p>\n))}\n</CardBody>\n- </Card>\n+ </Card> */}\n</Col>\n</Row>\n</Col>\n@@ -237,10 +233,6 @@ const QUERY = gql`\ntype\ntitle\nimage\n- seeAlso {\n- id\n- title\n- }\ncategories\n}\n}\n",
        "chatgpt_cot": "\"Fix conditional expression for cube tags length in CubeOverview\""
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -98,14 +98,19 @@ function initializeCardDb(dataRoot) {\nif (dataRoot === undefined) {\ndataRoot = \"private\";\n}\n+ var fileToAttribute = {\n+ 'carddict.json': '_carddict',\n+ 'cardtree.json': 'cardtree',\n+ 'names.json': 'cardnames',\n+ 'nameToId.json': 'nameToId',\n+ 'full_names.json': 'full_names',\n+ 'imagedict.json': 'imagedict',\n+ 'cardimages.json': 'cardimages'\n+ };\nvar promises = [];\n- promises.push(loadJSONFile(dataRoot + '/carddict.json', '_carddict'));\n- promises.push(loadJSONFile(dataRoot + '/cardtree.json', 'cardtree'));\n- promises.push(loadJSONFile(dataRoot + '/names.json', 'cardnames'));\n- promises.push(loadJSONFile(dataRoot + '/nameToId.json', 'nameToId'));\n- promises.push(loadJSONFile(dataRoot + '/full_names.json', 'full_names'));\n- promises.push(loadJSONFile(dataRoot + '/imagedict.json', 'imagedict'));\n- promises.push(loadJSONFile(dataRoot + '/cardimages.json', 'cardimages'));\n+ for (var filename in fileToAttribute) {\n+ promises.push(loadJSONFile(dataRoot + '/' + filename, fileToAttribute[filename]));\n+ }\nfs.watchFile(dataRoot + '/imagedict.json', (curr, prev) => {\nconsole.log('File Changed: imagedict');\n",
        "org_msg": "use mapping to deduplicate repeat function calls",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "Refactor file loading in initializeCardDb to use a mapping for file names to attributes. Simplifies and improves readability of file loading logic."
    },
    {
        "org_diff": "diff --git a/src/components/ListView.js b/src/components/ListView.js @@ -169,6 +169,8 @@ class ListViewRaw extends Component {\nupdated.cardID = value;\n} else if (name.startsWith('tdstatus')) {\nupdated.status = value;\n+ } else if (name.startsWith('tdcolor')) {\n+ updated.colors = value === 'C' ? [] : [...value];\n}\nthis.syncCard(index, updated);\n}\n",
        "org_msg": "Fix colors bug.",
        "sim_msg": "Update to have a down arrow on odyssey layout",
        "sim_diff": "diff --git a/src/components/layouts/LayoutOdyssey/index.js b/src/components/layouts/LayoutOdyssey/index.js @@ -130,7 +130,7 @@ class LayoutOdyssey extends Component {\nclassName=\"card-name\"\nonClick={() => this.setState({ changingCard: !changingCard })}\n>\n- {cardName}\n+ {cardName} <span style={{ float: \"right\" }}>&#9660;</span>\n</h2>\n</div>\n<CardFrame simulator={simulator} />\n",
        "chatgpt_cot": "Add support for handling color values in ListViewRaw component. This modification allows for updating the colors attribute based on the value of 'tdcolor'."
    },
    {
        "org_diff": "diff --git a/src/components/CubeIdModal.js b/src/components/CubeIdModal.js @@ -28,7 +28,11 @@ const CubeIdModal = ({ toggle, isOpen, shortID, fullID, alert }) => {\n<InputGroup>\n<Input className=\"bg-white monospaced\" value={shortID} readonly />\n<InputGroupAddon addonType=\"append\">\n- <Button className=\"btn-sm input-group-button\" onClick={() => onCopyClick(shortID, 'Short ID')}>\n+ <Button\n+ className=\"btn-sm input-group-button\"\n+ onClick={() => onCopyClick(shortID, 'Short ID')}\n+ aria-label=\"Copy Short ID\"\n+ >\n<ClippyIcon size={16} />\n</Button>\n</InputGroupAddon>\n@@ -39,7 +43,11 @@ const CubeIdModal = ({ toggle, isOpen, shortID, fullID, alert }) => {\n<InputGroup>\n<Input className=\"bg-white monospaced\" value={fullID} readonly />\n<InputGroupAddon addonType=\"append\">\n- <Button className=\"btn-sm input-group-button\" onClick={() => onCopyClick(fullID, 'Full ID')}>\n+ <Button\n+ className=\"btn-sm input-group-button\"\n+ onClick={() => onCopyClick(fullID, 'Full ID')}\n+ aria-label=\"Copy Full ID\"\n+ >\n<ClippyIcon size={16} />\n</Button>\n</InputGroupAddon>\n",
        "org_msg": "add aria labels to copy buttons",
        "sim_msg": "chore: change button for button icon",
        "sim_diff": "diff --git a/packages/doc/src/components/Clipboard/index.jsx b/packages/doc/src/components/Clipboard/index.jsx @@ -3,11 +3,7 @@ import React, { useState } from 'react';\nimport { Button, Box } from '@gympass/yoga';\nimport { string } from 'prop-types';\n-import styled from 'styled-components';\n-\n-const ButtonCopy = styled(Button.Link)`\n- height: 100%;\n-`;\n+import { CheckedFull, Copy } from '@gympass/yoga-icons/src';\nconst Clipboard = ({ copyText }) => {\nconst [isCopied, setIsCopied] = useState(false);\n@@ -18,7 +14,7 @@ const Clipboard = ({ copyText }) => {\nreturn textToCopy;\n}\n- const hnadleCopyClick = () => {\n+ const handleCopyClick = () => {\nCopyTextToClipboard(copyText)\n.then(() => {\nsetIsCopied(true);\n@@ -32,10 +28,12 @@ const Clipboard = ({ copyText }) => {\n};\nreturn (\n- <Box position=\"absolute\" top=\"20px\" right=\"25px\">\n- <ButtonCopy onClick={hnadleCopyClick}>\n- {isCopied ? 'Copied!' : 'Copy'}\n- </ButtonCopy>\n+ <Box position=\"absolute\" top=\"5px\" right=\"5px\">\n+ {isCopied ? (\n+ <Button.Icon icon={CheckedFull} small />\n+ ) : (\n+ <Button.Icon icon={Copy} small onClick={handleCopyClick} />\n+ )}\n</Box>\n);\n};\n",
        "chatgpt_cot": "Improve accessibility by adding aria-label attributes to copy buttons in CubeIdModal component."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -90,7 +90,6 @@ async function topCards(filter) {\n$in: names.map((name) => name.toLowerCase()),\n},\n},\n- 'cardName cubes',\n)\n.addFields({\ncubesLength: {\n@@ -98,7 +97,8 @@ async function topCards(filter) {\n},\n})\n.sort({ cubesLength: -1 })\n- .limit(4 * MAX_RESULTS);\n+ .limit(4 * MAX_RESULTS)\n+ .project('cardName cubesLength');\nconst [ratings, cardData] = await Promise.all([ratingsQ, cardDataQ]);\n@@ -117,7 +117,7 @@ async function topCards(filter) {\nqualifies && rating.value ? adjust(rating) : null,\nrating && rating.picks !== undefined ? rating.picks : null,\nqualifies && rating.elo ? rating.elo : null,\n- card ? card.cubes.length : null,\n+ card ? card.cubesLength : null,\n];\n});\n/* Sort by number of picks for limit. */\n",
        "org_msg": "Fix projection.",
        "sim_msg": "Update fetchdata to skip over incomplete data",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -43,12 +43,14 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- var imagesrc = card.pack_cards[0].image_url;\n+ if(card.pack_cards.length > 0 && card.pack_cards[0].image_url) {\n+ var imagesrc = card.pack_cards[0].image_url;\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n+ }\n});\nreturn cards;\n",
        "chatgpt_cot": "Refactor topCards function in tools_routes.js to project specific fields and fix property name bug in card object."
    },
    {
        "org_diff": "diff --git a/.eslintrc.yml b/.eslintrc.yml @@ -14,8 +14,7 @@ settings:\nwebpack:\nconfig: webpack.dev.js\nrules:\n- # prettier/prettier:\n- # - error\n+ prettier/prettier: error\nno-console: off\nglobal-require: off\nno-param-reassign: off\n@@ -49,3 +48,6 @@ overrides:\nno-restricted-imports:\n- error\n- patterns: ['./*', '../*']\n+ - files: ['routes/**', 'serverjs/**']\n+ rules:\n+ no-console: error\n",
        "org_msg": "Enforce no-console in serverjs and routes.",
        "sim_msg": "update formatter for eslint-loader in webpack\neslint v6",
        "sim_diff": "diff --git a/webpack.config.js b/webpack.config.js @@ -148,6 +148,7 @@ module.exports = ( env, argv ) => {\nloader: 'eslint-loader',\noptions: {\nfailOnError: true,\n+ formatter: require( 'eslint' ).CLIEngine.getFormatter( 'stylish' ),\n},\n},\n],\n@@ -223,6 +224,7 @@ module.exports = ( env, argv ) => {\nloader: 'eslint-loader',\noptions: {\nfailOnError: true,\n+ formatter: require( 'eslint' ).CLIEngine.getFormatter( 'stylish' ),\n},\n},\n],\n",
        "chatgpt_cot": "Update eslint configuration to include prettier error, adjust file patterns for no-restricted-imports, and set no-console rule for specific files."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2271,9 +2271,9 @@ router.get('/deck/:id', function(req, res) {\nif (!card[0].cardID && !carddb.cardFromId(card[0].cardID).error) {\nconsole.log(req.params.id + \": Could not find seat \" + (bot_decks.length + 1) + \", pick \" + (bot_deck.length + 1));\n} else {\n- card.details = carddb.cardFromId(card[0].cardID);\n- card.details.display_image = util.getCardImageURL(card);\n- bot_deck.push(card.details);\n+ var details = carddb.cardFromId(card[0].cardID);\n+ details.display_image = util.getCardImageURL({details});\n+ bot_deck.push(details);\n}\n});\nbot_decks.push(bot_deck);\n@@ -2316,7 +2316,7 @@ router.get('/deck/:id', function(req, res) {\nconsole.log(req.params.id + \": Could not find seat \" + (bot_decks.length + 1) + \", pick \" + (bot_deck.length + 1));\n} else {\nvar details = carddb.cardFromId(cardid);\n- details.display_image = util.getCardImageURL(card);\n+ details.display_image = util.getCardImageURL({details});\nbot_deck.push(details);\n}\n});\n",
        "org_msg": "Fix card backs",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Refactor card details handling to fix image display issue in cube_routes.js file. Updated card details and image URL handling for bot decks."
    },
    {
        "org_diff": "diff --git a/src/components/MagicMarkdown.js b/src/components/MagicMarkdown.js @@ -84,19 +84,20 @@ const InnerMarkdown = ({ markdown }) => {\nif (section.startsWith('[[!/')) {\nconst card = section.substring(4, section.length - 2);\nconst id = card.includes('|') ? card.split('|')[1] : card;\n+ const idURL = encodeURIComponent(id);\nreturn (\n<Col xs=\"6\" md=\"4\" lg=\"3\">\n<a\nkey={/* eslint-disable-line react/no-array-index-key */ `card.cardID-${position}`}\n- href={`/tool/card/${id}`}\n+ href={`/tool/card/${idURL}`}\ntarget=\"_blank\"\nrel=\"noopener noreferrer\"\n>\n<FoilCardImage\nautocard\ncard={{\n- details: { image_normal: `/tool/cardimage/${id}`, image_flip: `/tool/cardimageflip/${id}` },\n+ details: { image_normal: `/tool/cardimage/${idURL}`, image_flip: `/tool/cardimageflip/${idURL}` },\n}}\nclassName=\"clickable\"\n/>\n@@ -107,17 +108,19 @@ const InnerMarkdown = ({ markdown }) => {\nif (section.startsWith('[[!')) {\nconst card = section.substring(3, section.length - 2);\nconst id = card.includes('|') ? card.split('|')[1] : card;\n+ const idURL = encodeURIComponent(id);\n+\nreturn (\n<Col xs=\"6\" md=\"4\" lg=\"3\">\n<a\nkey={/* eslint-disable-line react/no-array-index-key */ `card.cardID-${position}`}\n- href={`/tool/card/${id}`}\n+ href={`/tool/card/${idURL}`}\ntarget=\"_blank\"\nrel=\"noopener noreferrer\"\n>\n<FoilCardImage\nautocard\n- card={{ details: { image_normal: `/tool/cardimage/${id}` } }}\n+ card={{ details: { image_normal: `/tool/cardimage/${idURL}` } }}\nclassName=\"clickable\"\n/>\n</a>\n@@ -128,12 +131,15 @@ const InnerMarkdown = ({ markdown }) => {\nconst card = section.substring(3, section.length - 2);\nconst name = card.includes('|') ? card.split('|')[0] : card;\nconst id = card.includes('|') ? card.split('|')[1] : card;\n+ const idURL = encodeURIComponent(id);\nreturn (\n<AutocardLink\nkey={/* eslint-disable-line react/no-array-index-key */ `${position}-card.cardID`}\n- href={`/tool/card/${id}`}\n- card={{ details: { image_normal: `/tool/cardimage/${id}`, image_flip: `/tool/cardimageflip/${id}` } }}\n+ href={`/tool/card/${idURL}`}\n+ card={{\n+ details: { image_normal: `/tool/cardimage/${idURL}`, image_flip: `/tool/cardimageflip/${idURL}` },\n+ }}\ntarget=\"_blank\"\nrel=\"noopener noreferrer\"\n>\n@@ -145,12 +151,13 @@ const InnerMarkdown = ({ markdown }) => {\nconst card = section.substring(2, section.length - 2);\nconst name = card.includes('|') ? card.split('|')[0] : card;\nconst id = card.includes('|') ? card.split('|')[1] : card;\n+ const idURL = encodeURIComponent(id);\nreturn (\n<AutocardLink\nkey={/* eslint-disable-line react/no-array-index-key */ `${position}-card.cardID`}\n- href={`/tool/card/${id}`}\n- card={{ details: { image_normal: `/tool/cardimage/${id}` } }}\n+ href={`/tool/card/${idURL}`}\n+ card={{ details: { image_normal: `/tool/cardimage/${idURL}` } }}\ntarget=\"_blank\"\nrel=\"noopener noreferrer\"\n>\n",
        "org_msg": "Escaped cardnames in markdown URLs",
        "sim_msg": "[Card] disabled opening a picture when clicking on a card",
        "sim_diff": "diff --git a/website/client/components/ComponentCard.js b/website/client/components/ComponentCard.js @@ -2,7 +2,7 @@ import React from 'react';\nimport styled from 'styled-components';\nimport { Text } from '@semcore/typography';\n-const Card = styled.a`\n+const Card = styled.div`\ndisplay: flex;\nflex-direction: column;\npadding: 16px;\n@@ -33,7 +33,13 @@ const Title = styled(Text)`\nfunction ComponentCard({ image, text, disabled, href, type }) {\ntry {\nreturn (\n- <Card disabled={disabled} href={href}>\n+ <Card\n+ disabled={disabled}\n+ onClick={function(e) {\n+ e.preventDefault();\n+ location.href = href;\n+ }}\n+ >\n<img src={require(`../static/${type}/${image}.svg`).default} alt=\"image\" />\n<Title>{text}</Title>\n</Card>\n",
        "chatgpt_cot": "Update card image URLs to use encoded IDs in MagicMarkdown.js. Improve security and consistency by encoding IDs for card images in URLs."
    },
    {
        "org_diff": "diff --git a/src/components/DraftbotBreakdown.js b/src/components/DraftbotBreakdown.js @@ -63,7 +63,7 @@ export const getPackAsSeen = (initialState, index, deck, seatIndex) => {\nlet ind = 0;\nlet added = 0;\nfor (const list of initialState[0]) {\n- picksList.push(seat.pickorder.slice(added, added + list.length));\n+ picksList.push(seat.pickorder.slice(added, added + list.length).map((c) => ({ ...c })));\nadded += list.length;\n}\nfor (const list of picksList) {\n",
        "org_msg": "Fix calculating synergy in Draftbot Analysis.",
        "sim_msg": "Use settings-layout on Drafts page",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -8,7 +8,6 @@ import { reload } from '../../auth/authActions';\nimport { getDraftPosts, getPendingDrafts, getIsReloading } from '../../reducers';\nimport Affix from '../../components/Utils/Affix';\nimport LeftSidebar from '../../app/Sidebar/LeftSidebar';\n-import RightSidebar from '../../app/Sidebar/RightSidebar';\nimport DraftRow from './DraftRow';\n@connect(\n@@ -44,17 +43,12 @@ class Drafts extends React.Component {\nreturn (\n<div className=\"shifted\">\n- <div className=\"feed-layout container\">\n+ <div className=\"settings-layout container\">\n<Affix className=\"leftContainer\" stickPosition={77}>\n<div className=\"left\">\n<LeftSidebar />\n</div>\n</Affix>\n- <Affix className=\"rightContainer\" stickPosition={77}>\n- <div className=\"right\">\n- <RightSidebar />\n- </div>\n- </Affix>\n<div className=\"center\">\n<h1>\n<FormattedMessage id=\"drafts\" defaultMessage=\"Drafts\" />\n",
        "chatgpt_cot": "\"Fix issue with pickorder slice in DraftbotBreakdown.js\""
    },
    {
        "org_diff": "diff --git a/src/pages/CardPage.js b/src/pages/CardPage.js @@ -192,7 +192,7 @@ const CardIdBadge = ({ id }) => {\n<InputGroupAddon addonType=\"prepend\">\n<InputGroupText>Card ID</InputGroupText>\n</InputGroupAddon>\n- <Input id=\"card-id\" className=\"bg-white\" value={id} disabled />\n+ <Input className=\"bg-white\" value={id} disabled />\n<InputGroupAddon addonType=\"append\" style={{ width: 'auto' }}>\n<Button className=\"btn-sm\" onClick={onCopyClick}>\n{copied ? <CheckIcon size={16} /> : <ClippyIcon size={16} />}\n",
        "org_msg": "removed id from input",
        "sim_msg": "Update 'card not found' page",
        "sim_diff": "diff --git a/packages/component-library/src/CardDetail/CardDetailPage.js b/packages/component-library/src/CardDetail/CardDetailPage.js @@ -17,11 +17,11 @@ const CardDetailPage = ({ params, CardRegistry }) => {\nreturn (\n<PageLayout>\n+ <section>\n<h1>Card not found</h1>\n- <p>\n- The card you are looking for doesn&apos;t exist.\n- <Link to=\"/cities/portland\">View the Portland Collection</Link>\n- </p>\n+ <p>The card you are looking for doesn&apos;t exist.</p>\n+ <Link to=\"/cards\">Other cards</Link>\n+ </section>\n</PageLayout>\n);\n};\n",
        "chatgpt_cot": "Remove redundant id attribute from Input element in CardPage.js."
    },
    {
        "org_diff": "diff --git a/src/cube_analysis.js b/src/cube_analysis.js @@ -7,6 +7,7 @@ import Hash from './util/Hash';\nimport CurveAnalysis from './components/CurveAnalysis';\nimport DynamicFlash from './components/DynamicFlash';\n+import ErrorBoundary from './components/ErrorBoundary';\nimport MulticoloredAnalysis from './components/MulticoloredAnalysis';\nimport TypeAnalysis from './components/TypeAnalysis';\nimport TokenAnalysis from './components/TokenAnalysis';\n@@ -31,7 +32,6 @@ class CubeAnalysis extends Component {\nrender() {\nconst { curve, typeByColor, multicoloredCounts, tokens } = this.props;\n- console.log(tokens);\nconst active = this.state.nav;\nlet navItem = (nav, text) => (\n<NavLink active={active === nav} onClick={this.select.bind(this, nav)} href=\"#\">\n@@ -50,12 +50,14 @@ class CubeAnalysis extends Component {\n</Nav>\n</Col>\n<Col xs=\"12\" lg=\"10\">\n+ <ErrorBoundary>\n{{\ncurve: <CurveAnalysis curve={curve} />,\ntype: <TypeAnalysis typeByColor={typeByColor} />,\nmulti: <MulticoloredAnalysis multicoloredCounts={multicoloredCounts} />,\ntokens: <TokenAnalysis tokens={tokens} />,\n}[active]}\n+ </ErrorBoundary>\n</Col>\n</Row>\n</>;\n@@ -70,4 +72,3 @@ const tokens = JSON.parse(document.getElementById('generatedTokensData').value);\nconst wrapper = document.getElementById('react-root');\nconst element = <CubeAnalysis curve={curve} typeByColor={typeByColor} multicoloredCounts={multicoloredCounts} tokens={tokens} />;\nwrapper ? ReactDOM.render(element, wrapper) : false;\n-\n",
        "org_msg": "Add error boundary and remove console.log.",
        "sim_msg": "test(dom-to-react): tidy tests and add case for single node replace\nThis gets coverage to 100%.",
        "sim_diff": "diff --git a/test/dom-to-react.js b/test/dom-to-react.js const assert = require('assert');\nconst React = require('react');\n-const Preact = require('preact');\nconst htmlToDOM = require('html-dom-parser');\nconst domToReact = require('../lib/dom-to-react');\nconst { data, render } = require('./helpers/');\n@@ -122,7 +121,7 @@ describe('dom-to-react', () => {\n]);\n});\n- it(\"handles svg's with a viewBox\", () => {\n+ it('converts SVG element with viewBox attribute', () => {\nconst html = data.svg.simple;\nconst reactElement = domToReact(\nhtmlToDOM(html, { lowerCaseAttributeNames: false })\n@@ -151,14 +150,27 @@ describe('dom-to-react', () => {\n);\n});\n- it('handles using a custom component library', () => {\n+ describe('library', () => {\n+ const Preact = require('preact');\n+\n+ it('converts with Preact instead of React', () => {\nconst html = data.html.single;\nconst preactElement = domToReact(htmlToDOM(html), { library: Preact });\nassert.deepEqual(preactElement, Preact.createElement('p', {}, 'foo'));\n});\n+ });\n- it('does not modify keys for replacement if it has one', () => {\n+ describe('replace', () => {\n+ it(\"does not set key if there's 1 node\", () => {\n+ const replaceElement = React.createElement('p');\n+ const reactElement = domToReact(htmlToDOM(data.html.single), {\n+ replace: () => replaceElement\n+ });\n+ assert.deepEqual(reactElement, replaceElement);\n+ });\n+\n+ it(\"does not modify keys if it's already set\", () => {\nconst html = [data.html.single, data.html.customElement].join('');\nconst reactElements = domToReact(htmlToDOM(html), {\n@@ -193,6 +205,7 @@ describe('dom-to-react', () => {\n)\n]);\n});\n+ });\ndescribe('when React <16', () => {\nconst { PRESERVE_CUSTOM_ATTRIBUTES } = utilities;\n",
        "chatgpt_cot": "Add ErrorBoundary component to handle errors in CubeAnalysis rendering and fix console log statement in CubeAnalysis render method."
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -343,8 +343,8 @@ router.post(\nconst attempt = { email, username };\n- if (req.validated) {\n- res.render('user/passwordreset', {\n+ if (!req.validated) {\n+ res.render('user/register', {\nattempt,\nuser: null,\n});\n",
        "org_msg": "Correctly handle registration requests.",
        "sim_msg": "routes/authentication.js linting complete",
        "sim_diff": "diff --git a/routes/authentication.js b/routes/authentication.js @@ -28,8 +28,9 @@ var login = function (req, res, next) {\n})(req, res, next);\n};\n+// eslint-disable-next-line no-unused-vars\nvar addUser = function (req, res, next) {\n- currentUser = authentication.getCurrentUser();\n+ var currentUser = authentication.getCurrentUser();\nif (currentUser && currentUser.isAdmin) {\nif (\nreq.params.user === undefined ||\n@@ -74,8 +75,9 @@ var logout = function (req, res, next) {\nreturn;\n};\n+// eslint-disable-next-line no-unused-vars\nvar getUsers = function (req, res, next) {\n- currentUser = authentication.getCurrentUser();\n+ var currentUser = authentication.getCurrentUser();\nif (currentUser && currentUser.isAdmin) {\n// if admin\nauthentication.getUsers(function (err, users) {\n@@ -95,8 +97,9 @@ var getUsers = function (req, res, next) {\n}\n};\n+// eslint-disable-next-line no-unused-vars\nvar getUser = function (req, res, next) {\n- currentUser = authentication.getCurrentUser();\n+ var currentUser = authentication.getCurrentUser();\nif (\ncurrentUser &&\n(currentUser.username == req.params.id || currentUser.isAdmin)\n@@ -120,8 +123,9 @@ var getUser = function (req, res, next) {\n}\n};\n+// eslint-disable-next-line no-unused-vars\nvar getCurrentUser = function (req, res, next) {\n- currentUser = authentication.getCurrentUser();\n+ var currentUser = authentication.getCurrentUser();\nif (currentUser) {\n// if current user\nauthentication.getUser(currentUser.username, function (err, user) {\n@@ -141,8 +145,9 @@ var getCurrentUser = function (req, res, next) {\n}\n};\n+// eslint-disable-next-line no-unused-vars\nvar modifyUser = function (req, res, next) {\n- currentUser = authentication.getCurrentUser();\n+ var currentUser = authentication.getCurrentUser();\nif (!req.params.id) {\nres.send(200, { status: \"error\", message: \"no username provided\" });\nreturn;\n@@ -181,11 +186,13 @@ var modifyUser = function (req, res, next) {\n}\n};\n+// eslint-disable-next-line no-unused-vars\nvar deleteUser = function (req, res, next) {\n// if admin\n- currentUser = authentication.getCurrentUser();\n+ var currentUser = authentication.getCurrentUser();\nif (currentUser && currentUser.isAdmin) {\n// if admin\n+ // eslint-disable-next-line no-unused-vars\nauthentication.deleteUser(req.params.id, function (err, user) {\nif (err) {\nres.send(200, { status: \"error\", message: err });\n",
        "chatgpt_cot": "Fix rendering issue in user_routes when req.validated is false. Changed render template to 'user/register' instead of 'user/passwordreset'."
    },
    {
        "org_diff": "diff --git a/src/components/GroupModal.js b/src/components/GroupModal.js @@ -26,15 +26,12 @@ class GroupModal extends Component {\nstatus: '',\ncmc: '',\ntype_line: '',\n+ ...Object.fromEntries([...'WUBRGC'].map(c => [`color${c}`, false])),\naddTags: false,\ndeleteTags: false,\ntags: [],\n};\n- for (const color of [...'WUBRGC']) {\n- this.state[`color${color}`] = false;\n- }\n-\nthis.open = this.open.bind(this);\nthis.setCards = this.setCards.bind(this);\nthis.close = this.close.bind(this);\n@@ -59,6 +56,7 @@ class GroupModal extends Component {\nstatus: '',\ncmc: '',\ntype_line: '',\n+ ...Object.fromEntries([...'WUBRGC'].map(c => [`color${c}`, false])),\naddTags: false,\ndeleteTags: false,\ntags: [],\n",
        "org_msg": "Ensure color fields get cleared.",
        "sim_msg": "always set full obj for node group labels and anno",
        "sim_diff": "diff --git a/lib/shared/addon/components/node-group-row/component.js b/lib/shared/addon/components/node-group-row/component.js @@ -20,23 +20,11 @@ export default Component.extend({\nediting: equal('mode', 'edit'),\nactions: {\nsetTags(section) {\n- const { model: { tags = {} } } = this;\n-\n- for (let key in section) {\n- tags[key] = section[key];\n- }\n-\n- set(this, 'model.tags', tags);\n+ set(this, 'model.tags', section);\n},\nsetLabels(section) {\n- const { model: { labels = {} } } = this;\n-\n- for (let key in section) {\n- labels[key] = section[key];\n- }\n-\n- set(this, 'model.labels', labels);\n+ set(this, 'model.labels', section);\n},\n},\n",
        "chatgpt_cot": "\"Refactor GroupModal.js to initialize color properties using Object.fromEntries to improve code readability and maintainability.\""
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"prettier\": \"prettier --write {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js' webpack.'*'.js\",\n\"prettier-master\": \"prettier --write $(git diff master --name-only | grep -E '.js$')\",\n\"prettier-head\": \"prettier --write $(git diff HEAD --name-only | grep -E '.js$')\",\n- \"lint\": \"prettier --check {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js'\",\n+ \"lint\": \"prettier --check {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js' && eslint routes\",\n\"nodemon\": \"nodemon --ignore src --ignore public\",\n\"webpack-dev-server\": \"webpack-dev-server --config webpack.dev.js\",\n\"build\": \"webpack --mode production --config webpack.prod.js && rollup -c\",\n",
        "org_msg": "Add eslint routes to linter.",
        "sim_msg": "Do not lint layout.worker.bundled.js",
        "sim_diff": "diff --git a/package.json b/package.json \"prepare\": \"lerna run --stream --sort prepublishOnly\",\n\"prettier-comment\": \"https://github.com/yarnpkg/yarn/issues/6300\",\n\"prettier\":\n- \"./node_modules/prettier/bin-prettier.js --write '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n+ \"./node_modules/prettier/bin-prettier.js --write '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(layout.worker.bundled|react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n\"prettier-lint\":\n- \"./node_modules/prettier/bin-prettier.js --list-different '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n+ \"./node_modules/prettier/bin-prettier.js --list-different '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(layout.worker.bundled|react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n\"test\": \"lerna run test\",\n\"tsc-lint\": \"tsc\",\n\"tsc-lint-debug\": \"tsc --listFiles\",\n",
        "chatgpt_cot": "\"Update lint script to include eslint for routes and ignore src and public for nodemon\""
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -194,16 +194,20 @@ const botRatingAndCombination = (\n// all cards dealt out to players to see what the trends\n// for colors are. This is in value as well.\nconst overallCount = overallPool?.[combination.join('')] || 1;\n+ const overallCountWeight = numPacks - packNum + 1;\n// The ratio of seen to overall gives us an idea what is\n// being taken.\nconst openness = seenCount / overallCount;\n// Roughly the number of cards left that we expect to get from this pack.\nconst opennessWeight = (numPacks * inPack) / seats / packNum;\n// We weigh the factors with exponents to get a final score.\n- console.log(poolRating, openness, opennessWeight, internalSynergy, synergy, synergyWeight);\nconst rating =\n- scaling * poolRating ** 3 * openness ** opennessWeight * internalSynergy ** 2 * synergy ** synergyWeight;\n- console.log('rating', rating, 'colors', combination);\n+ scaling *\n+ poolRating ** 3 *\n+ openness ** opennessWeight *\n+ internalSynergy ** 2 *\n+ overallCount ** overallCountWeight *\n+ synergy ** synergyWeight;\nif (rating > bestRating) {\nbestRating = rating;\nbestCombination = combination;\n",
        "org_msg": "Consider total count in bot choices.",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "\"Add overallCountWeight variable and update rating calculation with overallCountWeight to improve card evaluation in Draft.js\""
    },
    {
        "org_diff": "diff --git a/src/components/DraggableCard.js b/src/components/DraggableCard.js @@ -30,12 +30,9 @@ const DraggableCard = ({ card, location, canDrop, onMoveCard, width, height, cla\nimage.src = card.imgUrl || card.details.image_normal;\ndiv.appendChild(image);\nimage.onload = () => {\n- console.log('loaded');\nif (imageRef.current) {\n- console.log('setting', imageRef.current.clientWidth);\ndiv.style.width = imageRef.current.clientWidth;\ndiv.style.height = 'auto';\n- console.log('result', image.width);\n}\ndiv.style.borderRadius = '4% / 2.858%';\ndiv.style.opacity = '0.8';\n",
        "org_msg": "Remove log statements.",
        "sim_msg": "added numberoflines to eventcard",
        "sim_diff": "diff --git a/src/components/EventCard.js b/src/components/EventCard.js @@ -58,7 +58,7 @@ const EventCard = ({\n{timeDisplay}\n</Text>\n<View style={styles.eventNameContainer}>\n- <Text type=\"h3\" style={styles.eventName}>\n+ <Text type=\"h3\" style={styles.eventName} numberOfLines={2}>\n{name}\n</Text>\n</View>\n",
        "chatgpt_cot": "\"Remove unnecessary console logs and set image dimensions dynamically in DraggableCard component\""
    },
    {
        "org_diff": "diff --git a/src/utils/draftbots.js b/src/utils/draftbots.js @@ -94,9 +94,21 @@ export const getSynergy = (combination, card, picked, synergies) => {\n}\nlet synergy = 0;\n+ let internalSynergy = 0;\nif (synergies) {\nconst pickedInCombo = picked.cards.filter((card2) => considerInCombination(combination, card2));\n+ let count = 0;\n+ for (let i = 1; i < pickedInCombo.length; i++) {\n+ for (let j = 0; j < i; j++) {\n+ internalSynergy += similarity(synergies[pickedInCombo[i].index], synergies[pickedInCombo[j].index]) ** 5;\n+ count += 1;\n+ }\n+ }\n+ if (count) {\n+ internalSynergy /= count;\n+ }\n+\nif (card) {\nfor (const { index } of pickedInCombo) {\nsynergy += similarity(synergies[index], synergies[card.index]) ** 5;\n@@ -106,7 +118,7 @@ export const getSynergy = (combination, card, picked, synergies) => {\n}\n}\n}\n- return Math.max(0, synergy * 10);\n+ return Math.max(0, (synergy + internalSynergy) * 10);\n};\nexport const getOpenness = (combination, seen) => {\n",
        "org_msg": "add back internal synergy",
        "sim_msg": "Changed to Me/My Opponent.",
        "sim_diff": "diff --git a/server/game/cards/02.4-TCT/BackhandedCompliment.js b/server/game/cards/02.4-TCT/BackhandedCompliment.js @@ -3,18 +3,24 @@ const DrawCard = require('../../drawcard.js');\nclass BackhandedCompliment extends DrawCard {\nsetupCardAbilities() {\n+ let choices = {\n+ \"Me\": () => true\n+ }\n+ if(this.controller.opponent) {\n+ choices[\"My Opponent\"] = () => true;\n+ }\nthis.action({\ntitle: 'Select a player to lose an honor and draw a card',\ntarget: {\nplayer: 'self',\nmode: 'select',\n- choices: _.extend({}, ..._.map(this.game.getPlayers(), player => ({[player.name]: () => true})))\n+ choices: choices\n},\nhandler: context => {\n- let player = this.game.getPlayerByName(context.select);\n+ let player = context.select === \"Me\" ? this.controller : this.controller.opponent;\nthis.game.addHonor(player, -1);\nplayer.drawCardsToHand(1);\n- if(player.name === this.controller.name) {\n+ if(context.select === \"Me\") {\nthis.game.addMessage('{0} uses {1} to lose an honor and draw a card', this.controller, this);\n} else {\nthis.game.addMessage('{0} uses {1} to make {2} lose an honor and draw a card', this.controller, this, player);\n",
        "chatgpt_cot": "Add internal synergy calculation to getSynergy function for better card evaluation in draftbots."
    },
    {
        "org_diff": "diff --git a/src/utils/draftutil.js b/src/utils/draftutil.js @@ -241,6 +241,10 @@ function createPacks(draft, format, seats, nextCardFn) {\n// NOTE: format is an array with extra attributes, see getDraftFormat()\nexport function createDraft(format, cards, bots, seats, user, seed = false) {\n+ if (!seed) {\n+ seed = Date.now().toString();\n+ }\n+\nconst draft = {};\nlet nextCardFn = null;\n",
        "org_msg": "Fixed seed issue",
        "sim_msg": "Add support for parsing review comments.",
        "sim_diff": "diff --git a/src/modules/fileformats/ugf.js b/src/modules/fileformats/ugf.js import {readFileSync} from 'fs'\nimport {decode} from 'iconv-lite'\nimport {detect} from 'jschardet'\n-import {fromDimensions} from '@sabaki/go-board'\nimport i18n from '../../i18n.js'\nimport * as gametree from '../gametree.js'\n@@ -25,7 +24,7 @@ export function parse(content) {\nlet lines = content.split('\\n')\nlet rootId = draft.root.id\nlet lastNodeId = rootId\n- let nodeMap = {}\n+ let nodeMap = {'0': rootId}\ndraft.updateProperty(rootId, 'CA', ['UTF-8'])\ndraft.updateProperty(rootId, 'FF', ['4'])\n@@ -104,14 +103,19 @@ export function parse(content) {\nbreak\ncase 'ReviewComment':\nif (line.startsWith('.Comment')) {\n- let commentNodeId = line.split(',')[1]\n- while (n < lines.length && !lines[n + 1].startsWith('.Comment')) {\n+ let commentNodeId = (parseInt(line.split(',')[1]) - 1).toString()\n+ while (\n+ n + 1 < lines.length &&\n+ !lines[n + 1].startsWith('.Comment')\n+ ) {\nn += 1\n- draft.updateProperty(\n- nodeMap[commentNodeId],\n- 'C',\n- draft.get(nodeMap[commentId]) + lines[n].trim()\n- )\n+ if (commentNodeId in nodeMap) {\n+ draft.updateProperty(nodeMap[commentNodeId], 'C', [\n+ (draft.get(nodeMap[commentNodeId]).data.C || '') +\n+ lines[n].trim() +\n+ '\\n'\n+ ])\n+ }\n}\n}\nbreak\n",
        "chatgpt_cot": "\"Add seed generation if not provided in createDraft function\""
    },
    {
        "org_diff": "diff --git a/nearley/cardFilters.ne b/nearley/cardFilters.ne @@ -112,7 +112,7 @@ typeCondition -> (\"t\"i | \"type\"i | \"type_line\"i | \"typeline\"i) stringContainOpV\noracleCondition -> (\"o\"i | \"oracle\"i | \"text\"i) nameStringOpValue {% ([, valuePred]) => genericCondition('oracle_text', cardOracleText, valuePred) %}\n-setCondition -> (\"s\"i | \"set\"i) alphaNumericOpValue {% ([, valuePred]) => genericCondition('set', cardSet, valuePred) %}\n+setCondition -> (\"s\"i | \"set\"i | \"e\"i | \"edition\"i) alphaNumericOpValue {% ([, valuePred]) => genericCondition('set', cardSet, valuePred) %}\npowerCondition -> (\"pow\"i | \"power\"i) halfIntOpValue {% ([, valuePred]) => genericCondition('power', (c) => parseFloat(cardPower(c), 10), valuePred) %}\n",
        "org_msg": "added 'e' alias",
        "sim_msg": "Stop filter from matching invisible properties\nReimplements",
        "sim_diff": "diff --git a/src/plugins/local/selectors/localSelectors.js b/src/plugins/local/selectors/localSelectors.js @@ -46,11 +46,23 @@ const substringSearch = (value, filter) => {\nreturn value && value.toString().toLowerCase().indexOf(filterToLower) > -1;\n};\n+const filterable = (columnProperties, key) => {\n+ if (key === 'griddleKey') {\n+ return false;\n+ }\n+ if (columnProperties) {\n+ if (columnProperties.get(key) === undefined ||\n+ columnProperties.getIn([key, 'filterable']) === false) {\n+ return false;\n+ }\n+ }\n+ return true;\n+};\n+\nconst textFilterRowSearch = (columnProperties, filter) => (row) => {\nreturn row.keySeq()\n.some((key) => {\n- const filterable = columnProperties && columnProperties.getIn([key, 'filterable']);\n- if (filterable === false) {\n+ if (!filterable(columnProperties, key)) {\nreturn false;\n}\nreturn substringSearch(row.get(key), filter);\n@@ -59,8 +71,7 @@ const textFilterRowSearch = (columnProperties, filter) => (row) => {\nconst objectFilterRowSearch = (columnProperties, filter) => (row, i, data) => {\nreturn row.keySeq().every((key) => {\n- const filterable = columnProperties && columnProperties.getIn([key, 'filterable']);\n- if (filterable === false) {\n+ if (!filterable(columnProperties, key)) {\nreturn true;\n}\nconst keyFilter = filter.get(key);\n",
        "chatgpt_cot": "Add support for additional aliases for setCondition in cardFilters.ne file."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1076,7 +1076,7 @@ function bulkUpload(req, res, list, cube) {\nlet set = item.toLowerCase().substring(item.indexOf('(') + 1, item.indexOf(')'))\n//if we've found a match, and it DOES need to be parsed with cubecobra syntax\nlet potentialIds = carddb.nameToId[name];\n- selected = potentialIds.find(id => carddb.carddict[id].set.toUpperCase() == card.set);\n+ selected = potentialIds.find(id => carddb.carddict[id].set.toUpperCase() == set);\n}\n} else {\n//does not have set info\n",
        "org_msg": "Fix bulk import bug.",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "\"Update bulkUpload function to correctly compare card set information for potentialIds, fixing issue with parsing cubecobra syntax.\""
    },
    {
        "org_diff": "diff --git a/src/components/VisualSpoiler.js b/src/components/VisualSpoiler.js @@ -11,8 +11,8 @@ import CardGrid from 'components/CardGrid';\nconst VisualSpoiler = ({ cards }) => {\nconst [scale, setScale] = useState('medium');\n- const { primary, secondary, tertiary } = useContext(SortContext);\n- const sorted = sortDeep(cards, primary, secondary, tertiary);\n+ const { primary, secondary } = useContext(SortContext);\n+ const sorted = sortDeep(cards, primary, secondary, 'CMC-Full');\nconst cardList = sorted\n.map((tuple1) => tuple1[1].map((tuple2) => tuple2[1].map((tuple3) => tuple3[1].map((card) => card))))\n.flat(4);\n",
        "org_msg": "Make visual spoiler use cmc full",
        "sim_msg": "Card renderer cleanup",
        "sim_diff": "diff --git a/card-renderer.js b/card-renderer.js @@ -61,7 +61,7 @@ const _getCanvasDataUrl = async canvas => {\nreturn url;\n};\n-const _previewImage = (image, width, height) => {\n+/* const _previewImage = (image, width, height) => {\nimage.style.cssText = `\\\nposition: fixed;\ntop: 0;\n@@ -71,7 +71,7 @@ const _previewImage = (image, width, height) => {\n`;\n// console.log('got image', image);\ndocument.body.appendChild(image);\n-};\n+}; */\nexport const generateObjectUrlCard = async ({\nstart_url,\n",
        "chatgpt_cot": "Refactor VisualSpoiler component to remove tertiary sort option and add 'CMC-Full' as default sort parameter, improving readability and functionality."
    },
    {
        "org_diff": "diff --git a/src/analytics/HyperGeom.js b/src/analytics/HyperGeom.js @@ -258,6 +258,10 @@ const HyperGeom = () => {\n<h4 className=\"d-lg-block d-none\">Hypergeometric Calculator</h4>\n<p>\nThis Hypergeometric Calculator makes it easy to compute individual and cumulative hypergeometric probabilities.\n+ This can be useful to determine the probabilty to have a minimum amount of a certain type of card (e.g.\n+ cantrips) in a draft pool given the amount of those cards in the cube overall. Another use case is to calculate\n+ the probabilty of having cards of a certain type (e.g. aggro one-drops) in an opening hand of a deck, given the\n+ amount of those cards in the deck.\n</p>\n<p>\nView information on how to use this tool{' '}\n@@ -270,28 +274,28 @@ const HyperGeom = () => {\n<TextField\nname=\"1\"\nhumanName=\"Population size\"\n- placeholder=\"\"\n+ placeholder=\"e.g. the size of the cube\"\nvalue={populationSize}\nonChange={(event) => setPopulationSize(event.target.value)}\n/>\n<TextField\nname=\"2\"\nhumanName=\"Number of successes in population\"\n- placeholder=\"\"\n+ placeholder=\"e.g. the amount of cards of a certain type in the cube\"\nvalue={popSuccesses}\nonChange={(event) => setPopSuccesses(event.target.value, 10)}\n/>\n<TextField\nname=\"2\"\nhumanName=\"Sample size\"\n- placeholder=\"\"\n+ placeholder=\"e.g. the amount of cards in the draft pod\"\nvalue={sampleSize}\nonChange={(event) => setSampleSize(event.target.value, 10)}\n/>\n<TextField\nname=\"2\"\nhumanName=\"Number of successes in sample (x)\"\n- placeholder=\"\"\n+ placeholder=\"e.g. the amount of cards in the draft pod that should be of the type\"\nvalue={sampleSuccesses}\nonChange={(event) => setSampleSuccesses(event.target.value, 10)}\n/>\n",
        "org_msg": "added explanatory text to the hypergeom analysis",
        "sim_msg": "Consumed By Five Fires",
        "sim_diff": "diff --git a/server/game/cards/02.5-FHNS/ConsumedByFiveFires.js b/server/game/cards/02.5-FHNS/ConsumedByFiveFires.js +const _ = require('underscore');\nconst DrawCard = require('../../drawcard.js');\nclass ConsumedByFiveFires extends DrawCard {\n- setupCardAbilities(ability) { // eslint-disable-line no-unused-vars\n+ setupCardAbilities() {\n+ this.action({\n+ title: 'Remove up to 5 fate from characters',\n+ condition: () => this.controller.cardsInPlay.any(card => card.hasTrait('shugenja')) && this.controller.opponent &&\n+ this.controller.opponent.cardsInPlay.any(card => card.fate > 0),\n+ methods: ['consumedByFiveFiresChooseCard'],\n+ handler: () => {\n+ this.game.addMessage('{0} plays {1}', this.controller, this);\n+ this.consumedByFiveFiresChooseCard({}, []);\n}\n+ })\n}\n-ConsumedByFiveFires.id = 'consumed-by-five-fires'; // This is a guess at what the id might be - please check it!!!\n+ consumedByFiveFiresChooseCard(targets, messages) {\n+ let fateRemaining = 5 - _.reduce(targets, (totalFate, fateToRemove) => totalFate + fateToRemove);\n+ if(fateRemaining === 0 || !this.controller.opponent.cardsInPlay.any(card => card.fate > 0 && !_.keys(targets).includes(card.uuid))) {\n+ this.game.addMessage('{0} chooses to: {1}', this.controller, messages);\n+ let events = _.map(targets, (fate, uuid) => {\n+ let card = this.controller.opponent.findCardInPlayByUuid(uuid);\n+ if(card) {\n+ return {\n+ name: 'onCardRemoveFate',\n+ params: { card: card, fate: fate }\n+ };\n+ }\n+ });\n+ this.game.raiseMultipleEvents(_.compact(events));\n+ }\n+ this.game.promptForSelect(this.controller, {\n+ source: this,\n+ cardType: 'character',\n+ cardCondition: card => card.location === 'play area' && card.fate > 0 && card.controller !== this.controller && !_.keys(targets).includes(card.uuid),\n+ onSelect: (player, card) => {\n+ let choices = _.range(1, Math.min(fateRemaining, card.fate) + 1);\n+ let handlers = _.map(choices, choice => {\n+ return () => {\n+ targets[card.uuid] = choice;\n+ messages.push('take ' + choice.toString() + ' fate from ' + card.name);\n+ this.consumedByFiveFiresChooseCard(targets, messages);\n+ };\n+ });\n+ choices.push('Redo');\n+ handlers.push(() => {\n+ this.consumedByFiveFiresChooseCard({}, []);\n+ });\n+ this.game.promptWithHandlerMenu(player, {\n+ activePromptTitle: 'How much fate do you want to remove?',\n+ choices: choices,\n+ handlers: handlers,\n+ source: this\n+ });\n+ return true;\n+ },\n+ onCancel: () => {\n+ this.game.addMessage('{0} chooses to: {1}', this.controller, messages);\n+ let events = _.map(targets, (fate, uuid) => {\n+ let card = this.controller.opponent.findCardInPlayByUuid(uuid);\n+ if(card) {\n+ return {\n+ name: 'onCardRemoveFate',\n+ card: card,\n+ fate: fate\n+ };\n+ }\n+ });\n+ this.game.raiseMultipleEvents(_.compact(events));\n+ return true;\n+ }\n+ });\n+ }\n+}\n+\n+ConsumedByFiveFires.id = 'consumed-by-five-fires';\nmodule.exports = ConsumedByFiveFires;\n",
        "chatgpt_cot": "Add detailed explanations for the Hypergeometric Calculator to improve usability and provide examples for different use cases. Improve placeholder text for input fields."
    },
    {
        "org_diff": "diff --git a/__tests__/src/components/CubeListPage.test.js b/__tests__/src/components/CubeListPage.test.js @@ -13,6 +13,19 @@ const element = () => (\nmocks={[\n{ matcher: '/cube/api/cardnames', response: { success: 'true' } },\n{ matcher: '/cube/api/cubecardnames/1', response: { success: 'true' } },\n+ { matcher: '/cube/api/getversions', response: {\n+ success: 'true',\n+ dict: Object.fromEntries(exampleCardsFull.map(card => [\n+ card.cardID,\n+ [{\n+ id: card.cardID,\n+ version: card.details.full_name\n+ .toUpperCase()\n+ .substring(card.details.full_name.indexOf('[') + 1, card.details.full_name.indexOf(']')),\n+ img: card.details.image_normal,\n+ }],\n+ ]))}\n+ },\n]}\n>\n<CubeListPage cards={exampleCardsFull} cubeID=\"1\" canEdit={true} maybe={exampleCardsFull} defaultTagColors={[]} defaultShowTagColors={true} defaultSorts={['Color Category', 'Types-Multicolor']} />;\n@@ -20,11 +33,24 @@ const element = () => (\n);\ntest('CubeListPage has major functionality', async () => {\n- const { findByPlaceholderText, findByText, getAllByText, getByDisplayValue, getByPlaceholderText, getByText } = render(element());\n+ const { findByAltText, findByPlaceholderText, findByDisplayValue, findByText, getAllByText, getByAltText, getByDisplayValue, getByPlaceholderText, getByText } = render(element());\nexpect(getByText(exampleCardsFull[0].details.name));\n- // TODO: These tests should be in their own files.\n+ // The tests in this file should be integration tests for the whole CubeListPage thing.\n+ // Test View\n+ const viewSelect = await findByDisplayValue('Table View');\n+ for (const view of ['table', 'list', 'curve']) {\n+ fireEvent.change(viewSelect, { target: { value: view } });\n+ expect(await findByText(exampleCardsFull[0].details.name));\n+ }\n+\n+ fireEvent.change(viewSelect, { target: { value: 'spoiler' } });\n+ expect(await findByAltText(exampleCardsFull[0].details.name));\n+\n+ fireEvent.change(viewSelect, { target: { value: 'table' } });\n+ await findByText(exampleCardsFull[0].details.name);\n+\n// Test Edit Collapse\nfireEvent.click(getByText('Add/Remove'));\nawait findByPlaceholderText('Card to Remove');\n@@ -34,7 +60,7 @@ test('CubeListPage has major functionality', async () => {\nexpect(getByPlaceholderText('Card to Remove')).toBeInTheDocument();\n- // Test Sort Collapse\n+ // Test Sort Collapse: can we change the sort?\nfireEvent.click(getByText('Sort'));\nawait findByText('Primary Sort');\nfireEvent.change(getByDisplayValue('Color Category'), { target: { value: 'Color Identity' } });\n",
        "org_msg": "Add view testing for CubeListPage.",
        "sim_msg": "[layouts] fix (cubeType): add tests for min/max cubeType",
        "sim_diff": "diff --git a/packages/layouts/test/layouter.spec.js b/packages/layouts/test/layouter.spec.js @@ -693,6 +693,40 @@ describe('Layouter', () => {\n});\n});\n+ it('should not find ratios under 1 when \"cubeType\" is \"max\"', () => {\n+ const items = getItems(100); //todo - something breaks when using exactly 100 images\n+ const ratio = 1;\n+ styleParams.cubeRatio = ratio;\n+ styleParams.cubeType = 'max';\n+ styleParams.cubeImages = true;\n+ styleParams.smartCrop = false;\n+ styleParams.isVertical = true;\n+\n+ gallery = getLayout({ items, container, styleParams });\n+ gallery.items.forEach((item, i) => {\n+ const { width, height } = item;\n+ const itemRatio = width / height;\n+ expect(ratio - itemRatio).to.be.below(0.1);\n+ }, true);\n+ });\n+\n+ it('should not find ratios above 1 when \"cubeType\" is \"min\"', () => {\n+ const items = getItems(100); //todo - something breaks when using exactly 100 images\n+ const ratio = 1;\n+ styleParams.cubeRatio = ratio;\n+ styleParams.cubeType = 'min';\n+ styleParams.cubeImages = true;\n+ styleParams.smartCrop = false;\n+ styleParams.isVertical = true;\n+\n+ gallery = getLayout({ items, container, styleParams });\n+ gallery.items.forEach((item, i) => {\n+ const { width, height } = item;\n+ const itemRatio = width / height;\n+ expect(itemRatio - ratio).to.be.below(0.1);\n+ }, true);\n+ });\n+\ndescribe('public methods', () => {\nit('findLastVisibleItemIdx should work', () => {\nconst items = getItems(100);\n",
        "chatgpt_cot": "\"Add integration tests for CubeListPage, fix compilation issue, and improve functionality by adding new API to get card versions.\""
    },
    {
        "org_diff": "diff --git a/README.md b/README.md @@ -18,6 +18,12 @@ MongoDB: https://docs.mongodb.com/manual/installation/\nYou will need to either start MongoDB background process, or manually start and stop the process in a separate console. Refer to the official documentation for directions on how to set this up for your OS.\n+Optionally, you can also run MongoDB using docker\n+\n+```sh\n+docker run --name cubecobra -p 27017:27017 -d mongo:4.2\n+```\n+\nVSCode (strongly recommended, but not required): https://code.visualstudio.com/\nESLint Extension for VSCode: https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\n",
        "org_msg": "Add a mention of using docker to run mongo for local development",
        "sim_msg": "Update to install mongo 3.4.10",
        "sim_diff": "diff --git a/src/deploy/NVA_build/deploy_base.sh b/src/deploy/NVA_build/deploy_base.sh @@ -215,11 +215,11 @@ function install_mongo {\n# install the needed RPM\nyum install -y \\\n- mongodb-org-3.4.4 \\\n- mongodb-org-server-3.4.4 \\\n- mongodb-org-shell-3.4.4 \\\n- mongodb-org-mongos-3.4.4 \\\n- mongodb-org-tools-3.4.4\n+ mongodb-org-3.4.10 \\\n+ mongodb-org-server-3.4.10 \\\n+ mongodb-org-shell-3.4.10 \\\n+ mongodb-org-mongos-3.4.10 \\\n+ mongodb-org-tools-3.4.10\n# pin mongo version in yum, so it won't auto update\necho \"exclude=mongodb-org,mongodb-org-server,mongodb-org-shell,mongodb-org-mongos,mongodb-org-tools\" >> /etc/yum.conf\n",
        "chatgpt_cot": "Add instructions for running MongoDB using Docker in README.md."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -458,8 +458,10 @@ router.get('/overview/:id', async (req, res) => {\npriceDict[tcgplayer_id],\npriceDict[tcgplayer_id + '_foil'],\n]);\n- const allPricesFlat = [].concat.apply([], allPrices).filter((p) => p && p > 0.001);\n- totalPricePurchase += Math.min(allPricesFlat) || 0;\n+ const allPricesFlat = [].concat(...allPrices).filter((p) => p && p > 0.001);\n+ if (allPricesFlat.length > 0) {\n+ totalPricePurchase += Math.min(...allPricesFlat) || 0;\n+ }\n}\nif (blogs) {\n",
        "org_msg": "Fix cost to buy price.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Refactor totalPricePurchase calculation in cube_routes.js to handle empty allPricesFlat array."
    },
    {
        "org_diff": "diff --git a/src/pages/DashboardPage.js b/src/pages/DashboardPage.js @@ -109,7 +109,7 @@ const DashboardPage = ({ posts, cubes, decks, user, loginCallback, content, feat\n</Row>\n<Row>\n<Col xs=\"12\" md=\"8\">\n- <h4 className=\"mt-4\">Feed</h4>\n+ <h5 className=\"mt-3\">Feed</h5>\n{posts.length > 0 ? (\nposts.map((post) => (\n<BlogPost key={post._id} post={post} canEdit={false} userid={user ? user.id : null} loggedIn />\n",
        "org_msg": "revert feed header change",
        "sim_msg": "(fix) dashboard unit g$ styles",
        "sim_diff": "diff --git a/src/components/dashboard/Dashboard.js b/src/components/dashboard/Dashboard.js @@ -156,7 +156,11 @@ const Dashboard = props => {\n<Section.Title>{fullName || ' '}</Section.Title>\n</Section.Row>\n<Section.Row justifyContent=\"center\" alignItems=\"baseline\">\n- <BigGoodDollar number={balance} />\n+ <BigGoodDollar\n+ bigNumberStyles={styles.bigNumberStyles}\n+ bigNumberUnitStyles={styles.bigNumberUnitStyles}\n+ number={balance}\n+ />\n</Section.Row>\n</>\n) : (\n@@ -165,7 +169,11 @@ const Dashboard = props => {\n<Avatar size={42} source={avatar} onPress={() => screenProps.push('Profile')} />\n</Section.Stack>\n<Section.Stack alignItems=\"flex-end\">\n- <BigGoodDollar number={balance} />\n+ <BigGoodDollar\n+ bigNumberStyles={styles.bigNumberStyles}\n+ bigNumberUnitStyles={styles.bigNumberUnitStyles}\n+ number={balance}\n+ />\n</Section.Stack>\n</Section.Row>\n)}\n@@ -238,6 +246,17 @@ const styles = StyleSheet.create({\njustifyContent: 'center',\npadding: 8,\nheight: '256px'\n+ },\n+ bigNumberStyles: {\n+ fontFamily: 'Roboto-Bold',\n+ fontSize: normalize(36),\n+ fontWeight: '700',\n+ marginRight: normalize(3)\n+ },\n+ bigNumberUnitStyles: {\n+ fontFamily: 'Roboto-Bold',\n+ fontSize: normalize(18),\n+ fontWeight: '700'\n}\n})\n",
        "chatgpt_cot": "Change heading level from h4 to h5 for better semantic structure and visual hierarchy in DashboardPage.js."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -130,7 +130,7 @@ const considerInCombination = (combination) => (card) =>\n// We want to discourage playing more colors so they get less\n// value the more colors, this gets offset by having more cards.\n-const COLOR_SCALING_FACTOR = [1, 1, 0.8, 0.6, 0.2, 0.15];\n+const COLOR_SCALING_FACTOR = [0.8, 1, 0.8, 0.56, 0.2, 0.15];\nconst botRatingAndCombination = (seen, card, picked, overallPool) => {\n// Find the color combination that gives us the highest score\n// that'll be the color combination we want to play currently.\n@@ -151,8 +151,8 @@ const botRatingAndCombination = (seen, card, picked, overallPool) => {\n// The ratio of seen to overall gives us an idea what is\n// being taken.\nconst openness = seenCount / overallCount;\n- // We equally weight the factors to get a final score.\n- const rating = poolRating * seenCount * openness * COLOR_SCALING_FACTOR[combination.length];\n+ // We weigh the factors with exponents to get a final score.\n+ const rating = poolRating ** 2 * seenCount * openness * COLOR_SCALING_FACTOR[combination.length];\nif (rating > bestRating) {\nbestRating = rating;\nbestCombination = combination;\n",
        "org_msg": "Tweak numbers some more.",
        "sim_msg": "Add addtional source to CardPile",
        "sim_diff": "diff --git a/client/GameComponents/CardPile.jsx b/client/GameComponents/CardPile.jsx @@ -255,7 +255,7 @@ CardPile.propTypes = {\npopupLocation: PropTypes.string,\npopupMenu: PropTypes.array,\nsize: PropTypes.string,\n- source: PropTypes.oneOf(['none', 'hand', 'conflict discard pile', 'dynasty discard pile', 'play area', 'conflict deck', 'dynasty deck', 'province deck', 'attachment', 'faction', 'stronghold province', 'province 1', 'province 2', 'province 3', 'province 4', 'additional']).isRequired,\n+ source: PropTypes.oneOf(['none', 'hand', 'conflict discard pile', 'dynasty discard pile', 'play area', 'conflict deck', 'dynasty deck', 'province deck', 'attachment', 'faction', 'stronghold province', 'role card', 'province 1', 'province 2', 'province 3', 'province 4', 'additional']).isRequired,\ntitle: PropTypes.string,\ntopCard: PropTypes.object\n};\n",
        "chatgpt_cot": "Refactor color scaling factor calculation in botRatingAndCombination to use exponents for weighting factors, improving score calculation accuracy."
    },
    {
        "org_diff": "diff --git a/routes/packages.js b/routes/packages.js @@ -134,7 +134,7 @@ router.post('/submit', ensureAuth, async (req, res) => {\n}\n// make distinct\n- pack.keywords = pack.keywords.filter((value, index, self) => self.indexOf(value));\n+ pack.keywords = pack.keywords.filter((value, index, self) => self.indexOf(value) === index);\nawait pack.save();\n",
        "org_msg": "package hotfix",
        "sim_msg": "add placeholder route for payment options",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -11,6 +11,7 @@ routes\n.add(\"product\", \"/product/:slugOrId/:variantId?\", \"product\")\n.add(\"profileAddressBook\", \"/profile/address\", \"profile\")\n.add(\"profileOrders\", \"/profile/orders\", \"profile\")\n+ .add(\"profilePaymentMethods\", \"/profile/payments\", \"profile\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"productGrid\")\n.add(\"tag\", \"/tag/:slug\", \"tag\");\n",
        "chatgpt_cot": "\"Fix duplicate keywords in package submission\""
    },
    {
        "org_diff": "diff --git a/src/components/DecksPickBreakdown.js b/src/components/DecksPickBreakdown.js -import React, { Component } from 'react';\n+import React, { useEffect, useRef, useState } from 'react';\nimport { Row, Col, ListGroup, ListGroupItem } from 'reactstrap';\n@@ -8,33 +8,30 @@ import FoilCardImage from 'components/FoilCardImage';\nimport { encodeName } from 'utils/Card';\nimport { getCardColorClass } from 'components/TagContext';\n-const AutocardItem = withAutocard(ListGroupItem);\n+import Query from 'utils/Query';\n-class DecksPickBreakdown extends Component {\n- constructor(props) {\n- super(props);\n+const AutocardItem = withAutocard(ListGroupItem);\n- this.click = this.click.bind(this);\n- this.setPickIndex = this.setPickIndex.bind(this);\n+const DecksPickBreakdown = ({ draft, seatIndex, deck, defaultIndex }) => {\n+ const [index, setIndex] = useState(defaultIndex ?? 0);\n+ const didMountRef1 = useRef(false);\n- this.state = {\n- index: 0,\n- };\n- }\n-\n- setPickIndex(index) {\n- this.setState({\n- index,\n- });\n+ useEffect(() => {\n+ if (didMountRef1.current) {\n+ Query.set('pick', index);\n+ } else {\n+ const queryIndex = Query.get('pick');\n+ if (queryIndex || queryIndex === 0) {\n+ setIndex(queryIndex);\n}\n-\n- click(event) {\n- this.setPickIndex(event.target.getAttribute('index'));\n+ didMountRef1.current = true;\n}\n+ return () => Query.del('pick');\n+ }, [index]);\n- render() {\n- const { index } = this.state;\n- const { draft, seatIndex, deck } = this.props;\n+ const click = (event) => {\n+ setIndex(event.target.getAttribute('index'));\n+ };\nconst seat = deck.seats[seatIndex];\nif (!draft) {\n@@ -97,7 +94,7 @@ class DecksPickBreakdown extends Component {\ncard={card}\nclassName={`card-list-item d-flex flex-row ${getCardColorClass(card)}`}\ndata-in-modal\n- onClick={this.click}\n+ onClick={click}\nindex={card.index}\n>\n{parseInt(card.index, 10) === parseInt(index, 10) ? (\n@@ -124,8 +121,7 @@ class DecksPickBreakdown extends Component {\n</Col>\n</Row>\n);\n- }\n-}\n+};\nDecksPickBreakdown.propTypes = {\ndraft: PropTypes.shape({\n@@ -149,6 +145,11 @@ DecksPickBreakdown.propTypes = {\ncomments: PropTypes.arrayOf(PropTypes.object).isRequired,\n}).isRequired,\nseatIndex: PropTypes.number.isRequired,\n+ defaultIndex: PropTypes.number,\n+};\n+\n+DecksPickBreakdown.defaultProps = {\n+ defaultIndex: 0,\n};\nexport default DecksPickBreakdown;\n",
        "org_msg": "Track selected pick.",
        "sim_msg": "Update PlayerRow code",
        "sim_diff": "diff --git a/client/GameComponents/PlayerRow.jsx b/client/GameComponents/PlayerRow.jsx import React from 'react';\n+import PropTypes from 'prop-types';\n-import AdditionalCardPile from './AdditionalCardPile.jsx';\nimport PlayerHand from './PlayerHand.jsx';\nclass PlayerRow extends React.Component {\n+ constructor() {\n+ super();\n+ }\n+\n+ /*\ngetOutOfGamePile() {\n- let pile = this.props.additionalPiles['out of game'];\n+ let pile = this.props.outOfGamePile;\n- if(!pile || pile.cards.length === 0) {\n+ if(pile.length === 0) {\nreturn;\n}\nreturn (\n- <AdditionalCardPile\n+ <CardPile\n+ cards={ pile }\nclassName='additional-cards'\n- isMe={ this.props.isMe }\n+ onCardClick={ this.props.onCardClick }\n+ onDragDrop={ this.props.onDragDrop }\n+ onMenuItemClick={ this.props.onMenuItemClick }\nonMouseOut={ this.props.onMouseOut }\nonMouseOver={ this.props.onMouseOver }\n- pile={ pile }\n- spectating={ this.props.spectating }\n- title='Out of Game' />\n+ orientation='bowed'\n+ popupLocation={ this.props.isMe || this.props.spectating ? 'top' : 'bottom' }\n+ source='out of game'\n+ title='Out of Game'\n+ size={ this.props.cardSize } />\n);\n}\n-\n+*/\nrender() {\n+\nreturn (\n- <div className='player-home-row'>\n- <div className='deck-cards'>\n+ <div className='player-home-row-container'>\n<PlayerHand\ncards={ this.props.hand }\nisMe={ this.props.isMe }\nonCardClick={ this.props.onCardClick }\nonDragDrop={ this.props.onDragDrop }\nonMouseOut={ this.props.onMouseOut }\n- onMouseOver={ this.props.onMouseOver } />\n-\n- { this.getOutOfGamePile() }\n- </div>\n+ onMouseOver={ this.props.onMouseOver }\n+ cardSize={ this.props.cardSize } />\n</div>\n);\n}\n@@ -45,16 +53,19 @@ class PlayerRow extends React.Component {\nPlayerRow.displayName = 'PlayerRow';\nPlayerRow.propTypes = {\n- additionalPiles: React.PropTypes.object,\n- hand: React.PropTypes.array,\n- honor: React.PropTypes.number,\n- isMe: React.PropTypes.bool,\n- onCardClick: React.PropTypes.func,\n- onDragDrop: React.PropTypes.func,\n- onMouseOut: React.PropTypes.func,\n- onMouseOver: React.PropTypes.func,\n- provinceDeck: React.PropTypes.array,\n- spectating: React.PropTypes.bool\n+ cardSize: PropTypes.string,\n+ hand: PropTypes.array,\n+ honor: PropTypes.number,\n+ isMe: PropTypes.bool,\n+ onCardClick: PropTypes.func,\n+ onDragDrop: PropTypes.func,\n+ onMenuItemClick: PropTypes.func,\n+ onMouseOut: PropTypes.func,\n+ onMouseOver: PropTypes.func,\n+ /* outOfGamePile: PropTypes.array, */\n+ provinceDeck: PropTypes.array,\n+ spectating: PropTypes.bool,\n+ title: PropTypes.object\n};\nexport default PlayerRow;\n",
        "chatgpt_cot": "Refactor DecksPickBreakdown to functional component, using hooks and removing unnecessary state and lifecycle methods. Add defaultIndex prop."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -273,7 +273,7 @@ router.post('/blog/post/:id', ensureAuth, async (req, res) => {\nawait util.addMultipleNotifications(\nquery,\nowner,\n- `/cube/blog/${req.params.id}`, // there's no way to link to a specific post, so the blog page is the best we can do\n+ `/cube/blogpost/${blogpost._id}`,\n`${user.username} mentioned you in their blog post.`,\n);\n}\n@@ -2400,7 +2400,7 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\nawait util.addMultipleNotifications(\nquery,\nowner,\n- `/cube/blog/${req.params.id}`, // there's no way to link to a specific post, so the blog page is the best we can do\n+ `/cube/blogpost/${blogpost._id}`,\n`${cube.owner_name} mentioned you in their blog post.`,\n);\n}\n",
        "org_msg": "blogpost mentions now link to blogposts",
        "sim_msg": "Add missing route back in",
        "sim_diff": "diff --git a/app/router.js b/app/router.js @@ -125,6 +125,9 @@ Router.map(function() {\nthis.route('add', {path: '/add/:cloud_id'});\n});\n+ this.route('new', {path: '/add'}, function() {\n+ this.route('index', {path: '/'});\n+ });\nthis.route('host', {path: '/:host_id', resetNamespace: true}, function() {\nthis.route('containers');\n",
        "chatgpt_cot": "Update link to specific blog post in cube_routes.js for better user experience. Fix issue with linking to individual posts on blog page."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -3,6 +3,7 @@ const path = require('path');\nconst https = require('https');\nconst JSONStream = require('JSONStream');\nconst es = require('event-stream');\n+const winston = require('winston');\nconst cardutil = require('../dist/utils/Card.js');\nconst util = require('./util.js');\n@@ -78,8 +79,7 @@ function writeFile(filepath, data) {\nreturn new Promise((resolve, reject) => {\nfs.writeFile(filepath, data, 'utf8', (err) => {\nif (err) {\n- console.log(`An error occured while writing ${filepath}`);\n- console.log(err);\n+ winston.error(`An error occured while writing ${filepath}`, { error: err });\nreject(err);\n} else {\nresolve(data);\n@@ -582,7 +582,7 @@ function convertParsedCost(card, isExtra = false) {\n.split('}{')\n.reverse();\n} else {\n- console.log('Error converting parsed colors: (isExtra:', isExtra, ')', card.name);\n+ winston.error('Error converting parsed colors: (isExtra:', isExtra, ')', card.name);\n}\nif (parsedCost) {\n@@ -596,7 +596,7 @@ function convertParsedCost(card, isExtra = false) {\nfunction convertColors(card, isExtra = false) {\nif (isExtra) {\nif (typeof card.card_faces === 'undefined' || card.card_faces.length < 2) {\n- console.log('Error converting colors: (isExtra:', isExtra, ')', card.name);\n+ winston.error('Error converting colors: (isExtra:', isExtra, ')', card.name);\nreturn [];\n}\n// special case: Adventure faces currently do not have colors on Scryfall (but probably should)\n@@ -626,8 +626,8 @@ function convertColors(card, isExtra = false) {\nreturn Array.from(card.card_faces[0].colors);\n}\n- console.log('Error converting colors: (isExtra:', isExtra, ')', card.name);\n- console.log(card);\n+ winston.error('Error converting colors: (isExtra:', isExtra, ')', card.name);\n+ winston.error(card);\nreturn [];\n}\n@@ -790,7 +790,7 @@ function writeCatalog(basePath = 'private') {\npendingWrites.push(writeFile(path.join(basePath, 'cardimages.json'), JSON.stringify(catalog.cardimages)));\nconst allWritesPromise = Promise.all(pendingWrites);\nallWritesPromise.then(() => {\n- console.log('All JSON files saved.');\n+ winston.info('All JSON files saved.');\n});\nreturn allWritesPromise;\n}\n@@ -812,7 +812,7 @@ async function saveAllCards(basePath = 'private', defaultPath = null, allPath =\n.on('close', resolve),\n);\n- console.log('Creating language mappings...');\n+ winston.info('Creating language mappings...');\nawait new Promise((resolve) =>\nfs\n.createReadStream(allPath || path.resolve(basePath, 'all-cards.json'))\n@@ -831,10 +831,10 @@ async function updateCardbase(basePath = 'private', defaultPath = null, allPath\nawait module.exports.downloadDefaultCards(basePath, defaultPath, allPath);\n- console.log('Updating cardbase, this might take a little while...');\n+ winston.info('Updating cardbase, this might take a little while...');\nawait saveAllCards(basePath, defaultPath, allPath);\n- console.log('Finished cardbase update...');\n+ winston.info('Finished cardbase update...');\n}\nmodule.exports = {\n",
        "org_msg": "Use winston logging in serverjs.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Add winston logging to error messages for writing files and converting colors in updatecards.js file."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1124,7 +1124,8 @@ router.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\ndetails: carddb.cardFromId(inCube.cardID),\n};\n} else {\n- const reasonableId = carddb.getMostReasonable(normalizedName, cube.defaultPrinting)._id;\n+ const reasonableCard = carddb.getMostReasonable(normalizedName, cube.defaultPrinting);\n+ const reasonableId = reasonableCard ? reasonableCard._id : null;\nconst selectedId = reasonableId || potentialIds[0];\nselected = {\ncardID: selectedId,\n",
        "org_msg": "Fix decklist upload.",
        "sim_msg": "Update fetch to look at new image location",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -32,7 +32,9 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.png');\n- var imagesrc = 'bundles/card_images/';\n+ var imagePack = card.pack_cards[0].pack.id;\n+ var imagesrc = 'bundles/card_images/' + imagePack;\n+\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n",
        "chatgpt_cot": "\"Refactor decklist upload logic to handle reasonable card ID retrieval, ensuring selected card ID is valid.\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.js b/__tests__/serverjs/updatecards.js @@ -82,6 +82,7 @@ const convertFnToAttribute = {\nbeforeEach(() => {\nrimraf.sync(\"private\");\n+ updatecards.initializeCatalog();\n});\nafterEach(() => {\n@@ -114,9 +115,17 @@ test(\"addCardToCatalog\", () => {\n});\ntest(\"saveAllCards\", () => {\n- // do in test what updateCardbase does before call to saveAllCards\n- // use that as input to saveallcards for test\n- // requires an unload function to be run before every test\n+ var contents = fs.readFileSync(cardsFixturePath);\n+ var cards = JSON.parse(contents);\n+ updatecards.saveAllCards(cards).then(function() {\n+ expect(fs.existsSync('private/cardtree.json')).toBe(true);\n+ expect(fs.existsSync('private/imagedict.json')).toBe(true);\n+ expect(fs.existsSync('private/cardimages.json')).toBe(true);\n+ expect(fs.existsSync('private/names.json')).toBe(true);\n+ expect(fs.existsSync('private/carddict.json')).toBe(true);\n+ expect(fs.existsSync('private/nameToId.json')).toBe(true);\n+ expect(fs.existsSync('private/full_names.json')).toBe(true);\n+ });\n});\ntest(\"convertCard returns a correctly converted card object\", () => {\n",
        "org_msg": "add test for saveAllCards\ncall initializeCatalog before each test to ensure test state is clean",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add initialization of catalog in beforeEach and update saveAllCards test to ensure correct file creation and existence."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeDraftPage.js b/src/pages/CubeDraftPage.js @@ -35,9 +35,9 @@ import { Internal } from 'components/DraftbotBreakdown';\nexport const subtitle = (cards) => {\nconst numCards = cards.length;\n- const numLands = cards.filter((card) => cardType(card).includes('land')).length;\n- const numNonlands = cards.filter((card) => !cardType(card).includes('land') && !cardIsSpecialZoneType(card)).length;\n- const numCreatures = cards.filter((card) => cardType(card).includes('creature')).length;\n+ const numLands = cards.filter((card) => /land/i.test(cardType(card))).length;\n+ const numNonlands = cards.filter((card) => !/land/i.test(cardType(card)) && !cardIsSpecialZoneType(card)).length;\n+ const numCreatures = cards.filter((card) => /creature/i.test(cardType(card))).length;\nconst numNonCreatures = numNonlands - numCreatures;\nreturn (\n`${numCards} card${numCards === 1 ? '' : 's'}: ` +\n",
        "org_msg": "Fix deck builder displaying wrong card counts by card type.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "\"Refactor card type filtering in CubeDraftPage.js for improved readability and efficiency.\""
    },
    {
        "org_diff": "diff --git a/src/components/CardModal.js b/src/components/CardModal.js @@ -80,7 +80,6 @@ const CardModal = ({\nname=\"version\"\nvalue={values.version}\nonChange={onChange}\n- className=\"square-left\"\n>\n{versions.map((version) => {\nconst name = version.full_name\n@@ -98,13 +97,7 @@ const CardModal = ({\n<InputGroupAddon addonType=\"prepend\">\n<InputGroupText>Status</InputGroupText>\n</InputGroupAddon>\n- <CustomInput\n- type=\"select\"\n- name=\"status\"\n- value={values.status}\n- onChange={onChange}\n- className=\"square-left\"\n- >\n+ <CustomInput type=\"select\" name=\"status\" value={values.status} onChange={onChange}>\n{getLabels(null, 'Status').map((status) => (\n<option key={status}>{status}</option>\n))}\n@@ -114,13 +107,7 @@ const CardModal = ({\n<InputGroupAddon addonType=\"prepend\">\n<InputGroupText>Finish</InputGroupText>\n</InputGroupAddon>\n- <CustomInput\n- type=\"select\"\n- name=\"finish\"\n- value={values.finish}\n- onChange={onChange}\n- className=\"square-left\"\n- >\n+ <CustomInput type=\"select\" name=\"finish\" value={values.finish} onChange={onChange}>\n{getLabels(null, 'Finish').map((finish) => (\n<option key={finish}>{finish}</option>\n))}\n",
        "org_msg": "Remove unnecessary class.",
        "sim_msg": "Fix issue with deckbuilder",
        "sim_diff": "diff --git a/client/DeckEditor.jsx b/client/DeckEditor.jsx @@ -410,7 +410,7 @@ class InnerDeckEditor extends React.Component {\nonChange={ this.onAllianceChange.bind(this) } value={ this.state.deck.alliance ? this.state.deck.alliance.value : undefined }\nvalueKey='value' nameKey='name' blankOption={ { name: '- Select -', value: '' } } />\n- <Typeahead label='Card' labelClass={ 'col-sm-3' } fieldClass='col-sm-4' labelKey={ 'label' } options={ _.toArray(this.props.cards) }\n+ <Typeahead label='Card' labelClass={ 'col-sm-3' } fieldClass='col-sm-4' labelKey={ 'name' } options={ _.toArray(this.props.cards) }\nonChange={ this.addCardChange.bind(this) }>\n<Input name='numcards' type='text' label='Num' labelClass='col-sm-1' fieldClass='col-sm-2'\nvalue={ this.state.numberToAdd.toString() } onChange={ this.onNumberToAddChange.bind(this) }>\n",
        "chatgpt_cot": "Refactor CardModal.js to remove redundant className and simplify CustomInput usage for status and finish selection."
    },
    {
        "org_diff": "diff --git a/src/components/BlogPost.js b/src/components/BlogPost.js @@ -62,7 +62,9 @@ class BlogPost extends React.Component {\n<Card className=\"shadowed rounded-0 mb-3\">\n<CardHeader className=\"pl-4 pr-0 pt-2 pb-0\">\n<h5 className=\"card-title\">\n+ <a href={`/cube/blogpost/${post._id}`}>\n{post.title}\n+ </a>\n<div className=\"float-sm-right\">\n{this.props.canEdit && (\n<BlogContextMenu className=\"float-sm-right\" post={post} value=\"...\" onEdit={onEdit} />\n",
        "org_msg": "Added easy way to share blog posts",
        "sim_msg": "Prevent triggering visibility before content is loaded",
        "sim_diff": "diff --git a/src/post/Post.js b/src/post/Post.js @@ -82,7 +82,7 @@ export default class Post extends React.Component {\n</Affix>\n<div className=\"center\" style={{ paddingBottom: '24px' }}>\n{content ? <PostContent content={content} /> : <Loading />}\n- <VisibilitySensor onChange={this.handleCommentsVisibility} />\n+ {content && <VisibilitySensor onChange={this.handleCommentsVisibility} />}\n<div id=\"comments\">\n{content && <Comments show={this.state.commentsVisible} post={content} />}\n</div>\n",
        "chatgpt_cot": "Add link to blog post title in BlogPost component."
    },
    {
        "org_diff": "diff --git a/src/components/PagedTable.js b/src/components/PagedTable.js @@ -40,10 +40,12 @@ class PagedTable extends Component {\n</PaginationItem>\n)}\n</Pagination>\n+ <div className=\"table-responsive\">\n<Table {...props}>\n{children}\n<tbody>{displayRows}</tbody>\n</Table>\n+ </div>\n</>;\n}\n}\n",
        "org_msg": "Make ListView table responsive.",
        "sim_msg": "when you have no data pages shows as 0 instead of 1\nsee",
        "sim_diff": "diff --git a/src/pagination.js b/src/pagination.js @@ -104,7 +104,7 @@ export default class ReactTablePagination extends Component {\n</div>\n) : (\n<span className='-currentPage'>{page + 1}</span>\n- )} {this.props.ofText} <span className='-totalPages'>{pages}</span>\n+ )} {this.props.ofText} <span className='-totalPages'>{pages || 1}</span>\n</span>\n{showPageSizeOptions && (\n<span className='select-wrap -pageSizeOptions'>\n",
        "chatgpt_cot": "Add responsive table wrapper to PagedTable component. The modification adds a div with the class \"table-responsive\" to make the table responsive."
    },
    {
        "org_diff": "diff --git a/src/utils/Affiliate.js b/src/utils/Affiliate.js @@ -16,13 +16,17 @@ export function getTCGLink(card) {\nexport const getCardMarketLink = (card) =>\n`https://www.cardmarket.com/en/Magic/Products/Singles/${card.details.set_name\n.replace(/ /g, '-')\n- .replace(/:/g, '')\n- .replace(/\\./g, '')}/${card.details.name.replace(/ /g, '-').replace(/:/g, '').replace(/\\./g, '')}`;\n+ .replace(/[:,.\"']/g, '')}/${card.details.name.replace(/ /g, '-').replace(/:/g, '').replace(/\\./g, '')}`;\nexport const getCardHoarderLink = (card) =>\n`https://www.cardhoarder.com/cards?data%5Bsearch%5D=${card.details.name}?affiliate_id=cubecobra&utm_source=cubecobra&utm_campaign=affiliate&utm_medium=card`;\n-const ck = (str) => str.replace(/ /g, '-').replace(/:/g, '').replace(/\\./g, '').toLowerCase();\n+const ck = (str) =>\n+ str\n+ .replace(' - ', '-')\n+ .replace(/ /g, '-')\n+ .replace(/[:,.\"']/g, '')\n+ .toLowerCase();\nexport const getCardKingdomLink = (card) =>\n`https://www.cardkingdom.com/mtg/${ck(card.details.set_name)}/${ck(\n",
        "org_msg": "update CK link",
        "sim_msg": "Hook in glyph generator to card generator",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -2,6 +2,7 @@ import metaversefile from 'metaversefile';\nimport {generateStats, types} from './procgen/procgen.js';\nimport {screenshotObjectApp} from './object-screenshotter.js';\nimport {screenshotAvatarUrl} from './avatar-screenshotter.js';\n+import {generateGlyph} from './glyph-generator.js';\n// const baseUrl = import.meta.url.replace(/(\\/)[^\\/\\\\]*$/, '$1');\n// const cardsSvgUrl = `${baseUrl}cards.svg`;\n@@ -102,6 +103,9 @@ export const generateObjectCard = async ({\n});\nminterAvatarPreview = await _getCanvasDataUrl(minterAvatarPreview);\n+ let glyphImage = generateGlyph(url);\n+ glyphImage = await _getCanvasDataUrl(glyphImage);\n+\n// _previewImage(minterAvatarPreview, width, height);\nconst minterUsername = 'Scillia';\nconsole.log('call generate card', {\n@@ -112,6 +116,7 @@ export const generateObjectCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n});\nconst cardImg = await generateCard({\nstats,\n@@ -123,6 +128,7 @@ export const generateObjectCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n});\n_previewImage(cardImg, width, height);\nreturn cardImg;\n@@ -138,6 +144,7 @@ export const generateCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n} = {}) => {\nconst cardSvgSource = await _loadCachedSvgSource();\nawait _waitForAllCardFonts();\n@@ -217,6 +224,15 @@ export const generateCard = async ({\nurlEl.innerHTML = url;\n}\n+ // glyph image\n+ {\n+ const glyphImageEl = el.querySelector('#glyph-image');\n+ // window.glyphImageEl = glyphImageEl;\n+ // glyphImageEl.innerHTML = glyphImage;\n+ glyphImageEl.setAttribute('image-rendering', 'pixelated');\n+ glyphImageEl.setAttribute('xlink:href', glyphImage);\n+ }\n+\n/* {\nconst lines = description.split('\\n');\nconst descriptionHeaderTextEl = el.querySelector('#description-header-text');\n",
        "chatgpt_cot": "Refactor Affiliate.js to improve URL generation for card links. Updated getCardMarketLink, getCardHoarderLink, and ck functions for better formatting and readability."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.js b/__tests__/serverjs/cubefn.js @@ -48,6 +48,37 @@ test(\"build_id_query returns a boolean query when passed a non-alphanumeric stri\nexpect(condition[1].urlAlias).toBe(testId);\n});\n+test(\"cardsAreEquivalent returns true for two equivalent cards\", () => {\n+ const testCard1 = {\n+ cardID: \"abcdef\",\n+ status: \"Owned\",\n+ cmc: 1,\n+ type_line: \"Creature - Hound\",\n+ tags: [\"New\"],\n+ colors: [\"W\"],\n+ randomField: \"y\"\n+ };\n+ const testCard2 = JSON.parse(JSON.stringify(testCard1));\n+ const result = cubefn.cardsAreEquivalent(testCard1, testCard2);\n+ expect(result).toBe(true);\n+});\n+\n+test(\"cardsAreEquivalent returns false for two nonequivalent cards\", () => {\n+ const testCard1 = {\n+ cardID: \"abcdef\",\n+ status: \"Owned\",\n+ cmc: 1,\n+ type_line: \"Creature - Hound\",\n+ tags: [\"New\"],\n+ colors: [\"W\"],\n+ randomField: \"y\"\n+ };\n+ const testCard2 = JSON.parse(JSON.stringify(testCard1));\n+ testCard2.cmc = 2;\n+ const result = cubefn.cardsAreEquivalent(testCard1, testCard2);\n+ expect(result).toBe(false);\n+});\n+\ntest(\"intToLegality\", () => {\nexpect(cubefn.intToLegality(0)).toBe(\"Vintage\");\nexpect(cubefn.intToLegality(1)).toBe(\"Legacy\");\n",
        "org_msg": "add tests for cardsAreEquivalent",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add tests for cardsAreEquivalent function in cubefn.js. Test for both equivalent and nonequivalent cards to ensure proper functionality."
    },
    {
        "org_diff": "diff --git a/src/analytics/Averages.js b/src/analytics/Averages.js @@ -23,7 +23,7 @@ const Averages = ({ cards, characteristics }) => {\nif (characteristic === 'CMC') {\n/* If we are calculating the average cmc, we don't want to include lands in the average.\nWe can't just filter out 0 cmc cards, so we need to check the type here. */\n- const type = card.type_line || card.detail.type;\n+ const type = card.type_line || card.details.type;\nif (type.toLowerCase().includes('land')) return false;\n}\nreturn true;\n",
        "org_msg": "Fix averages component.",
        "sim_msg": "fix: collateral formula",
        "sim_diff": "diff --git a/src/renderer/marketplace/loans/calculator/index.jsx b/src/renderer/marketplace/loans/calculator/index.jsx @@ -99,7 +99,7 @@ const convertToCurrency = (amount, currency, rates) => {\nconst calculateCollateral = ({ amount, token, rates, ltv }) => {\nconst rate = rates.find(r => r.symbol === token);\nconst LTV = ltv ? parseFloat(ltv) / 100 : 1;\n- const collateral = amount / (rate.priceUSD * LTV);\n+ const collateral = (rate.priceUSD * LTV) / amount;\nreturn `${collateral.toFixed(2)} ${rate.symbol}`;\n};\n",
        "chatgpt_cot": "\"Fix typo in Averages.js and update variable name to correctly access card details for calculating average CMC.\""
    },
    {
        "org_diff": "diff --git a/src/analytics/Suggestions.js b/src/analytics/Suggestions.js @@ -40,7 +40,7 @@ const Suggestions = ({ cards, cube }) => {\nconst updateFilter = (val) => {\nsetFilter(val);\n- setAdds(suggestions.filter((card) => Filter.filterCard(card, val)).slice(20));\n+ setAdds(suggestions.filter((card) => Filter.filterCard({details:card}, val)).slice(20));\n};\nuseEffect(() => {\n@@ -59,7 +59,7 @@ const Suggestions = ({ cards, cube }) => {\n</p>\n<FilterCollapse\n- defaultFilterText={'type=\"creature\"'}\n+ defaultFilterText={''}\nfilter={filter}\nsetFilter={updateFilter}\nnumCards={cards.length}\n",
        "org_msg": "fixed filter issues",
        "sim_msg": "functions for converting damage types and polarities to emoji",
        "sim_diff": "diff --git a/src/TrackFunctions.js b/src/TrackFunctions.js @@ -22,6 +22,27 @@ const deals = ['deals.featured', 'deals.popular'];\nconst clantech = ['mutagen', 'fieldron', 'detonite'];\nconst resources = ['neuralSensors', 'orokinCell', 'alloyPlate', 'circuits', 'controlModule', 'ferrite', 'gallium', 'morphics', 'nanoSpores', 'oxium', 'rubedo', 'salvage', 'plastids', 'polymerBundle', 'argonCrystal', 'cryotic', 'tellurium'];\n+const emoji = {\n+ vazarin: '<:vazarin:319586146269003778>',\n+ madurai: '<:madurai:319586146499690496>',\n+ naramon: '<:naramon:319586146478850048>',\n+ electricity: '<:electricity:321463957212626944>',\n+ cold: '<:cold:321463957019951105>',\n+ heat: '<:heat:321463957061763083>',\n+ toxin: '<:toxin:321463957325873153>',\n+ radiation: '<:radiation:321463957221277706>',\n+ viral: '<:viral:321463957292580864>',\n+ gas: '<:gas:363136257045561344>',\n+ impact: '<:impact:363136256781189120>',\n+ puncture: '<:puncture:363136257129185280>',\n+ slash: '<:slash:363136256755892225>',\n+ koneski: '<:koneski:319586146483044352>',\n+ unairu: '<:unairu:319586146453553162>',\n+ blast: '<:blast:363136256907149312>',\n+ corrosive: '<:corrosive:363136257288568832>',\n+ magnetic: '<:magnetic:363136420602445824>',\n+};\n+\nfunction createGroupedArray(arr, chunkSize) {\nconst groups = [];\nfor (let i = 0; i < arr.length; i += (chunkSize || 10)) {\n@@ -193,4 +214,14 @@ function getTrackInstructionEmbed(message, prefix, call) {\nreturn embed;\n}\n-module.exports = { trackablesFromParameters, getTrackInstructionEmbed, createGroupedArray };\n+\n+function getEmoji(identifier) {\n+ return emoji[identifier] || '';\n+}\n+\n+module.exports = {\n+ trackablesFromParameters,\n+ getTrackInstructionEmbed,\n+ createGroupedArray,\n+ getEmoji,\n+};\n",
        "chatgpt_cot": "\"Refactor Suggestions.js to update filter function and default filter text for improved card filtering and display in analytics.\""
    },
    {
        "org_diff": "diff --git a/src/util/Draft.js b/src/util/Draft.js @@ -55,8 +55,9 @@ function botRating(botColors, card) {\nif (isLand) {\nif (subset) {\n+ //if fetches don't have the color identity override, they get lumped into this category\nrating *= 1.4;\n- } else if (overlap) {\n+ } else if (overlap || isFetch) {\nrating *= 1.2;\n} else {\nrating *= 1.1;\n",
        "org_msg": "Added back fetch check",
        "sim_msg": "Use settings-layout on Drafts page",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -8,7 +8,6 @@ import { reload } from '../../auth/authActions';\nimport { getDraftPosts, getPendingDrafts, getIsReloading } from '../../reducers';\nimport Affix from '../../components/Utils/Affix';\nimport LeftSidebar from '../../app/Sidebar/LeftSidebar';\n-import RightSidebar from '../../app/Sidebar/RightSidebar';\nimport DraftRow from './DraftRow';\n@connect(\n@@ -44,17 +43,12 @@ class Drafts extends React.Component {\nreturn (\n<div className=\"shifted\">\n- <div className=\"feed-layout container\">\n+ <div className=\"settings-layout container\">\n<Affix className=\"leftContainer\" stickPosition={77}>\n<div className=\"left\">\n<LeftSidebar />\n</div>\n</Affix>\n- <Affix className=\"rightContainer\" stickPosition={77}>\n- <div className=\"right\">\n- <RightSidebar />\n- </div>\n- </Affix>\n<div className=\"center\">\n<h1>\n<FormattedMessage id=\"drafts\" defaultMessage=\"Drafts\" />\n",
        "chatgpt_cot": "\"Add condition for fetches without color identity override in botRating function in Draft.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3388,8 +3388,9 @@ router.post(\nreturn 0;\n})\n.map((tuple) => {\n- const card = util.newCard(carddb.getMostReasonable(tuple[0]));\n- card.details = tuple[0];\n+ const details = carddb.getMostReasonable(tuple[0]);\n+ const card = util.newCard(details);\n+ card.details = details;\nreturn card;\n});\nreturn res.status(200).send({\n",
        "org_msg": "fix card attribute",
        "sim_msg": "Add missing route back in",
        "sim_diff": "diff --git a/app/router.js b/app/router.js @@ -125,6 +125,9 @@ Router.map(function() {\nthis.route('add', {path: '/add/:cloud_id'});\n});\n+ this.route('new', {path: '/add'}, function() {\n+ this.route('index', {path: '/'});\n+ });\nthis.route('host', {path: '/:host_id', resetNamespace: true}, function() {\nthis.route('containers');\n",
        "chatgpt_cot": "\"Refactor code to improve readability and maintainability by separating details retrieval and card creation in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1791,10 +1791,10 @@ router.post(\nconst post = await Blog.findById(req.body.id);\nconst { user } = req;\n- if (!user) {\n+ if (!user._id.equals(post.owner)) {\nreturn res.status(403).send({\nsuccess: 'false',\n- message: 'Unauthorized',\n+ message: 'Only post owner may edit',\n});\n}\n",
        "org_msg": "Add check to edit comment route.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Modify authorization check to only allow post owner to edit\""
    },
    {
        "org_diff": "diff --git a/src/components/EditCollapse.js b/src/components/EditCollapse.js @@ -11,18 +11,28 @@ import ChangelistContext from './ChangelistContext';\nimport CubeContext from './CubeContext';\nimport CSRFForm from './CSRFForm';\n-export const getCard = async (name) => {\n+export const getCard = async (name, setAlerts) => {\nif (name && name.length > 0) {\nconst normalized = encodeName(name);\nconst response = await fetch(`/cube/api/getcard/${normalized}`);\nif (!response.ok) {\n- setAlerts((alerts) => [...alerts, { color: 'danger', message: `Couldn't get card: ${response.status}.` }]);\n+ const message = `Couldn't get card: ${response.status}.`;\n+ if (setAlerts) {\n+ setAlerts((alerts) => [...alerts, { color: 'danger', message }]);\n+ } else {\n+ console.error(message);\n+ }\nreturn null;\n}\nconst json = await response.json();\nif (json.success !== 'true' || !json.card) {\n- setAlerts((alerts) => [...alerts, { color: 'danger', message: `Couldn't find card [${name}].` }]);\n+ const message = `Couldn't find card [${name}].`;\n+ if (setAlerts) {\n+ setAlerts((alerts) => [...alerts, { color: 'danger', message }]);\n+ } else {\n+ console.error(message);\n+ }\nreturn null;\n}\nreturn json.card;\n@@ -54,7 +64,7 @@ const EditCollapse = ({ cubeID, ...props }) => {\nasync (event, newValue) => {\nevent.preventDefault();\ntry {\n- const card = await getCard(newValue || addValue);\n+ const card = await getCard(newValue || addValue, setAlerts);\nif (!card) {\nreturn;\n}\n@@ -91,7 +101,7 @@ const EditCollapse = ({ cubeID, ...props }) => {\nreturn;\n}\nif (replace) {\n- const cardIn = await getCard(addValue);\n+ const cardIn = await getCard(addValue, setAlerts);\nif (!cardIn) {\nreturn;\n}\n@@ -121,8 +131,8 @@ const EditCollapse = ({ cubeID, ...props }) => {\nreturn (\n<Collapse className=\"px-3\" {...props}>\n- {alerts.map(({ color, message }) => (\n- <UncontrolledAlert color={color} className=\"mt-2\">\n+ {alerts.map(({ color, message }, index) => (\n+ <UncontrolledAlert key={index} color={color} className=\"mt-2\">\n{message}\n</UncontrolledAlert>\n))}\n",
        "org_msg": "Fix bug with alerts in EditCollapse.",
        "sim_msg": "Autorun handling in runtime",
        "sim_diff": "diff --git a/runtime.js b/runtime.js @@ -131,7 +131,7 @@ const componentHandlers = {\n};\n// const thingFiles = {};\n-const _loadGltf = async (file, {optimize = false, physics = false, physics_url = false, components = [], dynamic = false, autoScale = true, files = null, parentUrl = null, instanceId = null, monetizationPointer = null, ownerAddress = null} = {}) => {\n+const _loadGltf = async (file, {optimize = false, physics = false, physics_url = false, components = [], dynamic = false, autoScale = true, autoRun = false, files = null, parentUrl = null, instanceId = null, monetizationPointer = null, ownerAddress = null} = {}) => {\nlet srcUrl = file.url || URL.createObjectURL(file);\nif (files && _isResolvableUrl(srcUrl)) {\nsrcUrl = files[_dotifyUrl(srcUrl)];\n@@ -906,7 +906,7 @@ const _loadScript = async (file, {files = null, parentUrl = null, instanceId = n\nreturn mesh;\n};\n-const _loadManifestJson = async (file, {files = null, instanceId = null, monetizationPointer = null, ownerAddress = null} = {}) => {\n+const _loadManifestJson = async (file, {files = null, instanceId = null, autoScale = true, autoRun = false, monetizationPointer = null, ownerAddress = null} = {}) => {\nlet srcUrl = file.url || URL.createObjectURL(file);\nif (files && _isResolvableUrl(srcUrl)) {\nsrcUrl = files[_dotifyUrl(srcUrl)];\n@@ -922,7 +922,12 @@ const _loadManifestJson = async (file, {files = null, instanceId = null, monetiz\nconst res = await fetch(srcUrl);\nconst j = await res.json();\nlet {start_url, physics, physics_url, components} = j;\n- const u = _dotifyUrl(start_url);\n+ if (typeof j.autoScale === 'boolean') {\n+ autoScale = j.autoScale;\n+ }\n+ if (typeof j.autoRun === 'boolean') {\n+ autoRun = j.autoRun;\n+ }\n/* if (physics_url) {\nif (files && _isResolvableUrl(physics_url)) {\n@@ -930,6 +935,7 @@ const _loadManifestJson = async (file, {files = null, instanceId = null, monetiz\n}\n} */\n+ const u = _dotifyUrl(start_url);\nreturn await runtime.loadFile({\nurl: u,\nname: u,\n@@ -939,13 +945,15 @@ const _loadManifestJson = async (file, {files = null, instanceId = null, monetiz\nphysics,\nphysics_url,\ncomponents,\n+ autoScale,\n+ autoRun,\ninstanceId,\nownerAddress,\nmonetizationPointer,\n});\n};\nlet appIds = 0;\n-const _loadWebBundle = async (file, {instanceId = null, monetizationPointer = null, ownerAddress = null} = {}) => {\n+const _loadWebBundle = async (file, {instanceId = null, autoScale = true, autoRun = false, monetizationPointer = null, ownerAddress = null} = {}) => {\nlet arrayBuffer;\nif (file.url) {\n@@ -984,6 +992,8 @@ const _loadWebBundle = async (file, {instanceId = null, monetizationPointer = nu\n}, {\nfiles,\ninstanceId,\n+ autoScale,\n+ autoRun,\nownerAddress,\nmonetizationPointer,\n});\n",
        "chatgpt_cot": "Add setAlerts parameter to getCard function to handle alerts and improve error handling in EditCollapse component."
    },
    {
        "org_diff": "diff --git a/src/cardpage.js b/src/cardpage.js @@ -47,7 +47,18 @@ class CardPage extends Component {\nreturn (\n<Card>\n<CardHeader>\n- <h4>{card.name}</h4>\n+ <h4>\n+ {card.name}\n+ <div className=\"float-right\">\n+ <ButtonLink className=\"mx-2\" color=\"success\" href={card.scryfall_uri}>\n+ <span className=\"d-none d-sm-inline\">View on Scryfall</span>\n+ <span className=\"d-sm-none\">Scryfall</span>\n+ </ButtonLink>\n+ <ButtonLink className=\"mx-2\" color=\"secondary\" href={getTCGLink({ details: card })}>\n+ Buy\n+ </ButtonLink>\n+ </div>\n+ </h4>\n</CardHeader>\n<CardBody>\n<Row>\n@@ -156,15 +167,6 @@ class CardPage extends Component {\n</Row>\n</TabPane>\n</TabContent>\n- <CardFooter>\n- <ButtonLink className=\"mx-2\" color=\"success\" href={card.scryfall_uri}>\n- <span className=\"d-none d-sm-inline\">View on Scryfall</span>\n- <span className=\"d-sm-none\">Scryfall</span>\n- </ButtonLink>\n- <ButtonLink className=\"mx-2\" color=\"secondary\" href={getTCGLink({ details: card })}>\n- Buy\n- </ButtonLink>\n- </CardFooter>\n</Card>\n);\n}\n",
        "org_msg": "Move card page buttons up",
        "sim_msg": "Update 'card not found' page",
        "sim_diff": "diff --git a/packages/component-library/src/CardDetail/CardDetailPage.js b/packages/component-library/src/CardDetail/CardDetailPage.js @@ -17,11 +17,11 @@ const CardDetailPage = ({ params, CardRegistry }) => {\nreturn (\n<PageLayout>\n+ <section>\n<h1>Card not found</h1>\n- <p>\n- The card you are looking for doesn&apos;t exist.\n- <Link to=\"/cities/portland\">View the Portland Collection</Link>\n- </p>\n+ <p>The card you are looking for doesn&apos;t exist.</p>\n+ <Link to=\"/cards\">Other cards</Link>\n+ </section>\n</PageLayout>\n);\n};\n",
        "chatgpt_cot": "Remove duplicate code for \"View on Scryfall\" and \"Buy\" buttons in CardPage to improve code readability."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -12,7 +12,8 @@ const carddb = require('./cards.js');\nconst catalog = {};\n-/* cardDetailsSchema = {\n+/* // '?' denotes a value may be null or missing\n+ * cardDetailsSchema = {\n* color_identity: [Char],\n* set: String,\n* set_name: String,\n@@ -22,13 +23,13 @@ const catalog = {};\n* released_at: Date,\n* promo: Boolean,\n* prices: {\n- * usd: Number,\n- * usd_foil: Number,\n- * eur: Number,\n- * tix: Number,\n+ * usd: Float?,\n+ * usd_foil: Float?,\n+ * eur: Float?,\n+ * tix: Float?,\n* },\n- * elo: Number,\n- * embedding: [Number],\n+ * elo: Integer,\n+ * embedding: [Float],\n* digital: Boolean,\n* isToken: Boolean,\n* border_color: String,\n@@ -37,15 +38,14 @@ const catalog = {};\n* name_lower: String,\n* // name [set-collector_number]\n* full_name: String,\n- * artist: String,\n- * // Url\n- * scryfall_uri: String,\n+ * artist: String?,\n+ * scryfall_uri: URI,\n* rarity: String,\n- * oracle_text: String,\n+ * oracle_text: String?,\n* // Scryfall ID\n* _id: UUID,\n- * oracle_id: String,\n- * cmc: Number\n+ * oracle_id: UUID,\n+ * cmc: Float\n* // one of \"legal\", \"not_legal\", \"restricted\", \"banned\"\n* legalities: {\n* Legacy: String,\n@@ -61,28 +61,24 @@ const catalog = {};\n* },\n* // Hybrid looks like w-u\n* parsed_cost: [String],\n- * colors: [Char],\n+ * colors: [Char]?,\n* type: String,\n* full_art: Boolean,\n* language: String,\n- * mtgo_id: String,\n+ * mtgo_id: Integer?,\n* layout: String,\n- * tcgplayer_id: String,\n- * loyalty: UnsignedInteger\n- * power: Number\n- * toughness: Number\n- * // URL\n- * image_small: String\n- * // URL\n- * image_normal: String\n- * // URL\n- * art_crop: String\n- * // URL\n- * image_flip: String\n+ * tcgplayer_id: String?,\n+ * loyalty: String?\n+ * power: String?\n+ * toughness: String?\n+ * image_small: URI?\n+ * image_normal: URI?\n+ * art_crop: URI?\n+ * image_flip: URI?\n* // Lowercase\n* color_category: Char\n* // Card ID's\n- * tokens: [UUID]\n+ * tokens: [UUID]?\n*/\nfunction initializeCatalog() {\ncatalog.dict = {};\n",
        "org_msg": "fixed schema types",
        "sim_msg": "Update IAmReady.js\nDiscarding a fate is a cost, not an effect",
        "sim_diff": "diff --git a/server/game/cards/01 - Core/IAmReady.js b/server/game/cards/01 - Core/IAmReady.js const DrawCard = require('../../drawcard.js');\nclass IAmReady extends DrawCard {\n- setupCardAbilities() {\n+ setupCardAbilities(ability) {\nthis.action({\ntitle: 'Ready a character',\n+ cost: ability.costs.discardFate(1),\ntarget: {\nactivePromptTitle: 'Choose a character',\ncardType: 'character',\n@@ -15,7 +16,6 @@ class IAmReady extends DrawCard {\n},\nhandler: context => {\nthis.game.addMessage('{0} uses {1} to ready {2}', this.controller, this, context.target);\n- context.target.modifyFate(-1);\nthis.controller.readyCard(context.target);\n}\n});\n",
        "chatgpt_cot": "Update cardDetailsSchema with nullable types and URI for image fields to improve data accuracy and handling of missing values."
    },
    {
        "org_diff": "diff --git a/src/proptypes/CubePropType.js b/src/proptypes/CubePropType.js import PropTypes from 'prop-types';\n+import CardPropType from 'proptypes/CardPropType';\nconst CubePropType = PropTypes.shape({\n_id: PropTypes.string.isRequired,\n@@ -6,6 +7,7 @@ const CubePropType = PropTypes.shape({\nurlAlias: PropTypes.string,\nname: PropTypes.string.isRequired,\ncard_count: PropTypes.number.isRequired,\n+ cards: PropTypes.arrayOf(CardPropType),\ntype: PropTypes.string.isRequired,\noverrideCategory: PropTypes.bool,\ncategoryOverride: PropTypes.string,\n",
        "org_msg": "Tweak cube prop type definition one more time",
        "sim_msg": "remove import of getKeyNames from stories",
        "sim_diff": "diff --git a/packages/component-library/src/CivicCard/cardMetaTypes.js b/packages/component-library/src/CivicCard/cardMetaTypes.js import PropTypes from \"prop-types\";\n-import { getKeyNames } from \"../../stories/shared\";\nconst cardMetaObjectProperties = {\ntitle: PropTypes.string,\n@@ -36,6 +35,14 @@ export const optionalCardMetaKeys = {\nselector: true\n};\n+const getKeyNames = obj => {\n+ const keyNames = {};\n+ Object.keys(obj).forEach(key => {\n+ keyNames[key] = key;\n+ });\n+ return keyNames;\n+};\n+\nexport const cardMetaKeys = getKeyNames(cardMetaObjectProperties);\nconst cardMetaTypes = PropTypes.shape(cardMetaObjectProperties);\n",
        "chatgpt_cot": "Add CardPropType to CubePropType to define the shape of the cards array. This modification ensures proper validation of the cards array in CubePropType."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -605,7 +605,7 @@ function GetColorIdentity(colors) {\n}\nfunction getSorts() {\n- return ['Color','Color Identity','Color Category','CMC','Type','Supertype','Subtype','Tags','Status','Guilds','Shards / Wedges','Color Count','Set','Rarity','Types-Multicolor','Artist','Legality','Power','Toughness','Loyalty','Manacost Type'];\n+ return ['Artist','CMC','Color Category','Color Count','Color Identity','Color','Guilds','Legality','Loyalty','Manacost Type','Power','Rarity','Set','Shards / Wedges','Status','Subtype','Supertype','Tags','Toughness','Type','Types-Multicolor'];\n}\nfunction getLabels(sort) {\n@@ -631,11 +631,11 @@ function getLabels(sort) {\n}\nelse if (sort == 'Type')\n{\n- return ['Creature','Instant','Sorcery','Enchantment','Artifact','Planeswalker','Land','Conspiracy','Scheme','Vanguard','Phenomenon','Contraption','Plane'];\n+ return ['Artifact','Conspiracy','Contraption','Creature','Enchantment','Instant','Land','Phenomenon','Plane','Planeswalker','Scheme','Sorcery','Vanguard'];\n}\nelse if (sort == 'Supertype')\n{\n- return ['Snow','Legendary','Tribal','Basic','Elite','Host','Ongoing','World'];\n+ return ['Basic','Elite','Host','Legendary','Ongoing','Tribal','World','Snow'];\n}\nelse if (sort == 'Tags')\n{\n",
        "org_msg": "Alphabatized sort order and label orders. Left colors in WUBURG.",
        "sim_msg": "feat(Notify): update API definitions",
        "sim_diff": "diff --git a/ui/src/plugins/Notify.json b/ui/src/plugins/Notify.json \"examples\": [ \"top-right\" ]\n},\n+ \"group\": {\n+ \"type\": \"String\",\n+ \"desc\": \"Inform this is part of a specific group, regardless of its options; When a new notification is triggered with same group name, it replaces the old one and shows a badge with how many times the notification was triggered\",\n+ \"default\": \"(message + caption)\",\n+ \"examples\": [ \"my-group\" ],\n+ \"addedIn\": \"v1.9.0\"\n+ },\n+\n+ \"badge\": {\n+ \"type\": \"Object\",\n+ \"desc\": \"Properties for the group badge\",\n+ \"definition\": {\n+ \"color\": {\n+ \"extends\": \"color\",\n+ \"desc\": \"Color name for the badge from the Quasar Color Palette\"\n+ },\n+ \"textColor\": {\n+ \"extends\": \"color\",\n+ \"desc\": \"Color name for the badge text from the Quasar Color Palette\"\n+ },\n+ \"style\": {\n+ \"type\": [ \"Array\", \"String\", \"Object\" ],\n+ \"desc\": \"Style definitions to be attributed to the badge\",\n+ \"examples\": [\n+ \"background-color: #ff0000\",\n+ \":content-style=\\\"{ backgroundColor: '#ff0000' }\\\"\"\n+ ]\n+ },\n+ \"class\": {\n+ \"type\": [ \"Array\", \"String\", \"Object\" ],\n+ \"desc\": \"Class definitions to be attributed to the badge\",\n+ \"examples\": [\n+ \"my-special-class\",\n+ \":content-class=\\\"{ 'my-special-class': <condition> }\\\"\"\n+ ]\n+ }\n+ },\n+ \"addedIn\": \"v1.9.0\"\n+ },\n+\n\"classes\": {\n\"type\": \"String\",\n\"desc\": \"Add CSS class(es) to the notification for easier customization\",\n\"examples\": [ \"top-right\" ]\n},\n+ \"group\": {\n+ \"type\": \"String\",\n+ \"desc\": \"Inform this is part of a specific group, regardless of its options; When a new notification is triggered with same group name, it replaces the old one and shows a badge with how many times the notification was triggered\",\n+ \"default\": \"(message + caption)\",\n+ \"examples\": [ \"my-group\" ],\n+ \"addedIn\": \"v1.9.0\"\n+ },\n+\n+ \"badge\": {\n+ \"type\": \"Object\",\n+ \"desc\": \"Properties for the group badge\",\n+ \"definition\": {\n+ \"color\": {\n+ \"extends\": \"color\",\n+ \"desc\": \"Color name for the badge from the Quasar Color Palette\"\n+ },\n+ \"textColor\": {\n+ \"extends\": \"color\",\n+ \"desc\": \"Color name for the badge text from the Quasar Color Palette\"\n+ },\n+ \"style\": {\n+ \"type\": [ \"Array\", \"String\", \"Object\" ],\n+ \"desc\": \"Style definitions to be attributed to the badge\",\n+ \"examples\": [\n+ \"background-color: #ff0000\",\n+ \":content-style=\\\"{ backgroundColor: '#ff0000' }\\\"\"\n+ ]\n+ },\n+ \"class\": {\n+ \"type\": [ \"Array\", \"String\", \"Object\" ],\n+ \"desc\": \"Class definitions to be attributed to the badge\",\n+ \"examples\": [\n+ \"my-special-class\",\n+ \":content-class=\\\"{ 'my-special-class': <condition> }\\\"\"\n+ ]\n+ }\n+ },\n+ \"addedIn\": \"v1.9.0\"\n+ },\n+\n\"classes\": {\n\"type\": \"String\",\n\"desc\": \"Add CSS class(es) to the notification for easier customization\",\n",
        "chatgpt_cot": "Reorder sort arrays in editcube.js for better organization and readability."
    },
    {
        "org_diff": "diff --git a/src/analytics/Table.js b/src/analytics/Table.js @@ -7,14 +7,14 @@ import AsfanDropdown from 'components/AsfanDropdown';\nimport ErrorBoundary from 'components/ErrorBoundary';\nimport { sortIntoGroups, getSorts, getLabels, cardCanBeSorted } from 'utils/Sort';\n-const AnalyticTable = ({ cards, cube, defaultFormatId, setAsfans }) => {\n+const AnalyticTable = ({ cards: allCards, cube, defaultFormatId, setAsfans }) => {\nconst sorts = getSorts();\nconst [primary, setPrimary] = useState('Color Identity');\nconst [secondary, setSecondary] = useState('Type');\n// some criteria cannot be applied to some cards\n- cards = cards.filter((card) => cardCanBeSorted(card, primary) && cardCanBeSorted(card, secondary));\n+ const cards = allCards.filter((card) => cardCanBeSorted(card, primary) && cardCanBeSorted(card, secondary));\nconst sortWithTotal = (pool, sort) => {\nconst groups = sortIntoGroups(pool, sort);\n",
        "org_msg": "dont modify props",
        "sim_msg": "Only load Analytics widget when Analytics is active.",
        "sim_diff": "diff --git a/assets/js/modules/analytics/components/module/ModulePopularPagesWidget/index.js b/assets/js/modules/analytics/components/module/ModulePopularPagesWidget/index.js @@ -43,11 +43,12 @@ import TableOverflowContainer from '../../../../../components/TableOverflowConta\nimport DetailsPermaLinks from '../../../../../components/DetailsPermaLinks';\nimport ReportTable from '../../../../../components/ReportTable';\nimport PreviewTable from '../../../../../components/PreviewTable';\n+import whenActive from '../../../../../util/when-active';\nimport Header from './Header';\nimport Footer from './Footer';\nconst { useSelect } = Data;\n-export default function ModulePopularPagesWidget( props ) {\n+function ModulePopularPagesWidget( props ) {\nconst { Widget, WidgetReportError, WidgetReportZero } = props;\nconst isGatheringData = useSelect( ( select ) =>\n@@ -212,3 +213,7 @@ ModulePopularPagesWidget.propTypes = {\nWidgetReportError: PropTypes.elementType.isRequired,\nWidgetReportZero: PropTypes.elementType.isRequired,\n};\n+\n+export default whenActive( { moduleName: 'analytics' } )(\n+ ModulePopularPagesWidget\n+);\n",
        "chatgpt_cot": "\"Refactor AnalyticTable to use allCards instead of cards, and filter allCards instead of mutating cards array to improve code readability and maintainability.\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/util.js b/__tests__/serverjs/util.js @@ -112,3 +112,24 @@ test(\"addCardToCube allows card id to be overridden\", () => {\nconst result = testCube.cards[0];\nexpect(result.cardID).toBe(idOverride);\n});\n+\n+test(\"getCardImageURL returns imgUrl when defined\", () => {\n+ const testCard = {\n+ details: {\n+ image_normal: \"normal ol image\"\n+ },\n+ imgUrl: \"an image url\"\n+ };\n+ const result = util.getCardImageURL(testCard);\n+ expect(result).toBe(testCard.imgUrl);\n+});\n+\n+test(\"getCardImageURL falls back to image_normal\", () => {\n+ const testCard = {\n+ details: {\n+ image_normal: \"normal ol image\"\n+ }\n+ };\n+ const result = util.getCardImageURL(testCard);\n+ expect(result).toBe(testCard.details.image_normal);\n+});\n\\ No newline at end of file\n",
        "org_msg": "add tests for getCardImageUrl",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add new test cases for getCardImageURL function in util.js to ensure proper handling of image URL and fallback to normal image."
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -326,7 +326,7 @@ router.get('/search/:id', (req, res) => {\nconst terms = [];\nfunction regexEscape(input) {\n- return input.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\n+ return input.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n}\nrawQueries.forEach((searchExpression) => {\nlet field;\n",
        "org_msg": "255 Beautify",
        "sim_msg": "fix: The req.headers dose not have host field",
        "sim_diff": "diff --git a/lib/util/index.js b/lib/util/index.js @@ -359,10 +359,14 @@ exports.toRegExp = function toRegExp(regExp) {\n};\nfunction getFullUrl(req) {\n+ var host = req.headers.host;\nif (hasProtocol(req.url)) {\n- req.url = url.parse(req.url).path;\n+ var options = url.parse(req.url);\n+ req.url = options.path;\n+ if (!host) {\n+ host = req.headers.host = options.host;\n+ }\n}\n- var host = req.headers.host;\nif (host) {\nhost = req.isHttps ? host.replace(/:443$/, '') : host.replace(/:80$/, '');\n}\n",
        "chatgpt_cot": "Fix regex escape function to correctly escape special characters. The modification ensures that special characters are properly escaped in the input."
    },
    {
        "org_diff": "diff --git a/force_update.js b/force_update.js -var updatedb = require('./serverjs/updatecards.js');\n+const winston = require('winston');\n+const updatedb = require('./serverjs/updatecards.js');\n+\n+winston.configure({\n+ level: 'info',\n+ format: winston.format.simple(),\n+ exitOnError: false,\n+ transports: [new winston.transports.Console()],\n+});\nupdatedb.updateCardbase();\n",
        "org_msg": "Add correct logging code to force_update.js.",
        "sim_msg": "adding call back for quits on button hit and settimeout on pending pauses",
        "sim_diff": "diff --git a/machine.js b/machine.js @@ -11,6 +11,7 @@ var config = require('./config');\nvar updater = require('./updater');\nvar u = require('./util');\nvar async = require('async');\n+var canQuit = false;\nvar GCodeRuntime = require('./runtime/gcode').GCodeRuntime;\nvar SBPRuntime = require('./runtime/opensbp').SBPRuntime;\n@@ -161,6 +162,14 @@ function Machine(control_path, callback) {\n}.bind(this));\nthis.driver.on('status', function(stat) {\n+ if(this.status.state === \"paused\"){\n+ setTimeout(function(){\n+ canQuit = true;\n+\n+ }, 1000);\n+ } else {\n+ canQuit = false;\n+ }\nthis.handleFireButton(stat);\nthis.handleAPCollapseButton(stat);\nthis.handleOkayButton(stat);\n@@ -211,15 +220,27 @@ Machine.prototype.handleOkayButton = function(stat){\nvar auth_input = 'in' + config.machine.get('auth_input');\nif(stat[auth_input] && this.status.state === 'paused') {\nlog.info(\"Okay hit!\")\n- this.resume();\n+ this.resume(function(err, msg){\n+ if(err){\n+ log.error(err);\n+ } else {\n+ log.info(msg);\n+ }\n+ });\n}\n}\nMachine.prototype.handleCancelButton = function(stat){\nvar quit_input = 'in' + config.machine.get('quit_input');\n- if(stat[quit_input] && this.status.state === 'paused') {\n+ if(stat[quit_input] && this.status.state === 'paused' && canQuit) {\nlog.info(\"Cancel hit!\")\n- this.quit();\n+ this.quit(function(err, msg){\n+ if(err){\n+ log.error(err);\n+ } else {\n+ log.info(msg);\n+ }\n+ });\n}\n}\n",
        "chatgpt_cot": "Add winston logging to force_update.js for better error handling and debugging. Also, update the import statement for updatedb."
    },
    {
        "org_diff": "diff --git a/src/topcards.js b/src/topcards.js @@ -2,11 +2,7 @@ import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FilterCollapse from './components/FilterCollapse';\n-import PagedTable from './components/PagedTable';\n-\n-const compare = ([_a, _b, x], [_c, _d, y]) => {\n- return (y || 0) - (x || 0);\n-}\n+import SortableTable from './components/SortableTable';\nclass TopCards extends Component {\nconstructor(props) {\n@@ -14,7 +10,7 @@ class TopCards extends Component {\nthis.state = {\nfilter: [],\n- data: this.props.defaultData.sort(compare) || [],\n+ data: this.props.defaultData || [],\n};\nthis.setFilter = this.setFilter.bind(this);\n@@ -32,18 +28,18 @@ class TopCards extends Component {\nconst params = new URLSearchParams([['f', filterInput]]);\nthis.setState({ filter });\nfetch('/tool/api/topcards?' + params.toString()).then(response => response.json()).then(json => {\n- this.setState({ data: json.data.sort(compare) });\n+ this.setState({ data: json.data });\n}).catch(err => console.error(err));\n}\nrender() {\n- const rows = this.state.data.map(([name, img, img_flip, rating, picks]) => rating === null ? [] :\n+ const rowF = ([name, img, img_flip, rating, picks]) => rating === null ? [] :\n<tr key={name}>\n<td className=\"autocard\" card={img} card_flip={img_flip || undefined}>{name}</td>\n<td>{rating === null ? 'None' : (rating * 100).toFixed(0)}</td>\n<td>{picks}</td>\n- </tr>\n- ).flat();\n+ </tr>;\n+\nreturn <>\n<div className=\"usercontrols pt-3\">\n<h4 className=\"mx-3 mb-3\">Top Cards</h4>\n@@ -51,19 +47,17 @@ class TopCards extends Component {\nisOpen={true}\nfilter={this.state.filter}\nsetFilter={this.setFilter}\n- numCards={rows.length}\n+ numCards={this.state.data.length}\nuseQuery\n/>\n</div>\n- <PagedTable rows={rows}>\n- <thead>\n- <tr>\n- <th>Name</th>\n- <th>Rating</th>\n- <th>Total Picks</th>\n- </tr>\n- </thead>\n- </PagedTable>\n+ <SortableTable\n+ sorts={{ Rating: row => -row[3], 'Total Picks': row => -row[4] }}\n+ defaultSort=\"Rating\"\n+ headers={{ Name: {}, Rating: { style: { width: '10rem' } }, 'Total Picks': { style: { width: '10rem' } } }}\n+ data={this.state.data}\n+ rowF={rowF}\n+ />\n</>;\n}\n}\n",
        "org_msg": "Make table sortable.",
        "sim_msg": "Fix issue with sort not taking into account on re-render",
        "sim_diff": "diff --git a/src/MUIDataTable.js b/src/MUIDataTable.js @@ -165,7 +165,7 @@ class MUIDataTable extends React.Component {\n}\nreturn MUIDataTable.fallbackComparator;\n- }\n+ };\n/*\n* React currently does not support deep merge for defaultProps. Objects are overwritten\n@@ -289,6 +289,8 @@ class MUIDataTable extends React.Component {\nlet tableData = [];\nlet { columns, filterData, filterList } = this.buildColumns(props.columns);\n+ let sortIndex = null;\n+ let sortDirection = null;\ncolumns.forEach((column, colIndex) => {\nfor (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\n@@ -319,6 +321,11 @@ class MUIDataTable extends React.Component {\nconst comparator = MUIDataTable.getCollatzComparator();\nfilterData[colIndex].sort(comparator);\n}\n+\n+ if (column.sortDirection !== null) {\n+ sortIndex = colIndex;\n+ sortDirection = column.sortDirection === \"asc\" ? \"desc\" : \"asc\";\n+ }\n});\nif (options.filterList) filterList = options.filterList;\n@@ -341,6 +348,11 @@ class MUIDataTable extends React.Component {\n}\n}\n+ if (sortIndex !== null) {\n+ const sortedData = this.sortTable(tableData, sortIndex, sortDirection);\n+ tableData = sortedData.data;\n+ }\n+\n/* set source data and display Data set source set */\nthis.setState(\nprevState => ({\n",
        "chatgpt_cot": "Refactor TopCards component to use SortableTable, remove PagedTable, and simplify data sorting logic."
    },
    {
        "org_diff": "diff --git a/src/topcards.js b/src/topcards.js import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n+import PropTypes from 'prop-types';\nimport URLSearchParams from 'core-js-pure/features/url-search-params';\n-import FilterCollapse from './components/FilterCollapse';\n-import SortableTable from './components/SortableTable';\n-import withAutocard from './components/WithAutocard';\n-import { encodeName } from './utils/Card';\n+import { encodeName } from 'utils/Card';\n+\n+import FilterCollapse from 'components/FilterCollapse';\n+import SortableTable from 'components/SortableTable';\n+import withAutocard from 'components/WithAutocard';\nconst AutocardA = withAutocard('a');\n@@ -13,10 +15,12 @@ class TopCards extends Component {\nconstructor(props) {\nsuper(props);\n+ const { defaultData, defaultNumResults } = props;\n+\nthis.state = {\nfilter: [],\n- data: this.props.defaultData || [],\n- numResults: this.props.defaultNumResults || 0,\n+ data: defaultData || [],\n+ numResults: defaultNumResults || 0,\n};\nthis.setFilter = this.setFilter.bind(this);\n@@ -38,13 +42,15 @@ class TopCards extends Component {\n}\nrender() {\n- const rowF = ([name, img, img_flip, rating, picks, elo, cubes]) =>\n+ const { data, filter, numResults } = this.state;\n+\n+ const rowF = ([name, img, imgFlip, rating, picks, elo, cubes]) =>\nrating === null ? (\n[]\n) : (\n<tr key={name}>\n<td>\n- <AutocardA front={img} back={img_flip || undefined} href={`/tool/card/${encodeName(name)}`}>\n+ <AutocardA front={img} back={imgFlip || undefined} href={`/tool/card/${encodeName(name)}`}>\n{name}\n</AutocardA>\n</td>\n@@ -61,10 +67,10 @@ class TopCards extends Component {\n<h4 className=\"mx-3 mb-3\">Top Cards</h4>\n<FilterCollapse\nisOpen\n- filter={this.state.filter}\n+ filter={filter}\nsetFilter={this.setFilter}\n- numCards={this.state.numResults}\n- numShown={this.state.data.length}\n+ numCards={numResults}\n+ numShown={data.length}\n/>\n</div>\n<SortableTable\n@@ -82,7 +88,7 @@ class TopCards extends Component {\n'Total Picks': { style: { width: '10rem' }, tooltip: 'Total picks across all cubes' },\nCubes: { style: { width: '10rem' }, tooltip: 'Cubes containing this card' },\n}}\n- data={this.state.data}\n+ data={data}\nrowF={rowF}\nclassName=\"mt-3\"\n/>\n@@ -91,8 +97,13 @@ class TopCards extends Component {\n}\n}\n+TopCards.propTypes = {\n+ defaultData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.any)).isRequired,\n+ defaultNumResults: PropTypes.number.isRequired,\n+}\n+\nconst data = JSON.parse(document.getElementById('topcards').value);\n-const numResults = parseInt(document.getElementById('topcardsNumResults').value);\n+const numResults = parseInt(document.getElementById('topcardsNumResults').value, 10);\nconst wrapper = document.getElementById('react-root');\nconst element = <TopCards defaultData={data} defaultNumResults={numResults} />;\nif (wrapper) {\n",
        "org_msg": "Fix topcards.js.",
        "sim_msg": "Wrap all CivicCards in error boundaries",
        "sim_diff": "diff --git a/packages/component-library/src/CivicCard/CivicCard.js b/packages/component-library/src/CivicCard/CivicCard.js @@ -2,9 +2,13 @@ import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DataChecker from \"./utils/DataChecker\";\nimport CivicCardLayoutFull from \"./CivicCardLayoutFull\";\n+import ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\nimport { cardMetaKeys, optionalCardMetaKeys } from \"./cardMetaTypes\";\nconst CivicCard = ({ cardMeta, data, isLoading, Layout }) => (\n+ <ErrorBoundary\n+ customMessage={`CivicCard: \"${cardMeta(data).title}\" failed to load`}\n+ >\n<DataChecker\ndata={cardMeta(data)}\ndataAccessors={cardMetaKeys}\n@@ -14,6 +18,7 @@ const CivicCard = ({ cardMeta, data, isLoading, Layout }) => (\n>\n<Layout cardMeta={cardMeta(data)} isLoading={isLoading} data={data} />\n</DataChecker>\n+ </ErrorBoundary>\n);\nCivicCard.propTypes = {\n",
        "chatgpt_cot": "Add PropTypes for defaultData and defaultNumResults, refactor imports to use absolute paths, update AutocardA props, and improve code readability in TopCards component."
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"prettier-master\": \"prettier --write $(git diff master --name-only | grep -E '.js$')\",\n\"prettier-head\": \"prettier --write $(git diff HEAD --name-only | grep -E '.js$')\",\n\"lint\": \"prettier --check {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js' && eslint app.js models public/js routes serverjs src\",\n- \"nodemon\": \"nodemon --ignore src --ignore public\",\n+ \"nodemon\": \"nodemon --ignore src --ignore public --ignore private --ignore dist/pages --ignore __tests__\",\n\"webpack-dev-server\": \"webpack-dev-server --config webpack.dev.js\",\n\"build\": \"webpack --mode production --config webpack.prod.js --progress\",\n- \"start\": \"nodemon --ignore src --ignore public --ignore dist/pages & webpack-dev-server --config webpack.dev.js & webpack --mode development --config webpack.server.js --watch\",\n+ \"start\": \"npm run nodemon & webpack-dev-server --config webpack.dev.js & webpack --mode development --config webpack.server.js --watch\",\n\"test\": \"jest --silent --detectOpenHandles --coverage\",\n\"setup\": \"webpack --mode development --config webpack.server.js --progress && node --max-old-space-size=4096 force_update.js\"\n},\n",
        "org_msg": "Ignore tests and private for nodemon.",
        "sim_msg": "Fix lint script path",
        "sim_diff": "diff --git a/package.json b/package.json \"test\": \"cross-env STEEMCONNECT_IMG_HOST=https://img.busy.org jest\",\n\"test:watch\": \"cross-env STEEMCONNECT_IMG_HOST=https://img.busy.org jest --watch\",\n\"test:coverage\": \"cross-env STEEMCONNECT_IMG_HOST=https://img.busy.org jest --coverage\",\n- \"eslint-autofix\": \"eslint --fix src/**/*.js\",\n- \"lint\": \"eslint src/**/*.js\",\n+ \"eslint-autofix\": \"eslint --fix \\\"src/**/*.js\\\"\",\n+ \"lint\": \"eslint \\\"src/**/*.js\\\"\",\n\"run:server\": \"nodemon --watch busy.server.js busy.server.js\",\n\"build:server:dev\": \"cross-env NODE_ENV=development webpack --progress --config ./webpack/webpack.server.config.js\",\n\"build:server\": \"cross-env NODE_ENV=production webpack -p --config ./webpack/webpack.server.config.js\",\n",
        "chatgpt_cot": "Update package.json with prettier, nodemon, webpack and jest configurations for development and testing environment."
    },
    {
        "org_diff": "diff --git a/src/util/Filter.js b/src/util/Filter.js @@ -201,29 +201,25 @@ const rarityMap = new Map([\n['m', 'mythic']\n]);\n-const simplifyCategoryMaps = new Map([\n- ['color', colorMap],\n- ['identity', colorMap],\n- ['rarity', rarityMap]\n-]);\n-\n//change arguments into their verifiable counteraprts, i.e. 'azorius' becomes 'uw'\nfunction simplifyArg(arg, category) {\n- let res = arg;\n- if (simplifyCategoryMaps.has(category)) {\n- let map = simplifyCategoryMaps.get(category);\n- let argLower = arg.toLowerCase()\n- res = map.has(argLower) ? map.get(argLower) : arg;\n- }\n+ let res = arg.toLowerCase();\nswitch (category) {\ncase 'color':\ncase 'identity':\n+ res = colorMap.get(res) || res;\nres = res.toUpperCase().split('');\nbreak;\ncase 'mana':\nres = parseManaCost(res)\nbreak;\n+ case 'rarity':\n+ console.log(rarityMap);\n+ console.log(res);\n+ console.log(rarityMap.get(res));\n+ res = rarityMap.get(res) || res;\n+ break;\n}\nreturn res;\n}\n",
        "org_msg": "Remove extra map and simplify conditional from responses to",
        "sim_msg": "set filtered_out to false for everything before redoing the filtering",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -539,7 +539,7 @@ list.filterList = function(search_words, filter_param) {\nnormally_visible_map_items.style(\"display\", \"inline\");\n//set everything that should be visible to unfiltered\n- selected_list_items.each(function (d) {\n+ all_list_items.each(function (d) {\nd.filtered_out = false\n})\n@@ -547,11 +547,11 @@ list.filterList = function(search_words, filter_param) {\nmediator.publish(\"record_action\", \"none\", \"filter\", config.user_id, \"filter_list\", null, \"search_words=\" + search_words + \"filter_param=\"+filter_param);\n// Now actually do the filtering (i.e. remove some object from list and map)\n- this.hideEntriesByWord(selected_list_items, search_words);\n- this.hideEntriesByWord(normally_visible_map_items, search_words);\n+ this.hideEntriesByWord(all_list_items, search_words);\n+ this.hideEntriesByWord(all_map_items, search_words);\n- this.hideEntriesByParam(selected_list_items, filter_param);\n- this.hideEntriesByParam(normally_visible_map_items, filter_param);\n+ this.hideEntriesByParam(all_list_items, filter_param);\n+ this.hideEntriesByParam(all_map_items, filter_param);\n};\n// Returns true if document has parameter or if no parameter is passed\n",
        "chatgpt_cot": "Refactor simplifyArg method to handle rarity category and simplify color and identity categories using colorMap in Filter.js."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -269,5 +269,13 @@ function convertCard(card, isExtra) {\nmodule.exports = {\nupdateCardbase: updateCardbase,\n- downloadDefaultCards: downloadDefaultCards\n+ downloadDefaultCards: downloadDefaultCards,\n+ convertCard: convertCard,\n+ convertName: convertName,\n+ convertId: convertId,\n+ convertLegalities: convertLegalities,\n+ convertType: convertType,\n+ convertColors: convertColors,\n+ convertParsedCost: convertParsedCost,\n+ convertCmc: convertCmc\n};\n\\ No newline at end of file\n",
        "org_msg": "add fixture and test for convertCard",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "\"Add new conversion methods and update export module in updatecards.js\""
    },
    {
        "org_diff": "diff --git a/src/components/DeckPreview.js b/src/components/DeckPreview.js @@ -16,7 +16,12 @@ const DEFAULT_DECK_NAME = 'Untitled Deck';\n* Pulled string truncation logic out of component render and made it more\n* abstract and reusable. Consider refactoring into shared utilities.\n*/\n-const truncateToLength = (len, s) => (!s ? '' : s.length > len ? `${s.slice(0, len - 3)}...` : s);\n+const truncateToLength = (len, s) => {\n+ if (!s) {\n+ return '';\n+ }\n+ return s.length > len ? `${s.slice(0, len - 3)}...` : s;\n+};\nconst DeckPreview = ({ deck, canEdit, nextURL }) => {\nconst { date } = deck;\n@@ -25,18 +30,18 @@ const DeckPreview = ({ deck, canEdit, nextURL }) => {\n/** 2020-11-17 struesdell:\n* Refactored name derivation to take advantage of react.useMemo\n*/\n- let [fullName, name] = useMemo(\n+ const [fullName, name] = useMemo(\n() =>\ndeck && deck.seats && deck.seats[0].name\n? [deck.seats[0].name, truncateToLength(MAX_LENGTH, deck.seats[0].name)]\n: [DEFAULT_DECK_NAME, DEFAULT_DECK_NAME],\n- [deck],\n+ [deck]\n);\nconst handleClick = useKeyHandlers(\nuseCallback(() => {\nwindow.location.href = `/cube/deck/${deck._id}`;\n- }, [deck._id]),\n+ }, [deck._id])\n);\nconst openDeleteModal = (event) => {\n@@ -83,7 +88,9 @@ const DeckPreview = ({ deck, canEdit, nextURL }) => {\n</a>{' '}\nby{' '}\n{deck.seats[0].userid ? (\n- <a href={`/user/view/${deck.seats[0].userid}`}>{deck.seats[0].username}</a>\n+ <a href={`/user/view/${deck.seats[0].userid}`}>\n+ {deck.seats[0].username}\n+ </a>\n) : (\n'Anonymous'\n)}{' '}\n",
        "org_msg": "Fix: Resolved Code Style failures",
        "sim_msg": "shorten: the ellipsis length doesn't count",
        "sim_diff": "diff --git a/vis/js/utils/string.js b/vis/js/utils/string.js @@ -87,7 +87,5 @@ export const shorten = (string, length, end = \"...\") => {\nreturn string;\n}\n- let newString = string.substr(0, length - end.length) + end;\n-\n- return newString;\n+ return string.substr(0, length) + end;\n};\n",
        "chatgpt_cot": "Refactor string truncation logic into a reusable function, update useMemo usage for name derivation, and improve code readability in DeckPreview component."
    },
    {
        "org_diff": "diff --git a/src/pages/LeaveWarningPage.js b/src/pages/LeaveWarningPage.js @@ -2,7 +2,7 @@ import React from 'react';\nimport PropTypes from 'prop-types';\nimport UserPropType from 'proptypes/UserPropType';\n-import { Card, CardHeader, CardBody, Button } from 'reactstrap';\n+import { Card, CardHeader, CardBody, Button, CardFooter } from 'reactstrap';\nimport DynamicFlash from 'components/DynamicFlash';\nimport MainLayout from 'layouts/MainLayout';\nimport ButtonLink from 'components/ButtonLink';\n@@ -21,16 +21,16 @@ const LeaveWarningPage = ({ user, url, loginCallback }) => (\n<p>\nThis link leads to: <code>{url}</code>\n</p>\n- <p>Are you sure you wish to proceed?</p>\n- <p>\n+ <p>Are you sure you want to proceed?</p>\n+ </CardBody>\n+ <CardFooter>\n<ButtonLink href={url} color=\"danger\" outline>\nYes, continue\n</ButtonLink>\n- <Button className=\"btn\" color=\"secondary\" onClick={back}>\n+ <Button className=\"ml-1\" color=\"secondary\" onClick={back}>\nGo back\n</Button>\n- </p>\n- </CardBody>\n+ </CardFooter>\n</Card>\n</MainLayout>\n);\n",
        "org_msg": "Cosmetic adjustments",
        "sim_msg": "close carousel on back forward for external profile",
        "sim_diff": "diff --git a/pages/_/profile.js b/pages/_/profile.js import * as React from \"react\";\nimport * as Constants from \"~/common/constants\";\nimport * as Strings from \"~/common/strings\";\n+import * as Events from \"~/common/custom-events\";\nimport { css } from \"@emotion/react\";\nimport { ButtonPrimary } from \"~/components/system/components/Buttons\";\n@@ -42,7 +43,7 @@ export default class ProfilePage extends React.Component {\n_handleBackForward = (e) => {\nlet page = window.history.state;\nthis.setState({ page });\n- // Events.dispatchCustomEvent({ name: \"slate-global-close-carousel\", detail: {} });\n+ Events.dispatchCustomEvent({ name: \"slate-global-close-carousel\", detail: {} });\n};\nrender() {\n",
        "chatgpt_cot": "\"Add CardFooter to LeaveWarningPage for improved UI and user experience\""
    },
    {
        "org_diff": "diff --git a/src/hooks/UseNewID.js b/src/hooks/UseNewID.js @@ -3,7 +3,10 @@ import { useMemo } from 'react';\nlet lastID = 1000;\nconst useNewID = () => {\n- return useMemo(() => `id-${lastID++}`, []);\n+ return useMemo(() => {\n+ lastID += 1;\n+ return `id-${lastID}`;\n+ }, []);\n};\nexport default useNewID;\n",
        "org_msg": "Fix UseNewID.js.",
        "sim_msg": "feat(hooks): add useEscapeKey and useLockScroll hooks",
        "sim_diff": "diff --git a/common/hooks.js b/common/hooks.js @@ -410,3 +410,20 @@ export const useTimeout = (callback, ms, dependencies) => {\nreturn () => clearTimeout(timeoutId);\n}, dependencies);\n};\n+export const useEscapeKey = (callback) => {\n+ const handleKeyUp = React.useCallback(\n+ (e) => {\n+ if (e.key === \"Escape\") callback();\n+ },\n+ [callback]\n+ );\n+ useEventListener(\"keyup\", handleKeyUp, [handleKeyUp]);\n+};\n+\n+export const useLockScroll = ({ lock = true }) => {\n+ React.useEffect(() => {\n+ if (!lock) return;\n+ document.body.style.overflow = \"hidden\";\n+ return () => (document.body.style.overflow = \"visible\");\n+ }, [lock]);\n+};\n",
        "chatgpt_cot": "Refactor useNewID hook to update lastID variable within useMemo callback for better readability and maintainability."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2315,9 +2315,9 @@ router.get('/deck/:id', function(req, res) {\nif (carddb.cardFromId(cardid).error) {\nconsole.log(req.params.id + \": Could not find seat \" + (bot_decks.length + 1) + \", pick \" + (bot_deck.length + 1));\n} else {\n- card.details = carddb.cardFromId(cardid);\n- card.details.display_image = util.getCardImageURL(card);\n- bot_deck.push(card.details);\n+ var details = carddb.cardFromId(cardid);\n+ details.display_image = util.getCardImageURL(card);\n+ bot_deck.push(details);\n}\n});\nbot_decks.push(bot_deck);\n",
        "org_msg": "Fixed bot decks",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Refactor card details assignment in cube_routes.js for clarity and consistency. Fixes issue with display image URL assignment."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1637,7 +1637,7 @@ function startCustomDraft(req, res, params, cube) {\n}\nelse\n{\n- util.shuffle(cards);\n+ var cardpool = util.shuffle(cards.slice());\nvar format = JSON.parse(cube.draft_formats[params.id].packs);\nfor(j = 0; j < format.length; j++)\n{\n@@ -1675,11 +1675,11 @@ function startCustomDraft(req, res, params, cube) {\n{\ndraft.packs[i][j].push(0);\nvar tag = format[j][k][Math.floor(Math.random()*format[j][k].length)];\n- var index = draftutil.indexOfTag(cards, tag);\n+ var index = draftutil.indexOfTag(cardpool, tag);\n//slice out the first card with the index, or error out\nif(index != -1)\n{\n- draft.packs[i][j][k] = cards.splice(index, 1)[0];\n+ draft.packs[i][j][k] = cardpool.splice(index, 1)[0];\n}\nelse\n{\n",
        "org_msg": "properly randomize cardpool before building custom draft packs\nfixes",
        "sim_msg": "Tokens cleanup",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -1150,7 +1150,7 @@ const _getTokenHtml = cardData => {\n</div>\n`;\n};\n-(async () => {\n+/* (async () => {\nconst totalObjects = await contract.methods.getNonce().call();\nconst ts = [];\nfor (let i = 1; i <= totalObjects; i++) {\n@@ -1173,7 +1173,7 @@ const _getTokenHtml = cardData => {\n});\n});\n}\n-})();\n+})(); */\n/* const scenes = document.getElementById('scenes');\n(async () => {\nconst res = await fetch(scenesEndpoint);\n",
        "chatgpt_cot": "fix compilation issue due to shuffle method in cube_routes file."
    },
    {
        "org_diff": "diff --git a/src/topcards.js b/src/topcards.js @@ -36,7 +36,7 @@ class TopCards extends Component {\nconst rowF = ([name, img, img_flip, rating, picks]) => rating === null ? [] :\n<tr key={name}>\n<td className=\"autocard\" card={img} card_flip={img_flip || undefined}>{name}</td>\n- <td>{rating === null ? 'None' : (rating * 100).toFixed(0)}</td>\n+ <td>{rating === null ? 'None' : ((1 - rating) * 100).toFixed(0)}</td>\n<td>{picks}</td>\n</tr>;\n",
        "org_msg": "Subtract card ratings from 100.",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Fix rating calculation in TopCards component. Modify the calculation to display the correct percentage value for the rating."
    },
    {
        "org_diff": "diff --git a/src/components/ListView.js b/src/components/ListView.js @@ -242,7 +242,7 @@ const ListViewRow = ({ card, versions, checked, onCheck, addAlert }) => {\ntype=\"checkbox\"\nbsSize=\"sm\"\ndata-index={index}\n- value={checked}\n+ checked={checked}\nonChange={onCheck}\nclassName=\"d-block mx-auto\"\n/>\n",
        "org_msg": "Fix ListView checkboxes.",
        "sim_msg": "Pass ListView#controller to item views",
        "sim_diff": "diff --git a/source/Overture/views/collections/ListView.js b/source/Overture/views/collections/ListView.js @@ -49,6 +49,7 @@ const ListView = Class({\nend: 0x7fffffff, // Max positive signed 32bit int: 2^31 - 1\n};\n+ this.controller = null;\nthis.selection = null;\nListView.parent.init.apply( this, arguments );\n@@ -139,12 +140,13 @@ const ListView = Class({\ncreateItemView ( content, index, list, isAdded ) {\nconst ItemView = this.get( 'ItemView' );\nreturn new ItemView({\n+ controller: this.get( 'controller' ),\n+ selection: this.get( 'selection' ),\nparentView: this,\ncontent,\nindex,\nlist,\nisAdded,\n- selection: this.get( 'selection' ),\n});\n},\n",
        "chatgpt_cot": "Fix checkbox value assignment in ListViewRow component. Set checked attribute instead of value for proper checkbox functionality."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -224,8 +224,8 @@ router.get('/api/downloadcubes/:page/:key', async (req, res) => {\n}\nlet cubeQ;\n- if (req.query.maxShortId) {\n- cubeQ = Deck.find({ shortID: { $gt: req.query.maxShortId } }, 'cards shortID')\n+ if (req.query.prevMax) {\n+ cubeQ = Deck.find({ shortID: { $gt: req.query.prevMax } }, 'cards shortID')\n.sort({ shortID: 1 })\n.limit(cubePageSize)\n.lean();\n@@ -238,10 +238,10 @@ router.get('/api/downloadcubes/:page/:key', async (req, res) => {\n}\nconst cubes = await cubeQ;\n- const maxShortId = cubes[cubes.length - 1].shortID;\n+ const prevMax = cubes[cubes.length - 1].shortID;\nreturn res.status(200).send({\nsuccess: 'true',\n- maxShortId,\n+ prevMax,\npages: Math.ceil(count / cubePageSize),\ncubes: cubes.map((cube) => cube.cards.map((card) => carddb.cardFromId(card.cardID).name_lower)),\n});\n@@ -272,8 +272,8 @@ router.get('/api/downloaddecks/:page/:key', async (req, res) => {\n}\nlet deckQ;\n- if (req.query.maxDate) {\n- deckQ = Deck.find({ date: { $gt: req.query.maxDate } }, 'seats date')\n+ if (req.query.prevMax) {\n+ deckQ = Deck.find({ date: { $gt: req.query.prevMax } }, 'seats date')\n.sort({ date: 1 })\n.limit(deckPageSize)\n.lean();\n@@ -286,11 +286,11 @@ router.get('/api/downloaddecks/:page/:key', async (req, res) => {\n}\nconst decks = await deckQ;\n- const maxDate = decks[decks.length - 1].date;\n+ const prevMax = decks[decks.length - 1].date;\nreturn res.status(200).send({\nsuccess: 'true',\n- maxDate,\n+ prevMax,\npages: Math.ceil(count / deckPageSize),\ndecks: decks.map((deck) => {\nconst main = [];\n",
        "org_msg": "Use consistent parameter name for prevMax.",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "Refactor code to use more descriptive variable names for clarity and consistency. Update \"maxShortId\" to \"prevMax\" and \"maxDate\" to \"prevMax\" for better readability."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -1824,7 +1824,7 @@ function renderTableView() {\ncmc = card.cmc;\n}\nif (card.cmc != cmc) {\n- if (index + 1 == rowgroup.length) {\n+ if (index == rowgroup.length) {\nres += \"\";\n} else {\nres += '</div><div class=\"cmc-group\">';\n",
        "org_msg": "Fixes CMC Divider issues\nfixes:\nIssue was unrelated to sorts or filters, it was just easier to spot with fewer entries",
        "sim_msg": "Bugfix matrix during attachment",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -1830,6 +1830,10 @@ const _renderObjects = () => {\nconst j = JSON.parse(s);\nconst {index} = j;\nconst cp = pe.children[index];\n+\n+ localMatrix.copy(cp.matrixWorld)\n+ .premultiply(localMatrix2.getInverse(p.matrixWorld));\n+ cp.setMatrix(localMatrix);\np.add(cp);\n}\n});\n",
        "chatgpt_cot": "Fix index condition in renderTableView function in editcube.js"
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.js b/__tests__/serverjs/updatecards.js +const rimraf = require(\"rimraf\");\nconst updatecards = require(\"../../serverjs/updatecards\");\nconst fs = require('fs');\nbeforeEach(() => {\n- // delete /private\n+ rimraf.sync(\"private\");\n});\n-test(\"updateCardBase creates the expected files\", () => {\n+afterEach(() => {\n+ rimraf.sync(\"private\");\n+});\n+\n+test(\"updateCardbase creates the expected files\", () => {\nexpect.assertions(7);\nvar promise = new Promise((resolve, reject) => {\nprocess.nextTick(() => {\n",
        "org_msg": "delete private before and after updatecards tests",
        "sim_msg": "Test Of Courage",
        "sim_diff": "diff --git a/server/game/cards/02.3-ItFC/TestOfCourage.js b/server/game/cards/02.3-ItFC/TestOfCourage.js const DrawCard = require('../../drawcard.js');\nclass TestOfCourage extends DrawCard {\n- setupCardAbilities(ability) { // eslint-disable-line no-unused-vars\n+ setupCardAbilities() {\n+ this.action({\n+ title: 'Move into conflict',\n+ condition: () => this.game.currentConflict && this.controller.opponent && this.controller.showBid < this.controller.opponent.showBid,\n+ target: {\n+ cardType: 'character',\n+ gameAction: 'moveToConflict',\n+ cardCondition: card => card.location === 'play area' && !card.isParticipating() &&\n+ card.controller === this.controller && card.isFaction('lion')\n+ },\n+ handler: context => {\n+ this.game.addMessage('{0} plays {1}, moving {2} into conflict', this.controller, this, context.target);\n+ let honorEvent = {\n+ name: 'onCardHonored',\n+ params: { player: this.controller, card: context.target, source: this },\n+ handler: event => {\n+ this.game.addMessage('{0} honors {1}', this, event.card);\n+ event.card.honor();\n+ }\n+ };\n+ let moveEvent = {\n+ name: 'onMoveToConflict',\n+ params: { card: context.target, conflict: this.game.currentConflict, thenEvents: [honorEvent] },\n+ handler: event => {\n+ console.log('executing handler')\n+ if(this.controller.isAttackingPlayer()) {\n+ event.conflict.addAttacker(event.card);\n+ } else {\n+ event.conflict.addDefender(event.card);\n+ }\n+ return { resolved: true, success: true };\n+ }\n+ };\n+ this.game.raiseMultipleEvents([moveEvent], {\n+ name: 'onMoveCharactersToConflict',\n+ params: { cards: [context.target], conflict: this.game.currentConflict }\n+ });\n+ }\n+ })\n}\n}\n-TestOfCourage.id = 'test-of-courage'; // This is a guess at what the id might be - please check it!!!\n+TestOfCourage.id = 'test-of-courage';\nmodule.exports = TestOfCourage;\n",
        "chatgpt_cot": "Add rimraf dependency, update beforeEach and afterEach to clean \"private\" directory, fix typo in test name."
    },
    {
        "org_diff": "diff --git a/src/components/EditCollapse.js b/src/components/EditCollapse.js import React, { useCallback, useContext, useRef, useState } from 'react';\n-import { Button, Col, Collapse, Form, Row, UncontrolledAlert } from 'reactstrap';\n+import { Button, Col, Collapse, Form, InputGroup, InputGroupAddon, Row, UncontrolledAlert } from 'reactstrap';\nimport { encodeName } from '../utils/Card';\n@@ -10,6 +10,7 @@ import Changelist from './Changelist';\nimport ChangelistContext from './ChangelistContext';\nimport CubeContext from './CubeContext';\nimport CSRFForm from './CSRFForm';\n+import DisplayContext from './DisplayContext';\nexport const getCard = async (name, setAlerts) => {\nif (name && name.length > 0) {\n@@ -55,6 +56,7 @@ const EditCollapse = ({ cubeID, ...props }) => {\nsetChanges,\n} = useContext(ChangelistContext);\nconst { cube } = useContext(CubeContext);\n+ const { toggleShowMaybeboard } = useContext(DisplayContext);\nconst changelistForm = useRef();\n@@ -142,14 +144,14 @@ const EditCollapse = ({ cubeID, ...props }) => {\n{message}\n</UncontrolledAlert>\n))}\n- <Row>\n- <Col xs=\"12\" sm=\"auto\">\n- <Form inline className=\"mb-2\" onSubmit={handleAdd}>\n+ <Row noGutters>\n+ <Row noGutters className=\"mr-auto\">\n+ <Form inline className=\"mb-2 mr-2\" onSubmit={handleAdd}>\n+ <InputGroup className=\"flex-nowrap\">\n<AutocompleteInput\ntreeUrl=\"/cube/api/cardnames\"\ntreePath=\"cardnames\"\ntype=\"text\"\n- className=\"mr-2\"\ninnerRef={addInputRef}\nname=\"add\"\nvalue={addValue}\n@@ -158,19 +160,21 @@ const EditCollapse = ({ cubeID, ...props }) => {\nplaceholder=\"Card to Add\"\nautoComplete=\"off\"\ndata-lpignore\n+ className=\"square-right\"\n/>\n+ <InputGroupAddon addonType=\"append\">\n<Button color=\"success\" type=\"submit\" disabled={addValue.length === 0}>\n- Just Add\n+ Add\n</Button>\n+ </InputGroupAddon>\n+ </InputGroup>\n</Form>\n- </Col>\n- <Col xs=\"12\" sm=\"auto\">\n- <Form inline className=\"mb-2\" onSubmit={handleRemoveReplace}>\n+ <Form inline className=\"mb-2 mr-2\" onSubmit={handleRemoveReplace}>\n+ <InputGroup className=\"flex-nowrap\">\n<AutocompleteInput\ntreeUrl={`/cube/api/cubecardnames/${cubeID}`}\ntreePath=\"cardnames\"\ntype=\"text\"\n- className=\"mr-2\"\ninnerRef={removeInputRef}\nname=\"remove\"\nvalue={removeValue}\n@@ -179,12 +183,19 @@ const EditCollapse = ({ cubeID, ...props }) => {\nplaceholder=\"Card to Remove\"\nautoComplete=\"off\"\ndata-lpignore\n+ className=\"square-right\"\n/>\n+ <InputGroupAddon addonType=\"append\">\n<Button color=\"success\" type=\"submit\" disabled={removeValue.length === 0}>\nRemove/Replace\n</Button>\n+ </InputGroupAddon>\n+ </InputGroup>\n</Form>\n- </Col>\n+ </Row>\n+ <Button color=\"primary\" className=\"mb-2\" onClick={toggleShowMaybeboard}>\n+ Maybeboard\n+ </Button>\n</Row>\n<Collapse isOpen={changes.length > 0} className=\"pt-1\">\n<CSRFForm innerRef={changelistForm} method=\"POST\" action={`/cube/edit/${cubeID}`}>\n",
        "org_msg": "Add button to get to maybe from EditCollapse.",
        "sim_msg": "Fix dashboard card alignment for non-en languages",
        "sim_diff": "diff --git a/renderer/pages/home.js b/renderer/pages/home.js @@ -5,7 +5,7 @@ import Raven from 'raven-js'\nimport * as chroma from 'chroma-js'\nimport styled from 'styled-components'\nimport { MdHelp, MdClear } from 'react-icons/md'\n-import { Button, Box, Flex, Heading, Card } from 'ooni-components'\n+import { Button, Text, Box, Flex, Heading, Card } from 'ooni-components'\nimport { FormattedMessage } from 'react-intl'\nimport Layout from '../components/Layout'\n@@ -68,6 +68,8 @@ const FrontCardContent = ({\n}) => (\n<Box width={1 / 2} pr={3} pb={3}>\n<Card\n+ // fontSize={0} because padding on Card is controlled by `fontSizeMult`\n+ fontSize={0}\ndata-test-id={`card-${id}`}\nbg={color}\ncolor=\"white\"\n@@ -77,18 +79,20 @@ const FrontCardContent = ({\n<MdHelp onClick={toggleCard} size={30} />\n</TopLeftFloatingButton>\n<CardContent>\n- <Heading h={2}>{name}</Heading>\n- <BgIcon>{icon}</BgIcon>\n- <Flex pt={5} alignItems=\"center\">\n- <Box width={3 / 4} pr={4}>\n+ <Flex flexDirection='column' justifyContent='space-between' style={{ height: '200px'}}>\n+ <Text fontSize={4} fontWeight={300} m={0}>{name}</Text>\n+ <Text fontSize={1}>\n{description}\n- </Box>\n- <Box width={1 / 4} mr={2}>\n+ </Text>\n+ <BgIcon>{icon}</BgIcon>\n+ <Flex justifyContent='flex-end'>\n+ <Box>\n<Button inverted fontSize={1} onClick={onRun}>\n<FormattedMessage id=\"Dashboard.Card.Run\" />\n</Button>\n</Box>\n</Flex>\n+ </Flex>\n</CardContent>\n</Card>\n</Box>\n",
        "chatgpt_cot": "Add DisplayContext to EditCollapse to toggle the display of the maybeboard. Fix the issue related to the display of maybeboard."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1807,7 +1807,8 @@ router.get('/deck/download/mtgo/:id/:seat', async (req, res) => {\n}\n}\nfor (const [key, value] of Object.entries(main)) {\n- res.write(`${value} ${key}\\r\\n`);\n+ const name = key.replace(' // ', '/');\n+ res.write(`${value} ${name}\\r\\n`);\n}\nres.write('\\r\\n\\r\\n');\n",
        "org_msg": "Fix by replacing ' // ' with '/' in mtgo exports.",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "\"Fix formatting issue in cube_routes.js by replacing ' // ' with '/' in deck download function\""
    },
    {
        "org_diff": "diff --git a/src/components/GroupModal.js b/src/components/GroupModal.js @@ -59,7 +59,7 @@ class GroupModal extends Component {\ncmc: '',\ntype_line: '',\n...fromEntries([...'WUBRGC'].map(c => [`color${c}`, false])),\n- addTags: false,\n+ addTags: true,\ndeleteTags: false,\ntags: [],\n});\n",
        "org_msg": "Fix previous commit.",
        "sim_msg": "always set full obj for node group labels and anno",
        "sim_diff": "diff --git a/lib/shared/addon/components/node-group-row/component.js b/lib/shared/addon/components/node-group-row/component.js @@ -20,23 +20,11 @@ export default Component.extend({\nediting: equal('mode', 'edit'),\nactions: {\nsetTags(section) {\n- const { model: { tags = {} } } = this;\n-\n- for (let key in section) {\n- tags[key] = section[key];\n- }\n-\n- set(this, 'model.tags', tags);\n+ set(this, 'model.tags', section);\n},\nsetLabels(section) {\n- const { model: { labels = {} } } = this;\n-\n- for (let key in section) {\n- labels[key] = section[key];\n- }\n-\n- set(this, 'model.labels', labels);\n+ set(this, 'model.labels', section);\n},\n},\n",
        "chatgpt_cot": "Update GroupModal component to set addTags to true by default."
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -763,6 +763,14 @@ router.post('/updateuserinfo',ensureAuth, function(req,res,next)\n{\nuser.username = req.body.username;\nuser.username_lower = req.body.username.toLowerCase();\n+ Cube.find({'owner':req.user._id}, function (err, cubes)\n+ {\n+ for(i = 0; i < cubes.length; i++)\n+ {\n+ cubes[i].owner_name = req.body.username;\n+ Cube.updateOne({_id:cubes[i]._id}, cubes[i], function(err) {});\n+ }\n+ });\n}\n}\n}\n",
        "org_msg": "update user's cubes with their new username",
        "sim_msg": "Remove /transfer route",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -8,7 +8,6 @@ import Settings from './app/AppSettings';\nimport Page from './feed/Page';\nimport User from './user/User';\n-import Transfer from './wallet/Transfer';\nimport Tags from './tags/Tags';\nimport Donors from './statics/Donors';\nimport Post from './post/Post';\n@@ -29,13 +28,6 @@ export default (\n<Route path=\"/team\" component={Team} />\n<Route path=\"/tags\" component={Tags} />\n<Route path=\"/donors\" component={Donors} />\n- <Route\n- path=\"/transfer\"\n- render={() =>\n- (<RequireLogin>\n- <Transfer />\n- </RequireLogin>)}\n- />\n<Route\npath=\"/bookmarks\"\nrender={() =>\n",
        "chatgpt_cot": "Add functionality to update owner name in cubes owned by user in updateuserinfo route. Fixes issue with owner name not being updated in cubes."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeAnalysisPage.js b/src/pages/CubeAnalysisPage.js @@ -18,7 +18,7 @@ import Cloud from 'analytics/Cloud';\nimport HyperGeom from 'analytics/HyperGeom';\nimport Asfans from 'analytics/Asfans';\nimport Suggestions from 'analytics/Suggestions';\n-import { getCmc } from 'utils/Card';\n+import { cardCmc } from 'utils/Card';\nimport { csrfFetch } from 'utils/CSRF';\nimport FilterCollapse from 'components/FilterCollapse';\nimport useToggle from 'hooks/UseToggle';\n@@ -35,7 +35,7 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText }) => {\nconst [filterCollapseOpen, toggleFilterCollapse] = useToggle(false);\nconst characteristics = {\n- CMC: getCmc,\n+ CMC: cardCmc,\nPower: (card) => parseInt(card.details.power, 10),\nToughness: (card) => parseInt(card.details.toughness, 10),\nElo: (card) => parseFloat(card.details.elo, 10),\n",
        "org_msg": "Fix getCmc usages.",
        "sim_msg": "Register new widget.",
        "sim_diff": "diff --git a/assets/js/modules/analytics/index.js b/assets/js/modules/analytics/index.js @@ -42,6 +42,7 @@ import AnalyticsIcon from '../../../svg/analytics.svg';\nimport { STORE_NAME } from './datastore/constants';\nimport { CONTEXT_MODULE_ANALYTICS, AREA_MODULE_ANALYTICS_MAIN } from './constants';\nimport { WIDGET_AREA_STYLES } from '../../googlesitekit/widgets/datastore/constants';\n+import { ModuleAcquisitionChannelsWidget } from './components/module/ModuleAcquisitionChannelsWidget';\nexport { registerStore } from './datastore';\n@@ -127,6 +128,19 @@ export const registerWidgets = ( widgets ) => {\n],\n);\n+ widgets.registerWidget(\n+ 'analyticsModuleAcquisitionChannels',\n+ {\n+ Component: ModuleAcquisitionChannelsWidget,\n+ width: widgets.WIDGET_WIDTHS.FULL,\n+ priority: 3,\n+ wrapWidget: false,\n+ },\n+ [\n+ AREA_MODULE_ANALYTICS_MAIN,\n+ ],\n+ );\n+\nwidgets.registerWidgetArea(\nAREA_MODULE_ANALYTICS_MAIN,\n{\n",
        "chatgpt_cot": "\"Refactor CubeAnalysisPage.js to use cardCmc instead of getCmc for CMC characteristic calculation, and update import statement for cardCmc.\""
    },
    {
        "org_diff": "diff --git a/views/cube/cube_samplepack.pug b/views/cube/cube_samplepack.pug @@ -13,14 +13,11 @@ block cube_content\na.btn.btn-success.mr-2(href=`/cube/samplepack/${cube_id}`) New Pack\na.btn.btn-success(href=`/cube/samplepackimage/${cube_id}/${seed}`) Get Image\n.card-body\n- .samplepack.row\n+ .pack-body.row.justify-content-center.no-gutters\n+ .col(style=\"max-width:800px;\")\n+ .samplepack.row.justify-content-center.no-gutters\nif pack\neach card, i in pack\n- if i % 5 === 0\n- .col-md-2.offset-md-1(style='padding-top:10px;')\n- a.autocard(card=card.image_normal)\n- img.card-border.defaultCardImage( src=card.image_normal, width='150', height='210')\n- else\n- .col-md-2(style='padding-top:10px;')\n+ .col-2-4\na.autocard(card=card.image_normal)\nimg.card-border.defaultCardImage( src=card.image_normal, width='150', height='210')\n",
        "org_msg": "remove sample pack card padding",
        "sim_msg": "Swapped 3.3.7, 4.0.0-beta posistions, added info panel",
        "sim_diff": "diff --git a/views/index.pug b/views/index.pug @@ -2,11 +2,11 @@ extends layout\nblock content\nh2.text-center=title\n- h3.text-center='v' + config.bootstrap4[0].version\n+ h3.text-center='v' + config.bootstrap[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].stylesheet\n- - var sri = config.bootstrap4[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].stylesheet\n+ - var sri = config.bootstrap[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -20,9 +20,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].javascript\n- - var sri = config.bootstrap4[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].javascript\n+ - var sri = config.bootstrap[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n@@ -35,12 +35,21 @@ block content\nspan.help-block Click to copy\ninclude _partials/jscode.pug\n+ hr\n+ .panel.panel-info\n+ .panel-heading\n+ h3.panel-title Info\n+ .panel-body\n+ | Bootstrap 4 is currently in Beta release and should be treated as such. For details check out\n+ a(href='https://blog.getbootstrap.com/2017/08/10/bootstrap-4-beta/', target='_blank', rel='noopener').\n+ the Bootstrap 4 Beta announcement\n+ | .\n- h3.text-center='v' + config.bootstrap[0].version\n+ h3.text-center='v' + config.bootstrap4[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].stylesheet\n- - var sri = config.bootstrap[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].stylesheet\n+ - var sri = config.bootstrap4[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -54,9 +63,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].javascript\n- - var sri = config.bootstrap[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].javascript\n+ - var sri = config.bootstrap4[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n",
        "chatgpt_cot": "Refactor pack layout in cube_samplepack.pug to improve visual presentation and readability. Updated HTML structure and added styling for sample pack cards."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -16,13 +16,6 @@ if (!fs.existsSync('private')) {\n}\nfunction updateCardbase() {\n- dict = {};\n- names = [];\n- full_names = [];\n- nameToId = {};\n- imagedict = {};\n- cardimages = {};\n-\nvar file = fs.createWriteStream('private/cards.json');\nvar request = https.get(\"https://archive.scryfall.com/json/scryfall-default-cards.json\", function(response) {\nlet stream = response.pipe(file);\n",
        "org_msg": "remove meaningless local declarations",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "Remove unnecessary variables and objects in updateCardbase function. Update file path for writing cards.json."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -129,7 +129,7 @@ function GetPrices(card_ids, callback)\nvar chunkSize = 250;\n//max tcgplayer request size is 250\nvar chunks = [];\n- for(i = 0; i <= card_ids.length/chunkSize; i++)\n+ for(i = 0; i < card_ids.length/chunkSize; i++)\n{\nchunks.push(card_ids.slice(i*chunkSize,(i+1)*chunkSize));\n}\n@@ -170,6 +170,8 @@ function GetPrices(card_ids, callback)\n});\n});\ncallback(price_dict);\n+ }).catch(function(error) {\n+ console.log(\"error: \" + error);\n});\n});\n}\n",
        "org_msg": "Fixed issue with cubes not loading",
        "sim_msg": "added exchangeInfo, recentTrades, historicalTrades, accountStatus, 24h ticker",
        "sim_diff": "diff --git a/node-binance-api.js b/node-binance-api.js @@ -143,6 +143,58 @@ module.exports = function() {\nconsole.log(\"Unexpected userData: \"+type);\n}\n};\n+ const prevDayStreamHandler = function(data, callback) {\n+ let {\n+ e:eventType,\n+ E:eventTime,\n+ s:symbol,\n+ p:priceChange,\n+ P:percentChange,\n+ w:averagePrice,\n+ x:prevClose,\n+ c:close,\n+ Q:closeQty,\n+ b:bestBid,\n+ B:bestBidQty,\n+ a:bestAsk,\n+ A:bestAskQty,\n+ o:open,\n+ h:high,\n+ l:low,\n+ v:volume,\n+ q:quoteVolume,\n+ O:openTime,\n+ C:closeTime,\n+ F:firstTradeId,\n+ L:lastTradeId,\n+ n:numTrades\n+ } = data;\n+ callback({\n+ eventType,\n+ eventTime,\n+ symbol,\n+ priceChange,\n+ percentChange,\n+ averagePrice,\n+ prevClose,\n+ close,\n+ closeQty,\n+ bestBid,\n+ bestBidQty,\n+ bestAsk,\n+ bestAskQty,\n+ open,\n+ high,\n+ low,\n+ volume,\n+ quoteVolume,\n+ openTime,\n+ closeTime,\n+ firstTradeId,\n+ lastTradeId,\n+ numTrades\n+ });\n+ };\n////////////////////////////\nconst priceData = function(data) {\nlet prices = {};\n@@ -522,7 +574,7 @@ module.exports = function() {\nsubscribe(symbol.toLowerCase()+\"@depth\", callback);\n}\n},\n- depthCache: function depthCacheFunction(symbols, callback, limit = 100) {\n+ depthCache: function depthCacheFunction(symbols, callback, limit = 500) {\nfor ( let symbol of symbols ) {\nif ( typeof info[symbol] == \"undefined\" ) info[symbol] = {};\ninfo[symbol].firstUpdateId = 0;\n@@ -597,6 +649,21 @@ module.exports = function() {\nfor ( let symbol of symbols ) {\nsubscribe(symbol.toLowerCase()+\"@kline_\"+interval, callback, reconnect);\n}\n+ },\n+ prevDay: function prevDay(symbol, callback) {\n+ let streamName = symbol ? symbol.toLowerCase()+\"@ticker\" : \"!ticker@arr\";\n+ let reconnect = function() {\n+ if ( options.reconnect ) prevDay(symbol, callback);\n+ };\n+ subscribe(streamName, function(data) {\n+ if ( data instanceof Array ) {\n+ for ( let line of data ) {\n+ prevDayStreamHandler(line, callback);\n+ }\n+ return;\n+ }\n+ prevDayStreamHandler(data, callback);\n+ }, reconnect);\n}\n}\n};\n",
        "chatgpt_cot": "Fix loop iteration condition and add error handling in GetPrices function in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/src/components/CubeOverviewModal.js b/src/components/CubeOverviewModal.js import React, { Component } from 'react';\nimport {\n- Button,\n- Row,\n- Col,\n- Form,\n- FormGroup,\n- Input,\n- Label,\n- InputGroup,\n- InputGroupAddon,\n- InputGroupText,\n- ListGroup,\nModal,\nModalBody,\nModalFooter,\nModalHeader,\n- UncontrolledAlert,\n+ Card,\n+ CardHeader,\n+ Row,\n+ Col,\n} from 'reactstrap';\nimport { csrfFetch } from '../util/CSRF';\n@@ -172,6 +164,14 @@ class CubeOverviewModal extends Component {\n<br/>\n<h6>Image</h6>\n+ <Row>\n+ <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"6\">\n+ <Card>\n+ <CardHeader>Preview</CardHeader>\n+ <img className='card-img-top w-100' src={cube.image_uri} />\n+ </Card>\n+ </Col>\n+ </Row>\n<br/>\n<h6>Description</h6>\n",
        "org_msg": "Add Image preview",
        "sim_msg": "fix: carousel sidebar section text",
        "sim_diff": "diff --git a/components/core/CarouselSidebarData.js b/components/core/CarouselSidebarData.js @@ -469,7 +469,7 @@ class CarouselSidebarData extends React.Component {\n</div>\n);\n}\n- console.log(Validations.isPreviewableImage(type));\n+\nelements.push(\n<div key=\"s-2\" style={{ marginBottom: 80 }}>\n<div css={STYLES_META}>\n@@ -583,6 +583,9 @@ class CarouselSidebarData extends React.Component {\n)}\n{this.props.isOwner && (\n<React.Fragment>\n+ <System.P css={STYLES_SECTION_HEADER} style={{ margin: \"48px 0px 8px 0px\" }}>\n+ Preview image\n+ </System.P>\n<System.P css={STYLES_TEXT}>Add a cover image for your file.</System.P>\n<div style={{ marginTop: 16 }}>\n",
        "chatgpt_cot": "Refactor CubeOverviewModal to use Card component for image preview, improving UI consistency and readability. Updated import statements and added Card component for image display."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cards.test.js b/__tests__/serverjs/cards.test.js @@ -198,11 +198,25 @@ test('allVersions correctly maps a cardname to an ID', () => {\n});\n});\n-test('getMostReasonable correctly gets a card', async () => {\n+test('allVersions correctly maps a cardname to an ID', () => {\n+ expect.assertions(2);\n+ const promise = carddb.initializeCardDb(fixturesPath, true);\n+ return promise.then(() => {\n+ const expected = _RankleMasterofFixtures._id;\n+ const result = carddb.allVersions({\n+ name: 'Rankle, Master of Pranks',\n+ });\n+ expect(result.length).toBe(1);\n+ expect(result[0]).toBe(expected);\n+ });\n+});\n+\n+test('getVersionsByOracleId correctly gets all printings of a card', async () => {\nexpect.assertions(1);\nawait carddb.initializeCardDb(fixturesPath, true);\n- const expected = _RankleMasterofFixtures;\n- const result = carddb.getMostReasonable('Rankle, Master of Pranks');\n+ // Sorcerous Spyglass: two printings in IXN and ELD.\n+ const expected = new Set(['e47e85d1-8c4a-43a9-92b3-7cb2a5b89219', '85506a24-8d60-475c-9f43-65994caca7d4']);\n+ const result = new Set(carddb.getVersionsByOracleId('b2187f45-80ae-4ac4-9f83-5eb7a00978e2'));\nexpect(result).toEqual(expected);\n});\n",
        "org_msg": "Add test for getVersionsByOracleId.",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "\"Fix compilation issue by adding new test and modifying existing test in cards.test.js\""
    },
    {
        "org_diff": "diff --git a/src/components/DeckbuilderNavbar.js b/src/components/DeckbuilderNavbar.js @@ -21,9 +21,7 @@ import {\nimport CSRFForm from 'components/CSRFForm';\nimport CustomImageToggler from 'components/CustomImageToggler';\n-import { COLOR_COMBINATIONS } from 'utils/Card';\n-import { addSeen, buildDeck, calculateBasicCounts } from 'utils/Draft';\n-import { fromEntries } from 'utils/Util';\n+import { addSeen, buildDeck, calculateBasicCounts, createSeen } from 'utils/Draft';\nconst COLORS = [\n['White', 'W', 'Plains'],\n@@ -52,8 +50,7 @@ const BasicsModal = ({ isOpen, toggle, addBasics, deck, draft }) => {\nconst calculateBasics = useCallback(async () => {\nconst main = deck.flat(2);\n- const picked = fromEntries(COLOR_COMBINATIONS.map((comb) => [comb.join(''), 0]));\n- picked.cards = [];\n+ const picked = createSeen();\naddSeen(picked, main);\nconst { colors } = await buildDeck(main, picked, draft.synergies, draft.initial_state, null);\nconst basics = calculateBasicCounts(main, colors);\n",
        "org_msg": "Fix adding basics.",
        "sim_msg": "Update the sparkline component to use green color by default.",
        "sim_diff": "diff --git a/assets/js/components/Sparkline.js b/assets/js/components/Sparkline.js @@ -32,13 +32,15 @@ function Sparkline( { change, data, invertChangeColor, loadingHeight } ) {\n}\nconst colors = [];\n+ const green = 'green';\n+ const red = 'red';\nif ( change === null ) {\n- // Use black if the change can't be determined.\n- colors.push( '#3c4043' );\n+ // Use green color by default if the change can't be determined.\n+ colors.push( green );\n} else {\n- const positiveColor = ! invertChangeColor ? 'green' : 'red';\n- const negativeColor = ! invertChangeColor ? 'red' : 'green';\n+ const positiveColor = ! invertChangeColor ? green : red;\n+ const negativeColor = ! invertChangeColor ? red : green;\ncolors.push(\n0 <= ( parseFloat( change ) || 0 ) ? positiveColor : negativeColor\n);\n",
        "chatgpt_cot": "\"Add createSeen method and refactor calculateBasics in DeckbuilderNavbar.js\""
    },
    {
        "org_diff": "diff --git a/src/layouts/Footer.js b/src/layouts/Footer.js @@ -2,7 +2,7 @@ import React from 'react';\nimport { Row, Col, Container } from 'reactstrap';\n-import Copyright from '../components/Copyright';\n+import Copyright from 'components/Copyright';\nconst Footer = () => (\n<footer>\n",
        "org_msg": "fixing no-restricted-imports error",
        "sim_msg": "footer logo has alt text of \"civic homepage\"",
        "sim_diff": "diff --git a/packages/component-library/src/Footer/Footer.js b/packages/component-library/src/Footer/Footer.js @@ -79,7 +79,7 @@ const Footer = ({ attribution }) => (\n<div className={footerClass}>\n<div className={copyrightClass}>{attribution}</div>\n<div className={logoClass}>\n- <Link to=\"/\" className={logoLinkStyle}>\n+ <Link to=\"/\" alt=\"civic homepage\" className={logoLinkStyle}>\n<LogoStandard />\n</Link>\n</div>\n",
        "chatgpt_cot": "\"Update import path for Copyright component in Footer.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3096,11 +3096,11 @@ router.post(\nsuccess: 'true',\ndetails: carddb.cardFromId(card.cardID),\n});\n- } else {\n+ }\n+\nreturn res.status(200).send({\nsuccess: 'true',\n});\n- }\n}),\n);\nrouter.post('/remove/:id', ensureAuth, async (req, res) => {\n",
        "org_msg": "Stylistic change.",
        "sim_msg": "Add missing route back in",
        "sim_diff": "diff --git a/app/router.js b/app/router.js @@ -125,6 +125,9 @@ Router.map(function() {\nthis.route('add', {path: '/add/:cloud_id'});\n});\n+ this.route('new', {path: '/add'}, function() {\n+ this.route('index', {path: '/'});\n+ });\nthis.route('host', {path: '/:host_id', resetNamespace: true}, function() {\nthis.route('containers');\n",
        "chatgpt_cot": "\"Fix issue with missing else branch in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/src/cube_overview.js b/src/cube_overview.js @@ -2,16 +2,21 @@ import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n- Row,\n- Col,\n+ Button,\nCard,\nCardHeader,\nCardBody,\nCardFooter,\nCardText,\n- Button,\n+ Col,\n+ Nav,\nNavbar,\n+ NavbarToggler,\n+ NavItem,\n+ NavLink,\n+ Row,\nUncontrolledAlert,\n+ UncontrolledCollapse,\n} from 'reactstrap';\nimport BlogPost from './components/BlogPost';\n@@ -104,33 +109,39 @@ class CubeOverview extends Component {\n<>\n{canEdit && (\n<div className=\"usercontrols\">\n- <Navbar expand=\"md\" className=\"navbar-light\">\n- <div className=\"collapse navbar-collapse\">\n- <ul className=\"navbar-nav flex-wrap\">\n- <li className=\"nav-item\">\n+ <Navbar expand=\"md\" light>\n+ <Nav navbar>\n+ <NavItem>\n<CubeOverviewModal\ncube={cube}\ncubeID={cubeID}\nonError={this.error}\nonCubeUpdate={this.onCubeUpdate}\n/>\n- </li>\n- <li className=\"nav-item\">\n- <a className=\"nav-link\" href=\"#\" data-toggle=\"modal\" data-target=\"#deleteCubeModal\">\n+ </NavItem>\n+ </Nav>\n+ <NavbarToggler\n+ className=\"ml-auto\"\n+ id=\"cubeOverviewNavbarToggler\"\n+ aria-controls=\"cubeOverviewNavbarCollapse\"\n+ />\n+ <UncontrolledCollapse navbar id=\"cubeOverviewNavbarCollapse\" toggler=\"#cubeOverviewNavbarToggler\">\n+ <Nav navbar>\n+ <NavItem>\n+ <NavLink href=\"#\" data-toggle=\"modal\" data-target=\"#deleteCubeModal\">\nDelete Cube\n- </a>\n- </li>\n- </ul>\n- </div>\n+ </NavLink>\n+ </NavItem>\n+ </Nav>\n+ </UncontrolledCollapse>\n</Navbar>\n</div>\n)}\n<DynamicFlash />\n- {this.state.alerts.map(({ color, message }) => (\n- <div key={message}>\n- <br />\n- <UncontrolledAlert color={color}>{message}</UncontrolledAlert>\n- </div>\n+ {this.state.alerts.map(({ color, message }, index) => (\n+ <UncontrolledAlert color={color} key={index} className=\"mt-3 mb-0\">\n+ {message}\n+ </UncontrolledAlert>\n))}\n<Row>\n<Col md=\"4\">\n",
        "org_msg": "Fix missing navbar in Overview on mobile.",
        "sim_msg": "feat: add navigation items and drawer",
        "sim_diff": "diff --git a/src/components/Header/Header.js b/src/components/Header/Header.js import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"material-ui/AppBar\";\n+import Button from \"material-ui/Button\";\n+import MenuList from \"material-ui/Menu/MenuList\";\nimport Toolbar from \"material-ui/Toolbar\";\nimport Typography from \"material-ui/Typography\";\nimport IconButton from \"material-ui/IconButton\";\nimport Drawer from \"material-ui/Drawer\";\nimport CartIcon from \"mdi-material-ui/Cart\";\n-\n+import MenuIcon from \"mdi-material-ui/Menu\";\nimport { inject, observer } from \"mobx-react\";\n+import { observable, computed } from \"mobx\";\nimport { withStyles } from \"material-ui/styles\";\n+import NavigationItem from \"../NavigationItem\";\nconst styles = () => ({\n- title: {\n- flex: 1\n- },\ncart: {\nwidth: 320\n+ },\n+ menu: {\n+ flex: 1\n}\n});\n+// TODO: Get tag data from GraphQL, this is just a sample\n+const tags = [\n+ { name: \"men\", title: \"Men\" },\n+ { name: \"women\", title: \"Women\" },\n+ {\n+ name: \"kids\",\n+ title: \"Kids\",\n+ relatedTags: [\n+ {\n+ name: \"test1\",\n+ title: \"Test 1\",\n+ relatedTags: [\n+ { name: \"men\", title: \"Men\" },\n+ { name: \"women\", title: \"Women\" },\n+ { name: \"men\", title: \"Men\" },\n+ { name: \"women\", title: \"Women\" }\n+ ]\n+ },\n+ {\n+ name: \"test2\",\n+ title: \"Test 2\",\n+ relatedTags: [\n+ { name: \"men\", title: \"Men\" },\n+ { name: \"women\", title: \"Women\" },\n+ { name: \"men\", title: \"Men\" },\n+ { name: \"women\", title: \"Women\" }\n+ ]\n+ },\n+ { name: \"test3\", title: \"Test 3\" }\n+ ]\n+ }\n+];\n+\n@withStyles(styles)\n@inject(\"uiStore\")\n@observer\n@@ -27,17 +64,42 @@ class Header extends Component {\nclasses: PropTypes.object,\nuiStore: PropTypes.object\n}\n+\n+ @observable _open = false\n+\n+ @computed get() { return this._open; }\n+ set(value) { this._open = value; }\n+\nrender() {\nconst { classes, uiStore } = this.props;\nreturn (\n- <AppBar position=\"static\">\n+ <AppBar position=\"static\" elevation={0}>\n<Toolbar>\n- <Typography className={classes.title} variant=\"title\">Reaction Commerce</Typography>\n- <IconButton onClick={uiStore.toggleCartOpen}>\n+ <IconButton color=\"inherit\" onClick={uiStore.toggleMenuDrawerOpen}>\n+ <MenuIcon/>\n+ </IconButton>\n+ <Typography className={classes.title} color=\"inherit\" variant=\"title\">Reaction</Typography>\n+\n+ <nav className={classes.menu}>\n+ {tags.map((tag, index) => (\n+ <Button key={index} href={`/tag/${tag.name}`} color=\"inherit\">{tag.name}</Button>\n+ ))}\n+ </nav>\n+\n+ <IconButton color=\"inherit\" onClick={uiStore.toggleCartOpen}>\n<CartIcon />\n</IconButton>\n</Toolbar>\n+ <Drawer open={uiStore.menuDrawerOpen} onClose={uiStore.toggleMenuDrawerOpen}>\n+ <div className={classes.cart}>\n+ <MenuList>\n+ {tags.map((tag, index) => (\n+ <NavigationItem key={index} menuItem={tag} />\n+ ))}\n+ </MenuList>\n+ </div>\n+ </Drawer>\n<Drawer anchor=\"right\" open={uiStore.cartOpen} onClose={uiStore.toggleCartOpen}>\n<div className={classes.cart}>Cart</div>\n</Drawer>\n",
        "chatgpt_cot": "\"Fix the compilation issue in cube_overview.js file due to the added import of Nav, NavbarToggler, NavItem, NavLink, Row, UncontrolledCollapse from reactstrap.\""
    },
    {
        "org_diff": "diff --git a/src/components/MagicMarkdown.js b/src/components/MagicMarkdown.js @@ -283,7 +283,7 @@ const OuterMarkdown = ({ markdown, limited }) => {\n}\nconst markdownStr = markdown.toString();\n- const split = markdownStr.split(/(<<.+>>|(?:^> .{0,}\\r?\\n)+)/gm);\n+ const split = markdownStr.split(/(<<.+>>|(?:^> .{0,}\\r?\\n)+|^>>>[^<>]+<<<)/gm);\nreturn (\n<>\n{split.map((section) => {\n@@ -309,6 +309,17 @@ const OuterMarkdown = ({ markdown, limited }) => {\n</Card>\n);\n}\n+ if (section.startsWith('>>>')) {\n+ console.log(section);\n+ const lines = section.split(/(> .+\\r?\\n)/gm).filter((line) => line.length > 0);\n+ return (\n+ <span className=\"centered\">\n+ {lines.map((line) => (\n+ <Markdown markdown={line.replace(/(>>>)|(<<<)/g, '')} />\n+ ))}\n+ </span>\n+ );\n+ }\nreturn <Markdown markdown={section} />;\n})}\n</>\n",
        "org_msg": "Add centering to markdown",
        "sim_msg": "allow yaml frontmatter parsing",
        "sim_diff": "diff --git a/src/components/Widgets/Markdown/unified.js b/src/components/Widgets/Markdown/unified.js @@ -446,11 +446,6 @@ const remarkImagesToText = () => {\nexport const markdownToRemark = markdown => {\nconst parsed = unified()\n.use(markdownToRemarkPlugin, { fences: true, pedantic: true, footnotes: true, commonmark: true })\n- .use(function() {\n- const { blockMethods } = this.Parser.prototype;\n- // Remove the yaml tokenizer, as the rich text editor doesn't support frontmatter\n- blockMethods.splice(blockMethods.indexOf('yamlFrontMatter'), 1);\n- })\n.parse(markdown);\nconst result = unified()\n",
        "chatgpt_cot": "\"Add support for custom block quotes in MagicMarkdown component\""
    },
    {
        "org_diff": "diff --git a/src/components/AutocompleteInput.js b/src/components/AutocompleteInput.js @@ -242,7 +242,11 @@ const AutocompleteInput = forwardRef(\n[acceptSuggestion],\n);\n- const matches = useMemo(() => getAllMatches(tree, inputValue), [tree, inputValue]);\n+ // Replace curly quotes with straight quotes. Needed for iOS.\n+ const normalizedValue = inputValue.replace(/[\\u2018\\u2019\\u201C\\u201D]/g, (c) =>\n+ '\\'\\'\"\"'.substr('\\u2018\\u2019\\u201C\\u201D'.indexOf(c), 1),\n+ );\n+ const matches = useMemo(() => getAllMatches(tree, normalizedValue), [tree, normalizedValue]);\nconst showMatches =\nvisible && inputValue && matches.length > 0 && !(matches.length === 1 && matches[0] === inputValue);\n",
        "org_msg": "Fix iOS curly quotes issue.",
        "sim_msg": "fix: QAutocomplete bad popover positioning unless static data",
        "sim_diff": "diff --git a/src/components/autocomplete/QAutocomplete.js b/src/components/autocomplete/QAutocomplete.js @@ -92,7 +92,8 @@ export default {\nconst\nterms = [null, void 0].includes(this.__input.val) ? '' : String(this.__input.val),\ntermsLength = terms.length,\n- searchId = uid()\n+ searchId = uid(),\n+ popover = this.$refs.popover\nthis.searchId = searchId\n@@ -108,19 +109,12 @@ export default {\nif (this.staticData) {\nthis.searchId = ''\nthis.results = this.filter(terms, this.staticData)\n- const popover = this.$refs.popover\nif (this.results.length) {\n- this.__keyboardShow(-1)\n- if (popover && popover.showing) {\n- this.$nextTick(() => popover && popover.reposition())\n- }\n- else {\n- popover.show()\n- }\n+ this.__showResults()\n+ return\n}\n- else {\n+\npopover.hide()\n- }\nreturn\n}\n@@ -134,8 +128,7 @@ export default {\nif (Array.isArray(results) && results.length > 0) {\nthis.results = results\n- this.__keyboardShow(-1)\n- this.$refs.popover.show()\n+ this.__showResults()\nreturn\n}\n@@ -209,6 +202,17 @@ export default {\nreturn\n}\nthis.timer = setTimeout(this.trigger, this.debounce)\n+ },\n+ __showResults () {\n+ const popover = this.$refs.popover\n+\n+ this.__keyboardShow(-1)\n+ if (popover.showing) {\n+ this.$nextTick(() => popover.showing && popover.reposition())\n+ }\n+ else {\n+ popover.show()\n+ }\n}\n},\nmounted () {\n",
        "chatgpt_cot": "Normalize input value by replacing curly quotes with straight quotes to ensure compatibility with iOS in AutocompleteInput."
    },
    {
        "org_diff": "diff --git a/src/cube_analysis.js b/src/cube_analysis.js @@ -160,7 +160,7 @@ class CubeAnalysis extends Component {\n</DropdownItem>\n{cube.draft_formats\n? cube.draft_formats.map((format, formatIndex) => (\n- <DropdownItem key={format} onClick={() => this.setFormat(formatIndex)}>\n+ <DropdownItem key={`format-${formatIndex}`} onClick={() => this.setFormat(formatIndex)}>\n{format.title}\n</DropdownItem>\n))\n",
        "org_msg": "Fix key for custom draft formats.",
        "sim_msg": "Stop analysis while navigating for a performance boost",
        "sim_diff": "diff --git a/src/components/App.js b/src/components/App.js @@ -1243,6 +1243,8 @@ class App extends Component {\nif (this.state.analysisTreePosition != null) {\nclearTimeout(this.navigateAnalysisId)\n+\n+ this.stopAnalysis({removeAnalysisData: false})\nthis.navigateAnalysisId = setTimeout(() => this.startAnalysis({showWarning: false}), 500)\n}\n@@ -2290,7 +2292,7 @@ class App extends Component {\n}\n}\n- stopAnalysis() {\n+ stopAnalysis({removeAnalysisData = true} = {}) {\nif (this.state.analysisTreePosition == null) return\nfor (let syncer of this.attachedEngineSyncers) {\n@@ -2299,7 +2301,7 @@ class App extends Component {\nsyncer.controller.process.stdin.write('\\n')\n}\n- this.setState({analysisTreePosition: null, analysis: null})\n+ if (removeAnalysisData) this.setState({analysisTreePosition: null, analysis: null})\n}\nasync generateMove({passPlayer = null, firstMove = true, followUp = false} = {}) {\n",
        "chatgpt_cot": "Fix key duplication issue in CubeAnalysis file. Changed key to include formatIndex to ensure uniqueness."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1847,8 +1847,8 @@ router.post('/edit/:id', ensureAuth, function(req, res) {\nreturn res.redirect('/cube/list/' + req.params.id);\n}\n}\n-\n- removes.sort();\n+ //need to do numerical sort..\n+ removes.sort((a, b) => a - b);\nfor (let i = removes.length - 1; i >= 0; i--) {\ncube.cards.splice(removes[i], 1);\n}\n@@ -3019,8 +3019,6 @@ router.post('/api/updatecard/:id', ensureAuth, function(req, res) {\ncard.type_line = carddb.cardFromId(card.cardID).type;\n}\nif (!cardsAreEquivalent(src, card)) {\n- console.log(src);\n- console.log(card);\nres.status(400).send({\nsuccess: 'false',\nmessage: 'Cards not equivalent',\n@@ -3040,8 +3038,6 @@ router.post('/api/updatecard/:id', ensureAuth, function(req, res) {\ncube = setCubeType(cube, carddb);\n- console.log(updated);\n-\ncube.save(function(err) {\nif (err) {\nconsole.error(err);\n",
        "org_msg": "Fixed issues with adding and removing cards",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Fix numerical sorting issue in cube_routes.js, remove unnecessary console logs, and improve error handling for card equivalence check in updatecard endpoint."
    },
    {
        "org_diff": "diff --git a/src/components/DraftbotBreakdown.js b/src/components/DraftbotBreakdown.js @@ -10,7 +10,7 @@ import useQueryParam from 'hooks/useQueryParam';\nimport CardPropType from 'proptypes/CardPropType';\nimport DeckPropType from 'proptypes/DeckPropType';\nimport { encodeName } from 'utils/Card';\n-import { evaluateCardOrPool } from 'utils/draftbots';\n+import { evaluateCardOrPool, ORACLES_BY_NAME } from 'utils/draftbots';\nimport { fromEntries } from 'utils/Util';\nconst AutocardItem = withAutocard(ListGroupItem);\n@@ -97,9 +97,7 @@ const TRAITS = Object.freeze([\n},\n]);\n-const renderWithTooltip = (title) => (\n- <Tooltip text={TRAITS.filter((trait) => trait.title === title)[0]?.tooltip}>{title}</Tooltip>\n-);\n+const renderWithTooltip = (title) => <Tooltip text={ORACLES_BY_NAME[title].tooltip}>{title}</Tooltip>;\nconst WEIGHT_COLUMNS = Object.freeze([\n{ title: 'Oracle', sortable: true, key: 'title', heading: true, renderFn: renderWithTooltip },\n",
        "org_msg": "Fix rendering weights with Tooltip.",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "\"Add ORACLES_BY_NAME to evaluateCardOrPool in DraftbotBreakdown.js\""
    },
    {
        "org_diff": "diff --git a/src/components/AutocardListItem.js b/src/components/AutocardListItem.js import React, { useCallback, useContext, useMemo } from 'react';\nimport cx from 'classnames';\n-import propTypes from 'prop-types';\n+import PropTypes from 'prop-types';\nimport CardPropType from 'proptypes/CardPropType';\nimport CardModalContext from 'components/CardModalContext';\n@@ -86,10 +86,10 @@ const AutocardListItem = ({ card, noCardModal, inModal, className, children }) =\n};\nAutocardListItem.propTypes = {\ncard: CardPropType.isRequired,\n- noCardModal: propTypes.bool,\n- inModal: propTypes.bool,\n- className: propTypes.string,\n- children: propTypes.node,\n+ noCardModal: PropTypes.bool,\n+ inModal: PropTypes.bool,\n+ className: PropTypes.string,\n+ children: PropTypes.node,\n};\nAutocardListItem.defaultProps = {\nnoCardModal: false,\n",
        "org_msg": "Fix: propTypes -> PropTypes\nAddresses review",
        "sim_msg": "Wrap all CivicCards in error boundaries",
        "sim_diff": "diff --git a/packages/component-library/src/CivicCard/CivicCard.js b/packages/component-library/src/CivicCard/CivicCard.js @@ -2,9 +2,13 @@ import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DataChecker from \"./utils/DataChecker\";\nimport CivicCardLayoutFull from \"./CivicCardLayoutFull\";\n+import ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\nimport { cardMetaKeys, optionalCardMetaKeys } from \"./cardMetaTypes\";\nconst CivicCard = ({ cardMeta, data, isLoading, Layout }) => (\n+ <ErrorBoundary\n+ customMessage={`CivicCard: \"${cardMeta(data).title}\" failed to load`}\n+ >\n<DataChecker\ndata={cardMeta(data)}\ndataAccessors={cardMetaKeys}\n@@ -14,6 +18,7 @@ const CivicCard = ({ cardMeta, data, isLoading, Layout }) => (\n>\n<Layout cardMeta={cardMeta(data)} isLoading={isLoading} data={data} />\n</DataChecker>\n+ </ErrorBoundary>\n);\nCivicCard.propTypes = {\n",
        "chatgpt_cot": "Fix propTypes import and use PropTypes instead of propTypes in AutocardListItem.js. Update CardPropType import and fix prop types declaration."
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"webpack-dev-server\": \"webpack-dev-server --config webpack.dev.js\",\n\"build\": \"webpack --mode production --config webpack.prod.js && rollup -c\",\n\"start\": \"nodemon --ignore src --ignore public & webpack-dev-server --config webpack.dev.js & rollup -c --watch\",\n- \"test\": \"jest --silent --detectOpenHandles\",\n+ \"test\": \"jest --silent --detectOpenHandles --coverage\",\n\"setup\": \"rollup -c & node force_update.js\"\n},\n\"author\": \"Gwen Dekker\",\n",
        "org_msg": "add coverage report to test running script",
        "sim_msg": "Use pre-test instead to prevent webpack progress log in TravisCI",
        "sim_diff": "diff --git a/package.json b/package.json \"start\": \"webpack-dev-server --config webpack.dev.js\",\n\"dev\": \"webpack --config webpack.dev.js --progress\",\n\"build\": \"webpack --config webpack.umd.js --progress\",\n- \"test\": \"npm run dev && karma start\",\n+ \"pretest\": \"webpack --config webpack.dev.js\",\n+ \"test\": \"karma start\",\n\"coveralls\": \"coveralls < coverage/lcov.info\"\n},\n\"repository\": {\n",
        "chatgpt_cot": "Add test coverage option to jest command in package.json"
    },
    {
        "org_diff": "diff --git a/src/utils/draftbots.js b/src/utils/draftbots.js @@ -161,6 +161,7 @@ export const getFixing = (combination, _, card) => {\nconst isFetch = !!fetchLands[cardName(card)];\nconst hasBasicTypes = basics.filter((basic) => typeLine.toLowerCase().includes(basic.toLowerCase())).length > 1;\nconst isRainbow = card.oracleText.includes('mana of any color');\n+ const fetchesBasics = card.oracleText.includes('basic land') && card.oracleText.includes('basic land');\nlet score = 1;\n// Guaranteed contains by botRatingAndCombination\n@@ -173,6 +174,9 @@ export const getFixing = (combination, _, card) => {\nif (isFetch) {\nscore *= 2;\n}\n+ if (fetchesBasics) {\n+ score *= 3;\n+ }\nif (isRainbow) {\nscore *= 4;\n}\n",
        "org_msg": "support basic fetches (evolving wilds)",
        "sim_msg": "Update AdmitDefeat.js\nEvents shouldn't be clickToActivate\nAdmit Defeat doesn't have an honor cost\ncondition needs to be a function",
        "sim_diff": "diff --git a/server/game/cards/01 - Core/AdmitDefeat.js b/server/game/cards/01 - Core/AdmitDefeat.js @@ -3,9 +3,7 @@ const DrawCard = require('../../drawcard.js');\nclass AdmitDefeat extends DrawCard {\nsetupCardAbilities(ability) {\nthis.action({\n- cost: ability.costs.payHonor(1),\n- condition: this.game.currentConflict && this.game.currentConflict.defenders.length === 1,\n- clickToActivate: true,\n+ condition: () => this.game.currentConflict && this.game.currentConflict.defenders.length === 1,\ntarget: {\ncardType: 'character',\ncardCondition: card => this.game.currentConflict.isDefending(card)\n",
        "chatgpt_cot": "Add new condition to calculate score based on card oracle text, fix scoring issue in getFixing function."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -353,8 +353,8 @@ test(\"generatePack generates a valid pack of cards\", () => {\nreturn promise.then(function() {\ncubefn.generatePack('', carddb, seed, callback);\nvar argument = callback.getCall(0).args[1];\n- argument.pack.forEach(function(card) {\n- expect(card).toEqual(cubefixture.examplePack.pack[argument.pack.indexOf(card)]);\n+ argument.pack.forEach(function(card, index) {\n+ expect(card).toEqual(cubefixture.examplePack.pack[index]);\n});\nexpect(argument.seed).toBe(seed);\n});\n",
        "org_msg": "use iterator index value instead of indexOf",
        "sim_msg": "Implement Array.from",
        "sim_diff": "diff --git a/NiL.JS/BaseLibrary/Array.cs b/NiL.JS/BaseLibrary/Array.cs @@ -531,6 +531,50 @@ namespace NiL.JS.BaseLibrary\nreturn result;\n}\n+ [DoNotEnumerate]\n+ [ArgumentsCount(1)]\n+ public static JSValue from(Arguments args)\n+ {\n+ JSValue arrayLike = args?[0] ?? undefined;\n+\n+ if (arrayLike == null)\n+ arrayLike = undefined;\n+\n+ if (arrayLike._valueType < JSValueType.Object)\n+ arrayLike = arrayLike.ToObject();\n+\n+ Array result = new Array();\n+\n+ var newArgs = new Arguments();\n+ for (var i = 1; i < args.Length; i++)\n+ {\n+ newArgs.Add(args[i]);\n+ }\n+\n+ var simpleFunction = false;\n+ if (newArgs.Length == 0)\n+ {\n+ simpleFunction = true;\n+ newArgs.Add(Function.Empty);\n+ }\n+\n+ var len = iterateImpl(arrayLike, newArgs, undefined, undefined, false, (value, index, thisBind, jsCallback) =>\n+ {\n+ value = value.CloneImpl(false);\n+\n+ if (simpleFunction)\n+ result[(int)index] = value;\n+ else\n+ result[(int)index] = jsCallback.Call(thisBind, new Arguments { value, index, arrayLike }).CloneImpl(false);\n+\n+ return true;\n+ });\n+\n+ result.SetLenght(len);\n+\n+ return result;\n+ }\n+\n[DoNotEnumerate]\n[InstanceMember]\n[ArgumentsCount(1)]\n@@ -607,10 +651,15 @@ namespace NiL.JS.BaseLibrary\nif (!self.Defined || (self._valueType >= JSValueType.Object && self._oValue == null))\n{\n#if (PORTABLE || NETCORE)\n- ExceptionHelper.Throw(new TypeError(\"Trying to call method for for null or undefined\"));\n+ ExceptionHelper.Throw(new TypeError(\"Trying to call method for null or undefined\"));\n#else\nvar stackTrace = new System.Diagnostics.StackTrace();\n- ExceptionHelper.Throw(new TypeError(\"Can not call Array.prototype.\" + stackTrace.GetFrame(stackTrace.FrameCount - 2).GetMethod().Name + \" for null or undefined\"));\n+ var method = stackTrace.GetFrame(stackTrace.FrameCount - 2).GetMethod();\n+ var fullMethodName = \"Array.\";\n+ if (method.GetCustomAttribute(typeof(InstanceMemberAttribute)) != null)\n+ fullMethodName += \"prototype.\";\n+ fullMethodName += method.Name;\n+ ExceptionHelper.Throw(new TypeError(\"Can not call \" + fullMethodName + \" for null or undefined\"));\n#endif\n}\n",
        "chatgpt_cot": "\"Refactor pack generation test to use index for comparison, improving readability and efficiency.\""
    },
    {
        "org_diff": "diff --git a/nearley/cardFilters.ne b/nearley/cardFilters.ne @@ -170,4 +170,4 @@ notCondition -> \"not\"i isOpValue {% ([, valuePred]) => negated(genericCondition(\nisOpValue -> \":\" isValue {% ([, category]) => (fieldValue) => CARD_CATEGORY_DETECTORS[category](fieldValue) %}\n-isValue -> (\"gold\"i | \"twobrid\"i | \"hybrid\"i | \"phyrexian\"i | \"promo\"i | \"digital\"i | \"reasonable\"i | \"dfc\"i | \"mdfc\"i | \"meld\"i | \"transform\"i | \"split\"i | \"flip\"i | \"leveler\"i | \"commander\"i | \"spell\"i | \"permanent\"i | \"historic\"i | \"vanilla\"i | \"bikeland\"i | \"cycleland\"i | \"bicycleland\"i | \"bounceland\"i | \"karoo\"i | \"canopyland\"i | \"canland\"i | \"checkland\"i | \"dual\"i | \"fastland\"i | \"filterland\"i | \"gainland\"i | \"painland\"i | \"scryland\"i | \"shadowland\"i | \"shockland\"i | \"storageland\"i | \"creatureland\"i | \"triland\"i | \"tangoland\"i | \"battleland\"i | \"modal\"i) {% ([[category]]) => category.toLowerCase() %}\n+isValue -> (\"gold\"i | \"twobrid\"i | \"hybrid\"i | \"phyrexian\"i | \"promo\"i | \"digital\"i | \"reasonable\"i | \"dfc\"i | \"mdfc\"i | \"meld\"i | \"transform\"i | \"split\"i | \"flip\"i | \"leveler\"i | \"commander\"i | \"spell\"i | \"permanent\"i | \"historic\"i | \"vanilla\"i | \"bikeland\"i | \"cycleland\"i | \"bicycleland\"i | \"bounceland\"i | \"karoo\"i | \"canopyland\"i | \"canland\"i | \"checkland\"i | \"dual\"i | \"fastland\"i | \"filterland\"i | \"gainland\"i | \"painland\"i | \"scryland\"i | \"shadowland\"i | \"shockland\"i | \"storageland\"i | \"creatureland\"i | \"manland\"i | \"triland\"i | \"tangoland\"i | \"battleland\"i | \"modal\"i) {% ([[category]]) => category.toLowerCase() %}\n",
        "org_msg": "added \"manland\" to filter",
        "sim_msg": "update tracker networks subview to use the new urls structure",
        "sim_diff": "diff --git a/shared/js/ui/templates/tracker-networks.es6.js b/shared/js/ui/templates/tracker-networks.es6.js @@ -22,7 +22,7 @@ module.exports = function () {\njs-tracker-networks-details\">\n<ol class=\"default-list site-info__trackers__company-list\">\n${renderTrackerDetails(\n- this.model.companyListMap,\n+ this.model,\nthis.model.DOMAIN_MAPPINGS\n)}\n</ol>\n@@ -42,7 +42,8 @@ function renderHero (site) {\n})}`\n}\n-function renderTrackerDetails (companyListMap, DOMAIN_MAPPINGS) {\n+function renderTrackerDetails (model, DOMAIN_MAPPINGS) {\n+ const companyListMap = model.companyListMap || {}\nif (companyListMap.length === 0) {\nreturn bel`<li class=\"is-empty\">None</li>`\n}\n@@ -50,7 +51,7 @@ function renderTrackerDetails (companyListMap, DOMAIN_MAPPINGS) {\nreturn companyListMap.map((c, i) => {\nif (c.name && c.name === 'unknown') {\nc.name = '(Tracker network unknown)'\n- } else if (c.name && c.isFirstParty) {\n+ } else if (c.name && model.hasUnblockedTrackers(c)) {\nc.name += ' associated domains (not blocked)'\n}\nreturn bel`<li>\n@@ -61,7 +62,7 @@ function renderTrackerDetails (companyListMap, DOMAIN_MAPPINGS) {\n</div>\n<h1 class=\"site-info__domain block\">${c.name}</h1>\n<ol class=\"default-list site-info__trackers__company-list__url-list\">\n- ${c.urls.map((url) => {\n+ ${Object.keys(c.urls).map((url) => {\nlet category = ''\nif (DOMAIN_MAPPINGS[url.toLowerCase()]) {\ncategory = DOMAIN_MAPPINGS[url.toLowerCase()].t\n",
        "chatgpt_cot": "Update isValue options to include \"manland\" for cardFilters.ne file."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2877,11 +2877,8 @@ router.get('/rebuild/:id/:index', ensureAuth, async (req, res) => {\nconst { cards } = base;\nconst cardsWithDetails = cards.map((card) => ({ ...card, details: carddb.cardFromId(card.cardID) }));\nconst userPicked = Object.fromEntries(cardutil.COLOR_COMBINATIONS.map((comb) => [comb.join(''), 0]));\n- userPicked.cards = 0;\n- deckutil.default.addSeen(\n- userPicked,\n- base.seats[req.params.index].pickorder.map((cardIndex) => cardsWithDetails[cardIndex]),\n- );\n+ userPicked.cards = [];\n+ deckutil.default.addSeen(userPicked, base.seats[req.params.index].pickorder);\nconst { colors: userColors } = await deckutil.default.buildDeck(\nbase.seats[req.params.index].pickorder,\nuserPicked,\n",
        "org_msg": "Fix to rebuilding from testing.",
        "sim_msg": "Add missing route back in",
        "sim_diff": "diff --git a/app/router.js b/app/router.js @@ -125,6 +125,9 @@ Router.map(function() {\nthis.route('add', {path: '/add/:cloud_id'});\n});\n+ this.route('new', {path: '/add'}, function() {\n+ this.route('index', {path: '/'});\n+ });\nthis.route('host', {path: '/:host_id', resetNamespace: true}, function() {\nthis.route('containers');\n",
        "chatgpt_cot": "\"Refactor userPicked object initialization and deckutil function call in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -17,7 +17,7 @@ html\nif metadatum.property\nmeta(property=metadatum.property, content=metadatum.content)\nlink(rel='icon', href='/content/favicon.ico', type='image/x-icon')\n- title Cube Cobra\n+ title=title ? title + ' - Cube Cobra' : 'Cube Cobra'\nlink(rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.css')\nlink(rel='stylesheet' href='/css/stylesheet.css')\n#autocard_popup(style='position:absolute;z-index: 9999;')\n",
        "org_msg": "Add titles for pages in cube_routes.",
        "sim_msg": "Swapped 3.3.7, 4.0.0-beta posistions, added info panel",
        "sim_diff": "diff --git a/views/index.pug b/views/index.pug @@ -2,11 +2,11 @@ extends layout\nblock content\nh2.text-center=title\n- h3.text-center='v' + config.bootstrap4[0].version\n+ h3.text-center='v' + config.bootstrap[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].stylesheet\n- - var sri = config.bootstrap4[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].stylesheet\n+ - var sri = config.bootstrap[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -20,9 +20,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].javascript\n- - var sri = config.bootstrap4[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].javascript\n+ - var sri = config.bootstrap[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n@@ -35,12 +35,21 @@ block content\nspan.help-block Click to copy\ninclude _partials/jscode.pug\n+ hr\n+ .panel.panel-info\n+ .panel-heading\n+ h3.panel-title Info\n+ .panel-body\n+ | Bootstrap 4 is currently in Beta release and should be treated as such. For details check out\n+ a(href='https://blog.getbootstrap.com/2017/08/10/bootstrap-4-beta/', target='_blank', rel='noopener').\n+ the Bootstrap 4 Beta announcement\n+ | .\n- h3.text-center='v' + config.bootstrap[0].version\n+ h3.text-center='v' + config.bootstrap4[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].stylesheet\n- - var sri = config.bootstrap[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].stylesheet\n+ - var sri = config.bootstrap4[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -54,9 +63,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].javascript\n- - var sri = config.bootstrap[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].javascript\n+ - var sri = config.bootstrap4[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n",
        "chatgpt_cot": "\"Add dynamic title to layout for Cube Cobra website\""
    },
    {
        "org_diff": "diff --git a/public/js/sortfilter.js b/public/js/sortfilter.js @@ -118,7 +118,7 @@ function filterApply(card, filter) {\ncase ':':\ncase '=':\nif (filter.arg.length == 1 && filter.arg[0] == 'C') {\n- res = !card.details.colors.length;\n+ res = !card.colors.length;\n} else {\nres = areArraysEqualSets(card.colors, filter.arg);\n}\n",
        "org_msg": "fix color identity override\nThis was simply not changed to card.colors in the original update that added support for the colorless operator. Now it is, to respect color identity overrides!",
        "sim_msg": "set filtered_out to false for everything before redoing the filtering",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -539,7 +539,7 @@ list.filterList = function(search_words, filter_param) {\nnormally_visible_map_items.style(\"display\", \"inline\");\n//set everything that should be visible to unfiltered\n- selected_list_items.each(function (d) {\n+ all_list_items.each(function (d) {\nd.filtered_out = false\n})\n@@ -547,11 +547,11 @@ list.filterList = function(search_words, filter_param) {\nmediator.publish(\"record_action\", \"none\", \"filter\", config.user_id, \"filter_list\", null, \"search_words=\" + search_words + \"filter_param=\"+filter_param);\n// Now actually do the filtering (i.e. remove some object from list and map)\n- this.hideEntriesByWord(selected_list_items, search_words);\n- this.hideEntriesByWord(normally_visible_map_items, search_words);\n+ this.hideEntriesByWord(all_list_items, search_words);\n+ this.hideEntriesByWord(all_map_items, search_words);\n- this.hideEntriesByParam(selected_list_items, filter_param);\n- this.hideEntriesByParam(normally_visible_map_items, filter_param);\n+ this.hideEntriesByParam(all_list_items, filter_param);\n+ this.hideEntriesByParam(all_map_items, filter_param);\n};\n// Returns true if document has parameter or if no parameter is passed\n",
        "chatgpt_cot": "\"Refactor filterApply function to use card.colors instead of card.details.colors for better readability and efficiency.\""
    },
    {
        "org_diff": "diff --git a/public/js/autocard.js b/public/js/autocard.js @@ -39,6 +39,7 @@ function autocard_show_card(card_image, card_flip, show_art_crop, tags) {\nvar x_offset = e.clientX+self.pageXOffset-parentPos.left;\nvar y_offset = e.clientY+self.pageYOffset-parentPos.top;\n+ let tag_offset = (tags) ? $(document.getElementById(\"autocard_popup_info\")).outerHeight() : 0;\nif(rightPixelSpace > w)\n{\n@@ -55,7 +56,7 @@ function autocard_show_card(card_image, card_flip, show_art_crop, tags) {\ndocument.getElementById(\"autocard_popup2\").style.left = (-230+x_offset) + \"px\";\ndocument.getElementById(\"autocard_popup_info\").style.left = (-card_offset+x_offset) + \"px\";\n}\n- if(bottomPixelSpace > h+25)\n+ if(bottomPixelSpace > h+25+tag_offset)\n{\n//display on bottom\ndocument.getElementById(\"autocard_popup\").style.top = (5+y_offset) + \"px\";\n@@ -65,9 +66,9 @@ function autocard_show_card(card_image, card_flip, show_art_crop, tags) {\nelse\n{\n//display on top\n- document.getElementById(\"autocard_popup\").style.top = (-(h+5)+y_offset) + \"px\";\n- document.getElementById(\"autocard_popup2\").style.top = (-(h+5)+y_offset) + \"px\";\n- document.getElementById(\"autocard_popup_info\").style.top = (-(5)+y_offset) + \"px\";\n+ document.getElementById(\"autocard_popup\").style.top = (-(h+5+tag_offset)+y_offset) + \"px\";\n+ document.getElementById(\"autocard_popup2\").style.top = (-(h+5+tag_offset)+y_offset) + \"px\";\n+ document.getElementById(\"autocard_popup_info\").style.top = (-(5+tag_offset)+y_offset) + \"px\";\n}\n}\ndocument.getElementById(\"autocard_popup\").innerHTML = '<img src=\"\" width=225 height=' + h + '>';\n@@ -82,7 +83,6 @@ function autocard_show_card(card_image, card_flip, show_art_crop, tags) {\n{\nw = (card_flip) ? 450 : 225;\ndocument.getElementById(\"autocard_popup_info\").style.width = w + \"px\";\n- document.getElementById(\"autocard_popup_info\").style.height = \"100px\";\nlet tagsText = '<div class=\"autocard-tags\">';\ntags.forEach(function(tag, index)\n{\n",
        "org_msg": "take tag height into account when fitting autocard on screen",
        "sim_msg": "Clean up browse page inspect links",
        "sim_diff": "diff --git a/browse.html b/browse.html @@ -159,7 +159,7 @@ paginations.forEach(pagination => {\ndiv.classList.add('token');\ndiv.classList.add('card');\ndiv.innerHTML = `\\\n- <a href=\"/inspect.html?p=${name}\">\n+ <a href=\"inspect.html?p=${name}\">\n${gifIconSrc ? `<img src=\"${gifIconSrc}\" width=256 height=256>` : '<img width=256 height=256>'}\n</a>\n<div class=text>\n@@ -209,7 +209,7 @@ paginations.forEach(pagination => {\ndiv.classList.add('token');\ndiv.classList.add('card');\ndiv.innerHTML = `\\\n- <a href=\"/inspect.html?i=${index}\">\n+ <a href=\"inspect.html?i=${index}\">\n<img src=\"${img}\" width=256 height=256>\n</a>\n<div class=text>\n",
        "chatgpt_cot": "Fix the issue in the autocard file due to the addition of a new tag_offset variable, adjusting the display position based on the bottomPixelSpace and h+25+tag_offset."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js -import { alphaCompare, fromEntries } from 'utils/Util';\n-import { cardColorIdentity, cardDevotion, cardPriceEur, cardTix, cardType, cardCmc } from 'utils/Card';\n+import { alphaCompare, arrayIsSubset, COLORS, fromEntries } from 'utils/Util';\n+import {\n+ cardColorIdentity,\n+ cardDevotion,\n+ cardPriceEur,\n+ cardTix,\n+ cardType,\n+ cardCmc,\n+ COLOR_COMBINATIONS,\n+} from 'utils/Card';\nconst COLOR_MAP = {\nW: 'White',\n@@ -47,7 +55,7 @@ const ALL_CMCS = Array.from(Array(33).keys())\n.map((x) => (x / 2).toString())\n.concat(['1000000']);\n-const SINGLE_COLOR_AND_COLORLESS = ['White', 'Blue', 'Black', 'Red', 'Green', 'Colorless'];\n+const SINGLE_COLOR = ['White', 'Blue', 'Black', 'Red', 'Green'];\nconst GUILDS = ['Azorius', 'Dimir', 'Rakdos', 'Gruul', 'Selesnya', 'Orzhov', 'Izzet', 'Golgari', 'Boros', 'Simic'];\nconst SHARDS_AND_WEDGES = ['Bant', 'Esper', 'Grixis', 'Jund', 'Naya', 'Mardu', 'Temur', 'Abzan', 'Jeskai', 'Sultai'];\nconst FOUR_AND_FIVE_COLOR = ['Not-White', 'Not-Blue', 'Not-Black', 'Not-Red', 'Not-Green', 'Five Color'];\n@@ -126,6 +134,8 @@ export function getSorts() {\n'Color Count',\n'Color Identity',\n'Color Identity Full',\n+ 'Color Combination Includes',\n+ 'Includes Color Combination',\n'Color',\n'Creature/Non-Creature',\n'Date Added',\n@@ -209,7 +219,8 @@ function getLabelsRaw(cube, sort) {\nreturn ['White', 'Blue', 'Black', 'Red', 'Green', 'Hybrid', 'Multicolored', 'Colorless', 'Lands'];\n}\nif (sort === 'Color Category Full') {\n- return SINGLE_COLOR_AND_COLORLESS.concat(GUILDS)\n+ return SINGLE_COLOR.concat(['Colorless'])\n+ .concat(GUILDS)\n.concat(SHARDS_AND_WEDGES)\n.concat(FOUR_AND_FIVE_COLOR)\n.concat(['Lands']);\n@@ -218,7 +229,10 @@ function getLabelsRaw(cube, sort) {\nreturn ['White', 'Blue', 'Black', 'Red', 'Green', 'Multicolored', 'Colorless'];\n}\nif (sort === 'Color Identity Full') {\n- return SINGLE_COLOR_AND_COLORLESS.concat(GUILDS).concat(SHARDS_AND_WEDGES).concat(FOUR_AND_FIVE_COLOR);\n+ return SINGLE_COLOR.concat(['Colorless']).concat(GUILDS).concat(SHARDS_AND_WEDGES).concat(FOUR_AND_FIVE_COLOR);\n+ }\n+ if (sort === 'Color Combination Includes' || sort === 'Includes Color Combination') {\n+ return ['Colorless'].concat(SINGLE_COLOR).concat(GUILDS).concat(SHARDS_AND_WEDGES).concat(FOUR_AND_FIVE_COLOR);\n}\nif (sort === 'CMC') {\nreturn ['0', '1', '2', '3', '4', '5', '6', '7', '8+'];\n@@ -498,6 +512,12 @@ export function cardGetLabels(card, sort) {\nif (sort === 'Color Identity Full') {\nreturn [getColorCombination(cardColorIdentity(card))];\n}\n+ if (sort === 'Color Combination Includes') {\n+ return COLOR_COMBINATIONS.filter((comb) => arrayIsSubset(cardColorIdentity(card), comb)).map(getColorCombination);\n+ }\n+ if (sort === 'Includes Color Combination') {\n+ return COLOR_COMBINATIONS.filter((comb) => arrayIsSubset(comb, cardColorIdentity(card))).map(getColorCombination);\n+ }\nif (sort === 'Color') {\nif (card.details.colors.length === 0) {\nreturn ['Colorless'];\n",
        "org_msg": "Add 'Includes Color Combination' and 'Color Combination Includes'\n.",
        "sim_msg": "Improve get season function",
        "sim_diff": "diff --git a/components/frise.js b/components/frise.js import {useEffect, useState} from 'react'\nconst getSeasonColors = () => {\n- const currentDate = new Date()\n- const month = currentDate.getMonth() + 1\n+ const now = new Date()\n+ const year = now.getFullYear()\n- const winter = [1, 2, 3]\n- const spring = [4, 5, 6]\n- const summer = [7, 8, 9]\n+ const winter = new Date(`${year}-12-23`)\n+ const spring = new Date(`${year}-03-20`)\n+ const summer = new Date(`${year}-06-20`)\n+ const fall = new Date(`${year}-09-23`)\nconst winterColors = ['#008DFF', '#8BF7DC', '#638BFC', '#ABD7FC', '#3FDEFF', '#05BDC2', '#B3FFF3', '#74BFFC', '#77F9FF', '#43B5F3', '#C4F6D8', '#9FF9E1', '#D3ECEA', '#76ADC3', '#BBD6E9', '#74BFFC']\nconst springColors = ['#87D6A6', '#93F78B', '#027A00', '#FCABD8', '#F9D8FF', '#23BE65', '#F5B3FF', '#60B7B6', '#64A46A', '#3C634B', '#D29EC7', '#D8ADFF', '#BBF99F', '#C0E9BB', '#60B7B6', '#C71EA3']\nconst summerColors = ['#88FF00', '#10705C', '#D4FC63', '#5AA342', '#D6FF3F', '#10705C', '#2E9E00', '#D8FFA8', '#A9BA96', '#7CC376', '#9E9D00', '#85F343', '#24EC64', '#2C884C', '#7CC376', '#C3E94F']\nconst fallColors = []\n- if (winter.includes(month)) {\n- return winterColors\n- }\n-\n- if (spring.includes(month)) {\n+ if (now >= spring && now < summer) {\nreturn springColors\n}\n- if (summer.includes(month)) {\n+ if (now >= summer && now < fall) {\nreturn summerColors\n}\n+ if (now >= winter && now < spring) {\n+ return winterColors\n+ }\n+\nreturn fallColors\n}\n",
        "chatgpt_cot": "Add new functions and constants. Modify the existing functions to include new constants. Update the functions to return the new constants."
    },
    {
        "org_diff": "diff --git a/src/analytics/Suggestions.js b/src/analytics/Suggestions.js @@ -57,11 +57,11 @@ const Suggestions = ({ cards, cube }) => {\n</p>\n<FilterCollapse\n- defaultFilterText={defaultFilterText}\n+ defaultFilterText={'type=\"creature\"'}\nfilter={filter}\nsetFilter={updateFilter}\nnumCards={numCards}\n- isOpen={filterCollapseOpen}\n+ isOpen={true}\n/>\n<Row>\n<Col xs=\"12\" lg=\"6\">\n",
        "org_msg": "Fix mislabels",
        "sim_msg": "Register new widgets correctly.",
        "sim_diff": "diff --git a/assets/js/modules/analytics/index.js b/assets/js/modules/analytics/index.js @@ -69,29 +69,29 @@ domReady( () => {\n);\nWidgets.registerWidget(\n- 'analyticsGoals',\n+ 'analyticsUniqueVisitors',\n{\n- component: DashboardGoalsWidget,\n+ component: DashboardUniqueVisitorsWidget,\nwidth: Widgets.WIDGET_WIDTHS.QUARTER,\n- priority: 4,\n+ priority: 3,\nwrapWidget: true,\n},\n[\nAREA_DASHBOARD_SEARCH_FUNNEL,\n+ AREA_PAGE_DASHBOARD_SEARCH_FUNNEL,\n],\n);\nWidgets.registerWidget(\n- 'analyticsUniqueVisitors',\n+ 'analyticsGoals',\n{\n- component: DashboardUniqueVisitorsWidget,\n+ component: DashboardGoalsWidget,\nwidth: Widgets.WIDGET_WIDTHS.QUARTER,\n- priority: 3,\n+ priority: 4,\nwrapWidget: true,\n},\n[\nAREA_DASHBOARD_SEARCH_FUNNEL,\n- AREA_PAGE_DASHBOARD_SEARCH_FUNNEL,\n],\n);\n@@ -104,7 +104,6 @@ domReady( () => {\nwrapWidget: true,\n},\n[\n- AREA_DASHBOARD_SEARCH_FUNNEL,\nAREA_PAGE_DASHBOARD_SEARCH_FUNNEL,\n],\n);\n",
        "chatgpt_cot": "Update default filter text and collapse open status in Suggestions.js"
    },
    {
        "org_diff": "diff --git a/src/components/DraftDeck.js b/src/components/DraftDeck.js @@ -21,10 +21,10 @@ import {\nimport { sortDeck } from '../util/Util';\n-import CardImage from './CardImage';\nimport CustomImageToggler from './CustomImageToggler';\n-import DeckStacks from './DeckStacks';\n+import { DisplayContextProvider } from './DisplayContext';\nimport DynamicFlash from './DynamicFlash';\n+import FoilCardImage from './FoilCardImage';\nimport { getCardColorClass } from './TagContext';\nimport withAutocard from './WithAutocard';\n@@ -48,7 +48,7 @@ const DeckStacksStatic = ({ title, cards, ...props }) => (\n<div className=\"stack\">\n{column.map((card, index3) => (\n<div className=\"stacked\" key={index3}>\n- <CardImage card={card} tags={[]} />\n+ <FoilCardImage card={card} tags={[]} autocard />\n</div>\n))}\n</div>\n@@ -61,7 +61,7 @@ const DeckStacksStatic = ({ title, cards, ...props }) => (\n);\nDeckStacksStatic.propTypes = {\n- title: PropTypes.string.isRequired,\n+ title: PropTypes.node.isRequired,\ncards: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.object))).isRequired,\n};\n@@ -104,7 +104,7 @@ const DraftDeck = ({ oldFormat, drafter, cards, deck, botDecks, bots, canEdit })\nconst deckID = components[components.length - 1];\nreturn (\n- <>\n+ <DisplayContextProvider>\n<div className=\"usercontrols\">\n<Navbar expand=\"md\" light>\n<NavbarToggler onClick={toggleNavbar} className=\"ml-auto\" />\n@@ -154,7 +154,7 @@ const DraftDeck = ({ oldFormat, drafter, cards, deck, botDecks, bots, canEdit })\n</Col>\n))}\n</Row>\n- </>\n+ </DisplayContextProvider>\n);\n};\n",
        "org_msg": "Fix issues with deck view.\nFixes",
        "sim_msg": "Add addtional source to CardPile",
        "sim_diff": "diff --git a/client/GameComponents/CardPile.jsx b/client/GameComponents/CardPile.jsx @@ -255,7 +255,7 @@ CardPile.propTypes = {\npopupLocation: PropTypes.string,\npopupMenu: PropTypes.array,\nsize: PropTypes.string,\n- source: PropTypes.oneOf(['none', 'hand', 'conflict discard pile', 'dynasty discard pile', 'play area', 'conflict deck', 'dynasty deck', 'province deck', 'attachment', 'faction', 'stronghold province', 'province 1', 'province 2', 'province 3', 'province 4', 'additional']).isRequired,\n+ source: PropTypes.oneOf(['none', 'hand', 'conflict discard pile', 'dynasty discard pile', 'play area', 'conflict deck', 'dynasty deck', 'province deck', 'attachment', 'faction', 'stronghold province', 'role card', 'province 1', 'province 2', 'province 3', 'province 4', 'additional']).isRequired,\ntitle: PropTypes.string,\ntopCard: PropTypes.object\n};\n",
        "chatgpt_cot": "Add FoilCardImage component, change PropTypes for title to node, and wrap content in DisplayContextProvider for DraftDeck."
    },
    {
        "org_diff": "diff --git a/src/components/Markdown.js b/src/components/Markdown.js @@ -22,7 +22,7 @@ const Link = withModal('a', LinkModal);\nfunction renderBlockQuote(node) {\nreturn (\n<Card className=\"bg-light\">\n- <CardBody children={node.children} />\n+ <CardBody>{node.children}</CardBody>\n</Card>\n);\n}\n@@ -40,9 +40,17 @@ function renderLink(node) {\n};\nif (isInternalURL(ref)) {\n- return <a target=\"_blank\" rel=\"noopen noreferrer\" href={ref} children={node.children} />;\n+ return (\n+ <a target=\"_blank\" rel=\"noopen noreferrer\" href={ref}>\n+ {node.children}\n+ </a>\n+ );\n}\n- return <Link href=\"#\" modalProps={{ link: ref }} children={node.children} />;\n+ return (\n+ <Link href=\"#\" modalProps={{ link: ref }}>\n+ {node.children}\n+ </Link>\n+ );\n}\nfunction renderMath(node) {\n@@ -112,10 +120,11 @@ const Markdown = ({ markdown, limited }) => {\nconst markdownStr = markdown?.toString() ?? '';\nreturn (\n<ReactMarkdown\n- children={markdownStr}\nplugins={[breaks, math, userlink, cardlink, strikethrough, [symbols, { allowed: validSymbols }]]}\nrenderers={renderers}\n- />\n+ >\n+ {markdownStr}\n+ </ReactMarkdown>\n);\n};\n",
        "org_msg": "stopped using children attribute",
        "sim_msg": "Link class was incorrect. Correcting issue",
        "sim_diff": "diff --git a/src/components/MarkdownContentDisplay.js b/src/components/MarkdownContentDisplay.js @@ -46,7 +46,7 @@ function Link({href, title, children}) {\nreturn h(\nContentDisplay,\n{},\n- h('a', {class: 'external', href, title}, typographer(children))\n+ h('a', {class: 'comment-external', href, title}, typographer(children))\n)\n}\n",
        "chatgpt_cot": "Refactor render methods in Markdown.js for better structure and readability, including wrapping node children in appropriate components and updating ReactMarkdown usage."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -55,14 +55,14 @@ let CardRating = require('../models/cardrating');\nconst NODE_ENV = process.env.NODE_ENV;\nlet BulkUploadPage = null;\n+let CubeDraftPage = null;\nlet CubeListPage = null;\nlet CubePlaytestPage = null;\n-let DraftView = null;\nif (NODE_ENV === 'production') {\nBulkUploadPage = require('../dist/components/BulkUploadPage').default;\n+ CubeDraftPage = require('../dist/components/CubeDraftPage').default;\nCubeListPage = require('../dist/components/CubeListPage').default;\nCubePlaytestPage = require('../dist/components/CubePlaytestPage').default;\n- DraftView = require('../dist/components/DraftView').default;\n}\nconst { ensureAuth, csrfProtection } = require('./middleware');\n@@ -1668,8 +1668,8 @@ router.get('/draft/:id', async (req, res) => {\n};\nres.render('cube/cube_draft', {\n- reactHTML: DraftView\n- ? await ReactDOMServer.renderToString(React.createElement(DraftView, reactProps))\n+ reactHTML: CubeDraftPage\n+ ? await ReactDOMServer.renderToString(React.createElement(CubeDraftPage, reactProps))\n: undefined,\nreactProps: serialize(reactProps),\ntitle: `${abbreviate(cube.name)} - Draft`,\n",
        "org_msg": "Fix critical issue w/ SSR.",
        "sim_msg": "Improve drafts page layout",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -26,12 +26,10 @@ let DraftRow = (props) => {\nDraftRow = connect(() => ({}), { deleteDraft })(DraftRow);\nconst DraftList = ({ editor: { draftPosts } }) =>\n- (\n<div className=\"main-panel\">\n<Header />\n- <div className=\"my-3\">\n+ <div className=\"my-3 container container-small\">\n<h1 className=\"text-xs-center\">Drafts</h1>\n- <div className=\"container\">\n{ _.size(draftPosts) === 0 &&\n<h3 className=\"text-xs-center\">\nYou don't have any draft saved.\n@@ -41,8 +39,6 @@ const DraftList = ({ editor: { draftPosts } }) =>\n<DraftRow key={key} data={draft.postData} id={key} />)\n}\n</div>\n- </div>\n- </div>\n- );\n+ </div>;\nexport default connect(state => ({ editor: state.editor }))(DraftList);\n",
        "chatgpt_cot": "Add CubeDraftPage for production environment, and update renderToString method to use CubeDraftPage instead of DraftView."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -4,7 +4,7 @@ const request = require('request');\nconst fs = require('fs');\nconst rp = require('request-promise');\nconst cheerio = require('cheerio');\n-var cubefn, { generatePack } = require('../serverjs/cubefn.js');\n+var cubefn = require('../serverjs/cubefn.js');\nvar analytics = require('../serverjs/analytics.js');\nvar draftutil = require('../serverjs/draftutil.js');\nvar carddb = require('../serverjs/cards.js');\n@@ -725,8 +725,6 @@ router.post('/importcubetutor/:id',ensureAuth, function(req,res) {\nblogpost.dev='false';\nblogpost.date_formatted = blogpost.date.toLocaleString(\"en-US\");\n- blogpost.save(function(err)\n- {\nif(missing.length > 0)\n{\nres.render('cube/bulk_upload',\n@@ -741,6 +739,8 @@ router.post('/importcubetutor/:id',ensureAuth, function(req,res) {\n});\n}\nelse\n+ {\n+ blogpost.save(function(err)\n{\ncube = cubefn.setCubeType(cube, carddb);\nCube.updateOne({_id:cube._id}, cube, function(err)\n@@ -756,8 +756,8 @@ router.post('/importcubetutor/:id',ensureAuth, function(req,res) {\nres.redirect('/cube/list/'+req.params.id);\n}\n});\n- }\n});\n+ }\n})\n.catch(function (err) {\nconsole.log(err, req);\n@@ -772,7 +772,6 @@ router.post('/importcubetutor/:id',ensureAuth, function(req,res) {\nrouter.post('/bulkupload/:id',ensureAuth, function(req,res)\n{\n- console.log(res);\nCube.findById(req.params.id, function(err,cube)\n{\nif(err)\n@@ -909,8 +908,6 @@ function bulkuploadCSV(req, res, cards, cube) {\nblogpost.date_formatted = blogpost.date.toLocaleString(\"en-US\");\n//\n- blogpost.save(function(err)\n- {\nif(missing.length > 0)\n{\nres.render('cube/bulk_upload',\n@@ -925,6 +922,8 @@ function bulkuploadCSV(req, res, cards, cube) {\n});\n}\nelse\n+ {\n+ blogpost.save(function(err)\n{\ncube = cubefn.setCubeType(cube, carddb);\nCube.updateOne({_id:cube._id}, cube, function(err)\n@@ -940,9 +939,9 @@ function bulkuploadCSV(req, res, cards, cube) {\nres.redirect('/cube/list/'+req.params.id);\n}\n});\n- }\n});\n}\n+}\nfunction bulkUpload(req, res, list, cube) {\ncards = list.match(/[^\\r\\n]+/g);\n@@ -1068,8 +1067,6 @@ function bulkUpload(req, res, list, cube) {\nblogpost.date_formatted = blogpost.date.toLocaleString(\"en-US\");\n//\n- blogpost.save(function(err)\n- {\nif(missing.length > 0)\n{\nres.render('cube/bulk_upload',\n@@ -1084,6 +1081,8 @@ function bulkUpload(req, res, list, cube) {\n});\n}\nelse\n+ {\n+ blogpost.save(function(err)\n{\ncube = cubefn.setCubeType(cube, carddb);\nCube.updateOne({_id:cube._id}, cube, function(err)\n@@ -1099,11 +1098,11 @@ function bulkUpload(req, res, list, cube) {\nres.redirect('/cube/list/'+req.params.id);\n}\n});\n- }\n});\n}\n}\n}\n+ }\nelse\n{\nreq.flash('danger', 'Error adding cards. Invalid format.');\n",
        "org_msg": "Fix: Removed erraneous empty blog posts",
        "sim_msg": "fix: passing outer transaction to bulk operations",
        "sim_diff": "diff --git a/src/main/marketplace/tax-treaties/tax-treaties.js b/src/main/marketplace/tax-treaties/tax-treaties.js @@ -48,18 +48,18 @@ export class TaxTreaties extends BaseModel {\nreturn this.query().patchAndFetchById(id, data);\n}\n- static bulkEdit(items) {\n+ static bulkEdit(items, tx = undefined) {\nitems = items.map(item => ({ ...item, env }));\n- return this.updateMany(items);\n+ return this.updateMany(items, tx);\n}\n- static bulkAdd(items) {\n+ static async bulkAdd(items, tx = undefined) {\nitems = items.map(item => ({ ...item, env }));\n- return this.insertMany(items);\n+ return this.insertMany(items, tx);\n}\nstatic async bulkUpsert(items, chunkSize = 100) {\n- let foundItems = [];\n+ let all = [];\nconst chunks = arrayChunks(items, chunkSize);\nconst tx = await transaction.start(this.knex());\n@@ -68,23 +68,20 @@ export class TaxTreaties extends BaseModel {\nconst insert = chunk.filter(item => !item.hasOwnProperty(this.idColumn));\nconst update = chunk.filter(item => item.hasOwnProperty(this.idColumn));\n- let all = await this.bulkAdd(insert);\n- all = all.concat(await this.bulkEdit(update));\n-\n- let found = await this.findAll();\n- foundItems = [\n- ...foundItems,\n- ...found.filter(x => all.find(t => t[this.idColumn] === x[this.idColumn]))\n- ];\n-\n+ all = all.concat(await this.bulkAdd(insert, tx));\n+ all = all.concat(await this.bulkEdit(update, tx));\nawait setImmediatePromise();\n}\nawait tx.commit();\n+ const found = await this.findAll();\n+ const foundItems = found.filter(x =>\n+ all.find(t => t[this.idColumn] === x[this.idColumn])\n+ );\n+ return foundItems;\n} catch (error) {\nawait tx.rollback();\nthrow error;\n}\n- return foundItems;\n}\n}\n",
        "chatgpt_cot": "remove unnecessary code, fix the serverjs import, and remove the save function."
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -20,7 +20,10 @@ html(lang='en')\nmeta(property=metadatum.property, content=metadatum.content)\nlink(rel='icon', href='/content/favicon.ico', type='image/x-icon')\ntitle=title ? title + ' - Cube Cobra' : 'Cube Cobra'\n+ if node_env === 'production'\nlink(rel='stylesheet', href='https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css', integrity='sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh', crossorigin='anonymous')\n+ else\n+ link(rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.min.css')\nlink(rel='stylesheet' href='/css/stylesheet.css')\nbody\n@@ -181,8 +184,12 @@ html(lang='en')\ninput.btn.btn-success(type='submit',value='Create')\nbutton.btn.btn-secondary(type='button', data-dismiss='modal') Close\n+ if node_env === 'production'\nscript(src='https://code.jquery.com/jquery-3.4.1.slim.min.js', integrity='sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n', crossorigin='anonymous')\nscript(src='https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js', integrity='sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6', crossorigin='anonymous', async)\n+ else\n+ script(src='/bower_components/jquery/dist/jquery.slim.min.js')\n+ script(src='/bower_components/bootstrap/dist/js/bootstrap.min.js', async)\nscript(src='/js/csrf.js', async)\nscript(src='/js/toolbar.js', async)\nblock scripts\n",
        "org_msg": "Continue to use local copies in development.",
        "sim_msg": "Swapped 3.3.7, 4.0.0-beta posistions, added info panel",
        "sim_diff": "diff --git a/views/index.pug b/views/index.pug @@ -2,11 +2,11 @@ extends layout\nblock content\nh2.text-center=title\n- h3.text-center='v' + config.bootstrap4[0].version\n+ h3.text-center='v' + config.bootstrap[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].stylesheet\n- - var sri = config.bootstrap4[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].stylesheet\n+ - var sri = config.bootstrap[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -20,9 +20,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].javascript\n- - var sri = config.bootstrap4[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].javascript\n+ - var sri = config.bootstrap[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n@@ -35,12 +35,21 @@ block content\nspan.help-block Click to copy\ninclude _partials/jscode.pug\n+ hr\n+ .panel.panel-info\n+ .panel-heading\n+ h3.panel-title Info\n+ .panel-body\n+ | Bootstrap 4 is currently in Beta release and should be treated as such. For details check out\n+ a(href='https://blog.getbootstrap.com/2017/08/10/bootstrap-4-beta/', target='_blank', rel='noopener').\n+ the Bootstrap 4 Beta announcement\n+ | .\n- h3.text-center='v' + config.bootstrap[0].version\n+ h3.text-center='v' + config.bootstrap4[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].stylesheet\n- - var sri = config.bootstrap[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].stylesheet\n+ - var sri = config.bootstrap4[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -54,9 +63,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].javascript\n- - var sri = config.bootstrap[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].javascript\n+ - var sri = config.bootstrap4[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n",
        "chatgpt_cot": "Add conditional loading of Bootstrap and jQuery based on environment to improve performance and resource management in layout.pug."
    },
    {
        "org_diff": "diff --git a/src/components/BlogContextMenu.js b/src/components/BlogContextMenu.js @@ -11,10 +11,13 @@ class BlogDeleteModal extends React.Component {\nthis.close = this.close.bind(this);\nthis.confirm = this.confirm.bind(this);\nthis.keyPress = this.keyPress.bind(this);\n+\n+ if (this.props.menu.state.deleteModalIsOpen) {\n+ document.addEventListener(\"keyup\", this.keyPress);\n+ }\n}\nopen() {\n- document.addEventListener(\"keyup\", this.keyPress);\nthis.props.menu.setState({\ndeleteModalIsOpen: true,\n});\n",
        "org_msg": "Fix bug of keypress event not removing",
        "sim_msg": "cleanup: scrap code",
        "sim_diff": "diff --git a/components/core/SlateMediaObjectSidebar.js b/components/core/SlateMediaObjectSidebar.js @@ -147,28 +147,10 @@ export default class SlateMediaObjectSidebar extends React.Component {\n};\n_handleChange = (e) => {\n- if (\n- e.key === \"ArrowLeft\" ||\n- e.key === \"Left\" ||\n- e.key === \"ArrowRight\" ||\n- e.key === \"Right\"\n- ) {\n- e.stopPropagation();\n- }\n-\nthis.setState({ [e.target.name]: e.target.value });\n};\n_handleChangeDeepLink = (e) => {\n- if (\n- e.key === \"ArrowLeft\" ||\n- e.key === \"Left\" ||\n- e.key === \"ArrowRight\" ||\n- e.key === \"Right\"\n- ) {\n- e.stopPropagation();\n- }\n-\nthis.setState({ [e.target.name]: Strings.createSlug(e.target.value, \"\") });\n};\n",
        "chatgpt_cot": "Add event listener for keyup only if deleteModalIsOpen is true in BlogContextMenu."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -15,6 +15,8 @@ function initializeCatalog() {\ncatalog.full_names = [];\ncatalog.imagedict = {};\ncatalog.cardimages = {};\n+ catalog.oracleToId = {};\n+ catalog.english = {};\n}\ninitializeCatalog();\n@@ -56,6 +58,10 @@ function addCardToCatalog(card, isExtra) {\ncatalog.nameToId[normalizedName] = [];\n}\ncatalog.nameToId[normalizedName].push(card._id);\n+ if (!catalog.oracleToId[card.oracle_id]) {\n+ catalog.oracleToId[card.oracle_id] = [];\n+ }\n+ catalog.oracleToId[card.oracle_id].push(card._id);\nutil.binaryInsert(normalizedName, catalog.names);\nutil.binaryInsert(normalizedFullName, catalog.full_names);\n}\n@@ -689,6 +695,7 @@ function convertCard(card, isExtra) {\nnewcard.oracle_text = card.card_faces.map((face) => face.oracle_text).join('\\n');\n}\nnewcard._id = convertId(card, isExtra);\n+ newcard.oracle_id = card.oracle_id;\nnewcard.cmc = convertCmc(card, isExtra);\nnewcard.legalities = convertLegalities(card, isExtra);\nnewcard.parsedCost = convertParsedCost(card, isExtra);\n@@ -734,6 +741,26 @@ function convertCard(card, isExtra) {\nreturn newcard;\n}\n+function addLanguageMapping(card) {\n+ const sameOracle = catalog.oracleToId[card.oracle_id] || [];\n+ for (const otherId of sameOracle) {\n+ const otherCard = catalog.dict[otherId];\n+ if (card.set === otherCard.set && card.collector_number === otherCard.collector_number) {\n+ catalog.english[card.id] = otherId;\n+ break;\n+ }\n+ }\n+ if (!catalog.english[card.id]) {\n+ for (const otherId of catalog.nameToId[cardutil.normalizeName(card.name)]) {\n+ const otherCard = catalog.dict[otherId];\n+ if (card.set === otherCard.set && card.collector_number === otherCard.collector_number) {\n+ catalog.english[card.id] = otherId;\n+ break;\n+ }\n+ }\n+ }\n+}\n+\nfunction writeCatalog(basePath = 'private') {\nif (!fs.existsSync(basePath)) {\nfs.mkdirSync(basePath);\n@@ -756,15 +783,16 @@ function writeCatalog(basePath = 'private') {\n}\nfunction saveAllCards(arr, basePath = 'private') {\n- arr.forEach((card) => {\n+ for (const card of arr.filter((c) => c.lang === 'en')) {\nif (card.layout === 'transform') {\naddCardToCatalog(convertCard(card, true), true);\n}\naddCardToCatalog(convertCard(card));\n- });\n- arr.forEach((card) => {\naddTokens(card);\n- });\n+ }\n+ for (const card of arr.filter((c) => c.lang !== 'en')) {\n+ addLanguageMapping(card);\n+ }\nreturn writeCatalog(basePath);\n}\n",
        "org_msg": "Make language mapper.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Add method to map card's language, and add a new attribute to the catalog, \"oracleToId\" to store card's oracle id."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -654,7 +654,6 @@ router.get('/compare/:id_a/to/:id_b', async (req, res) => {\nconst [cubeA, cubeB] = await Promise.all([cubeAq, cubeBq]);\nconst pids = [];\n-\n[cubeA, cubeB].forEach((cube) => {\ncube.cards.forEach(function(card, index) {\ncard.details = {\n@@ -796,11 +795,7 @@ router.get('/list/:id', async function(req, res) {\nloginCallback: '/cube/list/' + req.params.id,\n});\n} catch (err) {\n- console.error(err);\n- res.status(500).send({\n- success: 'false',\n- message: err,\n- });\n+ util.handleRouteError(res, err, '/cube/overview/' + req.params.id);\n}\n});\n@@ -862,46 +857,21 @@ router.get('/playtest/:id', async (req, res) => {\nloginCallback: '/cube/playtest/' + req.params.id,\n});\n} catch (err) {\n- console.error(err);\n- res.status(500).send({\n- success: 'false',\n- message: err,\n- });\n+ util.handleRouteError(res, err, '/cube/overview/' + req.params.id);\n}\n});\n-router.get('/analysis/:id', function(req, res) {\n- Cube.findOne(build_id_query(req.params.id), function(err, cube) {\n- if (!cube) {\n- req.flash('danger', 'Cube not found');\n- res.status(404).render('misc/404', {});\n- } else {\n- User.findById(cube.owner, function(err, user) {\n+router.get('/analysis/:id', async (req, res) => {\n+ try {\n+ const cube = await Cube.findOne(build_id_query(req.params.id));\n+ const user = await User.findById(cube.owner);\n+\nif (!user) {\nuser = {\nusername: 'unknown',\n};\n}\n- if (err) {\n- res.render('cube/cube_analysis', {\n- cube: cube,\n- cube_id: req.params.id,\n- owner: user.username,\n- activeLink: 'analysis',\n- title: `${abbreviate(cube.name)} - Analysis`,\n- TypeByColor: analytics.GetTypeByColorIdentity(cube.cards, carddb),\n- MulticoloredCounts: analytics.GetColorIdentityCounts(cube.cards, carddb),\n- curve: JSON.stringify(analytics.GetCurve(cube.cards, carddb)),\n- GeneratedTokensCounts: analytics.GetTokens(cube.cards, carddb),\n- metadata: generateMeta(\n- `Cube Cobra Analysis: ${cube.name}`,\n- cube.type ? `${cube.card_count} Card ${cube.type} Cube` : `${cube.card_count} Card Cube`,\n- cube.image_uri,\n- `https://cubecobra.com/cube/analysis/${req.params.id}`,\n- ),\n- loginCallback: '/cube/analysis/' + req.params.id,\n- });\n- } else {\n+\nres.render('cube/cube_analysis', {\ncube: cube,\ncube_id: req.params.id,\n@@ -920,11 +890,10 @@ router.get('/analysis/:id', function(req, res) {\n),\nloginCallback: '/cube/analysis/' + req.params.id,\n});\n+ } catch (err) {\n+ util.handleRouteError(res, err, '/cube/overview/' + req.params.id);\n}\n});\n- }\n- });\n-});\nrouter.get('/samplepack/:id', function(req, res) {\nres.redirect('/cube/samplepack/' + req.params.id + '/' + Date.now().toString());\n",
        "org_msg": "Revised playtest, list, analysis routes",
        "sim_msg": "removes empty array",
        "sim_diff": "diff --git a/server.js b/server.js @@ -309,7 +309,6 @@ app.prepare().then(async () => {\nlet serializedUsersMap = { [creator.id]: creator };\nlet serializedSlatesMap = {};\n- // NOTE(jim): The most expensive call first.\nconst r1 = await Serializers.doSubscriptions({\nusers: [],\nslates: [],\n@@ -330,50 +329,51 @@ app.prepare().then(async () => {\ncreator.subscribers = r2.serializedSubscribers;\n- // let exploreSlates = [];\n-\n- // if (Environment.IS_PRODUCTION) {\n- // exploreSlates = await Data.getSlatesByIds({\n- // ids: [\n- // //NOTE(tara): slates in prod\n- // \"d2861ac4-fc41-4c07-8f21-d0bf06be364c\",\n- // \"9c2c458c-d92a-4e81-a4b6-bf6ab4607470\",\n- // \"7f461144-0647-43d7-8294-788b37ae5979\",\n- // \"f72c2594-b8ac-41f6-91e0-b2da6788ae23\",\n- // \"a0d6e2f2-564d-47ed-bf56-13c42634703d\",\n- // \"0ba92c73-92e7-4b00-900e-afae4856c9ea\",\n- // ],\n- // });\n-\n- // for (let exploreSlate of exploreSlates) {\n- // let user = await Data.getUserById({ id: exploreSlate.data.ownerId });\n- // exploreSlate.username = user.username;\n- // }\n- // } else {\n- // exploreSlates = await Data.getSlatesByIds({\n- // ids: [\n- // //NOTE(tara): slates in localhost for testing\n- // \"857ad84d-7eff-4861-a988-65c84b62fc23\",\n- // \"81fa0b39-0e96-4c7f-8587-38468bb67cb3\",\n- // \"c4e8dad7-4ba0-4f25-a92a-c73ef5522d29\",\n- // \"df05cb1f-2ecf-4872-b111-c4b8493d08f8\",\n- // \"435035e6-dee4-4bbf-9521-64c219a527e7\",\n- // \"ac907aa3-2fb2-46fd-8eba-ec8ceb87b5eb\",\n- // ],\n- // });\n-\n- // for (let exploreSlate of exploreSlates) {\n- // let user = await Data.getUserById({ id: exploreSlate.data.ownerId });\n- // exploreSlate.username = user.username;\n- // }\n- // }\n+ // NOTE(tara+martina)\n+ // Remove this at some point.\n+ /*\n+ if (Environment.IS_PRODUCTION) {\n+ exploreSlates = await Data.getSlatesByIds({\n+ ids: [\n+ //NOTE(tara): slates in prod\n+ \"d2861ac4-fc41-4c07-8f21-d0bf06be364c\",\n+ \"9c2c458c-d92a-4e81-a4b6-bf6ab4607470\",\n+ \"7f461144-0647-43d7-8294-788b37ae5979\",\n+ \"f72c2594-b8ac-41f6-91e0-b2da6788ae23\",\n+ \"a0d6e2f2-564d-47ed-bf56-13c42634703d\",\n+ \"0ba92c73-92e7-4b00-900e-afae4856c9ea\",\n+ ],\n+ });\n+\n+ for (let exploreSlate of exploreSlates) {\n+ let user = await Data.getUserById({ id: exploreSlate.data.ownerId });\n+ exploreSlate.username = user.username;\n+ }\n+ } else {\n+ exploreSlates = await Data.getSlatesByIds({\n+ ids: [\n+ //NOTE(tara): slates in localhost for testing\n+ \"857ad84d-7eff-4861-a988-65c84b62fc23\",\n+ \"81fa0b39-0e96-4c7f-8587-38468bb67cb3\",\n+ \"c4e8dad7-4ba0-4f25-a92a-c73ef5522d29\",\n+ \"df05cb1f-2ecf-4872-b111-c4b8493d08f8\",\n+ \"435035e6-dee4-4bbf-9521-64c219a527e7\",\n+ \"ac907aa3-2fb2-46fd-8eba-ec8ceb87b5eb\",\n+ ],\n+ });\n+\n+ for (let exploreSlate of exploreSlates) {\n+ let user = await Data.getUserById({ id: exploreSlate.data.ownerId });\n+ exploreSlate.username = user.username;\n+ }\n+ }\n+ */\nreturn app.render(req, res, \"/_/profile\", {\nviewer,\ncreator,\nmobile,\nresources: EXTERNAL_RESOURCES,\n- // exploreSlates,\n});\n});\n",
        "chatgpt_cot": "\"Fix error handling in cube_routes.js; use util.handleRouteError for error handling in '/list/:id' and '/playtest/:id' routes; use async/await for '/analysis/:id' route.\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/meta.test.js b/__tests__/serverjs/meta.test.js const generateMeta = require(\"../../serverjs/meta\");\n-test(\"generateMeta\", () => {\n+test(\"generateMeta returns the expected object\", () => {\nconst title = \"the title\",\ndescription = \"the description\",\nimage = \"a real image url\",\n",
        "org_msg": "fix meta test description",
        "sim_msg": "test(config): should throw if env config file not found",
        "sim_diff": "diff --git a/test/test.js b/test/test.js const test = require('ava')\nconst Maizzle = require('../src')\n+const Config = require('../src/generators/config')\nconst {join} = require('path')\nconst {readFileSync} = require('fs')\n@@ -33,3 +34,9 @@ test('It throws if first argument is an empty string', async t => {\nawait renderString('')\n}, {instanceOf: RangeError, message: 'received empty string'})\n})\n+\n+test('It throws if a config is not found for the specified environment', async t => {\n+ await t.throwsAsync(async () => {\n+ await Config.getMerged('production')\n+ }, {instanceOf: Error, message: `no 'config.production.js' file found in project root`})\n+})\n",
        "chatgpt_cot": "\"Refactor test for generateMeta to return the expected object\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -233,7 +233,6 @@ router.post(\n'/follow/:id',\nensureAuth,\nutil.wrapAsyncApi(async (req, res) => {\n- try {\nif (!req.user._id) {\nreq.flash('danger', 'Not Authorized');\nres.status(404).send({\n@@ -263,17 +262,13 @@ router.post(\nres.status(200).send({\nsuccess: 'true',\n});\n- } catch (err) {\n- res.status(500).send({\n- success: 'false',\n- });\n- console.error(err);\n- }\n}),\n);\n-router.post('/unfollow/:id', ensureAuth, async (req, res) => {\n- try {\n+router.post(\n+ '/unfollow/:id',\n+ ensureAuth,\n+ util.wrapAsyncApi(async (req, res) => {\nif (!req.user._id) {\nreq.flash('danger', 'Not Authorized');\nres.status(404).send({\n@@ -303,13 +298,8 @@ router.post('/unfollow/:id', ensureAuth, async (req, res) => {\nres.status(200).send({\nsuccess: 'true',\n});\n- } catch (err) {\n- res.status(500).send({\n- success: 'false',\n- });\n- console.error(err);\n- }\n-});\n+ }),\n+);\nrouter.post('/feature/:id', ensureAuth, async (req, res) => {\ntry {\n",
        "org_msg": "Revised Unfollow",
        "sim_msg": "feat(getSocial): remove following and followers",
        "sim_diff": "diff --git a/pages/api/users/get-social.js b/pages/api/users/get-social.js import * as Data from \"~/node_common/data\";\n-import * as Serializers from \"~/node_common/serializers\";\nexport default async (req, res) => {\n- let id = req.body.data.id;\n+ let { id } = req.body.data;\nif (!id) {\nreturn res.status(404).send({ decorator: \"SERVER_USER_SOCIAL_NO_USER_ID\", error: true });\n}\n@@ -21,38 +20,8 @@ export default async (req, res) => {\n.send({ decorator: \"SERVER_USER_SOCIAL_SUBSCRIPTIONS_NOT_FOUND\", error: true });\n}\n- const following = await Data.getFollowingByUserId({ ownerId: id });\n-\n- if (!following) {\n- return res\n- .status(404)\n- .send({ decorator: \"SERVER_USER_SOCIAL_FOLLOWING_NOT_FOUND\", error: true });\n- }\n-\n- if (following.error) {\n- return res\n- .status(500)\n- .send({ decorator: \"SERVER_USER_SOCIAL_FOLLOWING_NOT_FOUND\", error: true });\n- }\n-\n- const followers = await Data.getFollowersByUserId({ userId: id });\n-\n- if (!followers) {\n- return res\n- .status(404)\n- .send({ decorator: \"SERVER_USER_SOCIAL_FOLLOWERS_NOT_FOUND\", error: true });\n- }\n-\n- if (followers.error) {\n- return res\n- .status(500)\n- .send({ decorator: \"SERVER_USER_SOCIAL_FOLLOWERS_NOT_FOUND\", error: true });\n- }\n-\nreturn res.status(200).send({\ndecorator: \"SERVER_USER_SOCIAL\",\n- following,\n- followers,\nsubscriptions,\n});\n};\n",
        "chatgpt_cot": "\"Refactor follow and unfollow routes to use async/await, ensureAuth and util.wrapAsyncApi for better error handling and code readability.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1600,7 +1600,7 @@ router.get('/draft/:id', async (req, res) => {\nfor (const seat of draft.packs) {\nfor (const pack of seat) {\nfor (const card of pack) {\n- card.details = carddb.cardFromId(card.cardID, 'cmc type image_normal name color_identity');\n+ card.details = carddb.cardFromId(card.cardID, 'cmc type image_normal image_flip name color_identity');\nnames.add(card.details.name);\n}\n}\n",
        "org_msg": "make the flip side of transform cards appear on mouse hover during draft",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Add image_flip to card details in cube draft route. Fixes issue with missing card images in draft packs."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -166,6 +166,7 @@ router.get('/topcards', async (req, res) => {\nres.render('tool/topcards', {\nnumResults: names.length,\ndata,\n+ title: 'Top Cards',\n});\n} catch (err) {\nconsole.error(err);\n",
        "org_msg": "Add page title.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Add title attribute to render function in topcards route to specify the title of the page for better user experience."
    },
    {
        "org_diff": "diff --git a/one_shot_scripts/validate_colors.js b/one_shot_scripts/validate_colors.js @@ -4,17 +4,18 @@ const config = require('../config/database');\n(async () => {\nmongoose.connect(config.database).then( async (db) => {\n- const cubes = await Cube.find();\n- let i = 0;\n+ const totalCubes = await Cube.count();\n+ for (let start = 0; start < totalCubes; start += 100) {\n+ const cubes = await Cube.find().skip(start).limit(100);\n+ const collected = [];\nfor (const cube of cubes) {\nfor (const card of cube.cards) {\ncard.colors = card.colors.filter(c => [...'WUBRG'].includes(c));\n}\n- await Cube.updateOne({_id: cube._id }, cube);\n- i++;\n- if (i % 100 == 0) {\n- console.log(i);\n+ collected.push(cube);\n}\n+ await Promise.all(collected.map(cube => cube.save()));\n+ console.log(`Completed ${start + collected.length} cubes`);\n}\nmongoose.disconnect();\n});\n",
        "org_msg": "Have one-shot validate 100 cubes at a time.",
        "sim_msg": "Make fancy scatter properly select points",
        "sim_diff": "diff --git a/src/traces/scattergl/convert.js b/src/traces/scattergl/convert.js @@ -586,7 +586,7 @@ proto.updateFancy = function(options) {\nfor(j = 0; j < 4; ++j) {\nvar color = colors[4 * index + j];\n- if (sel && sel[index] && j === 3) {\n+ if (sel && !sel[index] && j === 3) {\ncolor *= DESELECTDIM\n}\nthis.scatter.options.colors[4 * i + j] = color;\n",
        "chatgpt_cot": "Add pagination for fetching cubes, filter card colors, and save changes. Fixes performance issue and ensures data integrity in validate_colors.js."
    },
    {
        "org_diff": "diff --git a/src/markdown/userlink/micromark-userlink.js b/src/markdown/userlink/micromark-userlink.js /* eslint-disable no-use-before-define */\nimport assert from 'assert';\n+import markdownLineEndingOrSpace from 'micromark/dist/character/markdown-line-ending-or-space';\nfunction tokenizeUserlink(effects, ok, nok) {\n+ const self = this;\nreturn start;\nfunction start(code) {\nassert(code === 64, 'expected `@`');\n+ // '@' shouldn't be preceded by an actual character\n+ if (!self.previous || markdownLineEndingOrSpace(self.previous)) {\neffects.enter('userlink');\neffects.enter('userlinkMarker');\neffects.consume(code);\n@@ -13,6 +17,9 @@ function tokenizeUserlink(effects, ok, nok) {\nreturn open;\n}\n+ return nok(code);\n+ }\n+\n// make sure at least one alphanum. char is after the '@'\nfunction open(code) {\nif (/[a-zA-Z0-9]/.test(String.fromCharCode(code))) {\n",
        "org_msg": "'@' can't be right after a letter to be parsed as a userlink",
        "sim_msg": "remove hash links",
        "sim_diff": "diff --git a/components/system/components/Markdown.js b/components/system/components/Markdown.js @@ -11,7 +11,7 @@ export const Markdown = ({ md, options }) => {\n{\nunified()\n.use(parse)\n- .use(linkifyRegex(/[@#](\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g)) // @user #tag\n+ .use(linkifyRegex(/@(\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g)) // @user\n.use(linkifyRegex(/^(https?):\\/\\/[^\\s$.?#].[^\\s]*$/gm)) // http(s) links\n.use(remark2react, options)\n.processSync(md).result\n",
        "chatgpt_cot": "Add validation for '@' character in userlink tokenization to ensure correct parsing of user links in markdown files."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -15,8 +15,20 @@ const catalog = {};\n/* cardDetailsSchema = {\n* color_identity: [Char],\n* set: String,\n+ * set_name: String,\n+ * foil: Boolean,\n+ * nonfoil: Boolean,\n* collector_number: String,\n+ * released_at: Date,\n* promo: Boolean,\n+ * prices: {\n+ * usd: Number,\n+ * usd_foil: Number,\n+ * eur: Number,\n+ * tix: Number,\n+ * },\n+ * elo: Number,\n+ * embedding: [Number],\n* digital: Boolean,\n* isToken: Boolean,\n* border_color: String,\n@@ -34,12 +46,18 @@ const catalog = {};\n* _id: UUID,\n* oracle_id: String,\n* cmc: Number\n+ * // one of \"legal\", \"not_legal\", \"restricted\", \"banned\"\n* legalities: {\n- * Legacy: Boolean,\n- * Modern: Boolean,\n- * Standard: Boolean,\n- * Pauper: Boolean,\n- * Pioneer: Boolean,\n+ * Legacy: String,\n+ * Modern: String,\n+ * Standard: String,\n+ * Pauper: String,\n+ * Pioneer: String,\n+ * Brawl: String,\n+ * Historic: String,\n+ * Commander: String,\n+ * Penny: String,\n+ * Vintage: String,\n* },\n* // Hybrid looks like w-u\n* parsed_cost: [String],\n@@ -48,6 +66,7 @@ const catalog = {};\n* full_art: Boolean,\n* language: String,\n* mtgo_id: String,\n+ * layout: String,\n* tcgplayer_id: String,\n* loyalty: UnsignedInteger\n* power: Number\n",
        "org_msg": "added missing fields",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Add new attributes and update data types in cardDetailsSchema to enhance card details and legalities information."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2078,7 +2078,6 @@ router.post(\n}\nawait draft.save();\n- console.log('botsOnly', req.body.botsOnly);\nif (req.body.botsOnly) {\nreturn doBotOnlyDraft(res, draft._id);\n}\n@@ -3147,7 +3146,7 @@ router.get('/redraftbots/:id', async (req, res) => {\nawait draft.save();\n- doBotOnlyDraft(res, draft._id);\n+ return doBotOnlyDraft(res, draft._id);\n} catch (err) {\nreturn util.handleRouteError(req, res, err, `/cube/playtest/${req.params.id}`);\n}\n",
        "org_msg": "Fix Lint warnings.",
        "sim_msg": "fix logErrors option",
        "sim_diff": "diff --git a/index.js b/index.js @@ -54,7 +54,7 @@ function createBot (options = {}) {\noptions.username = options.username || 'Player'\noptions.version = options.version || false\noptions.plugins = options.plugins || {}\n- options.logErrors = options.logErrors || true\n+ options.logErrors = options.logErrors === undefined ? true : options.logErrors\noptions.loadInternalPlugins = options.loadInternalPlugins !== false\nconst bot = new Bot()\nif (options.logErrors) {\n",
        "chatgpt_cot": "\"Fix issue with bot only draft saving and redrafting in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -129,7 +129,8 @@ function setCubeType(cube, carddb) {\npauper = false;\npeasant = true;\n}\n- if (!pauper && peasant /* && card only at rare or mythic */) {\n+ if (!pauper && peasant) {\n+ // check rarities of all card versions\nconst rarities = carddb.allVersions(carddb.cardFromId(card.cardID)).map((id) => carddb.cardFromId(id).rarity);\nif (!rarities.includes('common') && !rarities.includes('uncommon')) {\npeasant = false;\n",
        "org_msg": "updated comment for readability",
        "sim_msg": "Changes to deck for stronghold",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -13,11 +13,12 @@ class Deck {\nvar result = {\nconflictDrawCards: [],\ndynastyDrawCards: [],\n- provinceCards: []\n+ provinceCards: [],\n+ stronghold: []\n};\n//conflict\n- this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ this.eachRepeatedCard(this.data.conflictDrawCards, cardData => {\nif(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\ndrawCard.location = 'conflict draw deck';\n@@ -26,7 +27,7 @@ class Deck {\n});\n//dynasty\n- this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ this.eachRepeatedCard(this.data.dynastyDrawCards, cardData => {\nif(['dynsaty'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\ndrawCard.location = 'dynasty draw deck';\n@@ -42,18 +43,15 @@ class Deck {\n}\n});\n- if(this.data.stronghold) {\n- result.stronghold = new DrawCard(player, _.extend({\n- code: this.data.stronghold.value,\n- type_code: 'stronghold',\n- stronghold_code: this.data.stronghold.value\n- }, this.data.stronghold));\n- } else {\n- result.stronghold = new DrawCard(player, { type_code: 'stronghold' });\n+ this.eachRepeatedCard(this.data.stronghold, cardData => {\n+ if(cardData.type_code === 'stronghold') {\n+ var strongholdCard = this.createCard(StrongholdCard, player, cardData);\n+ strongholdCard.location = 'stronghold deck';\n+ result.stronghold.push(strongholdCard);\n}\n- result.stronghold.moveTo('stronghold');\n+ });\n- result.allCards = [result.stronghold].concat(result.drawCards).concat(result.provinceCards).concat(result.conflictDrawCards).concat(result.dynastyDrawCards);\n+ result.allCards = [result.stronghold].concat(result.provinceCards).concat(result.conflictDrawCards).concat(result.dynastyDrawCards);\nreturn result;\n}\n",
        "chatgpt_cot": "Refactor setCubeType function to check rarities of all card versions, fixing peasant flag assignment issue."
    },
    {
        "org_diff": "diff --git a/routes/comment_routes.js b/routes/comment_routes.js @@ -83,7 +83,7 @@ router.post(\nconst comment = new Comment();\ncomment.parent = req.params.parent.substring(0, 500);\n- comment.parentType = req.params.type.substring(0, 500);\n+ comment.parentType = req.params.type;\ncomment.owner = poster._id;\ncomment.ownerName = poster.username;\ncomment.image = poster.image;\n@@ -148,7 +148,7 @@ router.post(\n: 'https://img.scryfall.com/cards/art_crop/front/0/c/0c082aa8-bf7f-47f2-baf8-43ad253fd7d7.jpg?1562826021';\ncomment.artist = newComment.owner ? 'Allan Pollack' : req.user.artist;\ncomment.updated = true;\n- comment.content = sanitize(newComment.content.substring(0, 500));\n+ comment.content = sanitize(newComment.content.substring(0, 5000));\n// the -1000 is to prevent weird time display error\ncomment.timePosted = Date.now() - 1000;\n",
        "org_msg": "fixed edit comment route",
        "sim_msg": "add new profileAddressBook page to routes",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -9,6 +9,7 @@ routes\n.add(\"login\", \"/login\", \"login\")\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:slugOrId\", \"product\")\n.add(\"product\", \"/product/:slugOrId/:variantId?\", \"product\")\n+ .add(\"addressBook\", \"/profile/address\", \"profileAddressBook\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"productGrid\")\n.add(\"tag\", \"/tag/:slug\", \"tag\");\n",
        "chatgpt_cot": "Fix content length issue in comment_routes.js to prevent display error. Update parentType to avoid compilation problem."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2482,7 +2482,7 @@ router.post('/submitdeck/:id', async (req, res) => {\nconst userq = User.findById(deck.owner);\nconst cubeOwnerq = User.findById(cube.owner);\n- const [user, cubeOwner] = await Promise.all([userq, cubeOwnerq]);\n+ var [user, cubeOwner] = await Promise.all([userq, cubeOwnerq]);\nvar owner = user ? user.username : 'Anonymous';\ndeck.name = owner + \"'s draft of \" + cube.name + ' on ' + deck.date.toLocaleString('en-US');\n@@ -2490,6 +2490,14 @@ router.post('/submitdeck/:id', async (req, res) => {\ndeck.cubename = cube.name;\ncube.decks.push(deck._id);\n+ if(!user)\n+ {\n+ user = {\n+ _id: '',\n+ username: 'Anonymous'\n+ }\n+ }\n+\nawait util.addNotification(\ncubeOwner,\nuser,\n",
        "org_msg": "Fixed anon draft crash",
        "sim_msg": "add job id to start board for task",
        "sim_diff": "diff --git a/core/api-server/api/rest-api/routes/v1/boards.js b/core/api-server/api/rest-api/routes/v1/boards.js @@ -62,8 +62,8 @@ const routes = (options) => {\n});\nrouter.all('/tensor/start/:taskId?', methods(['POST']), logger(), async (req, res, next) => {\nconst { taskId } = req.params;\n- const { nodeName, pipelineName } = req.body;\n- await boards.startTensorboard({ taskId, nodeName, pipelineName }, 'task');\n+ const { nodeName, pipelineName, jobId } = req.body;\n+ await boards.startTensorboard({ taskId, jobId, nodeName, pipelineName }, 'task');\nres.json({ message: 'OK' });\nnext();\n});\n",
        "chatgpt_cot": "Fix variable declaration issue in cube_routes.js for better code readability and functionality. Add default user object if user is not found."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -7,6 +7,7 @@ const serialize = require('serialize-javascript');\nconst mergeImages = require('merge-images');\nconst RSS = require('rss');\nconst { Canvas, Image } = require('canvas');\n+var {spawn} = require(\"child_process\");\nCanvas.Image = Image;\n",
        "org_msg": "Add spawn req",
        "sim_msg": "fix: set default value for options",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -4,7 +4,7 @@ const getConfig = require(\"next/config\").default;\nif (process.browser) {\nconst { publicRuntimeConfig } = getConfig();\n- const wrap = (method) => (route, params, options) => {\n+ const wrap = (method) => (route, params, options = {}) => {\nconst { byName, urls: { as, href } } = routes.findAndGetUrls(route, params);\n// Force full page loads\n",
        "chatgpt_cot": "Add spawn method from child_process\nThe scope of changes is adding a new method \"spawn\" from the \"child_process\" module, which can be used for spawning new child processes. This modification is related to the entire file as it adds a new functionality to the existing code. The purpose and impact of the modification is to enhance the functionality of the file by adding the capability to spawn new child processes."
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -4,6 +4,7 @@ html\nmeta(charset='UTF-8')\nmeta(name='description', content='Build, Manage, and Playtest your Magic the Gathering cube!')\nmeta(name='keywords', content='MTG,Magic the Gathering,Magic,Cube,Cubing,Cube Management,Cube Draft')\n+ meta(name='viewport', content='width=device-width, initial-scale=1')\nif metadata\nfor metadatum, i in metadata\nif metadatum.name\n",
        "org_msg": "Add basic viewport tag.",
        "sim_msg": "Add image to og info",
        "sim_diff": "diff --git a/layouts/partials/head.html b/layouts/partials/head.html <meta property=\"og:title\" content=\"{{ $title }}\">\n<meta property=\"og:url\" content=\"{{ .URL | absURL }}\">\n<meta property=\"og:description\" content=\"{{- .Scratch.Get \"page_description\" -}}\">\n- <meta property=\"og:image\" content=\"{{ .Site.Params.image }}\">\n<meta property=\"og:site_name\" content=\"{{ .Site.Title }}\">\n<meta property=\"og:type\" content=\"website\">\n<meta name=\"twitter:card\" content=\"summary_large_image\">\n<meta name=\"twitter:title\" content=\"{{ $title }}\" />\n<meta name=\"twitter:description\" content=\"{{- .Scratch.Get \"page_description\" -}}\" />\n<meta name=\"twitter:url\" content=\"{{ .URL | absURL }}\" />\n- <meta name=\"twitter:image\" content=\"{{ .Site.Params.image }}\">\n+ {{- if $content_fragment -}}\n+ {{- range $content_fragment -}}\n+ {{- if and .Params.asset -}}\n+ {{- $file_path := strings.TrimSuffix \".md\" (replace .File.Path \"/index.md\" \"\") -}}\n+ {{- $root := (dict \"page\" (dict \"file_path\" $file_path) \"page_scratch\" $.Scratch \"page\" .) }}\n+ <meta property=\"og:image\" content=\"{{ partial \"helpers/image.html\" (dict \"root\" $root \"asset\" .Params.asset) }}\">\n+ <meta name=\"twitter:image\" content=\"{{ partial \"helpers/image.html\" (dict \"root\" $root \"asset\" .Params.asset) }}\">\n+ {{- else }}\n+ <meta property=\"og:image\" content=\"{{ $.Site.Params.image }}\">\n+ <meta name=\"twitter:image\" content=\"{{ $.Site.Params.image }}\">\n+ {{- end -}}\n+ {{- end -}}\n+ {{- else }}\n+ <meta property=\"og:image\" content=\"{{ $.Site.Params.image }}\">\n+ <meta name=\"twitter:image\" content=\"{{ $.Site.Params.image }}\">\n+ {{- end }}\n{{ with .Site.Params.name -}}<meta name=\"author\" content=\"{{ . }}\">{{- end }}\n{{ .Hugo.Generator }}\n",
        "chatgpt_cot": "Add viewport meta tag for responsive design in layout.pug file."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -1200,6 +1200,8 @@ function show_contextModal(card) {\n$('.price-area').html(priceHtml);\n$('#contextModalTitle').html(card.details.name);\n$('#contextModalImg').attr('src', card.details.display_image);\n+ $(\"#contextModalImg\").off(\"mouseover\");\n+ $(\"#contextModalImg\").off(\"mouseout\");\nif (card.details.image_flip !== undefined) {\n$('#contextModalImg').mouseover(function() {\n$(this).attr('src', card.details.image_flip);\n",
        "org_msg": "don't mouseover for single-faced cards, even after DFC modal\nApproving in lieu of reviews due to small size of change.",
        "sim_msg": "Clean up avatar subtab missing screenshot loading",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -1453,7 +1453,7 @@ window.addEventListener('avatarchange', e => {\navatarSubpageContent.innerHTML = `\\\n<div class=avatar>\n- <img class=screenshot>\n+ <img class=screenshot style=\"display: none;\">\n<div class=wrap>\n<div class=hash>${p ? p.hash : 'No avatar'}</div>\n${p ? `<nav class=\"button unwear-button\">Unwear</nab>` : ''}\n@@ -1464,14 +1464,17 @@ window.addEventListener('avatarchange', e => {\nconst img = avatarSubpageContent.querySelector('.screenshot');\nif (p) {\nconst u = await p.getScreenshotImageUrl();\n+ if (u) {\nimg.src = u;\nimg.onload = () => {\n+ img.style.display = null;\nURL.revokeObjectURL(u);\n};\nimg.onerror = err => {\nconsole.warn(err);\nURL.revokeObjectURL(u);\n};\n+ }\n} else {\nimg.src = 'assets/question.png';\n}\n",
        "chatgpt_cot": "Remove mouseover and mouseout event listeners on contextModalImg to prevent image flip on hover."
    },
    {
        "org_diff": "diff --git a/src/util/Filter.js b/src/util/Filter.js @@ -575,11 +575,11 @@ function filterApply(card, filter) {\n}\nif (filter.category == 'tag') {\nres = card.tags.some(element => {\n- return element.toLowerCase() == filter.arg;\n+ return element.toLowerCase() == filter.arg.toLowerCase();\n});\n}\nif (filter.category == 'status') {\n- if (card.status == filter.arg) {\n+ if (card.status.toLowerCase() == filter.arg.toLowerCase()) {\nres = true;\n}\n}\n",
        "org_msg": "Fix to force all lowercase checks",
        "sim_msg": "escape parens",
        "sim_diff": "diff --git a/scripts/filterToRule.js b/scripts/filterToRule.js @@ -80,7 +80,7 @@ function parseFilter (filterOrig) {\nfilter = filter.replace(/\\|\\|/,'')\n// escape some chars for json\n- filter = filter.replace(/(\\/|\\?|\\.)/g,'\\\\$1')\n+ filter = filter.replace(/(\\(|\\)|\\/|\\?|\\.)/g,'\\\\$1')\n// ending ^\nfilter = filter.replace(/\\^$/, '($|[?/])')\n@@ -91,8 +91,6 @@ function parseFilter (filterOrig) {\n// single wild card\nfilter = filter.replace(/([^\\.\\^])\\*/g, '$1.*')\n- console.log(filter)\n-\n// make sure this is a valid regex\nassert.doesNotThrow(() => new RegExp(filter))\n",
        "chatgpt_cot": "Fix case sensitivity issue in Filter.js for tag and status categories. Updated comparison to be case insensitive for both categories."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1001,12 +1001,15 @@ router.get('/samplepackimage/:id/:seed', async (req, res) => {\nconst pack = await generatePack(req.params.id, carddb, req.params.seed);\nconst imgScale = 0.9;\n+ // Try to make it roughly 5 times as wide as it is tall in cards.\n+ const width = Math.floor(Math.sqrt((5 / 3) * pack.pack.length));\n+ const height = Math.ceil(pack.pack.length / width);\nconst srcArray = pack.pack.map((card, index) => {\nreturn {\nsrc: card.imgUrl || card.details.image_normal,\n- x: imgScale * CARD_WIDTH * (index % 5),\n- y: imgScale * CARD_HEIGHT * Math.floor(index / 5),\n+ x: imgScale * CARD_WIDTH * (index % width),\n+ y: imgScale * CARD_HEIGHT * Math.floor(index / width),\nw: imgScale * CARD_WIDTH,\nh: imgScale * CARD_HEIGHT,\nrX: imgScale * 0.065 * CARD_WIDTH,\n@@ -1015,8 +1018,8 @@ router.get('/samplepackimage/:id/:seed', async (req, res) => {\n});\nreturn generateSamplepackImage(srcArray, {\n- width: imgScale * CARD_WIDTH * 5,\n- height: imgScale * CARD_HEIGHT * 3,\n+ width: imgScale * CARD_WIDTH * width,\n+ height: imgScale * CARD_HEIGHT * height,\nCanvas,\n})\n.then((image) => {\n",
        "org_msg": "Grow samplepackimage with pack size.",
        "sim_msg": "Updated compression example",
        "sim_diff": "diff --git a/examples/texture-compression/texture-compression.html b/examples/texture-compression/texture-compression.html <!DOCTYPE html>\n<html lang=\"en\">\n+\n<head>\n<meta charset=\"UTF-8\" />\n<script src=\"../../../devtools/lightning-inspect.js\"></script>\n</head>\n+\n<body style=\"margin: 0; padding: 0\">\n<script type=\"module\">\nimport lng from '../../../src/lightning.mjs';\nattachInspector(lng)\nwindow.onload = function () {\n- // const IMG = 'sampleImage-s3tc.ktx';\n- //const IMG = 'sampleImage-pvrtc.ktx';\n- // const IMG = 'sampleImage-etc1.ktx';\n- //const IMG = 'sampleImage-astc_4x4.ktx';\n- const IMG = 'lightning-etc1.pvr';\n-\n+ const images = [\n+ { compression: 'etc1', container: 'pvr', src: 'lightning-etc1.pvr' },\n+ { compression: 's3tc', container: 'ktx', src: 'sampleImage-s3tc.ktx' },\n+ { compression: 'pvrtc', container: 'ktx', src: 'sampleImage-pvrtc.ktx' },\n+ { compression: 'etc1', container: 'ktx', src: 'sampleImage-etc1.ktx' },\n+ { compression: 'astc_4x4', container: 'ktx', src: 'sampleImage-astc_4x4.ktx' },\n+ ];\nclass BasicUsageExample extends lng.Application {\nstatic _template() {\nreturn {\n- Image: {\n- src: IMG\n+ Header: {\n+ rect: true, w: 1920, h: 150, color: 0xff7f8088,\n+ Tx: {\n+ x: 100, y: 50,\n+ text: {\n+ text: ''\n+ }\n+ }\n+ },\n+ Images: {\n+ x: 50, y: 200, children: []\n}\n}\n}\n_init() {\n- // this.stage.on('console',({data})=>{\n- // this.tag(\"T\").text = data;\n- // })\n- console.log('Supported compressed texture formats:', this.stage.renderer.getCompressedTextureExtensions());\n+ const ext = this.stage.renderer.getCompressedTextureExtensions();\n+ const support = Object.keys(ext).reduce((arr, type) => {\n+ if (!!ext[type]) {\n+ arr.push(type);\n+ }\n+ return arr;\n+ }, [])\n+ this.tag(\"Tx\").text = `supported compression: ${support.join(' | ')}`;\n+\n+ this.tag(\"Images\").children = images.map((image, index) => {\n+ return {\n+ type: CompressedImage,\n+ imageSource: image.src,\n+ metadata: image,\n+ x: index % 4 * 370,\n+ y: Math.floor(index / 4) * 370\n+ }\n+ })\n+\n+ }\n+ }\n+\n+ class CompressedImage extends lng.Component {\n+ static _template() {\n+ return {\n+ scale: 0.6,\n+ Holder: {\n+ rect: true, color: 0xff9496a1,\n+ w: 526, h: 580,\n+ Image: {\n+ w: 512, h: 512,\n+ x: 6, y: 56,\n+ },\n+ Metadata: {\n+ x: 10, y: 3, color: 0xff000000,\n+ text: {\n+ text: ''\n+ }\n+ }\n+ }\n}\n}\n- const options = {stage: {w: 900, h: 900, clearColor: 0xFF000000, canvas2d: false, useImageWorker: false}, debug: true}\n+ set imageSource(v) {\n+ this.tag('Image').src = v;\n+ }\n+\n+ set metadata(v) {\n+ this.tag('Metadata').text = `${v.compression} | ${v.container}`;\n+ }\n+ }\n+\n+ const options = { stage: { w: 1920, h: 1080, precision: 2 / 3, clearColor: 0xFF000000, canvas2d: false, useImageWorker: false }, debug: true }\nconst app = new BasicUsageExample(options);\n}\n</script>\n</body>\n+\n</html>\n\\ No newline at end of file\n",
        "chatgpt_cot": "Refactor image scaling calculations in cube_routes.js for better aspect ratio handling. Adjust width and height calculations based on pack length."
    },
    {
        "org_diff": "diff --git a/src/pages/MarkdownPage.js b/src/pages/MarkdownPage.js @@ -416,10 +416,7 @@ const MarkdownPage = ({ user, loginCallback }) => (\n</Col>\n</Row>\n<br />\n- <p>\n- Create hybrid symbols by including a slash. If a symbol doesn't load this way, try swapping the order of the\n- colors.\n- </p>\n+ <p>Create hybrid symbols by including a slash.</p>\n<Row>\n<Col xs=\"12\" sm=\"6\">\n<Card>\n",
        "org_msg": "updated markdown page",
        "sim_msg": "remove hash links",
        "sim_diff": "diff --git a/components/system/components/Markdown.js b/components/system/components/Markdown.js @@ -11,7 +11,7 @@ export const Markdown = ({ md, options }) => {\n{\nunified()\n.use(parse)\n- .use(linkifyRegex(/[@#](\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g)) // @user #tag\n+ .use(linkifyRegex(/@(\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g)) // @user\n.use(linkifyRegex(/^(https?):\\/\\/[^\\s$.?#].[^\\s]*$/gm)) // http(s) links\n.use(remark2react, options)\n.processSync(md).result\n",
        "chatgpt_cot": "\"Remove unnecessary color swapping instructions from MarkdownPage.js\""
    },
    {
        "org_diff": "diff --git a/src/components/BlogContextMenu.js b/src/components/BlogContextMenu.js import React from 'react';\n-import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, } from 'reactstrap';\n+import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport BlogDeleteModal from './BlogDeleteModal';\n@@ -11,7 +11,7 @@ class BlogContextMenu extends React.Component {\nsuper(props);\nthis.deleteModal = React.createRef();\nthis.toggle = this.toggle.bind(this);\n- this.toggleDeleteModal = this.toggleDeleteModal.bind(this)\n+ this.toggleDeleteModal = this.toggleDeleteModal.bind(this);\nthis.openDeleteModal = this.openDeleteModal.bind(this);\nthis.state = {\ndropdownOpen: false,\n@@ -20,7 +20,7 @@ class BlogContextMenu extends React.Component {\n}\ncomponentDidUpdate() {\n- this.state\n+ this.state;\n}\ntoggle() {\n@@ -60,7 +60,6 @@ class BlogContextMenu extends React.Component {\n}\nrender() {\n-\nreturn (\n<>\n<Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\n@@ -69,14 +68,15 @@ class BlogContextMenu extends React.Component {\n</DropdownToggle>\n<DropdownMenu right>\n<DropdownItem onClick={() => this.clickEdit(this.props.post)}>Edit</DropdownItem>\n- <DropdownItem onClick={this.openDeleteModal}>\n- Delete\n- </DropdownItem>\n+ <DropdownItem onClick={this.openDeleteModal}>Delete</DropdownItem>\n</DropdownMenu>\n</Dropdown>\n- <BlogDeleteModal toggle={this.toggleDeleteModal} isOpen={this.state.deleteModalOpen}\n- postID={this.props.post._id} ref={this.deleteModal}>\n- </BlogDeleteModal>\n+ <BlogDeleteModal\n+ toggle={this.toggleDeleteModal}\n+ isOpen={this.state.deleteModalOpen}\n+ postID={this.props.post._id}\n+ ref={this.deleteModal}\n+ ></BlogDeleteModal>\n</>\n);\n}\n",
        "org_msg": "Style errors fixed with prettier",
        "sim_msg": "Close menus on second tap",
        "sim_diff": "diff --git a/packages/cx-core/src/widgets/nav/MenuItem.js b/packages/cx-core/src/widgets/nav/MenuItem.js @@ -7,6 +7,7 @@ import {Debug, menuFlag} from '../../util/Debug';\nimport DropdownIcon from '../icons/drop-down';\nimport {Localization} from '../../ui/Localization';\nimport {KeyCode} from '../../util/KeyCode';\n+import {isTouchEvent} from '../../util/isTouchEvent';\n/*\nFunctionality:\n@@ -195,12 +196,14 @@ class MenuItemComponent extends VDOM.Component {\nonKeyDown(e) {\nDebug.log(menuFlag, 'MenuItem', 'keyDown', this.el);\n- var {horizontal, widget} = this.props.instance;\n+ let {horizontal, widget} = this.props.instance;\nif (widget.dropdown) {\nif (e.target == this.el && (e.keyCode == KeyCode.enter || (horizontal ? e.keyCode == KeyCode.down : e.keyCode == KeyCode.right))) {\n- var focusableChild = findFirstChild(this.el, isFocusable);\n+ this.openDropdown(() => {\n+ let focusableChild = findFirstChild(this.el, isFocusable);\nif (focusableChild)\nFocusManager.focus(focusableChild);\n+ });\ne.preventDefault();\ne.stopPropagation();\n}\n@@ -209,9 +212,7 @@ class MenuItemComponent extends VDOM.Component {\nFocusManager.focus(this.el);\ne.preventDefault();\ne.stopPropagation();\n- this.setState({\n- dropdownOpen: false\n- });\n+ this.closeDropdown();\n}\n}\n}\n@@ -219,24 +220,29 @@ class MenuItemComponent extends VDOM.Component {\nonMouseDown(e) {\nlet {widget} = this.props.instance;\nif (widget.dropdown) {\n+ e.stopPropagation();\n+ if (this.state.dropdownOpen)\n+ this.closeDropdown();\n+ else {\n//IE sometimes does not focus parent on child click\nif (!isFocusedDeep(this.el))\nFocusManager.focus(this.el);\n- e.stopPropagation();\n+ this.openDropdown();\n+ }\n}\n}\n- openDropdown() {\n+ openDropdown(callback) {\nlet {widget} = this.props.instance;\n- if (widget.dropdown)\n+ if (widget.dropdown) {\nthis.setState({\ndropdownOpen: true\n- });\n+ }, callback);\n+ }\n}\nonClick(e) {\ne.stopPropagation();\n- this.openDropdown();\n}\nonFocus() {\n@@ -245,24 +251,26 @@ class MenuItemComponent extends VDOM.Component {\noneFocusOut(this, this.el, ::this.onFocusOut);\nDebug.log(menuFlag, 'MenuItem', 'focus', this.el, document.activeElement);\nthis.clearAutoFocusTimer();\n- if (!this.state.dropdownOpen) {\nthis.openDropdown();\n}\n}\n- }\nonBlur() {\nFocusManager.nudge();\n}\n+ closeDropdown() {\n+ this.setState({\n+ dropdownOpen: false\n+ });\n+ }\n+\nonFocusOut(focusedElement) {\nDebug.log(menuFlag, 'MenuItem', 'focusout', this.el, focusedElement);\nthis.clearAutoFocusTimer();\nif (!isSelfOrDescendant(this.el, focusedElement)) {\nDebug.log(menuFlag, 'MenuItem', 'closing dropdown', this.el, focusedElement);\n- this.setState({\n- dropdownOpen: false\n- });\n+ this.closeDropdown();\n}\n}\n",
        "chatgpt_cot": "Refactor BlogContextMenu.js for consistency and readability. Added missing semicolons and improved formatting for better code organization."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -485,7 +485,7 @@ router.get('/overview/:id', async (req, res) => {\nowner: owner ? owner.username : 'unknown',\nownerID: owner ? owner._id : null,\npost: blogs ? blogs[0] : null,\n- followed: owner && owner.followed_cubes ? owner.followed_cubes.includes(cube._id) : false,\n+ followed: owner && owner.followed_cubes ? owner.followed_cubes.includes(cube.id) : false,\nfollowers,\neditorvalue: cube.raw_desc,\npriceOwned: !cube.privatePrices ? totalPriceOwned : null,\n",
        "org_msg": "Fix followed test.",
        "sim_msg": "Also display price data from inventory corrections, not only purchases (fixes",
        "sim_diff": "diff --git a/services/StockService.php b/services/StockService.php @@ -82,7 +82,7 @@ class StockService extends BaseService\n$averageShelfLifeDays = intval($this->Database->stock_average_product_shelf_life()->where('id', $productId)->fetch()->average_shelf_life_days);\n$lastPrice = null;\n- $lastLogRow = $this->Database->stock_log()->where('product_id = :1 AND transaction_type = :2 AND undone = 0', $productId, self::TRANSACTION_TYPE_PURCHASE)->orderBy('row_created_timestamp', 'DESC')->limit(1)->fetch();\n+ $lastLogRow = $this->Database->stock_log()->where('product_id = :1 AND transaction_type IN (:2, :3) AND undone = 0', $productId, self::TRANSACTION_TYPE_PURCHASE, self::TRANSACTION_TYPE_INVENTORY_CORRECTION)->orderBy('row_created_timestamp', 'DESC')->limit(1)->fetch();\nif ($lastLogRow !== null && !empty($lastLogRow))\n{\n$lastPrice = $lastLogRow->price;\n@@ -120,7 +120,7 @@ class StockService extends BaseService\n}\n$returnData = array();\n- $rows = $this->Database->stock_log()->where('product_id = :1 AND transaction_type = :2 AND undone = 0', $productId, self::TRANSACTION_TYPE_PURCHASE)->whereNOT('price', null)->orderBy('purchased_date', 'DESC');\n+ $rows = $this->Database->stock_log()->where('product_id = :1 AND transaction_type IN (:2, :3) AND undone = 0', $productId, self::TRANSACTION_TYPE_PURCHASE, self::TRANSACTION_TYPE_INVENTORY_CORRECTION)->whereNOT('price', null)->orderBy('purchased_date', 'DESC');\nforeach ($rows as $row)\n{\n$returnData[] = array(\n",
        "chatgpt_cot": "Fix issue with cube id comparison in followed_cubes array to ensure proper functionality in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -22,7 +22,6 @@ function downloadDefaultCards() {\nhttps.get(\"https://archive.scryfall.com/json/scryfall-default-cards.json\", function(response) {\nlet stream = response.pipe(file);\nstream.on('finish', function() {\n- console.log(\"resolved\");\nresolve();\n});\n})\n@@ -34,8 +33,10 @@ function updateCardbase(filepath) {\nif (filepath === undefined) {\nfilepath = 'private/cards.json';\n}\n+ if (!fs.existsSync('private')) {\n+ fs.mkdirSync('private');\n+ }\nreturn module.exports.downloadDefaultCards().then(function() {\n- console.log(\"Running save\");\nvar contents = fs.readFileSync(filepath);\nvar cards = JSON.parse(contents);\nsaveAllCards(cards);\n",
        "org_msg": "remove extra console logs\ncreate private dir before we try to download into it",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "Add check and create directory if not exists, update save functionality in updatecards.js."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -298,15 +298,69 @@ router.get('/card/:id', async (req, res) => {\n}\n// otherwise just go to this ID.\n- const data = await CardHistory.findOne({ oracleId: card.oracle_id });\n+ let data = await CardHistory.findOne({ oracleId: card.oracle_id });\n+ // id is valid but has no matching history\nif (!data) {\n- req.flash(\n- 'danger',\n- `Card with identifier ${req.params.id} not found. Acceptable identifiers are card name (english only), scryfall ID, or oracle ID.`,\n- );\n- return res.redirect('404');\n+ const cardVersions = carddb.getVersionsByOracleId(card.oracle_id);\n+\n+ data = {\n+ current: {\n+ rating: null,\n+ elo: card.elo,\n+ picks: 0,\n+ total: [0, 0],\n+ size180: [0, 0],\n+ size360: [0, 0],\n+ size450: [0, 0],\n+ size540: [0, 0],\n+ size720: [0, 0],\n+ pauper: [0, 0],\n+ legacy: [0, 0],\n+ modern: [0, 0],\n+ standard: [0, 0],\n+ vintage: [0, 0],\n+ cubes: 0,\n+ prices: cardVersions.map((cardId) => {\n+ return { ...carddb.cardFromId(cardId), version: carddb.cardFromId(cardId)._id };\n+ }),\n+ },\n+ cubedWith: {\n+ synergistic: [],\n+ top: [],\n+ creatures: [],\n+ spells: [],\n+ other: [],\n+ },\n+ versions: cardVersions,\n+ cubes: [],\n+ history: [\n+ {\n+ data: {\n+ size180: [0, 0],\n+ size360: [0, 0],\n+ size450: [0, 0],\n+ size540: [0, 0],\n+ size720: [0, 0],\n+ pauper: [0, 0],\n+ legacy: [0, 0],\n+ modern: [0, 0],\n+ standard: [0, 0],\n+ vintage: [0, 0],\n+ total: [0, 0],\n+ rating: null,\n+ elo: null,\n+ picks: 0,\n+ cubes: 0,\n+ prices: [],\n+ },\n+ date: '',\n+ },\n+ ],\n+ cardName: card.name,\n+ oracleId: card.oracle_id,\n+ __v: 0,\n+ };\n}\n-\nconst related = {};\nfor (const category of ['top', 'synergistic', 'spells', 'creatures', 'other']) {\n",
        "org_msg": "Added default data for cards with no history",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Add handling for missing data when querying CardHistory, populate with default values if not found. Fix potential data retrieval issue."
    },
    {
        "org_diff": "diff --git a/public/css/stylesheet.css b/public/css/stylesheet.css @@ -501,6 +501,12 @@ body.busy-cursor {\nvisibility: visible;\n}\n+@media (max-width: 1280px) {\n+ .markdown .heading-link .link-icon {\n+ visibility: visible;\n+ }\n+}\n+\n.centered-max400 {\nmargin: auto;\nmax-width: 400px;\n",
        "org_msg": "heading links always visible on mobile devices",
        "sim_msg": "Make styles match koe",
        "sim_diff": "diff --git a/public/common.css b/public/common.css @@ -3,8 +3,10 @@ h1 { font-size: 18px;}\nh2 {font-size: 14px;margin:1em 0 0; padding:0;}\nh3 {font-size: 14px; margin:0; padding:0; font-weight: normal; color: #000; margin-top: 1em;}\np { }\n-section {margin: 1em auto;max-width: 870px;}\n-article {padding: 20px;background: #fff;}\n+section {margin: 0 auto; padding: 2em; max-width: 870px; background: #fff; box-shadow: 0 0 1px 1px #C6E6F2}\n+footer section {background: transparent; box-shadow: none;}\n+article {padding: 0 20px;background: #E0F4FE;}\n+.answer {background: #fff;}\n.paragraph { margin: 10px 0; }\nfooter { font-size: 15px; overflow: hidden; background: #565555; color: #fff; padding: 10px; }\nfooter section { display: flex; justify-content: space-between; }\n",
        "chatgpt_cot": "Add responsive design for heading links in markdown files. Fix visibility issue for link icon in smaller screens."
    },
    {
        "org_diff": "diff --git a/src/pages/BrowsePackagesPage.js b/src/pages/BrowsePackagesPage.js @@ -132,6 +132,7 @@ const BrowsePackagesPage = ({ user, loginCallback }) => {\nvalid={filterTemp !== filter}\nvalue={filterTemp}\nonChange={(e) => setFilterTemp(e.target.value)}\n+ onKeyDown={(e) => e.keyCode === 13 && setFilter(filterTemp)}\n/>\n<InputGroupAddon addonType=\"append\">\n<Button color=\"success\" className=\"square-left\" onClick={() => setFilter(filterTemp)}>\n",
        "org_msg": "submit filter on enter",
        "sim_msg": "updated support and buy merchandise urls",
        "sim_diff": "diff --git a/src/screens/SupportUsScreen/index.js b/src/screens/SupportUsScreen/index.js @@ -53,7 +53,7 @@ const SupportUsScreen = ({ navigation }: Props) => (\ndescription={text.supportUsVolunteerDescription}\nbgTopRight={supportUsVolunteerBgTopRight}\nnavigation={navigation}\n- url=\"https://example.com\"\n+ url=\"https://prideinlondon.org/volunteer\"\nstyle={styles.buttonSpacing}\n/>\n<ButtonWithShapes\n@@ -62,7 +62,7 @@ const SupportUsScreen = ({ navigation }: Props) => (\ndescription={text.supportUsShopDescription}\nbgBottomRight={supportUsShopBgBottomRight}\nnavigation={navigation}\n- url=\"https://example.com\"\n+ url=\"https://www.thegayshop.co.uk/product-category/pride/pride-in-london-shop/\"\ncontrast\nstyle={styles.buttonSpacing}\n/>\n",
        "chatgpt_cot": "Add functionality to set filter on Enter key press in BrowsePackagesPage. Fix issue with filter not updating on Enter key press."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -391,6 +391,11 @@ app.get('/404', function(req, res) {\nres.render('misc/404', {});\n});\n+app.get('/c/:id', function(req, res)\n+{\n+ res.redirect('/cube/list/'+req.params.id);\n+});\n+\n//Route files\nlet cubes = require('./routes/cube_routes');\nlet users = require('./routes/users_routes');\n",
        "org_msg": "feature super short URL",
        "sim_msg": "Server render for post only",
        "sim_diff": "diff --git a/server/app.js b/server/app.js @@ -94,7 +94,7 @@ function renderPage(props) {\n);\n}\n-app.get('/*', (req, res) => {\n+app.get('/:category/@:author/:permlink', (req, res) => {\nmatch({ routes, location: req.url }, (err, redirect, props) => {\nfetchComponentData(store.dispatch, props.components, props.params)\n.then(() => renderPage(props))\n@@ -103,4 +103,8 @@ app.get('/*', (req, res) => {\n});\n});\n+app.get('/*', (req, res) => {\n+ res.send(indexHtml);\n+});\n+\nmodule.exports = { app, server };\n",
        "chatgpt_cot": "Add route to redirect to cube list based on id."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1137,8 +1137,8 @@ router.post('/importcubetutor/:id', ensureAuth, async function (req, res) {\ndata('.cardPreview').each((i, elem) => {\nconst str = elem.attribs['data-image'].substring(37, elem.attribs['data-image'].length - 4);\nconst name = decodeURIComponent(elem.children[0].data).replace('_flip', '');\n- const tagColorClasses = elem.attribs['class'].split(' ').filter(c => tagColors.has(c));\n- const tags = tagColorClasses.map(c => tagColors.get(c));\n+ const tagColorClasses = elem.attribs['class'].split(' ').filter((c) => tagColors.has(c));\n+ const tags = tagColorClasses.map((c) => tagColors.get(c));\ncards.push({\nset: str.includes('/') ? str.split('/')[0] : 'unknown',\nname,\n",
        "org_msg": "Apply prettier.",
        "sim_msg": "Remove /transfer route",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -8,7 +8,6 @@ import Settings from './app/AppSettings';\nimport Page from './feed/Page';\nimport User from './user/User';\n-import Transfer from './wallet/Transfer';\nimport Tags from './tags/Tags';\nimport Donors from './statics/Donors';\nimport Post from './post/Post';\n@@ -29,13 +28,6 @@ export default (\n<Route path=\"/team\" component={Team} />\n<Route path=\"/tags\" component={Tags} />\n<Route path=\"/donors\" component={Donors} />\n- <Route\n- path=\"/transfer\"\n- render={() =>\n- (<RequireLogin>\n- <Transfer />\n- </RequireLogin>)}\n- />\n<Route\npath=\"/bookmarks\"\nrender={() =>\n",
        "chatgpt_cot": "Update tagColorClasses and tags variable declarations to use arrow function with parentheses for clarity and consistency."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeDecksPage.js b/src/pages/CubeDecksPage.js @@ -28,7 +28,7 @@ const CubeDecksPage = ({ user, cube, decks, pages, activePage, loginCallback })\n<DeckPreview\nkey={deck._id}\ndeck={deck}\n- canEdit={user.id === deck.owner}\n+ canEdit={user?.id === deck.owner}\nnextURL={`/cube/decks/${cube._id}/${activePage}`}\n/>\n))}\n",
        "org_msg": "added null check to user",
        "sim_msg": "fix cursor style in React",
        "sim_diff": "diff --git a/modules/core/src/lib/deck.js b/modules/core/src/lib/deck.js @@ -544,8 +544,9 @@ export default class Deck {\n}\n_updateCursor() {\n- if (this.canvas) {\n- this.canvas.style.cursor = this.props.getCursor(this.interactiveState);\n+ const container = this.props.parent || this.canvas;\n+ if (container) {\n+ container.style.cursor = this.props.getCursor(this.interactiveState);\n}\n}\n",
        "chatgpt_cot": "Fix user edit permission check in CubeDecksPage. Updated the condition to check if user exists before comparing user id with deck owner."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -223,7 +223,7 @@ router.get('/api/downloadcubes/:page/:key', async (req, res) => {\n});\n}\n- const cubes = await Cube.find()\n+ const cubes = await Cube.find({}, 'cards')\n.sort({ shortID: 1 })\n.skip(req.params.page * cubePageSize)\n.limit(cubePageSize)\n@@ -260,7 +260,7 @@ router.get('/api/downloaddecks/:page/:key', async (req, res) => {\n});\n}\n- const decks = await Deck.find()\n+ const decks = await Deck.find({}, 'seats')\n.sort({ date: 1 })\n.skip(req.params.page * deckPageSize)\n.limit(deckPageSize)\n",
        "org_msg": "Add projection to download apis",
        "sim_msg": "add job id to start board for task",
        "sim_diff": "diff --git a/core/api-server/api/rest-api/routes/v1/boards.js b/core/api-server/api/rest-api/routes/v1/boards.js @@ -62,8 +62,8 @@ const routes = (options) => {\n});\nrouter.all('/tensor/start/:taskId?', methods(['POST']), logger(), async (req, res, next) => {\nconst { taskId } = req.params;\n- const { nodeName, pipelineName } = req.body;\n- await boards.startTensorboard({ taskId, nodeName, pipelineName }, 'task');\n+ const { nodeName, pipelineName, jobId } = req.body;\n+ await boards.startTensorboard({ taskId, jobId, nodeName, pipelineName }, 'task');\nres.json({ message: 'OK' });\nnext();\n});\n",
        "chatgpt_cot": "Add 'cards' and 'seats' projection to Cube and Deck find methods to optimize data retrieval."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1224,7 +1224,6 @@ router.post('/bulkreplacefile/:id', ensureAuth, async function(req, res) {\nif (cards) {\nif (cards[0].trim() == CSV_HEADER) {\ncards.splice(0, 1);\n- try {\nconst { newCards, newMaybe, missing } = CSVtoCards(cards, carddb);\nconst { only_a, only_b, in_both, all_cards } = await compareCubes(\nreq,\n@@ -1243,9 +1242,6 @@ router.post('/bulkreplacefile/:id', ensureAuth, async function(req, res) {\ncube.cards = newCards;\ncube.maybe = newMaybe;\nawait generateBlogpost(req, res, cube, changelog, only_b.concat(newMaybe), missing, carddb);\n- } catch (e) {\n- console.error(e);\n- }\n} else {\nreq.flash('danger', 'Error adding cards. Invalid format.');\nres.redirect('/cube/list/' + req.params.id);\n",
        "org_msg": "Correctly handle exceptions when replacing a cube.",
        "sim_msg": "Fix casing of handleWPError method.",
        "sim_diff": "diff --git a/assets/js/components/data/index.js b/assets/js/components/data/index.js @@ -208,7 +208,7 @@ const dataAPI = {\nreturn;\n}\n- this.handleWpError( result );\n+ this.handleWPError( result );\neach( keyIndexesMap[ key ], ( index ) => {\nconst request = dataRequest[ index ];\n@@ -230,7 +230,7 @@ const dataAPI = {\n} );\n},\n- handleWpError( error ) {\n+ handleWPError( error ) {\nconst { code, data } = error;\nif ( ! code || ! data ) {\n@@ -439,7 +439,7 @@ const dataAPI = {\nreturn Promise.resolve( results );\n} ).catch( ( err ) => {\n- this.handleWpError( err );\n+ this.handleWPError( err );\nreturn Promise.reject( err );\n} );\n",
        "chatgpt_cot": "\"Remove try-catch block for bulkreplacefile method in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -126,15 +126,13 @@ router.post('/add', ensureAuth, async (req, res) => {\nrouter.get('/clone/:id', async (req, res) => {\ntry {\n- const { user } = req;\n-\n- if (!user) {\n+ if (!req.user) {\nreq.flash('danger', 'Please log on to clone this cube.');\nreturn res.redirect(`/cube/list/${req.params.id}`);\n}\nconst cubes = await Cube.find({\n- owner: user._id,\n+ owner: req.user._id,\n}).lean();\nif (cubes.length >= 24) {\n@@ -159,21 +157,19 @@ router.get('/clone/:id', async (req, res) => {\ncube.image_name = source.image_name;\ncube.image_artist = source.image_artist;\ncube.description = source.description;\n- cube.owner_name = user.username;\n+ cube.owner_name = req.user.username;\ncube.date_updated = Date.now();\ncube.updated_string = cube.date_updated.toLocaleString('en-US');\ncube = setCubeType(cube, carddb);\nawait cube.save();\n- const newOwnerq = User.findById(req.user);\n- const sourceOwnerq = User.findById(source.owner);\n- const [newOwner, sourceOwner] = await Promise.all([newOwnerq, sourceOwnerq]);\n+ const sourceOwner = await User.findById(source.owner);\nawait util.addNotification(\nsourceOwner,\n- newOwner,\n+ req.user,\n`/cube/view/${cube._id}`,\n- `${user.username} made a cube by cloning yours: ${cube.name}`,\n+ `${req.user.username} made a cube by cloning yours: ${cube.name}`,\n);\nreq.flash('success', 'Cube Cloned');\n@@ -1428,15 +1424,7 @@ router.get('/download/cubecobra/:id', async (req, res) => {\n}\n});\n-router.get('/download/csv/:id', async (req, res) => {\n- try {\n- const cube = await Cube.findOne(build_id_query(req.params.id)).lean();\n-\n- res.setHeader('Content-disposition', `attachment; filename=${cube.name.replace(/\\W/g, '')}.csv`);\n- res.setHeader('Content-type', 'text/plain');\n- res.charset = 'UTF-8';\n- res.write(`${CSV_HEADER}\\r\\n`);\n- const writeCard = (card, maybe) => {\n+function writeCard(req, res, card, maybe) {\nif (!card.type_line) {\ncard.type_line = carddb.cardFromId(card.cardID).type;\n}\n@@ -1471,11 +1459,20 @@ router.get('/download/csv/:id', async (req, res) => {\n});\nres.write('\"\\r\\n');\n};\n+\n+router.get('/download/csv/:id', async (req, res) => {\n+ try {\n+ const cube = await Cube.findOne(build_id_query(req.params.id)).lean();\n+\n+ res.setHeader('Content-disposition', `attachment; filename=${cube.name.replace(/\\W/g, '')}.csv`);\n+ res.setHeader('Content-type', 'text/plain');\n+ res.charset = 'UTF-8';\n+ res.write(`${CSV_HEADER}\\r\\n`);\nfor (const card of cube.cards) {\n- return writeCard(card, false);\n+ writeCard(req, res, card, false);\n}\nfor (const card of cube.maybe) {\n- return writeCard(card, true);\n+ writeCard(req, res, card, true);\n}\nreturn res.end();\n} catch (err) {\n",
        "org_msg": "Fix cube cloning.",
        "sim_msg": "Fix some Promise.reject not being returned in FileSystem",
        "sim_diff": "diff --git a/fs.js b/fs.js @@ -171,12 +171,12 @@ function writeFile(path:string, data:string | Array<number>, encoding:?string):P\nreturn Promise.reject('Invalid argument \"path\" ')\nif(encoding.toLocaleLowerCase() === 'ascii') {\nif(!Array.isArray(data))\n- Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`))\n+ return Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`))\nelse\nreturn RNFetchBlob.writeFileArray(path, data, false);\n} else {\nif(typeof data !== 'string')\n- Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`))\n+ return Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`))\nelse\nreturn RNFetchBlob.writeFile(path, encoding, data, false);\n}\n@@ -188,12 +188,12 @@ function appendFile(path:string, data:string | Array<number>, encoding:?string):\nreturn Promise.reject('Invalid argument \"path\" ')\nif(encoding.toLocaleLowerCase() === 'ascii') {\nif(!Array.isArray(data))\n- Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`))\n+ return Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`))\nelse\nreturn RNFetchBlob.writeFileArray(path, data, true);\n} else {\nif(typeof data !== 'string')\n- Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`))\n+ return Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`))\nelse\nreturn RNFetchBlob.writeFile(path, encoding, data, true);\n}\n",
        "chatgpt_cot": "\"Update clone and download functions to use req.user directly, and fix a bug in download/csv with the writeCard function.\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.js b/__tests__/serverjs/updatecards.js @@ -132,7 +132,7 @@ for (var convertFn in convertFnToAttribute) {\n});\n}\n-test(\"convertCard returns a correctly converted card object\", () => {\n+test(\"convertCard returns a correctly converted double-faced card object\", () => {\nconst result = updatecards.convertCard(examplecards.exampleDoubleFacedCard, true);\nexpect(result).toEqual(convertedExampleDoubleFacedCardFlipFace);\n});\n@@ -140,7 +140,7 @@ test(\"convertCard returns a correctly converted card object\", () => {\nvar attribute;\nfor (var convertFn in convertFnToAttribute) {\nattribute = convertFnToAttribute[convertFn];\n- test(convertFn + \" properly converts a card's \" + attribute, () => {\n+ test(convertFn + \" properly converts a double-faced card's \" + attribute, () => {\nconst result = updatecards[convertFn](examplecards.exampleDoubleFacedCard, true);\nexpect(result).toBe(convertedExampleDoubleFacedCardFlipFace[attribute]);\n});\n",
        "org_msg": "more descriptive test descriptions",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "\"Update test descriptions to specify double-faced cards and attributes for accurate testing of convertCard function in updatecards.js.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3489,11 +3489,7 @@ router.post('/resize/:id/:size', async (req, res) => {\nrouter.post(\n'/api/adds/:id',\nutil.wrapAsyncApi(async (req, res) => {\n- const response = await fetch(\n- `${process.env.FLASKROOT}/?cube_name=${req.params.id}&num_recs=${1000}&root=${encodeURIComponent(\n- 'http://localhost:5000',\n- )}`,\n- );\n+ const response = await fetch(`${process.env.FLASKROOT}/?cube_name=${req.params.id}&num_recs=${1000}`);\nif (!response.ok) {\nreturn res.status(500).send({\nsuccess: 'false',\n",
        "org_msg": "update ML endpoint",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "\"Remove unnecessary root parameter in fetch request\""
    },
    {
        "org_diff": "diff --git a/src/components/Maybeboard.js b/src/components/Maybeboard.js @@ -18,7 +18,7 @@ import withAutocard from './WithAutocard';\nconst AutocardItem = withAutocard(ListGroupItem);\nconst MaybeboardListItem = ({ card, className }) => {\n- const { cubeID } = useContext(CubeContext);\n+ const { canEdit, cubeID } = useContext(CubeContext);\nconst { removeMaybeboardCard } = useContext(MaybeboardContext);\nconst { addChange } = useContext(ChangelistContext);\nconst [loading, setLoading] = useState(false);\n@@ -69,20 +69,21 @@ const MaybeboardListItem = ({ card, className }) => {\nclassName={`d-flex card-list-item ${getCardColorClass(card)} ${className || ''}`}\ncard={card}\ndata-index={card.index}\n- onClick={handleClickCard}\n+ onClick={canEdit ? handleClickCard : undefined}\n>\n<div className=\"name\">{card.details.name}</div>\n- {loading ?\n+ {canEdit &&\n+ (loading ?\n<Spinner size=\"sm\" className=\"ml-auto\" />\n:\n- <Button size=\"sm\" close className=\"ml-auto float-none\" data-index={card.index} onClick={handleRemove} />\n+ <Button size=\"sm\" close className=\"ml-auto float-none\" data-index={card.index} onClick={canEdit ? handleRemove : undefined} />)\n}\n</AutocardItem>\n);\n};\nconst MaybeboardView = ({ filter, ...props }) => {\n- const { cubeID } = useContext(CubeContext);\n+ const { canEdit, cubeID } = useContext(CubeContext);\nconst { toggleShowMaybeboard } = useContext(DisplayContext);\nconst { maybeboard, addMaybeboardCard } = useContext(MaybeboardContext);\nconst addInput = useRef();\n@@ -147,6 +148,7 @@ const MaybeboardView = ({ filter, ...props }) => {\n</Button>\n</Col>\n</Row>\n+ {canEdit && (\n<Form className=\"mt-2 w-100\" onSubmit={handleAdd}>\n<Row noGutters>\n<Col xs=\"9\" sm=\"auto\" className=\"pr-2\">\n@@ -170,6 +172,7 @@ const MaybeboardView = ({ filter, ...props }) => {\n</Col>\n</Row>\n</Form>\n+ )}\n{maybeboard.length === 0 ?\n<h5 className=\"mt-3\">\nNo cards in maybeboard\n",
        "org_msg": "Don't show edit interface unless logged in.",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Add canEdit attribute to Maybeboard component, conditionally render edit options based on canEdit value. Improve user experience and functionality."
    },
    {
        "org_diff": "diff --git a/jobs/clear_old_drafts.js b/jobs/clear_old_drafts.js @@ -22,6 +22,7 @@ const processDraft = async (draft) => {\nreturn null;\n};\n+try {\n(async () => {\nawait mongoose.connect(process.env.MONGODB_URL, { useNewUrlParser: true, useUnifiedTopology: true });\nconst count = await Draft.count();\n@@ -42,9 +43,16 @@ const processDraft = async (draft) => {\n}\nif (drafts.length > 0) {\nconsole.log(`Deleting ${drafts.length} drafts.`);\n+ while (drafts.length > 0) {\n+ const toDelete = drafts.splice(0, BATCH_SIZE);\n// eslint-disable-next-line no-await-in-loop\n- await Draft.deleteMany({ _id: { $in: drafts } });\n+ await Draft.deleteMany({ _id: { $in: toDelete } });\n+ }\n}\nmongoose.disconnect();\n- process.exit();\n+ process.exit(0);\n})();\n+} catch (err) {\n+ console.error(err);\n+ process.exit();\n+}\n",
        "org_msg": "Wrap in try catch so it won't hang.",
        "sim_msg": "Improve drafts page layout",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -26,12 +26,10 @@ let DraftRow = (props) => {\nDraftRow = connect(() => ({}), { deleteDraft })(DraftRow);\nconst DraftList = ({ editor: { draftPosts } }) =>\n- (\n<div className=\"main-panel\">\n<Header />\n- <div className=\"my-3\">\n+ <div className=\"my-3 container container-small\">\n<h1 className=\"text-xs-center\">Drafts</h1>\n- <div className=\"container\">\n{ _.size(draftPosts) === 0 &&\n<h3 className=\"text-xs-center\">\nYou don't have any draft saved.\n@@ -41,8 +39,6 @@ const DraftList = ({ editor: { draftPosts } }) =>\n<DraftRow key={key} data={draft.postData} id={key} />)\n}\n</div>\n- </div>\n- </div>\n- );\n+ </div>;\nexport default connect(state => ({ editor: state.editor }))(DraftList);\n",
        "chatgpt_cot": "Add batch deletion of drafts, handle errors in draft deletion process, and update process exit code in clear_old_drafts job."
    },
    {
        "org_diff": "diff --git a/.eslintignore b/.eslintignore @@ -23,7 +23,6 @@ src/components/CountTableRow.js\nsrc/components/CubeCompareNavbar.js\nsrc/components/CubeListNavbar.js\nsrc/components/CubeOverviewModal.js\n-src/components/CurveAnalysis.js\nsrc/components/CustomDraftFormatModal.js\nsrc/components/CustomImageToggler.js\nsrc/components/DisplayContext.js\n@@ -37,7 +36,6 @@ src/components/FoilOverlay.js\nsrc/components/GroupModal.js\nsrc/components/GroupModalContext.js\nsrc/components/ImageFallback.js\n-src/components/MulticoloredAnalysis.js\nsrc/components/Notification.js\nsrc/components/SortCollapse.js\nsrc/components/SortContext.js\n@@ -47,9 +45,7 @@ src/components/TagColorsModal.js\nsrc/components/TagContext.js\nsrc/components/TagInput.js\nsrc/components/TextBadge.js\n-src/components/TokenAnalysis.js\nsrc/components/Tooltip.js\n-src/components/TypeAnalysis.js\nsrc/components/WithAutocard.js\nsrc/components/WithLoading.js\nsrc/components/WithModal.js\n",
        "org_msg": "Remove old files from eslint ignore",
        "sim_msg": "lint in titles/index.js\nuse `OPPOSITE_SIDE` constants\nuse `shiftSign` result in `maxshift` computation",
        "sim_diff": "diff --git a/src/components/titles/index.js b/src/components/titles/index.js @@ -20,10 +20,7 @@ var Color = require('../color');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar interactConstants = require('../../constants/interactions');\n-module.exports = {\n- draw: draw\n-};\n-\n+var OPPOSITE_SIDE = require('../../constants/alignment').OPPOSITE_SIDE;\nvar numStripRE = / [XY][0-9]* /;\n/**\n@@ -167,16 +164,10 @@ function draw(gd, titleClass, options) {\n// move toward avoid.side (= left, right, top, bottom) if needed\n// can include pad (pixels, default 2)\n- var shift = 0;\n- var backside = {\n- left: 'right',\n- right: 'left',\n- top: 'bottom',\n- bottom: 'top'\n- }[avoid.side];\n- var shiftSign = (['left', 'top'].indexOf(avoid.side) !== -1) ?\n- -1 : 1;\n+ var backside = OPPOSITE_SIDE[avoid.side];\n+ var shiftSign = (avoid.side === 'left' || avoid.side === 'top') ? -1 : 1;\nvar pad = isNumeric(avoid.pad) ? avoid.pad : 2;\n+\nvar titlebb = Drawing.bBox(titleGroup.node());\nvar paperbb = {\nleft: 0,\n@@ -184,12 +175,15 @@ function draw(gd, titleClass, options) {\nright: fullLayout.width,\nbottom: fullLayout.height\n};\n- var maxshift = avoid.maxShift || (\n- (paperbb[avoid.side] - titlebb[avoid.side]) *\n- ((avoid.side === 'left' || avoid.side === 'top') ? -1 : 1));\n+\n+ var maxshift = avoid.maxShift ||\n+ shiftSign * (paperbb[avoid.side] - titlebb[avoid.side]);\n+ var shift = 0;\n+\n// Prevent the title going off the paper\n- if(maxshift < 0) shift = maxshift;\n- else {\n+ if(maxshift < 0) {\n+ shift = maxshift;\n+ } else {\n// so we don't have to offset each avoided element,\n// give the title the opposite offset\nvar offsetLeft = avoid.offsetLeft || 0;\n@@ -211,6 +205,7 @@ function draw(gd, titleClass, options) {\n});\nshift = Math.min(maxshift, shift);\n}\n+\nif(shift > 0 || maxshift < 0) {\nvar shiftTemplate = {\nleft: [-shift, 0],\n@@ -218,8 +213,7 @@ function draw(gd, titleClass, options) {\ntop: [0, -shift],\nbottom: [0, shift]\n}[avoid.side];\n- titleGroup.attr('transform',\n- 'translate(' + shiftTemplate + ')');\n+ titleGroup.attr('transform', 'translate(' + shiftTemplate + ')');\n}\n}\n}\n@@ -265,3 +259,7 @@ function draw(gd, titleClass, options) {\nreturn group;\n}\n+\n+module.exports = {\n+ draw: draw\n+};\n",
        "chatgpt_cot": "Remove unused components and files from eslintignore to improve code cleanliness and reduce unnecessary linting checks on non-existent files."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2729,6 +2729,21 @@ router.get(\n}),\n);\n+router.get(\n+ '/api/cubeJSON/:id',\n+ util.wrapAsyncApi(async (req, res) => {\n+ const cube = await Cube.findOne(buildIdQuery(req.params.id)).lean();\n+\n+ if (!cube) {\n+ return res.status(404).send('Cube not found.');\n+ }\n+\n+ res.contentType('text/json');\n+ res.set('Access-Control-Allow-Origin', '*');\n+ return res.status(200).send(JSON.stringify(cube));\n+ }),\n+);\n+\nrouter.post('/editdeck/:id', ensureAuth, async (req, res) => {\ntry {\nconst deck = await Deck.findById(req.params.id);\n",
        "org_msg": "added api route to export cubes to JSON via API",
        "sim_msg": "Fix casing of handleWPError method.",
        "sim_diff": "diff --git a/assets/js/components/data/index.js b/assets/js/components/data/index.js @@ -208,7 +208,7 @@ const dataAPI = {\nreturn;\n}\n- this.handleWpError( result );\n+ this.handleWPError( result );\neach( keyIndexesMap[ key ], ( index ) => {\nconst request = dataRequest[ index ];\n@@ -230,7 +230,7 @@ const dataAPI = {\n} );\n},\n- handleWpError( error ) {\n+ handleWPError( error ) {\nconst { code, data } = error;\nif ( ! code || ! data ) {\n@@ -439,7 +439,7 @@ const dataAPI = {\nreturn Promise.resolve( results );\n} ).catch( ( err ) => {\n- this.handleWpError( err );\n+ this.handleWPError( err );\nreturn Promise.reject( err );\n} );\n",
        "chatgpt_cot": "\"Add new API endpoint to retrieve cube JSON data and set appropriate response headers for CORS handling in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -50,6 +50,8 @@ const fetchLands = {\n'Verdant Catacombs': ['B', 'G'],\n'Windswept Heath': ['W', 'G'],\n'Wooded Foothills': ['R', 'G'],\n+ 'Prismatic Vista': ['W', 'U', 'B', 'R', 'G'],\n+ 'Fabled Passage': ['W', 'U', 'B', 'R', 'G'],\n};\nfunction botRating(botColors, card) {\n",
        "org_msg": "adds Prismatic Vista and Fabled Passage to fetchland list for boosting bot rating",
        "sim_msg": "More cards generator cleanup",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -4,8 +4,6 @@ import {screenshotObjectApp} from './object-screenshotter.js';\nimport {screenshotAvatarUrl} from './avatar-screenshotter.js';\nimport {generateGlyph} from './glyph-generator.js';\n-// const baseUrl = import.meta.url.replace(/(\\/)[^\\/\\\\]*$/, '$1');\n-// const cardsSvgUrl = `${baseUrl}cards.svg`;\nconst cardsSvgUrl = `./images/cards-01.svg`;\nconst _loadSvg = async () => {\n",
        "chatgpt_cot": "Add new fetch lands 'Prismatic Vista' and 'Fabled Passage' with color combinations, enhancing card selection in botRating function."
    },
    {
        "org_diff": "diff --git a/views/info/filters.pug b/views/info/filters.pug @@ -12,7 +12,7 @@ block content\nbutton(class=\"btn btn-link\" type=\"button\")\nh5 General\n#collapseGeneral.collapse.show(aria-labelledby=\"general-syntax\" data-parent=\"#syntax-accordion\")\n- p You can combine any number of filters together using #[code AND] or #[code OR]. Operators are case-insensitive, as are all filtering conditions. So #[code TYPE:instant and o:DESTROY] will work just as well.\n+ p You can combine any number of filters together using #[code AND] or #[code OR]. Operators are case-insensitive, as are all filtering conditions (#[code TYPE:instant and o:DESTROY] will still work, for example).\np #[strong Examples:]\ntable.table\ntr\n@@ -21,14 +21,14 @@ block content\ntr\ntd(scope=\"col\") #[code t:instant t:tribal]\ntd(scope=\"col\") Cards that are both instants and tribal.\n- p You can use quotes to require an exact match. To match names in quotes, you must use the #[code name:] operator.\n+ p Text without a filtering condition is treated as a name. You can use quotes to require an exact match.\np #[strong Examples:]\ntable.table\ntr\ntd(scope=\"col\") #[code goblin blood]\ntd(scope=\"col\") Cards whose names contain both \"blood\" and \"goblin\".\ntr\n- td(scope=\"col\") #[code name:\"goblin blood\"]\n+ td(scope=\"col\") #[code \"goblin blood\"]\ntd(scope=\"col\") Cards whose names contain exactly \"goblin blood\".\ntr\ntd(scope=\"col\") #[code o:destroy o:target o:creature]\n@@ -57,6 +57,9 @@ block content\ntr\ntd(scope=\"col\") #[code -t:creature]\ntd(scope=\"col\") Cards which are not creatures.\n+ tr\n+ td(scope=\"col\") #[code -mox]\n+ td(scope=\"col\") Cards whose names do not include \"mox\".\n.card\n#color-syntax.card-header(data-toggle=\"collapse\" data-target=\"#collapseColor\" aria-expanded=\"true\" aria-controls=\"collapseColor\")\nbutton(class=\"btn btn-link\" type=\"button\")\n",
        "org_msg": "Bringing syntax guide back up to date with changes from 1354",
        "sim_msg": "Fix dashboard card alignment for non-en languages",
        "sim_diff": "diff --git a/renderer/pages/home.js b/renderer/pages/home.js @@ -5,7 +5,7 @@ import Raven from 'raven-js'\nimport * as chroma from 'chroma-js'\nimport styled from 'styled-components'\nimport { MdHelp, MdClear } from 'react-icons/md'\n-import { Button, Box, Flex, Heading, Card } from 'ooni-components'\n+import { Button, Text, Box, Flex, Heading, Card } from 'ooni-components'\nimport { FormattedMessage } from 'react-intl'\nimport Layout from '../components/Layout'\n@@ -68,6 +68,8 @@ const FrontCardContent = ({\n}) => (\n<Box width={1 / 2} pr={3} pb={3}>\n<Card\n+ // fontSize={0} because padding on Card is controlled by `fontSizeMult`\n+ fontSize={0}\ndata-test-id={`card-${id}`}\nbg={color}\ncolor=\"white\"\n@@ -77,18 +79,20 @@ const FrontCardContent = ({\n<MdHelp onClick={toggleCard} size={30} />\n</TopLeftFloatingButton>\n<CardContent>\n- <Heading h={2}>{name}</Heading>\n- <BgIcon>{icon}</BgIcon>\n- <Flex pt={5} alignItems=\"center\">\n- <Box width={3 / 4} pr={4}>\n+ <Flex flexDirection='column' justifyContent='space-between' style={{ height: '200px'}}>\n+ <Text fontSize={4} fontWeight={300} m={0}>{name}</Text>\n+ <Text fontSize={1}>\n{description}\n- </Box>\n- <Box width={1 / 4} mr={2}>\n+ </Text>\n+ <BgIcon>{icon}</BgIcon>\n+ <Flex justifyContent='flex-end'>\n+ <Box>\n<Button inverted fontSize={1} onClick={onRun}>\n<FormattedMessage id=\"Dashboard.Card.Run\" />\n</Button>\n</Box>\n</Flex>\n+ </Flex>\n</CardContent>\n</Card>\n</Box>\n",
        "chatgpt_cot": "Refactor filters.pug to improve filtering conditions and examples, improving user experience and readability. Add example of exact match and exclusion."
    },
    {
        "org_diff": "diff --git a/src/components/BlogContextMenu.js b/src/components/BlogContextMenu.js import React from 'react';\n-import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Collapse } from 'reactstrap';\n+import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Collapse, Modal,\n+ ModalBody, ModalFooter, ModalHeader, Card, CardHeader, Row, Col, FormGroup,\n+ Label, Input, CardBody, Button, } from 'reactstrap';\n+\n+class BlogDeleteModal extends React.Component {\n+ constructor(props) {\n+ super(props);\n+ this.state = {\n+ isOpen: false,\n+ };\n+\n+ this.open = this.open.bind(this);\n+ this.close = this.close.bind(this);\n+ this.confirm = this.confirm.bind(this);\n+ this.keyPress = this.keyPress.bind(this);\n+ }\n+\n+ open() {\n+ document.addEventListener(\"keyup\", this.keyPress);\n+ this.setState({\n+ isOpen: true,\n+ });\n+ }\n+\n+ close() {\n+ document.removeEventListener(\"keyup\", this.keyPress);\n+ this.setState({\n+ isOpen: false,\n+ });\n+ }\n+\n+ keyPress(event) {\n+ if (event.keyCode === 13) {\n+ this.confirm();\n+ }\n+ }\n+\n+ confirm() {\n+ csrfFetch(`/cube/blog/remove/${this.props.postID}`, {\n+ method: 'DELETE',\n+ headers: {},\n+ }).then((response) => {\n+ if (!response.ok) {\n+ console.log(response);\n+ } else {\n+ window.location.href = '';\n+ }\n+ });\n+ }\n+\n+ render() {\n+ const {isOpen} = this.state;\n+ return (\n+ <>\n+ <span onClick={this.open}>\n+ Delete\n+ </span>\n+ <Modal isOpen={isOpen} toggle={this.close}>\n+ <ModalHeader toggle={this.close}>Confirm Delete</ModalHeader>\n+ <ModalBody>\n+ <p>Are you sure you wish to delete this post? This action cannot be undone.</p>\n+ </ModalBody>\n+ <ModalFooter>\n+ <Button color=\"danger\" onClick={this.confirm}>\n+ Delete\n+ </Button>{' '}\n+ <Button color=\"secondary\" onClick={this.close}>\n+ Close\n+ </Button>\n+ </ModalFooter>\n+ </Modal>\n+ </>\n+ )\n+ }\n+}\nclass BlogContextMenu extends React.Component {\nconstructor(props) {\n@@ -37,14 +111,14 @@ class BlogContextMenu extends React.Component {\n}\nclickDelete(post) {\n- $('#deleteModal').modal('show');\n-\n- var clickDeleteBlog = function(e) {\n+ const clickDeleteBlog = function(e) {\nif (event.keyCode === 13) {\n$('.delete-blog').click();\n}\n};\n+ $('#deleteModal').modal('show');\n+\n$(window).on('keyup', clickDeleteBlog)\n$('#deleteModal').on('hidden.bs.modal', function() {\n@@ -76,12 +150,8 @@ class BlogContextMenu extends React.Component {\n</DropdownToggle>\n<DropdownMenu right>\n<DropdownItem onClick={() => this.clickEdit(this.props.post)}>Edit</DropdownItem>\n- <DropdownItem\n- onClick={() => {\n- this.clickDelete(this.props.post);\n- }}\n- >\n- Delete\n+ <DropdownItem>\n+ <BlogDeleteModal postID={this.props.post._id}></BlogDeleteModal>\n</DropdownItem>\n</DropdownMenu>\n</Dropdown>\n",
        "org_msg": "Initial port to react, bug with modal not opening",
        "sim_msg": "Hooks on user-management-delete-dialog component",
        "sim_diff": "diff --git a/generators/client/templates/react/src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx.ejs b/generators/client/templates/react/src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx.ejs See the License for the specific language governing permissions and\nlimitations under the License.\n-%>\n-import React from 'react';\n+import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n-import { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\n+import { Translate } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { IUser } from 'app/shared/model/user.model';\nimport { getUser, deleteUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\nexport interface IUserManagementDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n-export class UserManagementDeleteDialog extends React.Component<IUserManagementDeleteDialogProps> {\n- componentDidMount() {\n- this.props.getUser(this.props.match.params.login);\n- }\n+export const UserManagementDeleteDialog = (props: IUserManagementDeleteDialogProps) => {\n+ useEffect(() => {\n+ props.getUser(props.match.params.login);\n+ }, []);\n- confirmDelete = event => {\n- this.props.deleteUser(this.props.user.login);\n- this.handleClose(event);\n- }\n+ const confirmDelete = event => {\n+ props.deleteUser(props.user.login);\n+ handleClose(event);\n+ };\n- handleClose = event => {\n+ const handleClose = event => {\nevent.stopPropagation();\n- this.props.history.goBack();\n- }\n+ props.history.goBack();\n+ };\n+\n+ const { user } = props;\n- render() {\n- const { user } = this.props;\nreturn (\n- <Modal isOpen toggle={this.handleClose}>\n- <ModalHeader toggle={this.handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n+ <Modal isOpen toggle={handleClose}>\n+ <ModalHeader toggle={handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n<ModalBody>\n<Translate contentKey=\"userManagement.delete.question\" interpolate={{ login: user.login }}>Are you sure you want to delete this User?</Translate>\n</ModalBody>\n<ModalFooter>\n- <Button color=\"secondary\" onClick={this.handleClose}>\n+ <Button color=\"secondary\" onClick={handleClose}>\n<FontAwesomeIcon icon=\"ban\"/>&nbsp;\n<Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n</Button>\n- <Button color=\"danger\" onClick={this.confirmDelete}>\n+ <Button color=\"danger\" onClick={confirmDelete}>\n<FontAwesomeIcon icon=\"trash\" />&nbsp;\n<Translate contentKey=\"entity.action.delete\">Delete</Translate>\n</Button>\n</ModalFooter>\n</Modal>\n);\n- }\n-}\n+};\nconst mapStateToProps = (storeState: IRootState) => ({\nuser: storeState.userManagement.user\n",
        "chatgpt_cot": "Add BlogDeleteModal component to handle delete functionality, refactor clickDelete function to use BlogDeleteModal for delete action."
    },
    {
        "org_diff": "diff --git a/public/js/autocomplete.js b/public/js/autocomplete.js @@ -71,14 +71,13 @@ function autocompleteByTree(inp, tree, images, submit_button) {\n/*and and make the current item more visible:*/\naddActive(x);\n} else if (e.keyCode == 9) {\n- /*If the tab key is pressed, prevent the form from being submitted,*/\n- if (currentFocus > -1) {\n- /*and simulate a click on the \"active\" item:*/\n- e.preventDefault();\n- if (x) x[currentFocus].click();\n- } else {\n- /* The user is moving away from the input now hide the list*/\n- closeAllLists();\n+ /*If the tab key is pressed, simulate a click on the active or top item.*/\n+ if (x && x.length > 0) {\n+ if (currentFocus > -1 && currentFocus < x.length) {\n+ x[currentFocus].click();\n+ } else if (currentFocus === -1) {\n+ x[0].click();\n+ }\n}\n} else if (e.keyCode == 13) {\n/*If the ENTER key is pressed, prevent the form from being submitted,*/\n",
        "org_msg": "Take top autocomplete suggestion on tab.",
        "sim_msg": "fix: QAutocomplete: Unprotected access to inputEl in mounted()",
        "sim_diff": "diff --git a/src/components/autocomplete/QAutocomplete.js b/src/components/autocomplete/QAutocomplete.js @@ -220,10 +220,10 @@ export default {\nthis.$nextTick(() => {\nif (this.__input) {\nthis.inputEl = this.__input.getEl()\n- }\nthis.inputEl.addEventListener('keydown', this.__keyboardHandleKey)\nthis.inputEl.addEventListener('blur', this.blurHide)\nthis.inputEl.addEventListener('focus', this.__focusShowTrigger)\n+ }\n})\n},\nbeforeDestroy () {\n",
        "chatgpt_cot": "\"Improve tab functionality in autocomplete.js to simulate click on active or top item, preventing form submission and hiding list when user moves away from input.\""
    },
    {
        "org_diff": "diff --git a/one_shot_scripts/update_draft_format.js b/one_shot_scripts/update_draft_format.js @@ -26,7 +26,7 @@ function convertCard(card) {\nasync function update(draft) {\ntry {\nif (draft.seats && draft.seats.length > 0) {\n- return Draft.updateOne({ _id: draft._id }, draft);\n+ return async () => {};\n}\ndraft.seats = [];\n@@ -81,7 +81,13 @@ async function update(draft) {\ndraft.seats.push(bot);\ndraft.unopenedPacks.push(draft.packs[i] ? draft.packs[i].slice(1) : []);\n}\n- return Draft.updateOne({ _id: draft._id }, draft);\n+ return async () => {\n+ try {\n+ await Draft.updateOne({ _id: draft._id }, draft);\n+ } catch (err) {\n+ console.log(err);\n+ }\n+ };\n} catch (err) {\nconsole.log(err);\n}\n@@ -105,10 +111,14 @@ async function update(draft) {\nconst drafts = [];\nfor (var j = 0; j < batch_size; j++) {\nif (i + j < count) {\n+ try {\nlet draft = await cursor.next();\nif (draft) {\ndrafts.push(draft);\n}\n+ } catch (err) {\n+ console.error(err);\n+ }\n}\n}\ntry {\n",
        "org_msg": "revised promises",
        "sim_msg": "add: link to source on github",
        "sim_diff": "diff --git a/scripts/docs.js b/scripts/docs.js @@ -120,8 +120,8 @@ async function generateToc(docs) {\nasync function insertSourceLink(mdFile, srcFile) {\nconst link = BASE_SRC_URL + srcFile\n- console.log('insert line', { link, mdFile })\n- // return await execPromise(`echo \"## Source\\n[${link}](${link})\\n\" >> ${mdFile}`)\n+ // console.log('insert line', { link, mdFile })\n+ return await execPromise(`echo \"## Source\\n[${link}](${link})\\n\" >> ${mdFile}`)\n}\nasync function generateDocs(baseFolder, deep, perFile = true) {\n",
        "chatgpt_cot": "Fix compilation issue by adding error handling and async functions in update_draft_format.js. Improve code robustness and error logging for updating drafts."
    },
    {
        "org_diff": "diff --git a/src/components/CompareView.js b/src/components/CompareView.js @@ -43,12 +43,14 @@ const CompareGroup = ({ heading, both, onlyA, onlyB }) => {\n);\n};\n+const CompareOverview = ({});\n+\nconst CompareViewRaw = ({ cards, primary, secondary, both, onlyA, onlyB, ...props }) => {\nlet columns = sortIntoGroups(cards, primary);\nlet columnCounts = {};\n- let bothCounts = {};\n- let onlyACounts = {};\n- let onlyBCounts = {};\n+ let bothCounts = {'total': 0};\n+ let onlyACounts = {'total': 0};\n+ let onlyBCounts = {'total': 0};\nlet both_copy = both.slice(0);\nlet only_a_copy = onlyA.slice(0);\n@@ -73,17 +75,48 @@ const CompareViewRaw = ({ cards, primary, secondary, both, onlyA, onlyB, ...prop\ncolumnCounts[columnLabel] = columns[columnLabel].length;\nbothCounts[columnLabel] = bothCount;\n+ bothCounts['total'] += bothCount;\nonlyACounts[columnLabel] = onlyACount;\n+ onlyACounts['total'] += onlyACount;\nonlyBCounts[columnLabel] = onlyBCount;\n+ onlyBCounts['total'] += onlyBCount;\ncolumns[columnLabel] = sortIntoGroups(columns[columnLabel], secondary);\n}\n-\nconst bothCopy = both.slice(0);\nconst onlyACopy = onlyA.slice(0);\nconst onlyBCopy = onlyB.slice(0);\nreturn (\n<>\n+ {\n+ <div className=\"compare-header pt-2\">\n+ <Row>\n+ <Col>\n+ <h6 className=\"text-center\">Total</h6>\n+ </Col>\n+ </Row>\n+ <Row>\n+ <Col xs=\"4\">\n+ <h6 className=\"text-center\">\n+ In Both Cubes\n+ <br />({bothCounts['total']})\n+ </h6>\n+ </Col>\n+ <Col xs=\"4\">\n+ <h6 className=\"text-center\">\n+ Only in Base Cube\n+ <br />({onlyACounts['total']})\n+ </h6>\n+ </Col>\n+ <Col xs=\"4\">\n+ <h6 className=\"text-center\">\n+ Only in Comparison Cube\n+ <br />({onlyBCounts['total']})\n+ </h6>\n+ </Col>\n+ </Row>\n+ </div>\n+ }\n{getLabels(cards, primary)\n.filter((columnLabel) => columns[columnLabel])\n.map((columnLabel) => {\n@@ -153,6 +186,7 @@ const CompareViewRaw = ({ cards, primary, secondary, both, onlyA, onlyB, ...prop\n</Row>\n);\n})}\n+ }\n</>\n);\n};\n",
        "org_msg": "adds total cube comparison count header",
        "sim_msg": "[table accuracy] checks if table has only 1 column",
        "sim_diff": "diff --git a/server/src/processing/TableDetectionModule/TableDetectionModule.ts b/server/src/processing/TableDetectionModule/TableDetectionModule.ts @@ -305,12 +305,16 @@ export class TableDetectionModule extends Module<Options> {\nprivate isFalseTable(table: Table): boolean {\nconst isFalse = table.content.some((_, index) => !this.existAdjacentRow(index, table));\nconst only1Row = table.content.length === 1;\n+ const only1Col = table.content.every(row => row.content\n+ .filter(col => !(col instanceof SpannedTableCell)).length <= 1,\n+ );\nconst rowsHeightSum = table.content.reduce((total, row) => total + row.height, 0);\nconst rowRights = table.content.map(row => row.right).sort((a, b) => a - b);\nreturn isFalse ||\nonly1Row ||\n+ only1Col ||\nMath.ceil(rowsHeightSum) < Math.floor(table.height) ||\nrowRights[rowRights.length - 1] - rowRights[0] > 5;\n}\n",
        "chatgpt_cot": "Add total counts in CompareView, display header with total counts for both cubes, base cube, and comparison cube. Fix calculation and display issues."
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -515,7 +515,7 @@ class FilterCollapse extends Component {\n</InputGroup>\n</Col>\n<Col xs=\"auto\" style={{ padding: '0 5px' }}>\n- <Button type=\"submit\" onClick={this.applyQuick} size=\"sm\" color=\"primary\" className=\"mb-3\">\n+ <Button type=\"submit\" onClick={this.applyQuick} size=\"sm\" color=\"success\" className=\"mb-3\">\nQuick Filter\n</Button>\n</Col>\n@@ -530,13 +530,13 @@ class FilterCollapse extends Component {\n</Row>\n<Row>\n<Col>\n- <Button color=\"success\" className=\"mr-2 mb-3\" onClick={this.handleReset}>\n+ <Button color=\"danger\" className=\"mr-2 mb-3\" onClick={this.handleReset}>\nReset Filters\n</Button>\n- <Button color=\"success\" className=\"mr-2 mb-3\" onClick={this.toggleAdvanced}>\n+ <Button color=\"primary\" className=\"mr-2 mb-3\" onClick={this.toggleAdvanced}>\nAdvanced...\n</Button>\n- <Button color=\"success\" className=\"mr-2 mb-3\" href=\"/filters\">\n+ <Button color=\"secondary\" className=\"mr-2 mb-3\" href=\"/filters\">\nSyntax Guide\n</Button>\n</Col>\n",
        "org_msg": "Change colors.",
        "sim_msg": "fix(Filters): adjust filters' icons alignment",
        "sim_diff": "diff --git a/components/core/Filter/Filters.js b/components/core/Filter/Filters.js @@ -67,8 +67,7 @@ const STYLES_FILTERS_GROUP = css`\n`;\nconst STYLES_ICON_CONTAINER = css`\n- height: 20px;\n- width: 20px;\n+ padding: 2px;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n",
        "chatgpt_cot": "Change button colors to match the intended functionality, from success to primary, danger, and secondary, ensuring visual consistency and user understanding of filter options."
    },
    {
        "org_diff": "diff --git a/src/components/ChangelistContext.js b/src/components/ChangelistContext.js -import React, { useCallback, useEffect, useState } from 'react';\n+import React, { useCallback, useEffect, useRef, useState } from 'react';\n-import Query from '../utils/Query';\n+import Query from 'utils/Query';\n-const ChangelistContext = React.createContext([]);\n+const ChangelistContext = React.createContext({});\nexport const ChangelistContextProvider = ({ cubeID, setOpenCollapse, initialChanges, noSave, ...props }) => {\n- const storageKey = `changelist-${cubeID}`;\n+ const [changes, setChanges] = useState(initialChanges || []);\n- const [changes, setChanges] = useState(() => {\n- if (initialChanges) {\n- return initialChanges;\n- } else if (typeof localStorage !== 'undefined' && typeof cubeID !== 'undefined') {\n+ useEffect(() => {\nif (Query.get('updated', false) === 'true') {\nQuery.del('updated');\n- return [];\n}\n- let result;\n- try {\n- result = JSON.parse(localStorage.getItem(storageKey) || '[]');\n- } catch (e) {\n- return [];\n+ if (typeof cubeID === 'undefined') {\n+ return;\n}\n- if (result.length > 0) {\n+\n+ let storedChanges = [];\n+ const storageKey = `changelist-${cubeID}`;\n+ try {\n+ storedChanges = JSON.parse(localStorage.getItem(storageKey) || '[]');\n+ } catch (e) {}\n+ if (storedChanges.length > 0) {\nif (\n- result.some(\n+ storedChanges.some(\n(update) =>\n(update.add && !update.add.details) ||\n(update.remove && !update.remove.details) ||\n@@ -32,17 +31,17 @@ export const ChangelistContextProvider = ({ cubeID, setOpenCollapse, initialChan\n)\n) {\n// Old save format. Reset.\n- return [];\n- }\n- }\n- return result;\n+ storedChanges = [];\n} else {\n- return [];\n+ setOpenCollapse('edit');\n}\n- });\n+ }\n+ setChanges(storedChanges);\n+ }, [cubeID]);\nuseEffect(() => {\nif (!noSave && typeof localStorage !== 'undefined' && typeof cubeID !== 'undefined') {\n+ const storageKey = `changelist-${cubeID}`;\nlocalStorage.setItem(storageKey, JSON.stringify(changes));\n}\n}, [changes]);\n",
        "org_msg": "Fix ChangelistContext initial state.",
        "sim_msg": "persistMenu obj with all opening flags",
        "sim_diff": "diff --git a/packages/material-ui-shell/src/providers/Menu/Provider.js b/packages/material-ui-shell/src/providers/Menu/Provider.js @@ -3,31 +3,67 @@ import React, { useState, useEffect } from 'react'\nimport Context from './Context'\nconst Provider = ({ children, persistKey = 'menu' }) => {\n- const [isDesktopOpen, setDesktopOpen] = useState(true)\n- const [isMobileOpen, setMobileOpen] = useState(false)\n- const [isMini, setMini] = useState(false)\n+ const [isDesktopOpen, setDesktopOpen] = useState(false);\n+ const [isMobileOpen, setMobileOpen] = useState(false);\n+ const [isMini, setMini] = useState(false);\n+function getPersist (){\n+ let persistMenu = JSON.parse(localStorage.getItem(persistKey));\n+ return persistMenu;\n+}\n+function savePersist (persistMenu){\n+ localStorage.setItem(persistKey, JSON.stringify(persistMenu))\n+}\nuseEffect(() => {\n- const persistDesktopOpen = localStorage.getItem(persistKey)\n- if (persistDesktopOpen) {\n- setDesktopOpen(persistDesktopOpen === 'true')\n+ let persistMenu = getPersist();\n+ if (persistMenu) {\n+ setDesktopOpen(persistMenu.isDesktopOpen === 'true')\n+ setMobileOpen(persistMenu.isMobileOpen === 'true')\n+ setMini(persistMenu.isMini === 'true')\n+ }\n+ else {\n+ persistMenu ={... {isDesktopOpen,isMobileOpen,isMini}};\n+ savePersist(persistMenu);\n}\n}, [persistKey])\nuseEffect(() => {\ntry {\n- localStorage.setItem(persistKey, isDesktopOpen)\n+ let persistMenu = getPersist();\n+ persistMenu.isDesktopOpen = isDesktopOpen;\n+ savePersist(persistMenu);\n} catch (error) {\nconsole.warn(error)\n}\n}, [isDesktopOpen, persistKey])\n+ useEffect(() => {\n+ try {\n+ let persistMenu = getPersist();\n+ persistMenu.isMini = isMini;\n+ savePersist(persistMenu);\n+ } catch (error) {\n+ console.warn(error)\n+ }\n+ }, [isMini, persistKey])\n+\n+\n+ useEffect(() => {\n+ try {\n+ let persistMenu = getPersist();\n+ persistMenu.isMobileOpen = isMobileOpen;\n+ savePersist(persistMenu);\n+ } catch (error) {\n+ console.warn(error)\n+ }\n+ }, [isMobileOpen, persistKey])\n+\nreturn (\n<Context.Provider\nvalue={{\nisDesktopOpen,\n- isMobileOpen,\nsetDesktopOpen,\n+ isMobileOpen,\nsetMobileOpen,\nisMini,\nsetMini,\n",
        "chatgpt_cot": "Refactor ChangelistContext to include useRef, fix Query import, and update initialChanges state handling for better functionality and readability."
    },
    {
        "org_diff": "diff --git a/jobs/clear_old_drafts.js b/jobs/clear_old_drafts.js @@ -15,7 +15,7 @@ const getObjectCreatedAtPlus7 = (obj) => {\nconst processDraft = async (draft) => {\nif (draft !== null && getObjectCreatedAtPlus7(draft) < NOW) {\n- if (await Deck.exists({ draft: draft._id })) {\n+ if (!(await Deck.exists({ draft: draft._id }))) {\nreturn draft._id;\n}\n}\n",
        "org_msg": "Make sure it deletes unreachable drafts, not all reachable drafts.",
        "sim_msg": "Improve drafts page layout",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -26,12 +26,10 @@ let DraftRow = (props) => {\nDraftRow = connect(() => ({}), { deleteDraft })(DraftRow);\nconst DraftList = ({ editor: { draftPosts } }) =>\n- (\n<div className=\"main-panel\">\n<Header />\n- <div className=\"my-3\">\n+ <div className=\"my-3 container container-small\">\n<h1 className=\"text-xs-center\">Drafts</h1>\n- <div className=\"container\">\n{ _.size(draftPosts) === 0 &&\n<h3 className=\"text-xs-center\">\nYou don't have any draft saved.\n@@ -41,8 +39,6 @@ const DraftList = ({ editor: { draftPosts } }) =>\n<DraftRow key={key} data={draft.postData} id={key} />)\n}\n</div>\n- </div>\n- </div>\n- );\n+ </div>;\nexport default connect(state => ({ editor: state.editor }))(DraftList);\n",
        "chatgpt_cot": "Fix logic issue in clear_old_drafts.js by updating the condition to check if a draft exists in the Deck."
    },
    {
        "org_diff": "diff --git a/src/dashboard.js b/src/dashboard.js @@ -12,14 +12,6 @@ import { Card, Col, Row, CardHeader , CardBody, CardFooter} from 'reactstrap';\nclass Dashboard extends Component {\nconstructor(props) {\nsuper(props);\n-\n- this.newCube = this.newCube.bind(this);\n- }\n-\n- newCube(evt)\n- {\n- evt.preventDefault();\n- document.getElementById('cubeModal').modal('show');\n}\nrender() {\n@@ -41,7 +33,7 @@ class Dashboard extends Component {\n</Col>\n)\n:\n- <p className=\"m-2\">You don't have any cubes. <a href=\"#\" onClick={this.newCube}>Add a new cube?</a></p>\n+ <p className=\"m-2\">You don't have any cubes. <a href=\"#\" data-toggle=\"modal\" data-target=\"#cubeModal\">Add a new cube?</a></p>\n}\n</Row>\n</CardBody>\n",
        "org_msg": "Reveal the modal under Your Cubes the same way as in the dropdown for",
        "sim_msg": "[pgr] fix(galleryContainer): do not set cubeRatio if canSet is false",
        "sim_diff": "diff --git a/pro-gallery-renderer/src/components/gallery/galleryContainer.js b/pro-gallery-renderer/src/components/gallery/galleryContainer.js @@ -1063,12 +1063,10 @@ export class GalleryContainer extends React.Component {\n}\n}\n- if (stateStyles.isSlider) {\n- const val = canSet('gallerySliderImageRatio', 'cubeRatio') ? wixStyles.gallerySliderImageRatio : this.defaultStateStyles.gallerySliderImageRatio;\n- stateStyles.cubeRatio = Number(eval(['16/9', '4/3', '1', '3/4', '9/16'][Number(val)]));\n- } else if (stateStyles.isGrid) {\n- const val = canSet('galleryImageRatio', 'cubeRatio') ? wixStyles.galleryImageRatio : this.defaultStateStyles.galleryImageRatio;\n- stateStyles.cubeRatio = Number(eval(['16/9', '4/3', '1', '3/4', '9/16'][Number(val)]));\n+ if (stateStyles.isSlider && canSet('gallerySliderImageRatio', 'cubeRatio')) {\n+ stateStyles.cubeRatio = Number(eval(['16/9', '4/3', '1', '3/4', '9/16'][Number(wixStyles.gallerySliderImageRatio)]));\n+ } else if (stateStyles.isGrid && canSet('galleryImageRatio', 'cubeRatio')) {\n+ stateStyles.cubeRatio = Number(eval(['16/9', '4/3', '1', '3/4', '9/16'][Number(wixStyles.galleryImageRatio)]));\n}\nif (canSet('fixedColumns')) {\n",
        "chatgpt_cot": "Remove newCube method and update link to open modal in Dashboard component."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeDeckPage.js b/src/pages/CubeDeckPage.js @@ -116,7 +116,7 @@ const CubeDeckPage = ({ user, cube, deck, draft, loginCallback }) => {\n<Collapse isOpen={isOpen} navbar>\n<Nav navbar>\n<NavItem>\n- <SampleHandModal deck={deck.seats[seatIndex].main} />\n+ <SampleHandModal deck={deck.seats[seatIndex].deck} />\n</NavItem>\n{user && deck.owner === user.id && (\n<NavItem>\n",
        "org_msg": "Fixed Sample Hand",
        "sim_msg": "fix cursor style in React",
        "sim_diff": "diff --git a/modules/core/src/lib/deck.js b/modules/core/src/lib/deck.js @@ -544,8 +544,9 @@ export default class Deck {\n}\n_updateCursor() {\n- if (this.canvas) {\n- this.canvas.style.cursor = this.props.getCursor(this.interactiveState);\n+ const container = this.props.parent || this.canvas;\n+ if (container) {\n+ container.style.cursor = this.props.getCursor(this.interactiveState);\n}\n}\n",
        "chatgpt_cot": "Modify SampleHandModal props to deck.seats[seatIndex].deck in CubeDeckPage for consistency and accuracy."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -266,13 +266,14 @@ router.post('/blog/post/:id', ensureAuth, async (req, res) => {\n// mentions are only added for new posts and ignored on edits\nif (req.body.mentions) {\n+ const owner = await User.findById(user._id);\nlet { mentions } = req.body;\n// mentions is either a string (if just one is found) or an array (if multiple are found)\nmentions = Array.isArray(mentions) ? mentions.map((x) => x.toLowerCase()) : mentions.toLowerCase();\nconst query = User.find({ username_lower: mentions });\nawait util.addMultipleNotifications(\nquery,\n- cube.owner,\n+ owner,\n`/cube/blog/${req.params.id}`, // there's no way to link to a specific post, so the blog page is the best we can do\n`${user.username} mentioned you in their blog post.`,\n);\n@@ -2394,13 +2395,14 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\nawait Promise.all([blogpost.save(), cube.save()]);\nif (req.body.mentions) {\n+ const owner = await User.findById(req.user._id);\nlet { mentions } = req.body;\n// mentions is either a string (if just one is found) or an array (if multiple are found)\nmentions = Array.isArray(mentions) ? mentions.map((x) => x.toLowerCase()) : mentions.toLowerCase();\nconst query = User.find({ username_lower: mentions });\nawait util.addMultipleNotifications(\nquery,\n- cube.owner,\n+ owner,\n`/cube/blog/${req.params.id}`, // there's no way to link to a specific post, so the blog page is the best we can do\n`${cube.owner_name} mentioned you in their blog post.`,\n);\n",
        "org_msg": "fixed self-notifications on blog posts",
        "sim_msg": "More validation before auto-posting comment",
        "sim_diff": "diff --git a/PostBanDeletedPosts.user.js b/PostBanDeletedPosts.user.js // @description When user posts on SO Meta regarding a post ban, fetch and display deleted posts (must be mod) and provide easy way to copy the results into a comment\n// @homepage https://github.com/samliew/SO-mod-userscripts\n// @author @samliew\n-// @version 2.3.2\n+// @version 2.4\n//\n// @include https://meta.stackoverflow.com/questions/*\n//\nconst postText = ($('h1 .question-hyperlink').text() + $('.post-text p', post).text()).toLowerCase();\nconst isDeleted = post.find('.js-post-notice a[href=\"/help/deleted-questions\"]').length > 0;\n+ const postDate = new Date(post.find('.post-signature.owner .relativetime').attr('title'));\n+ const isRelativelyNew = Date.now() - postDate.getTime() < 3 * 86400000; // 86400000 = 1 day\n+\n// Is a deleted user, do nothing\nif(postOwner.length === 0) return;\nconst commentArea = $(`<textarea readonly=\"readonly\"></textarea>`).val(comment).appendTo(stats);\n- // Rest of the function is for Sam\n- if(!isSuperuser()) return;\n+ // If post is not within past three days, or has more than 20 links, do not auto-post anything!\n+ if(!isSuperuser() || !isRelativelyNew || hyperlinks.length > 20) return;\n// If there are more comments or comments by myself, ignore\nconst hasMyComments = post.find(`.comment-user[href*=\"/users/${StackExchange.options.user.userId}/\"]`).length > 0;\n",
        "chatgpt_cot": "\"Fix owner reference in cube_routes.js for mentions in blog posts\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -77,22 +77,19 @@ function saveAllCards(arr) {\n}\naddCardToCatalog(convertCard(card));\n});\n- writeJSONFile('private/names.json', JSON.stringify(names)).then(function() {\n- var cardtree = util.turnToTree(names);\n- writeJSONFile('private/cardtree.json', JSON.stringify(cardtree)).then(function() {\n- writeJSONFile('private/carddict.json', JSON.stringify(dict)).then(function() {\n- writeJSONFile('private/nameToId.json', JSON.stringify(nameToId)).then(function() {\n- writeJSONFile('private/full_names.json', JSON.stringify(util.turnToTree(full_names))).then(function() {\n- writeJSONFile('private/imagedict.json', JSON.stringify(imagedict)).then(function() {\n- writeJSONFile('private/cardimages.json', JSON.stringify(cardimages)).then(function() {\n+ var pendingWrites = [];\n+ pendingWrites.push(writeJSONFile('private/names.json', JSON.stringify(names)));\n+ pendingWrites.push(writeJSONFile('private/cardtree.json', JSON.stringify(util.turnToTree(names))));\n+ pendingWrites.push(writeJSONFile('private/carddict.json', JSON.stringify(dict)));\n+ pendingWrites.push(writeJSONFile('private/nameToId.json', JSON.stringify(nameToId)));\n+ pendingWrites.push(writeJSONFile('private/full_names.json', JSON.stringify(util.turnToTree(full_names))));\n+ pendingWrites.push(writeJSONFile('private/imagedict.json', JSON.stringify(imagedict)));\n+ pendingWrites.push(writeJSONFile('private/cardimages.json', JSON.stringify(cardimages)));\n+ var allWritesPromise = Promise.all(pendingWrites);\n+ allWritesPromise.then(function() {\nconsole.log(\"All JSON files saved.\");\n- });\n- });\n- });\n- });\n- });\n- });\n- });\n+ })\n+ return allWritesPromise;\n}\nfunction convertExtraCard(card) {\n",
        "org_msg": "un-nest file writes with Promise.all",
        "sim_msg": "Write JSON to specific path also",
        "sim_diff": "diff --git a/selenium-test/ratings.js b/selenium-test/ratings.js @@ -84,10 +84,11 @@ function _buildHtmlDoc(htmlTable) {\nfunction _writeToFile (jsonText, opts) {\nconst filename = new Date().toJSON();\nconst jsonData = JSON.parse(jsonText);\n+ const path = opts.output.replace(/\\/$/, '');\n// JSON File Output\n- fs.writeFileSync(`${filename}.json`, jsonText);\n- log(chalk.yellow('JSON Data written to file: ') + chalk.yellow.bold(`${filename}.json`));\n+ fs.writeFileSync(`${path}/${filename}.json`, jsonText);\n+ log(chalk.yellow('JSON Data written to file: ') + chalk.yellow.bold(`${path}/${filename}.json`));\n// Cleanup data for HTML table\nObject.keys(jsonData).forEach(function (key) {\n@@ -117,8 +118,6 @@ function _writeToFile (jsonText, opts) {\n// HTML File Output\nconst htmlTable = tabular.html(jsonData, {classes: {table: \"dataTable display\"} });\nconst htmlDoc = _buildHtmlDoc(htmlTable);\n-\n- const path = opts.output.replace(/\\/$/, '');\nfs.writeFileSync(`${path}/${filename}.html`, htmlDoc);\nlog(chalk.yellow('HTML Table written to file: ') + chalk.yellow.bold(`${path}/${filename}.html`));\n}\n",
        "chatgpt_cot": "Refactor code to use Promise.all for multiple file writes in updatecards.js. This improves code readability and ensures all files are saved."
    },
    {
        "org_diff": "diff --git a/views/cube/cube_list.pug b/views/cube/cube_list.pug @@ -7,7 +7,7 @@ block cube_toolbar\ninput#cubeID(type='hidden', name='cubeID', value=cube_id)\ninput#cuberaw(type='hidden', name='cuberaw', value=cube_raw)\n- input#canEdit(type='hidden', name='canEdit', value=(user && user.id == cube.owner).toString())\n+ input#canEdit(type='hidden', name='canEdit', value=user && user.id == cube.owner ? 'true' : 'false')\ninput#cubeTagColors(type='hidden', name='cubeTagColors', value=JSON.stringify(cube.tag_colors))\ninput#hideTagColors(type='hidden', name='hideTagColors', value=(!!user && user.hide_tag_colors === true).toString())\nif user && user.id == cube.owner\n",
        "org_msg": "Fix cube_list when logged out.",
        "sim_msg": "Remove dead peeks constants",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -4489,24 +4489,6 @@ const cubeMesh = (() => {\ncubeMesh.frustumCulled = false;\nscene.add(cubeMesh);\n-const PEEK_FACES = {\n- FRONT: 1,\n- BACK: 2,\n- LEFT: 3,\n- RIGHT: 4,\n- TOP: 5,\n- BOTTOM: 6,\n-};\n-const PEEK_DIRECTIONS = [\n- [new THREE.Vector3(0, 0, 1), PEEK_FACES.FRONT],\n- [new THREE.Vector3(0, 0, -1), PEEK_FACES.BACK],\n- [new THREE.Vector3(-1, 0, 0), PEEK_FACES.LEFT],\n- [new THREE.Vector3(1, 0, 0), PEEK_FACES.RIGHT],\n- [new THREE.Vector3(0, 1, 0), PEEK_FACES.TOP],\n- [new THREE.Vector3(0, -1, 0), PEEK_FACES.BOTTOM],\n-];\n-const PEEK_FACE_INDICES = Int32Array.from([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,255,255,255,255,255,255,255,255,255,255,0,255,5,6,7,8,255,255,255,255,255,255,255,255,255,255,1,5,255,9,10,11,255,255,255,255,255,255,255,255,255,255,2,6,9,255,12,13,255,255,255,255,255,255,255,255,255,255,3,7,10,12,255,14,255,255,255,255,255,255,255,255,255,255,4,8,11,13,14,255]);\n-\nconst velocity = new THREE.Vector3();\nconst lastGrabs = [false, false];\nconst lastAxes = [[0, 0], [0, 0]];\n",
        "chatgpt_cot": "Refactor conditional expression for canEdit input in cube_list.pug for clarity and consistency with ternary operator, improving code readability."
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -165,19 +165,19 @@ class CubeListNavbar extends Component {\n</DropdownMenu>\n</UncontrolledDropdown>\n<NavItem className={hasCustomImages ? undefined : 'd-none'}>\n- <NavLink id=\"customImageDisplayMenuItem\" className=\"d-flex align-items-baseline text-sm-left text-center\">\n<DisplayContext.Consumer>\n{({ showCustomImages, toggleShowCustomImages }) =>\n+ <NavLink id=\"customImageDisplayMenuItem\" className=\"d-flex align-items-baseline text-sm-left text-center\">\n<Input\ntype=\"checkbox\"\nclassName=\"mr-1 ml-0 my-0 position-static d-block\"\nchecked={showCustomImages}\nonChange={toggleShowCustomImages}\n/>\n+ <Label for=\"customImageDisplayToggle\" className=\"m-0\" onClick={toggleShowCustomImages}>Show Custom Images</Label>\n+ </NavLink>\n}\n</DisplayContext.Consumer>\n- <Label for=\"customImageDisplayToggle\" className=\"m-0\">Show Custom Images</Label>\n- </NavLink>\n</NavItem>\n</Nav>\n</Collapse>\n",
        "org_msg": "Fix show custom images label.",
        "sim_msg": "[playground] improve (sidebar): add localhost links",
        "sim_diff": "diff --git a/packages/playground/src/components/SideBar/SideBar.js b/packages/playground/src/components/SideBar/SideBar.js @@ -166,11 +166,11 @@ function SideBar({ items }) {\n<Form.Item label=\"Reset to Default Gallery\" labelAlign=\"left\">\n<Button icon=\"delete\" shape=\"circle\" size=\"large\" onClick={() => window.location.search = ''} />\n</Form.Item>\n- <Form.Item label=\"Lean Gallery\" labelAlign=\"left\">\n- <Button icon=\"interaction\" shape=\"circle\" size=\"large\" onClick={() => window.location.search = 'gridStyle=1&allowHover=false&galleryLayout=2'} />\n- </Form.Item>\n</Form>\n</Collapse.Panel>\n+ <Collapse.Panel header=\"Benchmarks\" key=\"benchmarks\">\n+ <Benchmarks />\n+ </Collapse.Panel>\n<Collapse.Panel header=\"Simulators\" key=\"simulators\">\n<Form labelCol={{ span: 17 }} wrapperCol={{ span: 3 }}>\n<Form.Item label=\"Unknown dimension\" labelAlign=\"left\">\n@@ -180,16 +180,26 @@ function SideBar({ items }) {\n<Switch checked={!!gallerySettings.isAvoidGallerySelfMeasure} onChange={e => setGallerySettings({ isAvoidGallerySelfMeasure: e })} />\n</Form.Item>\n<Form.Item label=\"Use Native Lazy Loading\" labelAlign=\"left\">\n- <Switch checked={!!gallerySettings.lazyLoad} onChange={e => setGallerySettings({ lazyLoad: e ? LAZY_LOAD.NATIVE : LAZY_LOAD.CSS })} />\n+ <Switch checked={gallerySettings.lazyLoad === LAZY_LOAD.NATIVE} onChange={e => setGallerySettings({ lazyLoad: e ? LAZY_LOAD.NATIVE : LAZY_LOAD.CSS })} />\n+ </Form.Item>\n+ </Form>\n+ </Collapse.Panel>\n+ <Collapse.Panel header=\"Develop\" key=\"develop\">\n+ <Form labelCol={{ span: 17 }} wrapperCol={{ span: 3 }}>\n+ <Form.Item label=\"Local Playground\" labelAlign=\"left\">\n+ <Button shape=\"circle\" icon=\"arrow-right\" target=\"_self\" href={`http://localhost:3000/${window.location.search}`} />\n+ </Form.Item>\n+ <Form.Item label=\"Master Playground\" labelAlign=\"left\">\n+ <Button shape=\"circle\" icon=\"arrow-right\" target=\"_self\" href={`https://pro-gallery-master.surge.sh/${window.location.search}`} />\n+ </Form.Item>\n+ <Form.Item label=\"Live Playground\" labelAlign=\"left\">\n+ <Button shape=\"circle\" icon=\"arrow-right\" target=\"_self\" href={`https://pro-gallery.surge.sh/${window.location.search}`} />\n</Form.Item>\n{(window.location.hostname.indexOf('localhost') >= 0) && <Form.Item label=\"Simulate Local SSR\" labelAlign=\"left\">\n<Button shape=\"circle\" icon=\"bug\" target=\"_blank\" href={`http://localhost:3001/?seed=${Math.floor(Math.random() * 10000)}&${Object.entries(styleParams).reduce((arr, [styleParam, value]) => arr.concat(`${styleParam}=${value}`), []).join('&')}`} />\n</Form.Item>}\n</Form>\n</Collapse.Panel>\n- <Collapse.Panel header=\"Benchmarks\" key=\"benchmarks\">\n- <Benchmarks />\n- </Collapse.Panel>\n<Collapse.Panel header=\"Lean Gallery\" key=\"lean\">\n{(notEligibleReasons({ items, styles: styleParams }) || []).map((reason, idx) => <Alert key={idx} message={reason} type=\"info\" />)}\n</Collapse.Panel>\n",
        "chatgpt_cot": "Refactor CubeListNavbar component to improve custom image display functionality by adding a checkbox and label for toggling show custom images."
    },
    {
        "org_diff": "diff --git a/src/analytics/PivotTable.js b/src/analytics/PivotTable.js @@ -6,7 +6,7 @@ import 'react-pivottable/pivottable.css';\nconst PivotTable = ({ cards }) => {\nconst data = cards.map((card) => ({\nCMC: card.cmc ?? card.details.cmc,\n- Color: card.colors.join(),\n+ Color: (card.colors || []).join(),\nFinish: card.finish,\n'Type Line': card.type_line,\nStatus: card.status,\n",
        "org_msg": "Add null check to card.colors for pivotable",
        "sim_msg": "pivotBy prop now defaults to undefined",
        "sim_diff": "diff --git a/src/index.js b/src/index.js @@ -28,7 +28,7 @@ export const ReactTableDefaults = {\nonSortingChange: undefined,\n// Pivoting\n- pivotBy: [],\n+ pivotBy: undefined,\npivotColumnWidth: 200,\npivotValKey: '_pivotVal',\npivotIDKey: '_pivotID',\n@@ -691,7 +691,7 @@ export default React.createClass({\ngetDataModel (nextProps, nextState) {\nconst {\ncolumns,\n- pivotBy,\n+ pivotBy = [],\ndata,\npivotIDKey,\npivotValKey,\n",
        "chatgpt_cot": "\"Fix Color attribute mapping in PivotTable to handle null values properly, preventing potential errors in data visualization.\""
    },
    {
        "org_diff": "diff --git a/src/markdown/cardlink/index.js b/src/markdown/cardlink/index.js @@ -14,6 +14,11 @@ function oncard(node) {\nnode.dfc = true;\n}\n+ if (node.value[0] === '!' && node.type !== 'cardimage') {\n+ node.value = node.value.substring(1);\n+ node.type = 'cardimage';\n+ }\n+\n[node.name, node.id] = node.value.split('|');\nif (typeof node.id === 'undefined') node.id = node.name;\n}\n",
        "org_msg": "Added support for '[[/!'",
        "sim_msg": "Card render debugging",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -137,30 +137,39 @@ export const generateCard = async ({\nsvg.setAttribute('height', cardHeight);\nsvg.innerHTML = cardSvgSource;\n+ // window.svg = svg;\n+\n{\nconst el = svg;\n- const titleTextEl = el.querySelector('#title-text');\n- titleTextEl.innerHTML = name;\n+ // name\n+ const nameEl = el.querySelector('#name');\n+ nameEl.innerHTML = name;\n+\n+ // type icon\nfor (let i = 0; i < types.length; i++) {\nconst type = types[i];\nconst typeEl = el.querySelector('#type-' + type);\ntypeEl.style.display = type === spec.stats.type ? 'block' : 'none';\n}\n+\n+ // stat values\n[\n+ 'level',\n'hp',\n'mp',\n- 'attack',\n- 'defense',\n- 'speed',\n- 'luck',\n+ 'atk',\n+ 'def',\n+ 'mag',\n+ 'spr',\n+ 'dex',\n+ 'lck',\n].forEach(statName => {\n- const statEl = el.querySelector('#' + statName);\n- const texts = statEl.querySelectorAll('text');\n- const textEl = texts[texts.length - 1];\n- textEl.innerHTML = escape(spec.stats[statName] + '');\n+ const statEl = el.querySelector('#' + statName + '-value');\n+ statEl.innerHTML = escape(spec.stats[statName] + '');\n});\n- {\n+\n+ /* {\nconst imageEl = el.querySelector('#Image image');\nimageEl.setAttribute('xlink:href', objectImage);\n}\n@@ -190,7 +199,7 @@ export const generateCard = async ({\ng.id = 'background-' + id;\nconst p = g.nextElementSibling;\np.style = `fill:url(#${g.id});`;\n- }\n+ } */\n}\nconst image = await new Promise((accept, reject) => {\n",
        "chatgpt_cot": "Add logic to handle card image in oncard function in index.js. Fixes issue with displaying card images in markdown card links."
    },
    {
        "org_diff": "diff --git a/src/components/DeckPreview.js b/src/components/DeckPreview.js @@ -35,13 +35,13 @@ const DeckPreview = ({ deck, canEdit, nextURL }) => {\ndeck && deck.seats && deck.seats[0].name\n? [deck.seats[0].name, truncateToLength(MAX_LENGTH, deck.seats[0].name)]\n: [DEFAULT_DECK_NAME, DEFAULT_DECK_NAME],\n- [deck]\n+ [deck],\n);\nconst handleClick = useKeyHandlers(\nuseCallback(() => {\nwindow.location.href = `/cube/deck/${deck._id}`;\n- }, [deck._id])\n+ }, [deck._id]),\n);\nconst openDeleteModal = (event) => {\n@@ -88,9 +88,7 @@ const DeckPreview = ({ deck, canEdit, nextURL }) => {\n</a>{' '}\nby{' '}\n{deck.seats[0].userid ? (\n- <a href={`/user/view/${deck.seats[0].userid}`}>\n- {deck.seats[0].username}\n- </a>\n+ <a href={`/user/view/${deck.seats[0].userid}`}>{deck.seats[0].username}</a>\n) : (\n'Anonymous'\n)}{' '}\n",
        "org_msg": "Fix: Re-ran Prettier",
        "sim_msg": "Hooks on user-management-delete-dialog component",
        "sim_diff": "diff --git a/generators/client/templates/react/src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx.ejs b/generators/client/templates/react/src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx.ejs See the License for the specific language governing permissions and\nlimitations under the License.\n-%>\n-import React from 'react';\n+import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n-import { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\n+import { Translate } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { IUser } from 'app/shared/model/user.model';\nimport { getUser, deleteUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\nexport interface IUserManagementDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n-export class UserManagementDeleteDialog extends React.Component<IUserManagementDeleteDialogProps> {\n- componentDidMount() {\n- this.props.getUser(this.props.match.params.login);\n- }\n+export const UserManagementDeleteDialog = (props: IUserManagementDeleteDialogProps) => {\n+ useEffect(() => {\n+ props.getUser(props.match.params.login);\n+ }, []);\n- confirmDelete = event => {\n- this.props.deleteUser(this.props.user.login);\n- this.handleClose(event);\n- }\n+ const confirmDelete = event => {\n+ props.deleteUser(props.user.login);\n+ handleClose(event);\n+ };\n- handleClose = event => {\n+ const handleClose = event => {\nevent.stopPropagation();\n- this.props.history.goBack();\n- }\n+ props.history.goBack();\n+ };\n+\n+ const { user } = props;\n- render() {\n- const { user } = this.props;\nreturn (\n- <Modal isOpen toggle={this.handleClose}>\n- <ModalHeader toggle={this.handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n+ <Modal isOpen toggle={handleClose}>\n+ <ModalHeader toggle={handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n<ModalBody>\n<Translate contentKey=\"userManagement.delete.question\" interpolate={{ login: user.login }}>Are you sure you want to delete this User?</Translate>\n</ModalBody>\n<ModalFooter>\n- <Button color=\"secondary\" onClick={this.handleClose}>\n+ <Button color=\"secondary\" onClick={handleClose}>\n<FontAwesomeIcon icon=\"ban\"/>&nbsp;\n<Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n</Button>\n- <Button color=\"danger\" onClick={this.confirmDelete}>\n+ <Button color=\"danger\" onClick={confirmDelete}>\n<FontAwesomeIcon icon=\"trash\" />&nbsp;\n<Translate contentKey=\"entity.action.delete\">Delete</Translate>\n</Button>\n</ModalFooter>\n</Modal>\n);\n- }\n-}\n+};\nconst mapStateToProps = (storeState: IRootState) => ({\nuser: storeState.userManagement.user\n",
        "chatgpt_cot": "\"Refactor DeckPreview.js to improve readability and remove unnecessary code. Fix link formatting and simplify handleClick function for better performance.\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -212,9 +212,8 @@ test('generatePack generates a valid pack of cards', () => {\nCube.findOne.yields(null, exampleCube);\nvar callback = sinon.stub();\nvar promise = carddb.initializeCardDb(fixturesPath, true);\n- return promise.then(function() {\n- cubefn.generatePack('', carddb, seed, callback);\n- var argument = callback.getCall(0).args[1];\n+ return promise.then(async function() {\n+ var argument = await cubefn.generatePack('', carddb, seed);\nargument.pack.forEach(function(card, index) {\nexpect(card).toEqual(cubefixture.examplePack.pack[index]);\n});\n",
        "org_msg": "Revised test case to account for async",
        "sim_msg": "Initialize generators in generator tests",
        "sim_diff": "diff --git a/tests/mocha/generator_test.js b/tests/mocha/generator_test.js @@ -94,6 +94,7 @@ suite('Generator', function() {\nvar generator = testCase[0];\nvar name = testCase[1];\ntest(name, function() {\n+ generator.init(this.workspace);\nthis.blockToCodeTest(generator, false, true, 'row_block');\nthis.blockToCodeTest(\ngenerator, false, false, 'row_blockstack_block', 'thisOnly=false');\n",
        "chatgpt_cot": "Refactor cubefn.test.js to use async/await for generating packs, improving readability and maintainability. Fixes #212."
    },
    {
        "org_diff": "diff --git a/src/analytics/Suggestions.js b/src/analytics/Suggestions.js @@ -2,6 +2,8 @@ import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport LoadingButton from 'components/LoadingButton';\nimport { csrfFetch } from 'utils/CSRF';\n+import FilterCollapse from 'components/FilterCollapse';\n+import Filter from 'utils/Filter';\nimport {\nCol,\n@@ -12,15 +14,10 @@ import {\nCard,\nCardBody,\nCardHeader,\n- InputGroup,\n- InputGroupAddon,\n- InputGroupText,\n- Input,\n} from 'reactstrap';\nconst Suggestions = ({ cards, cube }) => {\n- const [filterText, setfilterText] = useState('');\n- const [filterValid, setFilterValid] = useState(true);\n+ const [filter, setFilter] = useState([]);\nconst [loading, setLoading] = useState(true);\nconst [suggestions, setSuggestions] = useState([]);\nconst [adds, setAdds] = useState([]);\n@@ -39,17 +36,18 @@ const Suggestions = ({ cards, cube }) => {\nreturn val.result;\n}\n+ const updateFilter = (val) => {\n+ setFilter(val);\n+ setAdds(suggestions.filter((card) => Filter.filterCard(card, val)));\n+ };\n+\nuseEffect(() => {\ngetData(`/cube/api/adds/${cube._id}`, { cards: cards.map((card) => card.details.name) }).then((data) => {\n- setAdds(data);\n+ setSuggestions(data);\nsetLoading(false);\n});\n}, [cards]);\n- const applyFilter = (event) => {\n- console.log('Apply filter');\n- };\n-\nreturn (\n<>\n<h4 className=\"d-lg-block d-none\">Recommender</h4>\n@@ -58,26 +56,13 @@ const Suggestions = ({ cards, cube }) => {\nCube Cobra.\n</p>\n- <InputGroup className=\"mb-3\">\n- <InputGroupAddon addonType=\"prepend\">\n- <InputGroupText htmlFor=\"filterTextInput\">Suggest cards that match: </InputGroupText>\n- </InputGroupAddon>\n- <Input\n- type=\"text\"\n- id=\"filterTextInput\"\n- name=\"filterTextInput\"\n- placeholder={'type:\"creature\"'}\n- valid={filterText.length > 0 && filterValid}\n- invalid={filterText.length > 0 && !filterValid}\n- value={filterText}\n- onChange={(event) => setfilterText(event.target.value)}\n+ <FilterCollapse\n+ defaultFilterText={defaultFilterText}\n+ filter={filter}\n+ setFilter={updateFilter}\n+ numCards={numCards}\n+ isOpen={filterCollapseOpen}\n/>\n- <InputGroupAddon addonType=\"append\">\n- <LoadingButton color=\"success\" className=\"square-left\" onClick={applyFilter} loading={loading}>\n- Apply\n- </LoadingButton>\n- </InputGroupAddon>\n- </InputGroup>\n<Row>\n<Col xs=\"12\" lg=\"6\">\n<Card>\n",
        "org_msg": "Add filtering",
        "sim_msg": "More search debugging",
        "sim_diff": "diff --git a/editor.js b/editor.js @@ -333,18 +333,19 @@ const bindTextarea = codeEl => {\n</div>\n);\n});\n- const Library = React.memo(({cards, open, q, setQ}) => {\n+ const Library = React.memo(({cards, open, q, setQ, setCurrentQ, searchResults, setSearchResults}) => {\nreturn (\n<div className={['library', 'page', open ? 'open' : '', 'sections'].join(' ')}>\n<Search\nq={q}\nsetQ={setQ}\nonEnter={(e, {q}) => {\n- console.log('get search', {q});\n+ setCurrentQ(q);\n+ // console.log('get search', {q});\n}}\n/>\n<div className=\"cards\">\n- {cards.map((card, i) => {\n+ {(searchResults || cards).map((card, i) => {\nconst img = \"https://card-preview.exokit.org/?w=\" + Math.floor(width * window.devicePixelRatio) + \"&ext=jpg&t=\" + card.id;\nreturn (\n<MiniCard\n@@ -375,11 +376,14 @@ const bindTextarea = codeEl => {\nconst [open, setOpen] = useState(true);\nconst [selectedTab, setSelectedTab] = useState('editor');\nconst [cards, setCards] = useState([]);\n+ const [searchResults, setSearchResults] = useState(null);\nconst [files, setFiles] = useState([]);\nconst [objects, setObjects] = useState([]);\nconst [selectedFileIndex, setSelectedFileIndex] = useState(0);\nconst [selectedObjectIndex, setSelectedObjectIndex] = useState(0);\nconst [q, setQ] = useState('');\n+ const [currentQ, setCurrentQ] = useState('');\n+ const [lastQ, setLastQ] = useState('');\n// console.log('set objects', objects);\n@@ -415,6 +419,28 @@ const bindTextarea = codeEl => {\n};\n}, []);\n+ /* const qs = parseQuery(router.asPath.match(/(\\?.*)$/)?.[1] || '');\n+ const {q: currentQ} = qs; */\n+ useEffect(() => {\n+ if (currentQ !== lastQ) {\n+ setLastQ(currentQ);\n+\n+ if (currentQ) {\n+ setQ(currentQ);\n+ (async () => {\n+ const res = await fetch('https://tokens.webaverse.com/search?q=' + currentQ);\n+ const tokens = await res.json();\n+ setSearchResults(tokens);\n+ })().catch(err => {\n+ console.warn(err);\n+ });\n+ } else {\n+ setQ('');\n+ setSearchResults(null);\n+ }\n+ }\n+ }, [currentQ, lastQ]);\n+\nreturn <div className=\"root\">\n<div className=\"left\">\n<div className=\"top\">\n@@ -488,6 +514,9 @@ const bindTextarea = codeEl => {\nobjects={objects}\nq={q}\nsetQ={setQ}\n+ setCurrentQ={setCurrentQ}\n+ searchResults={searchResults}\n+ setSearchResults={setSearchResults}\n/>\n<Settings\nopen={selectedTab === 'settings'}\n",
        "chatgpt_cot": "\"Add FilterCollapse component and Filter utility to Suggestions.js to enable filtering of suggestions.\""
    },
    {
        "org_diff": "diff --git a/src/components/AsfanDropdown.js b/src/components/AsfanDropdown.js @@ -5,10 +5,13 @@ import {\nDropdownItem,\nDropdownMenu,\nDropdownToggle,\n+ Form,\nInputGroup,\nInputGroupAddon,\nInputGroupText,\nLabel,\n+ Nav,\n+ NavLink,\nRow,\nUncontrolledDropdown,\n} from 'reactstrap';\n@@ -23,6 +26,16 @@ const AsfanDropdown = ({ cube, defaultFormatId, setAsfans }) => {\nconst [draftFormat, setDraftFormat] = useState(defaultFormatId ?? cube.defaultDraftFormat ?? -1);\nconst didMountRef = useRef(false);\n+ const labelText = (useAsfans) => {\n+ if (useAsfans) {\n+ if (draftFormat < 0) {\n+ return 'Standard Draft Format';\n+ }\n+ return cube.draft_formats[draftFormat].title;\n+ }\n+ return 'Count';\n+ };\n+\nuseEffect(() => {\nif (useAsfans) {\ntry {\n@@ -66,14 +79,11 @@ const AsfanDropdown = ({ cube, defaultFormatId, setAsfans }) => {\n</Label>\n</Col>\n<Col>\n- {useAsfans && (\n- <InputGroup className=\"mb-3\">\n- <InputGroupAddon addonType=\"prepend\">\n- <InputGroupText>Draft Format: </InputGroupText>\n- </InputGroupAddon>\n- <UncontrolledDropdown>\n- <DropdownToggle caret nav>\n- {draftFormat < 0 ? 'Standard Draft Format' : cube.draft_formats[draftFormat].title}\n+ <Form inline>\n+ Draft Format:\n+ <UncontrolledDropdown disabled={!useAsfans} className=\"ml-2\">\n+ <DropdownToggle caret={useAsfans} color={useAsfans ? 'success' : 'disabled'}>\n+ {labelText(useAsfans)}\n</DropdownToggle>\n<DropdownMenu>\n<DropdownItem onClick={() => setDraftFormat(-1)}>Standard Draft Format</DropdownItem>\n@@ -85,8 +95,7 @@ const AsfanDropdown = ({ cube, defaultFormatId, setAsfans }) => {\n))}\n</DropdownMenu>\n</UncontrolledDropdown>\n- </InputGroup>\n- )}\n+ </Form>\n</Col>\n</Row>\n);\n",
        "org_msg": "Visual improvments.",
        "sim_msg": "Improve drafts page layout",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -26,12 +26,10 @@ let DraftRow = (props) => {\nDraftRow = connect(() => ({}), { deleteDraft })(DraftRow);\nconst DraftList = ({ editor: { draftPosts } }) =>\n- (\n<div className=\"main-panel\">\n<Header />\n- <div className=\"my-3\">\n+ <div className=\"my-3 container container-small\">\n<h1 className=\"text-xs-center\">Drafts</h1>\n- <div className=\"container\">\n{ _.size(draftPosts) === 0 &&\n<h3 className=\"text-xs-center\">\nYou don't have any draft saved.\n@@ -41,8 +39,6 @@ const DraftList = ({ editor: { draftPosts } }) =>\n<DraftRow key={key} data={draft.postData} id={key} />)\n}\n</div>\n- </div>\n- </div>\n- );\n+ </div>;\nexport default connect(state => ({ editor: state.editor }))(DraftList);\n",
        "chatgpt_cot": "Add method labelText to AsfanDropdown to improve readability and maintainability of the code. Also, refactor the Draft Format display for better user experience."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1059,7 +1059,7 @@ function bulkuploadCSV(req, res, cards, cube) {\nset: split[4].toUpperCase(),\ncollector_number: split[5],\nstatus: split[6],\n- tags: split[7].split(',')\n+ tags: split[7] && split[7].length > 0 ? split[7].split(',') : [],\n};\nlet potentialIds = carddb.allIds(card);\n",
        "org_msg": "Fix empty tags on CSV import.",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "Fix issue with tags in bulkuploadCSV function in cube_routes.js. Added condition to handle empty tags array to prevent potential error."
    },
    {
        "org_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -55,14 +55,16 @@ place you should look.\nwhen you notice a bug, first look for an existing issue. if exists, comment,\nelse open new\n+if there is no issue for a given feature request or bug, it was discovered\n+ either minutes ago or not at all.\nwhen there's an important update related to a bug, for example you noticed\na new replication case, add a comment to the issue indicating that\n## How we use GitHub pull requests\n-WIP\n+WIP - useful for sharing progress, incremental feedback\nchecklists\n-description\n+description - makes review easier\nwhen closed, make issues for hanging threads\ncode review - line comments\n",
        "org_msg": "add a few more notes",
        "sim_msg": "Update pull_request_template.md\nAdd more comments",
        "sim_diff": "diff --git a/.github/pull_request_template.md b/.github/pull_request_template.md <!-- For feature, feature enhancement or bug fix, create an issue first and finish To Do List there -->\n+<!-- Anything doesn't work as expected is a bug, including code, doc and test -->\nFor #\n<!-- For other PRs without open issue -->\n#### Background\n",
        "chatgpt_cot": "\"Add guidelines for creating new issues and updating existing ones to CONTRIBUTING.md\""
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -361,7 +361,6 @@ function getLabelsRaw(cube, sort) {\nlabels.push('No Price Available');\nreturn labels;\n} else if (sort === 'Devotion to White') {\n-\n} else if (sort == 'Unsorted') {\nreturn ['All'];\n} else if (sort == 'Elo') {\n",
        "org_msg": "Run prettier on devotion changes.",
        "sim_msg": "set inital sort type",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -124,6 +124,7 @@ list.drawList = function() {\n}\n}\n} else {\n+ $('#curr-sort-type').text(config.localization[config.language][config.sort_options[0]])\nfor(var i=0; i<numberOfOptions; i++) {\naddSortOptionDropdownEntry(config.sort_options[i])\n}\n@@ -163,7 +164,7 @@ list.fit_list_height = function() {\nlet addSortOptionDropdownEntry = function(sort_option) {\nlet entry = sortDropdownEntryTemplate({\nsort_by_string: config.localization[config.language].sort_by_label,\n- sorter_label: config.localization[config.language][sort_option]\n+ sorter_label: config.localization[config.language][sort_option],\n})\nvar newEntry = $(entry).appendTo('#sort-menu-entries')\nnewEntry.on(\"click\", () => {\n",
        "chatgpt_cot": "Remove unnecessary condition for 'Devotion to White' sort in Sort.js."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -147,8 +147,8 @@ function getSortFn(bot) {\n}\nasync function buildDeck(cards) {\n- const nonlands = cards.filter((card) => !card.type_line.toLowerCase().includes('land'));\n- const lands = cards.filter((card) => card.type_line.toLowerCase().includes('land'));\n+ const nonlands = cards.filter((card) => !card.details.type.toLowerCase().includes('land'));\n+ const lands = cards.filter((card) => card.details.type.toLowerCase().includes('land'));\nconst colors = botColors(null, null, cards, null);\nconst sortFn = getSortFn(colors);\n@@ -169,7 +169,7 @@ async function buildDeck(cards) {\nfor (const card of main) {\nlet index = Math.min(card.cmc ?? 0, 7);\n- if (!card.type_line.toLowerCase().includes('creature')) {\n+ if (!card.details.type.toLowerCase().includes('creature')) {\nindex += 8;\n}\ndeck[index].push(card);\n@@ -279,7 +279,6 @@ async function finish() {\ndraft.seats[i].drafted = decks[i].deck;\ndraft.seats[i].sideboard = decks[i].sideboard;\nconst colors = botColors(null, null, draft.seats[i].pickorder, cards);\n- console.log(i, colors);\ndraft.seats[i].name = `Bot ${i + 1}: ${colors.join(', ')}`;\ndraft.seats[i].description = `This deck was drafted by a bot with color preference for ${colors.join('')}.`;\n}\n",
        "org_msg": "Fixed an issue where drafts wouldn't be built",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "Refactor Draft.js for better card filtering and color sorting. Fix compilation issues and improve code readability for deck building functionality."
    },
    {
        "org_diff": "diff --git a/src/cube_playtest.js b/src/cube_playtest.js @@ -250,9 +250,9 @@ class CubePlaytest extends Component {\n}\nconst canEdit = document.getElementById('canEdit').hasAttribute('value');\n-const decks = JSON.parse(document.getElementById('deckInput').value);\n+const decks = JSON.parse(document.getElementById('deckInput').value || '[]');\nconst cubeID = document.getElementById('cubeID').value;\n-const draftFormats = JSON.parse(document.getElementById('draftFormats').value);\n+const draftFormats = JSON.parse(document.getElementById('draftFormats').value || '[]');\nconst element = <CubePlaytest canEdit={canEdit} decks={decks} cubeID={cubeID} draftFormats={draftFormats} />;\nconst wrapper = document.getElementById('react-root');\nwrapper ? ReactDOM.render(element, wrapper) : false;\n",
        "org_msg": "Fix bug when no draft formats or decks.",
        "sim_msg": "Reset board transformations on file load",
        "sim_diff": "diff --git a/src/components/App.js b/src/components/App.js @@ -696,7 +696,8 @@ class App extends Component {\nrepresentedFilename: null,\ngameIndex: 0,\ngameTrees,\n- gameCurrents: gameTrees.map(_ => ({}))\n+ gameCurrents: gameTrees.map(_ => ({})),\n+ boardTransformation: ''\n})\nlet [firstTree, ] = gameTrees\n",
        "chatgpt_cot": "\"Fix JSON parsing issue in CubePlaytest file\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1564,7 +1564,7 @@ function shuffle(a) {\nreturn a;\n}\n-router.post('/startsealed/:id', async (req, res) => {\n+router.post('/startsealed/:id', body('packs').toInt({ min: 1, max: 16 }), body('cards').toInt(), async (req, res) => {\ntry {\nconst user = await User.findById(req.user);\n@@ -1618,7 +1618,11 @@ router.post('/startsealed/:id', async (req, res) => {\nindex += 8;\n}\n+ if (pool[index]) {\npool[index].push(card);\n+ } else {\n+ pool[0].push(card);\n+ }\n}\nconst deck = new Deck();\n",
        "org_msg": "add body parser",
        "sim_msg": "add: loadtest changes",
        "sim_diff": "diff --git a/loadtest/loadTest.js b/loadtest/loadTest.js @@ -33,7 +33,7 @@ const createReq = (id, jwt) => {\nexport const mytest = async i => {\ntry {\n- const gun = global.Gun({ file: '../../loadtest' + i + '.json', peers: [`${Config.serverUrl}/gun`] })\n+ const gun = global.Gun({ file: './loadtest/loadtest' + i + '.json', peers: [`${Config.serverUrl}/gun`] })\nlet mnemonic = bip39.generateMnemonic()\nlet wallet = new GoodWallet({ mnemonic })\nawait wallet.ready\n@@ -48,7 +48,7 @@ export const mytest = async i => {\nvar randomCard = faker.phone.phoneNumber('+97250#######')\n// console.log(randomCard, randomName, randomEmail)\nlet adduser = await Promise.race([\n- Timeout(10000).then(x => {\n+ Timeout(20000).then(x => {\nthrow new Error('adduser timeout')\n}),\nAPI.addUser({\n@@ -60,9 +60,15 @@ export const mytest = async i => {\n])\nconsole.log('/user/add:', adduser.data)\nif (adduser.data.ok !== 1) throw new Error('adduser failed')\n+ await storage.setProfile({\n+ fullName: randomName,\n+ email: randomEmail,\n+ mobile: randomCard,\n+ walletAddress: wallet.account\n+ })\nlet fr = await Promise.race([\n- Timeout(10000).then(x => {\n- throw new Error('adduser timeout')\n+ Timeout(20000).then(x => {\n+ throw new Error('FR timeout')\n}),\ncreateReq(wallet.getAccountForType('zoomId'), creds.jwt).then(r => r.json())\n])\n@@ -76,25 +82,27 @@ export const mytest = async i => {\nif (!r) rej(new Error('Empty gun data'))\nelse if (++gunres === 1) res()\n})\n- // gun.get('users/bymobile').open(r => {\n- // if (r.err) rej(new Error(r.err))\n- // else if (++gunres === 2) res()\n- // })\n- // gun.get('users/bywalletAddress').open(r => {\n- // if (r.err) rej(new Error(r.err))\n- // else if (++gunres === 3) res()\n- // })\n+ // // gun.get('users/bymobile').open(r => {\n+ // // if (r.err) rej(new Error(r.err))\n+ // // else if (++gunres === 2) res()\n+ // // })\n+ // // gun.get('users/bywalletAddress').open(r => {\n+ // // if (r.err) rej(new Error(r.err))\n+ // // else if (++gunres === 3) res()\n+ // // })\n})\n} catch (error) {\nconsole.log(`Test failed`, error)\nfailedTests[error.message] !== undefined ? (failedTests[error.message] += 1) : (failedTests[error.message] = 1)\n+ } finally {\n+ // fs.unlinkSync('./loadtest/loadtest' + i + '.json')\n}\n}\nconst run = async numTests => {\nlet promises = []\nfor (let i = 0; i < numTests; i++) {\npromises[i] = mytest(i)\n- await Timeout(5000)\n+ await Timeout(10000)\n}\nconsole.log('Waiting for tests to finish...')\nawait Promise.all(promises)\n",
        "chatgpt_cot": "\"Add validation for packs and cards input in startsealed route to prevent invalid input and ensure proper functionality of the route.\""
    },
    {
        "org_diff": "diff --git a/src/components/GroupModal.js b/src/components/GroupModal.js @@ -229,14 +229,28 @@ const GroupModal = ({ cubeID, canEdit, children, ...props }) => {\n<UncontrolledAlert color={color}>{message}</UncontrolledAlert>\n))}\n<Row>\n- <Col xs=\"4\" style={{ maxHeight: '35rem', overflow: 'scroll' }}>\n- <ListGroup className=\"list-outline\">\n+ <Col xs=\"4\" className=\"d-flex flex-column\" style={{ maxHeight: '35rem' }}>\n+ <Row noGutters className=\"w-100\" style={{ overflow: 'scroll', flexShrink: 1 }}>\n+ <ListGroup className=\"list-outline w-100\">\n{cards.map((card) => (\n<AutocardListItem key={card.index} card={card} noCardModal inModal>\n<Button close className=\"mr-1\" data-index={card.index} onClick={handleRemoveCard} />\n</AutocardListItem>\n))}\n</ListGroup>\n+ </Row>\n+ <Row noGutters>\n+ {Number.isFinite(totalPrice) && (\n+ <TextBadge name=\"Price\" className=\"mt-2 mr-2\">\n+ <Tooltip text=\"TCGPlayer Market Price\">${Math.round(totalPrice).toLocaleString()}</Tooltip>\n+ </TextBadge>\n+ )}\n+ {Number.isFinite(totalPriceFoil) && (\n+ <TextBadge name=\"Foil\" className=\"mt-2 mr-2\">\n+ <Tooltip text=\"TCGPlayer Market Price\">${Math.round(totalPriceFoil).toLocaleString()}</Tooltip>\n+ </TextBadge>\n+ )}\n+ </Row>\n</Col>\n<Col xs=\"8\">\n<Form>\n@@ -336,18 +350,6 @@ const GroupModal = ({ cubeID, canEdit, children, ...props }) => {\n</Form>\n</Col>\n</Row>\n- <Row noGutters>\n- {Number.isFinite(totalPrice) && (\n- <TextBadge name=\"Price\" className=\"mt-2 mr-2\">\n- <Tooltip text=\"TCGPlayer Market Price\">${Math.round(totalPrice).toLocaleString()}</Tooltip>\n- </TextBadge>\n- )}\n- {Number.isFinite(totalPriceFoil) && (\n- <TextBadge name=\"Foil\" className=\"mt-2 mr-2\">\n- <Tooltip text=\"TCGPlayer Market Price\">${Math.round(totalPriceFoil).toLocaleString()}</Tooltip>\n- </TextBadge>\n- )}\n- </Row>\n</ModalBody>\n<ModalFooter>\n<Button color=\"danger\" onClick={handleRemoveAll}>\n",
        "org_msg": "Fix display size of group modal list.",
        "sim_msg": "fix(plancard.content): update currency approach to not break current use",
        "sim_diff": "diff --git a/packages/yoga/src/Card/native/PlanCard/Content.jsx b/packages/yoga/src/Card/native/PlanCard/Content.jsx import React from 'react';\nimport styled, { css } from 'styled-components';\n-import { string, shape, node } from 'prop-types';\n+import { string, node } from 'prop-types';\nimport Content from '../Card/Content';\nimport Text from '../../../Text';\n@@ -58,6 +58,7 @@ const PlanCardContent = ({\ntitle,\ndescription,\ncurrency,\n+ suffix,\nprice,\nperiod,\nchildren,\n@@ -67,15 +68,15 @@ const PlanCardContent = ({\n{title && <Title>{title}</Title>}\n{description && <Description numberOfLines={2}>{description}</Description>}\n<Price>\n- {currency.prefix && (\n+ {currency && (\n<Currency align=\"flex-start\">\n- <Text.Small>{currency.prefix}</Text.Small>\n+ <Text.Small>{currency}</Text.Small>\n</Currency>\n)}\n{price && <Text.H3>{price}</Text.H3>}\n{period && (\n<EnhancePrice align=\"flex-end\">\n- <Text.Small>{`${currency.suffix || ''}${period}`}</Text.Small>\n+ <Text.Small>{`${suffix || ''}${period}`}</Text.Small>\n</EnhancePrice>\n)}\n</Price>\n@@ -87,10 +88,8 @@ PlanCardContent.propTypes = {\n/** Plan name */\ntitle: string.isRequired,\n/** currency of the current country */\n- currency: shape({\n- prefix: string,\n+ currency: string.isRequired,\nsuffix: string,\n- }).isRequired,\nprice: string.isRequired,\n/** period that this price will be charged */\nperiod: string.isRequired,\n@@ -101,6 +100,7 @@ PlanCardContent.propTypes = {\nPlanCardContent.defaultProps = {\nchildren: null,\ndescription: null,\n+ suffix: null,\n};\nPlanCardContent.displayName = 'PlanCard.Content';\n",
        "chatgpt_cot": "\"Refactor GroupModal to improve layout and remove duplicate code for displaying card prices and tooltips.\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cards.test.js b/__tests__/serverjs/cards.test.js @@ -42,6 +42,20 @@ test(\"initializeCardDb loads files properly\", () => {\n});\n});\n+test(\"unloadCardDb unloads the card database correctly\", () => {\n+ expect.assertions(6);\n+ var promise = carddb.initializeCardDb(fixturesPath, true);\n+ return promise.then(function() {\n+ carddb.unloadCardDb();\n+ expect(carddb.cardtree).toBe(undefined);\n+ expect(carddb.imagedict).toBe(undefined);\n+ expect(carddb.cardimages).toBe(undefined);\n+ expect(carddb.cardnames).toBe(undefined);\n+ expect(carddb.full_names).toBe(undefined);\n+ expect(carddb.nameToId).toBe(undefined);\n+ });\n+});\n+\ntest(\"cardFromId returns a well-formed card object\", () => {\nexpect.assertions(1);\nconst _id = \"ee4d196e-7ce4-4dc1-9d58-102a89aca2a4\";\n",
        "org_msg": "explicitly test unloadCardDb",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "\"Add test for unloading card database correctly to cards.test.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -4,7 +4,7 @@ const request = require('request');\nconst fs = require('fs');\nconst rp = require('request-promise');\nconst cheerio = require('cheerio');\n-var cubefn, { addAutocard, generatePack, sanitize, setCubeType } = require('../serverjs/cubefn.js');\n+var { addAutocard, generatePack, sanitize, setCubeType, cardsAreEquivalent } = require('../serverjs/cubefn.js');\nvar analytics = require('../serverjs/analytics.js');\nvar draftutil = require('../serverjs/draftutil.js');\nvar carddb = require('../serverjs/cards.js');\n",
        "org_msg": "destructure cubefn",
        "sim_msg": "routes/index.js linting complete",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js var fs = require(\"fs\");\nvar path = require(\"path\");\nvar log = require(\"../log\").logger(\"routes\");\n-var restify = require(\"restify\");\n-var util = require(\"../util\");\n-var authentication = require(\"../authentication\");\nvar config = require(\"../config\");\nvar getStaticServeFunction = require(\"../static\");\n@@ -12,13 +9,13 @@ module.exports = function (server) {\nvar routeDir = __dirname;\nvar files = fs.readdirSync(routeDir);\nfiles.forEach(function (file) {\n- filePath = path.resolve(\"./\", routeDir, file);\n+ var filePath = path.resolve(\"./\", routeDir, file);\nif (\npath.extname(filePath) == \".js\" &&\npath.basename(filePath) != \"index.js\"\n) {\ntry {\n- routes = require(filePath);\n+ var routes = require(filePath);\nif (typeof routes == \"function\") {\nroutes(server);\nlog.debug(' Loaded routes from \"' + filePath + '\"');\n",
        "chatgpt_cot": "Add 'cardsAreEquivalent' function to cubefn.js and update imports in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -167,6 +167,16 @@ const apiLimiter = rateLimit({\n});\napp.use('/cube/api/cubeJSON', apiLimiter);\n+// check for downtime\n+\n+if (process.env.DOWNTIME_ACTIVE === 'true') {\n+ app.use((req, res) => {\n+ return render(req, res, 'DownTimePage', {\n+ title: 'Down for Maintenance',\n+ });\n+ });\n+}\n+\n// Route files; they manage their own CSRF protection\napp.use('', require('./routes/root'));\n",
        "org_msg": "Add downtime from env var",
        "sim_msg": "thanks andrew",
        "sim_diff": "diff --git a/server.js b/server.js @@ -108,10 +108,6 @@ app.prepare().then(async () => {\nconst isBucketsAvailable = await Utilities.checkTextile();\n- return res.redirect(\"/maintenance\");\n-\n- /*\n-\nif (!isBucketsAvailable && Environment.IS_PRODUCTION) {\nreturn res.redirect(\"/maintenance\");\n}\n@@ -132,8 +128,6 @@ app.prepare().then(async () => {\nmobile,\nresources: EXTERNAL_RESOURCES,\n});\n-\n- */\n});\nserver.get(\"/_/integration-page\", async (req, res) => {\n",
        "chatgpt_cot": "Add downtime check to app.js to display maintenance page if DOWNTIME_ACTIVE is true. Fix potential downtime issue."
    },
    {
        "org_diff": "diff --git a/src/markdown/parser.js b/src/markdown/parser.js @@ -16,14 +16,13 @@ const VALID_SYMBOLS = 'wubrgcmtsqepxyz/-0123456789';\nconst BASE_PLUGINS = [\ncardrow,\ncentering,\n- breaks,\nmath,\ncardlink,\n[gfm, { singleTilde: false }],\n[symbols, { allowed: VALID_SYMBOLS }],\n];\n-export const LIMITED_PLUGINS = [...BASE_PLUGINS, userlink];\n+export const LIMITED_PLUGINS = [...BASE_PLUGINS, userlink, breaks];\nexport const ALL_PLUGINS = [...LIMITED_PLUGINS, slug, headings];\n",
        "org_msg": "breaks is not an essential plugin",
        "sim_msg": "remove hash links",
        "sim_diff": "diff --git a/components/system/components/Markdown.js b/components/system/components/Markdown.js @@ -11,7 +11,7 @@ export const Markdown = ({ md, options }) => {\n{\nunified()\n.use(parse)\n- .use(linkifyRegex(/[@#](\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g)) // @user #tag\n+ .use(linkifyRegex(/@(\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g)) // @user\n.use(linkifyRegex(/^(https?):\\/\\/[^\\s$.?#].[^\\s]*$/gm)) // http(s) links\n.use(remark2react, options)\n.processSync(md).result\n",
        "chatgpt_cot": "Add \"breaks\" plugin to LIMITED_PLUGINS array to include line breaks in the markdown parser."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2448,7 +2448,7 @@ router.post(\nmax: 100,\n}),\nbody('name', 'Cube name may not use profanity.').custom((value) => !util.hasProfanity(value)),\n- body('urlAlias', 'Custom URL must contain only alphanumeric characters or underscores.').matches(/^[A-Za-z0-9]*$/),\n+ body('urlAlias', 'Custom URL must contain only alphanumeric characters or underscores.').matches(/^[A-Za-z0-9_]*$/),\nbody('urlAlias', `Custom URL may not be longer than 100 characters.`).isLength({\nmax: 100,\n}),\n",
        "org_msg": "added underscore to filter",
        "sim_msg": "Normalize entity header URL when space is limited.",
        "sim_diff": "diff --git a/assets/js/components/EntityHeader.js b/assets/js/components/EntityHeader.js @@ -46,6 +46,7 @@ import { CORE_SITE } from '../googlesitekit/datastore/site/constants';\nimport BackspaceIcon from '../../svg/keyboard-backspace.svg';\nimport { CORE_LOCATION } from '../googlesitekit/datastore/location/constants';\nimport Link from './Link';\n+import { normalizeURL } from '../util/urls';\nconst { useSelect, useDispatch } = Data;\nconst EntityHeader = () => {\n@@ -79,12 +80,17 @@ const EntityHeader = () => {\nconst maxChars = ( availableWidth * 2 ) / fontSize;\nif ( maxChars < entityURL.length ) {\n- const extraChars = entityURL.length - maxChars + 4; // 4 is the length of \"/...\".\nconst shortenedURL = new URL( entityURL );\n+ // We will further shorten the URL below by removing protocol/www (normalizing).\n+ const extraChars =\n+ normalizeURL( shortenedURL.toString() ).length -\n+ maxChars +\n+ 4; // 4 is the length of \"/...\".\nconst origin = shortenedURL.origin;\nconst restOfURL = shortenedURL.toString().replace( origin, '' );\nconst newRestOfURL = '/...' + restOfURL.substr( extraChars );\n- setURL( origin + newRestOfURL );\n+\n+ setURL( normalizeURL( origin ) + newRestOfURL );\n} else {\nsetURL( entityURL );\n}\n",
        "chatgpt_cot": "Fix validation for custom URL in cube routes to allow underscores."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -1660,7 +1660,10 @@ function renderCurveView() {\n{\nif(groups[group_label][label])\n{\n- res += '<h6>'+label+'</h6>';\n+ var labelCount = Object.values(groups[group_label][label]).map(function(group) {\n+ return group ? group.length : 0;\n+ }).reduce(function(sum, ct){ return sum + ct; }, 0);\n+ res += '<h6>'+label+ ' ('+ labelCount + ')</h6>';\nres += '<div class=\"row even-cols\">';\nvar colWidth = Math.max(10,100.0 / getLabels('CMC2').length);\ngetLabels('CMC2').forEach(function(col_label, col_index)\n",
        "org_msg": "Added creature/non-creature counts to curve view.",
        "sim_msg": "New grounding logic",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -1916,7 +1916,7 @@ function animate(timestamp, frame) {\ncubeMesh.quaternion.setFromUnitVectors(localVector5.set(0, 1, 0), normal);\ncubeMesh.visible = true;\n- if (d < minHeight && d < groundedDistance) {\n+ if (velocity.y <= 0 && d < minHeight && d < groundedDistance) {\ngroundedDistance = d;\n}\n} else {\n@@ -1929,7 +1929,7 @@ function animate(timestamp, frame) {\nif (isFinite(groundedDistance)) {\nreturn -groundedDistance + minHeight;\n} else {\n- return null;\n+ return 0;\n}\n/* const {rig, rigPackage} = pe;\n@@ -1959,8 +1959,8 @@ function animate(timestamp, frame) {\nif (offset) {\npe.camera.position.y += offset;\nvelocity.y = 0;\n- jumpState = null;\n}\n+ jumpState = offset === 0;\npe.setRigMatrix(null);\n} else if (selectedTool === 'thirdperson') {\nconst oldVelocity = velocity.clone();\n@@ -1981,8 +1981,8 @@ function animate(timestamp, frame) {\npe.camera.updateMatrixWorld();\nlocalVector.y += offset;\nvelocity.y = 0;\n- jumpState = null;\n}\n+ jumpState = offset === 0;\nif (oldVelocity.lengthSq() > 0) {\nlocalQuaternion.setFromUnitVectors(localVector3.set(0, 0, -1), localVector4.set(oldVelocity.x, 0, oldVelocity.z).normalize());\n@@ -2007,8 +2007,8 @@ function animate(timestamp, frame) {\npe.camera.updateMatrixWorld();\nlocalVector.y += offset;\nvelocity.y = 0;\n- jumpState = null;\n}\n+ jumpState = offset === 0;\nif (oldVelocity.lengthSq() > 0) {\nlocalQuaternion.setFromUnitVectors(localVector3.set(0, 0, -1), localVector4.set(oldVelocity.x, 0, oldVelocity.z).normalize());\n@@ -2034,8 +2034,8 @@ function animate(timestamp, frame) {\npe.camera.updateMatrixWorld();\nlocalVector.y += offset;\nvelocity.y = 0;\n- jumpState = null;\n}\n+ jumpState = offset === 0;\nif (oldVelocity.lengthSq() > 0) {\nlocalQuaternion.setFromUnitVectors(localVector3.set(0, 0, -1), localVector4.set(oldVelocity.x, 0, oldVelocity.z).normalize());\n@@ -2246,7 +2246,7 @@ const _resetKeys = () => {\nkeys[k] = false;\n}\n};\n-let jumpState = null;\n+let jumpState = false;\nwindow.addEventListener('keydown', e => {\nswitch (e.which) {\ncase 49: // 1\n@@ -2324,9 +2324,7 @@ window.addEventListener('keydown', e => {\ncase 32: { // space\nif (document.pointerLockElement) {\nif (!jumpState) {\n- jumpState = {\n- air: true,\n- };\n+ jumpState = true;\nvelocity.y += 5;\n}\n}\n",
        "chatgpt_cot": "Enhance renderCurveView() to display label count in parentheses for each group in editcube.js."
    },
    {
        "org_diff": "diff --git a/src/topcards.js b/src/topcards.js @@ -7,7 +7,7 @@ import SortableTable from './components/SortableTable';\nimport withAutocard from './components/WithAutocard';\nimport { encodeName } from './util/Card';\n-const AutocardTd = withAutocard('td');\n+const AutocardA = withAutocard('a');\nclass TopCards extends Component {\nconstructor(props) {\n@@ -43,9 +43,11 @@ class TopCards extends Component {\n[]\n) : (\n<tr key={name}>\n- <AutocardTd front={img} back={img_flip || undefined}>\n- <a href={'/tool/card/' + encodeName(name)}>{name}</a>\n- </AutocardTd>\n+ <td>\n+ <AutocardA front={img} back={img_flip || undefined} href={'/tool/card/' + encodeName(name)}>\n+ {name}\n+ </AutocardA>\n+ </td>\n<td>{rating === null ? 'None' : ((1 - rating) * 100).toFixed(0)}</td>\n<td>{elo === null ? '' : elo.toFixed(0)}</td>\n<td>{picks === null ? '' : picks}</td>\n",
        "org_msg": "Added autocard only to the inner text",
        "sim_msg": "added in formatted time display and position of all elements",
        "sim_diff": "diff --git a/src/components/EventCard.js b/src/components/EventCard.js @@ -7,25 +7,16 @@ import {\ncardBgColor,\ntextColor\n} from \"../constants/colors\";\n-import format from \"date-fns/format\";\ntype Props = {\nname: string,\nlocationName: string,\ndate: string,\nprice: string,\n- startTime: integer,\n- endTime: integer\n+ startTime: integer\n};\n-const EventCard = ({\n- date,\n- name,\n- locationName,\n- endTime,\n- startTime,\n- price\n-}: Props) => (\n+const EventCard = ({ date, name, locationName, startTime, price }: Props) => (\n<View style={styles.eventCard}>\n<View style={styles.imageContainer}>\n<View style={styles.priceTagContainer}>\n@@ -34,19 +25,17 @@ const EventCard = ({\n</View>\n<View style={styles.eventCardDetails}>\n<View style={styles.heartButtonContainer}>\n- <Text ellipsizeMode=\"tail\" numberOfLines={1} style={styles.eventDate}>\n- {date}\n+ <Text ellipsizeMode=\"tail\" numberOfLines={1} style={styles.eventTime}>\n+ {startTime}\n</Text>\n<View>\n- <Text>heart</Text>\n+ <Text style={styles.heartIcon}>heart</Text>\n</View>\n</View>\n<Text ellipsizeMode=\"tail\" numberOfLines={1} style={styles.eventName}>\n{name}\n</Text>\n- <Text ellipsizeMode=\"tail\" numberOfLines={1} style={styles.eventTime}>\n- {startTime}\n- </Text>\n+\n<Text ellipsizeMode=\"tail\" numberOfLines={1} style={styles.eventLocation}>\n{locationName}\n</Text>\n@@ -72,9 +61,12 @@ const styles = StyleSheet.create({\nbackgroundColor: priceTagBgColor\n},\nheartButtonContainer: {\n+ flexDirection: \"row\",\n+ justifyContent: \"space-between\"\n+ },\n+ heartIcon: {\nwidth: 44,\n- height: 44,\n- flexDirection: \"row\"\n+ height: 44\n},\neventCardDetails: {\nflex: 1,\n",
        "chatgpt_cot": "Refactor AutocardTd to AutocardA to improve code readability and consistency within TopCards.js. Fixes rendering issues and improves maintainability."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -75,15 +75,8 @@ winston.configure({\nconsole.log(`Logging to ${errorFile.name} and ${combinedFile.name}`);\n-const ca = [fs.readFileSync('cert/rds-combined-ca-bundle.pem')];\n-\n-console.log(ca);\n-\n// Connect db\nmongoose.connect(process.env.MONGODB_URL, {\n- sslValidate: false,\n- ssl: true,\n- sslCA: ca,\nuseCreateIndex: true,\nuseNewUrlParser: true,\nuseUnifiedTopology: true,\n",
        "org_msg": "remove ssl for documentdb",
        "sim_msg": "if HD under min req, set internal storage to 5GB\nCR fixes",
        "sim_diff": "diff --git a/src/agent/block_store_services/block_store_mongo.js b/src/agent/block_store_services/block_store_mongo.js const _ = require('lodash');\nconst mongodb = require('mongodb');\nconst mongo_client = require('../../util/mongo_client');\n+\nconst P = require('../../util/promise');\n-// const RpcError = require('../../rpc/rpc_error');\nconst dbg = require('../../util/debug_module')(__filename);\n+const os_utils = require('../../util/os_utils');\n+const size_utils = require('../../util/size_utils');\nconst buffer_utils = require('../../util/buffer_utils');\nconst BlockStoreBase = require('./block_store_base').BlockStoreBase;\n+\n+const { SERVER_MIN_REQUIREMENTS } = require('../../config');\nconst GRID_FS_BUCKET_NAME = 'mongo_internal_agent';\nconst GRID_FS_BUCKET_NAME_FILES = 'mongo_internal_agent.files';\nconst GRID_FS_BUCKET_NAME_CHUNKS = 'mongo_internal_agent.chunks';\n@@ -22,6 +26,7 @@ class BlockStoreMongo extends BlockStoreBase {\nsuper(options);\nthis.base_path = options.mongo_path;\nthis.blocks_path = this.base_path + '/blocks_tree';\n+ this._STORE_LIMIT = 5 * size_utils.GIGABYTE;\n}\n_gridfs() {\n@@ -57,6 +62,18 @@ class BlockStoreMongo extends BlockStoreBase {\n});\n}\n+ set_mongo_store_limit() {\n+ return os_utils.get_raw_storage()\n+ .then(total => {\n+ dbg.log0(`total disk size ${total}, current used ${this._usage}`);\n+ if (total < SERVER_MIN_REQUIREMENTS.STORAGE_GB * size_utils.GIGABYTE) {\n+ this._STORE_LIMIT = 5 * size_utils.GIGABYTE;\n+ } else {\n+ this._STORE_LIMIT = 30 * size_utils.GIGABYTE;\n+ }\n+ });\n+ }\n+\ninit() {\nreturn mongo_client.instance().connect()\n.then(() => this._gridfs())\n@@ -66,18 +83,19 @@ class BlockStoreMongo extends BlockStoreBase {\nthis._usage = usage_metadata;\ndbg.log0('found usage data usage_data = ', this._usage);\n}\n- }, err => {\n+ })\n+ .then(() => this.set_mongo_store_limit())\n+ .catch(err => {\ndbg.error('got error on init:', err);\n+ throw err;\n});\n}\nget_storage_info() {\n- // Actually will be used 30GB since we have 10GB reserve\n- const GIGABYTE_30 = 30 * 1024 * 1024 * 1024;\nreturn P.resolve(this._get_usage())\n.then(usage => ({\n- total: Math.max(GIGABYTE_30, usage.size),\n- free: Math.max(GIGABYTE_30 - usage.size, 0),\n+ total: Math.max(this._STORE_LIMIT, usage.size),\n+ free: Math.max(this._STORE_LIMIT - usage.size, 0),\nused: usage.size\n}));\n}\n",
        "chatgpt_cot": "Remove SSL configuration for database connection and update logging configuration."
    },
    {
        "org_diff": "diff --git a/src/drafting/draftbots.js b/src/drafting/draftbots.js @@ -120,10 +120,12 @@ export const getSynergy = (index1, index2, cards) => {\nexport const considerInCombination = (combination, card) =>\ncard && COLOR_INCLUSION_MAP[combination.join('')][(cardColorIdentity(card) ?? []).join('')];\n+const BASICS_MAP = { w: 'Plains', u: 'Island', b: 'Swamp', r: 'Mountain', g: 'Forest' };\nexport const isPlayableLand = (colors, card) =>\nconsiderInCombination(colors, card) ||\ncolors.filter((c) => cardColorIdentity(card).includes(c)).length > 1 ||\n- (FETCH_LANDS[cardName(card)] && FETCH_LANDS[cardName(card)].some((c) => colors.includes(c)));\n+ (FETCH_LANDS[cardName(card)] && FETCH_LANDS[cardName(card)].some((c) => colors.includes(c))) ||\n+ colors.some((color) => cardType(card).toLowerCase().includes(BASICS_MAP[color.toLowerCase()].toLowerCase()));\n// TODO: Use learnings from draftbot optimization to make this much faster.\nconst devotionsCache = {};\n",
        "org_msg": "Use basic land counts for isPlayableLand.",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "Add BASICS_MAP for basic land types, improve isPlayableLand function for card color identity and type inclusion."
    },
    {
        "org_diff": "diff --git a/src/components/CubePreview.js b/src/components/CubePreview.js @@ -4,7 +4,7 @@ import { Card } from 'reactstrap';\nimport AspectRatioBox from 'components/AspectRatioBox';\n-const getCubeId = (cube) => cube.urlAlias || cube.shortID || cube._id;\n+const getCubeId = (cube) => cube.urlAlias || cube.shortId || cube._id;\nconst CubePreview = ({ cube }) => {\nconst [hover, setHover] = useState(false);\n",
        "org_msg": "Fix cube preview links.",
        "sim_msg": "Add mint window orbit controls",
        "sim_diff": "diff --git a/src/ObjectPreview.jsx b/src/ObjectPreview.jsx @@ -3,6 +3,8 @@ import React, {useEffect, useRef} from 'react';\nimport classnames from 'classnames';\nimport style from './ObjectPreview.module.css';\nimport dioramaManager from '../diorama.js';\n+import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls.js';\n+import {fitCameraToBoundingBox} from '../util.js';\nconst canvasWidth = 300;\nconst canvasHeight = 400;\n@@ -33,12 +35,28 @@ const ObjectPreview = ({\nlightningBackground: false,\nradialBackground: false,\nglyphBackground: false, */\n+ autoCamera: false,\n});\n- diorama.setAspect(canvasWidth / canvasHeight);\n+ const {camera} = diorama;\n+ camera.position.set(0, 0, 1);\n+ camera.updateMatrixWorld();\n+ camera.aspect = canvasWidth / canvasHeight;\n+ camera.updateProjectionMatrix();\ndiorama.addCanvas(canvas);\n+ const controls = new OrbitControls(camera, canvas);\n+ // controls.update() must be called after any manual changes to the camera's transform\n+ // camera.position.set( 0, 20, 100 );\n+\n+ const _updateControls = () => {\n+ controls.update();\n+ frame = requestAnimationFrame(_updateControls);\n+ };\n+ let frame = requestAnimationFrame(_updateControls);\n+\nreturn () => {\ndiorama.destroy();\n+ cancelAnimationFrame(frame);\n};\n}\n}, [canvasRef, object]);\n",
        "chatgpt_cot": "\"Fix getCubeId method to correctly access cube shortId property in CubePreview component\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/util.test.js b/__tests__/serverjs/util.test.js @@ -122,27 +122,6 @@ test('addCardToCube allows custom tags', () => {\nexpect(result.tags[0]).toBe('Tag');\n});\n-test('getCardImageURL returns imgUrl when defined', () => {\n- const testCard = {\n- details: {\n- image_normal: 'normal ol image',\n- },\n- imgUrl: 'an image url',\n- };\n- const result = util.getCardImageURL(testCard);\n- expect(result).toBe(testCard.imgUrl);\n-});\n-\n-test('getCardImageURL falls back to image_normal', () => {\n- const testCard = {\n- details: {\n- image_normal: 'normal ol image',\n- },\n- };\n- const result = util.getCardImageURL(testCard);\n- expect(result).toBe(testCard.details.image_normal);\n-});\n-\ntest('arraysEqual returns true for equal arrays', () => {\nconst testArrayA = [1, 2, 3, 4];\nconst testArrayB = [1, 2, 3, 4];\n",
        "org_msg": "Update util.test.js",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "\"Remove redundant getCardImageURL function from util.test.js and update addCardToCube test to allow custom tags.\""
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -130,21 +130,35 @@ router.post('/lostpasswordreset', function(req, res) {\nUser.findOne({\nemail: req.body.email\n}, function(err, user) {\n- if (user) {\n+ if (err) {\n+ console.error('Password reset find user error:', err);\n+ res.sendStatus(500);\n+ return;\n+ }\n+ if (!user) {\n+ req.flash('danger', 'No user with that email found! Are you sure you created an account?');\n+ res.render('user/passwordreset');\n+ }\nif (req.body.password2 != req.body.password) {\nreq.flash('danger', 'New passwords don\\'t match');\nres.render('user/passwordreset');\n} else {\nbcrypt.genSalt(10, function(err, salt) {\n+ if (err) {\n+ console.error('Password reset genSalt error:', err);\n+ res.sendStatus(500);\n+ return;\n+ }\nbcrypt.hash(req.body.password2, salt, function(err, hash) {\nif (err) {\n- console.log(err);\n+ console.error('Password reset hashing error:', err);\n+ res.sendStatus(500);\n} else {\nuser.password = hash;\nuser.save(function(err) {\nif (err) {\n- console.log(err)\n- return;\n+ console.error('Password reset user save error:', err)\n+ res.sendStatus(500);\n} else {\nreq.flash('success', 'Password updated succesfully');\nreturn res.redirect('/user/login');\n@@ -154,7 +168,6 @@ router.post('/lostpasswordreset', function(req, res) {\n});\n});\n}\n- }\n});\n}\n});\n",
        "org_msg": "Improve password reset errors.\nBoth logging and user error messages were essentially nonexistent.",
        "sim_msg": "allow changing of password and other user details simultaneously",
        "sim_diff": "diff --git a/pages/api/users/update.js b/pages/api/users/update.js @@ -26,8 +26,6 @@ export default async (req, res) => {\nreturn res.status(500).send({ decorator: \"SERVER_USER_UPDATE_USER_NOT_FOUND\", error: true });\n}\n- let unsafeResponse;\n-\nif (req.body.data.username) {\nconst existing = await Data.getUserByUsername({\nusername: req.body.data.username.toLowerCase(),\n@@ -77,7 +75,8 @@ export default async (req, res) => {\n}\n}\n- if (req.body.data.type == \"CHANGE_PASSWORD\") {\n+ let unsafeResponse;\n+ if (req.body.data.password) {\nif (!Validations.password(req.body.data.password)) {\nreturn res.status(500).send({ decorator: \"SERVER_INVALID_PASSWORD\", error: true });\n}\n@@ -90,12 +89,14 @@ export default async (req, res) => {\nid: user.id,\nsalt,\npassword: hash,\n+ username: req.body.data.username ? req.body.data.username.toLowerCase() : user.username,\n+ data: req.body.data.data ? { ...user.data, ...req.body.data.data } : user.data,\n});\n} else {\nunsafeResponse = await Data.updateUserById({\nid: user.id,\nusername: req.body.data.username ? req.body.data.username.toLowerCase() : user.username,\n- data: { ...user.data, ...req.body.data.data },\n+ data: req.body.data.data ? { ...user.data, ...req.body.data.data } : user.data,\n});\n}\n",
        "chatgpt_cot": "\"Fix error handling and logging in password reset function\""
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -40,6 +40,7 @@ async function matchingCards(filter) {\n...card,\nrating: history ? history.current.rating : null,\npicks: history ? history.current.picks : null,\n+ cubes: history ? history.current.cubes : null,\n};\n});\n}\n",
        "org_msg": "re-added cubes info",
        "sim_msg": "set filtered_out to false for everything before redoing the filtering",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -539,7 +539,7 @@ list.filterList = function(search_words, filter_param) {\nnormally_visible_map_items.style(\"display\", \"inline\");\n//set everything that should be visible to unfiltered\n- selected_list_items.each(function (d) {\n+ all_list_items.each(function (d) {\nd.filtered_out = false\n})\n@@ -547,11 +547,11 @@ list.filterList = function(search_words, filter_param) {\nmediator.publish(\"record_action\", \"none\", \"filter\", config.user_id, \"filter_list\", null, \"search_words=\" + search_words + \"filter_param=\"+filter_param);\n// Now actually do the filtering (i.e. remove some object from list and map)\n- this.hideEntriesByWord(selected_list_items, search_words);\n- this.hideEntriesByWord(normally_visible_map_items, search_words);\n+ this.hideEntriesByWord(all_list_items, search_words);\n+ this.hideEntriesByWord(all_map_items, search_words);\n- this.hideEntriesByParam(selected_list_items, filter_param);\n- this.hideEntriesByParam(normally_visible_map_items, filter_param);\n+ this.hideEntriesByParam(all_list_items, filter_param);\n+ this.hideEntriesByParam(all_map_items, filter_param);\n};\n// Returns true if document has parameter or if no parameter is passed\n",
        "chatgpt_cot": "Add cubes to matchingCards function for history.current."
    },
    {
        "org_diff": "diff --git a/src/components/BlogPost.js b/src/components/BlogPost.js @@ -74,6 +74,7 @@ class BlogPost extends React.Component {\n<AgeText date={post.date}/>\n</h6>\n</CardHeader>\n+ <div style={{\"overflow\": \"auto\", \"max-height\":\"50vh\"}}>\n{(post.changelist && post.html) ?\n<Row className=\"no-gutters\">\n<Col className=\"col-12 col-l-3 col-md-3 col-sm-12\" style={{'borderRight': '1px solid #DFDFDF'}}>\n@@ -100,6 +101,7 @@ class BlogPost extends React.Component {\n}\n</CardBody>\n}\n+ </div>\n{this.props.loggedIn &&\n<CardBody className=\"px-4 pt-2 pb-0 border-top\">\n<CommentEntry id={post._id} position={[]} onPost={this.onPost}>\n",
        "org_msg": "Added scroll bar and max hieght to feed items",
        "sim_msg": "Display loading icon if post is fetching",
        "sim_diff": "diff --git a/src/post/Post.js b/src/post/Post.js @@ -76,7 +76,7 @@ export default class Post extends React.Component {\n};\nrender() {\n- const { content } = this.props;\n+ const { content, fetching } = this.props;\nreturn (\n<div className=\"main-panel\">\n@@ -89,10 +89,13 @@ export default class Post extends React.Component {\n</div>\n</Affix>\n<div className=\"center\" style={{ paddingBottom: '24px' }}>\n- {content ? <PostContent content={content} /> : <Loading />}\n- {content && <VisibilitySensor onChange={this.handleCommentsVisibility} />}\n+ {content && !fetching\n+ ? <PostContent content={content} /> : <Loading />}\n+ {content && !fetching\n+ && <VisibilitySensor onChange={this.handleCommentsVisibility} />}\n<div id=\"comments\">\n- {content && <Comments show={this.state.commentsVisible} post={content} />}\n+ {content && !fetching\n+ && <Comments show={this.state.commentsVisible} post={content} />}\n</div>\n</div>\n</div>\n",
        "chatgpt_cot": "Add overflow to BlogPost component to handle a large amount of content and improve user experience with scrolling."
    },
    {
        "org_diff": "diff --git a/src/filtering/FuncOperations.js b/src/filtering/FuncOperations.js @@ -37,12 +37,22 @@ export const stringOperation = (op, value) => {\n}\n};\n-const NAME_PLACEHOLDER = /~/g;\n+const NAME_PLACEHOLDER = '~';\n+const NAME_ALIAS = /\\bthis spell\\b/g;\n+\n+const mayContainShorthand = (details) => details.type.includes('Legendary') && details.name.includes(',');\nexport const nameStringOperation = (op, value) => {\n+ const strOp = stringOperation(op, value);\nreturn (fieldValue, card) => {\n- const expandedValue = value.replace(NAME_PLACEHOLDER, card.details.name);\n- return stringOperation(op, expandedValue)(fieldValue);\n+ let expandedValue = fieldValue\n+ .replace(new RegExp(card.details.name, 'g'), NAME_PLACEHOLDER)\n+ .replace(NAME_ALIAS, NAME_PLACEHOLDER);\n+ if (mayContainShorthand(card.details)) {\n+ const [shortName] = card.details.name.split(',');\n+ expandedValue = expandedValue.replace(new RegExp(shortName, 'g'), NAME_PLACEHOLDER);\n+ }\n+ return strOp(expandedValue);\n};\n};\n",
        "org_msg": "extended tilde matching",
        "sim_msg": "fix(Strings/capitalize): error occuring when passing empty string",
        "sim_diff": "diff --git a/common/strings.js b/common/strings.js @@ -335,4 +335,4 @@ export const createSlug = (text, base = \"untitled\") => {\nreturn text;\n};\n-export const capitalize = (str = \"\") => str[0].toUpperCase() + str.slice(1);\n+export const capitalize = (str = \"\") => str[0]?.toUpperCase() + str?.slice(1);\n",
        "chatgpt_cot": "Add new constants and function for name string operation, handle shorthand names and aliases in card details, improve string expansion logic."
    },
    {
        "org_diff": "diff --git a/src/pages/CubePlaytestPage.js b/src/pages/CubePlaytestPage.js @@ -497,10 +497,10 @@ const CubePlaytestPage = ({ user, cube, decks, draftFormats, loginCallback }) =>\n.map((format, index) => ({ ...format, index }))\n.sort((a, b) => {\nif (a.index === defaultDraftFormat) {\n- return 1;\n+ return -1;\n}\nif (b.index === defaultDraftFormat) {\n- return -1;\n+ return 1;\n}\nreturn a.title.localeCompare(b.title);\n}),\n",
        "org_msg": "fixed format sort",
        "sim_msg": "Text change for the HOC samples",
        "sim_diff": "diff --git a/docs/src/App.js b/docs/src/App.js @@ -66,9 +66,9 @@ const stories = [\ncomponent: CodeSandbox('VEZ8OgvX'),\n},\n- { name: 'Tree Table', component: CodeSandbox('lxmr4wynzq') },\n- { name: 'Select Table', component: CodeSandbox('7yq5ylw09j') },\n- { name: 'Select Tree Table', component: CodeSandbox('2p7jp4klwp') },\n+ { name: 'Tree Table (HOC)', component: CodeSandbox('lxmr4wynzq') },\n+ { name: 'Select Table (HOC)', component: CodeSandbox('7yq5ylw09j') },\n+ { name: 'Select Tree Table (HOC)', component: CodeSandbox('2p7jp4klwp') },\n]\n",
        "chatgpt_cot": "Fix sorting order issue in CubePlaytestPage for draft formats. Update comparison logic to correctly prioritize defaultDraftFormat."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1473,9 +1473,11 @@ router.get('/download/csv/:id', async (req, res) => {\nfor (const card of cube.cards) {\nwriteCard(req, res, card, false);\n}\n+ if (Array.isArray(cube.maybe)) {\nfor (const card of cube.maybe) {\nwriteCard(req, res, card, true);\n}\n+ }\nreturn res.end();\n} catch (err) {\nreturn util.handleRouteError(req, res, err, '/404');\n",
        "org_msg": "Fix cube.maybe issue.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Add handling for maybe cards in download/csv route in cube_routes file. Fix potential issue with writing maybe cards."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -886,6 +886,9 @@ router.get('/analysis/:id', async (req, res) => {\nreturn res.status(404).render('misc/404', {});\n}\nfor (const card of cube.cards) {\n+ card.details = {\n+ ...carddb.cardFromId(card.cardID),\n+ };\ncard.details.display_image = util.getCardImageURL(card);\nif (!card.type_line) {\ncard.type_line = card.details.type;\n",
        "org_msg": "Fix error in cube_routes.js",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "\"Add card details to cube analysis, fix display image and type line for cards without type line.\""
    },
    {
        "org_diff": "diff --git a/src/pages/DashboardPage.js b/src/pages/DashboardPage.js @@ -23,7 +23,20 @@ import CubesCard from 'components/CubesCard';\nconst CreateCubeModalButton = withModal(Button, CreateCubeModal);\nconst DashboardPage = ({ posts, cubes, decks, user, loginCallback, content, featured }) => {\n- const filteredDecks = cubes.length > 2 ? decks.slice(0, 4) : decks;\n+ // where featured cubes are positioned on the screen\n+ let featuredPosition;\n+ if (!user.hide_featured) {\n+ featuredPosition = cubes.length > 2 ? 'right' : 'left';\n+ }\n+\n+ // the number of drafted decks shown, based on where cubes are located\n+ let filteredDecks = decks;\n+ if (featuredPosition === 'right') {\n+ filteredDecks = decks.slice(0, 4);\n+ }\n+ if (!featuredPosition && cubes.length <= 2) {\n+ filteredDecks = decks.slice(0, 6);\n+ }\nreturn (\n<MainLayout loginCallback={loginCallback} user={user}>\n@@ -51,11 +64,11 @@ const DashboardPage = ({ posts, cubes, decks, user, loginCallback, content, feat\n)}\n</Row>\n</CardBody>\n- {cubes.length > 2 ? (\n- <CardFooter>\n- <a href={`/user/view/${cubes[0].owner}`}>View All</a>\n- </CardFooter>\n- ) : (\n+ {featuredPosition !== 'left' && (\n+ <CardFooter>{cubes.length > 2 && <a href={`/user/view/${cubes[0].owner}`}>View All</a>}</CardFooter>\n+ )}\n+ </Card>\n+ {featuredPosition === 'left' && (\n<CubesCard\ntitle=\"Featured Cubes\"\ncubes={featured}\n@@ -63,10 +76,9 @@ const DashboardPage = ({ posts, cubes, decks, user, loginCallback, content, feat\nheader={{ hLevel: 5, sideLink: '/donate', sideText: 'Learn more...' }}\n/>\n)}\n- </Card>\n</Col>\n<Col xs=\"12\" md=\"6\">\n- {cubes.length > 2 && (\n+ {featuredPosition === 'right' && (\n<CubesCard\nclassName=\"mb-4\"\ntitle=\"Featured Cubes\"\n",
        "org_msg": "adjust dashboard for hide_featured",
        "sim_msg": "Remove uneeded args.",
        "sim_diff": "diff --git a/assets/js/components/dashboard-sharing/DashboardSharingSettingsButton.stories.js b/assets/js/components/dashboard-sharing/DashboardSharingSettingsButton.stories.js */\nimport DashboardSharingSettingsButton from './DashboardSharingSettingsButton';\n-const Template = ( args ) => <DashboardSharingSettingsButton { ...args } />;\n+const Template = () => <DashboardSharingSettingsButton />;\nexport const DefaultDashboardSharingSettingsButton = Template.bind( {} );\nDefaultDashboardSharingSettingsButton.storyName = 'Default';\n",
        "chatgpt_cot": "\"Add logic to display featured cubes based on user settings and cube count, and update view all link based on featured cubes position.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1178,7 +1178,8 @@ router.post('/bulkupload/:id', ensureAuth, async function(req, res) {\n}\n});\n-router.post('/bulkuploadfile/:id', ensureAuth, async function(req, res) {\n+router.post('/bulkuploadfile/:id', ensureAuth, async (req, res) => {\n+ try {\nif (!req.files) {\nreq.flash('danger', 'Please attach a file');\nreturn res.redirect('/cube/list/' + req.params.id);\n@@ -1186,7 +1187,6 @@ router.post('/bulkuploadfile/:id', ensureAuth, async function(req, res) {\nconst items = req.files.document.data.toString('utf8'); // the uploaded file object\n- try {\nconst cube = await Cube.findOne(build_id_query(req.params.id));\nif (!cube) {\nreq.flash('danger', 'Cube not found');\n@@ -1198,9 +1198,7 @@ router.post('/bulkuploadfile/:id', ensureAuth, async function(req, res) {\nawait bulkUpload(req, res, items, cube);\n} catch (err) {\n- console.error(err);\n- req.flash('danger', 'Error making bulk upload');\n- return res.redirect(`/cube/list/${req.params.id}`);\n+ util.handleRouteError(res, err,`/cube/list/${req.params.id}`);\n}\n});\n@@ -1414,12 +1412,10 @@ async function bulkUpload(req, res, list, cube) {\n}\n}\n-router.get('/download/cubecobra/:id', function(req, res) {\n- Cube.findOne(build_id_query(req.params.id), function(err, cube) {\n- if (!cube) {\n- req.flash('danger', 'Cube not found');\n- res.status(404).render('misc/404', {});\n- } else {\n+router.get('/download/cubecobra/:id', async (req, res) => {\n+ try{\n+ const cube = await Cube.findOne(build_id_query(req.params.id));\n+\nres.setHeader('Content-disposition', 'attachment; filename=' + cube.name.replace(/\\W/g, '') + '.txt');\nres.setHeader('Content-type', 'text/plain');\nres.charset = 'UTF-8';\n@@ -1427,9 +1423,10 @@ router.get('/download/cubecobra/:id', function(req, res) {\nres.write(carddb.cardFromId(card.cardID).full_name + '\\r\\n');\n});\nres.end();\n+ } catch (err) {\n+ util.handleRouteError(res, err,'/404');\n}\n});\n-});\nrouter.get('/download/csv/:id', function(req, res) {\nCube.findOne(build_id_query(req.params.id), function(err, cube) {\n",
        "org_msg": "revise bulk upload and download",
        "sim_msg": "feat: add cgi /rules?name=ruleName & /values?name=valueName",
        "sim_diff": "diff --git a/biz/webui/lib/index.js b/biz/webui/lib/index.js @@ -15,6 +15,7 @@ var extend = require('extend');\nvar htdocs = require('../htdocs');\nvar handleWeinreReq = require('../../weinre');\nvar setProxy = require('./proxy');\n+var rulesUtil = require('../../../lib/rules/util');\nvar getRootCAFile = require('../../../lib/https/ca').getRootCAFile;\nvar config = require('../../../lib/config');\nvar loadAuthPlugins = require('../../../lib/plugins').loadAuthPlugins;\n@@ -375,6 +376,32 @@ app.use(function(req, res, next) {\n}\n});\n+function decodeQuery(req, res, next) {\n+ return urlencodedParser(req, res, next);\n+}\n+\n+function sendText(res, text) {\n+ res.writeHead(200, {\n+ 'Content-Type': 'text/plain; charset=utf-8'\n+ });\n+ res.end(typeof text === 'string' ? text : '');\n+}\n+\n+app.get('/rules', decodeQuery, function(req, res) {\n+ var name = req.query.name || req.query.key;\n+ if (name === 'Default') {\n+ name = rulesUtil.rules.getDefault();\n+ } else {\n+ name = rulesUtil.rules.get(name);\n+ }\n+ sendText(res, name);\n+});\n+\n+app.get('/values', decodeQuery, function(req, res) {\n+ var name = req.query.name || req.query.key;\n+ sendText(res, rulesUtil.values.get(name));\n+});\n+\napp.all('/cgi-bin/*', function(req, res, next) {\nreq.isUploadReq = UPLOAD_URLS.indexOf(req.path) !== -1;\nreturn req.isUploadReq ? uploadUrlencodedParser(req, res, next) : urlencodedParser(req, res, next);\n",
        "chatgpt_cot": "fix compilation issue due to change in bulkuploadfile method, handleRouteError is used to handle errors."
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"canvas\": \"^2.6.1\",\n\"chart.js\": \"^2.9.2\",\n\"cheerio\": \"^1.0.0-rc.3\",\n+ \"classnames\": \"^2.2.6\",\n\"compression\": \"^1.7.4\",\n\"compute-cosine-similarity\": \"^1.0.0\",\n\"connect-flash\": \"^0.1.1\",\n",
        "org_msg": "Add: Added dependency on `classnames` NPM package\nThis package allows for terse className assembly in a number of useful shapes.\nCheck it out [here](https://www.npmjs.com/package/classnames)",
        "sim_msg": "Update package.json\nbump lodash to fix Prototype Pollution as described in",
        "sim_diff": "diff --git a/package.json b/package.json \"chalk\": \"^3.0.0\",\n\"detective\": \"^5.2.0\",\n\"fs-extra\": \"^8.0.0\",\n- \"lodash\": \"^4.17.11\",\n+ \"lodash\": \"^4.17.15\",\n\"node-emoji\": \"^1.8.1\",\n\"normalize.css\": \"^8.0.1\",\n\"postcss\": \"^7.0.11\",\n",
        "chatgpt_cot": "Add \"classnames\" package to package.json for additional functionality."
    },
    {
        "org_diff": "diff --git a/__tests__/routes/cube/download.test.js b/__tests__/routes/cube/download.test.js @@ -79,10 +79,43 @@ test('MTGO download', () => {\n});\ntest('csv download', () => {\n- const headerLine =\n- 'Name,CMC,Type,Color,Set,Collector Number,Rarity,Color Category,Status,Finish,Maybeboard,Image URL,Image Back URL,Tags,Notes,MTGO ID';\n- const faerieGuidemotherLine =\n- '\"Faerie Guidemother\",1,\"Creature - Faerie\",W,\"eld\",\"11\",common,w,Not Owned,Non-foil,false,,,\"New\",\"\",78110';\n+ const headerFields = [\n+ 'Name',\n+ 'CMC',\n+ 'Type',\n+ 'Color',\n+ 'Set',\n+ 'Collector Number',\n+ 'Rarity',\n+ 'Color Category',\n+ 'Status',\n+ 'Finish',\n+ 'Maybeboard',\n+ 'Image URL',\n+ 'Image Back URL',\n+ 'Tags',\n+ 'Notes',\n+ 'MTGO ID',\n+ ];\n+\n+ const faerieGuidemotherData = {\n+ Name: 'Faerie Guidemother',\n+ CMC: '1',\n+ Type: 'Creature - Faerie',\n+ Color: 'W',\n+ Set: 'eld',\n+ 'Collector Number': '11',\n+ Rarity: 'common',\n+ 'Color Category': 'w',\n+ Status: 'Not Owned',\n+ Finish: 'Non-foil',\n+ Maybeboard: 'false',\n+ 'Image URL': '',\n+ 'Image Back URL': '',\n+ Tags: 'New',\n+ Notes: '',\n+ 'MTGO ID': '78110',\n+ };\nreturn request(app)\n.get('/csv/' + cubeID)\n@@ -90,15 +123,12 @@ test('csv download', () => {\n.expect('Content-Type', 'text/plain')\n.expect('Content-disposition', 'attachment; filename=' + sanitizedCubeName + '.csv')\n.expect((res) => {\n- // Verify CSV format is valid\nconst parsed = Papa.parse(res.text.trim(), { header: true });\nexpect(parsed.errors).toEqual([]);\n- const lines = splitText(res.text);\n- expect(lines[0]).toEqual(headerLine);\n- expect(lines[1]).toEqual(faerieGuidemotherLine);\n- // Extra line expected for header\n- expect(lines.length).toEqual(exampleCube.cards.length + 1);\n+ expect(parsed.meta.fields.sort()).toEqual(headerFields.sort());\n+ expect(parsed.data[0]).toEqual(faerieGuidemotherData);\n+ expect(parsed.data.length).toEqual(exampleCube.cards.length);\n});\n});\n",
        "org_msg": "Ignore order when asserting on CSV row contents",
        "sim_msg": "add unit test for proposed PR",
        "sim_diff": "diff --git a/tests/service/data-util.service.spec.ts b/tests/service/data-util.service.spec.ts @@ -46,5 +46,27 @@ describe('Data Utils service test', () => {\nit('should return the bytesize of the text', inject([JhiDataUtils], (service: JhiDataUtils) => {\nexpect(service.byteSize('Hello Jhipster')).toBe(`10.5 bytes`);\n}));\n+\n+ it('should download the csv file', inject([JhiDataUtils], (service: JhiDataUtils) => {\n+ // create spy object with a click() method\n+ const spyObj = spyOn('a', ['click']);\n+ // spy on document.createElement() and return the spy object\n+ spyOn(document, 'createElement').and.returnValue(spyObj);\n+\n+ // call downloadFile function\n+ // csv content:\n+ // ID,Name\n+ // 1,Toto\n+ const contentType = 'text/csv';\n+ const data = 'SUQsTmFtZQ0KMSxUb3Rv';\n+ const fileName = 'test-download-file.csv';\n+ service.downloadFile(contentType, data, fileName);\n+\n+ expect(document.createElement).toHaveBeenCalledTimes(1);\n+ expect(document.createElement).toHaveBeenCalledWith('a');\n+ expect(spyObj.download).toBe('test-download-file.csv');\n+ expect(spyObj.click).toHaveBeenCalledTimes(1);\n+ expect(spyObj.click).toHaveBeenCalledWith();\n+ });\n});\n});\n",
        "chatgpt_cot": "\"Refactor csv download test, update header fields and faerieGuidemotherData for improved data validation and parsing in download.test.js\""
    },
    {
        "org_diff": "diff --git a/src/components/TagColorsModal.js b/src/components/TagColorsModal.js @@ -106,11 +106,20 @@ class TagColorsModalRaw extends Component {\n});\n}\n- handleSortEnd({ oldIndex, newIndex }) {\n+ layoutTagColors() {\nconst { allTags } = this.props;\nconst { tagColors } = this.state;\n- const filteredTags = allTags.filter((tag) => !tagColors.some((tagColor) => tag === tagColor.tag));\n- const allTagColors = [...this.state.tagColors, ...filteredTags.map((tag) => ({ tag, color: null }))];\n+\n+ const knownTags = tagColors.map(({ tag }) => tag);\n+ const knownTagColors = tagColors.filter(({ tag }) => allTags.includes(tag));\n+ const unknownTags = allTags.filter((tag) => !knownTags.includes(tag));\n+ const unknownTagColors = unknownTags.map((tag) => ({ tag, color: null }));\n+\n+ return [...knownTagColors, ...unknownTagColors];\n+ }\n+\n+ handleSortEnd({ oldIndex, newIndex }) {\n+ const allTagColors = this.layoutTagColors();\nthis.setState({\ntagColors: arrayMove(allTagColors, oldIndex, newIndex),\n});\n@@ -120,10 +129,7 @@ class TagColorsModalRaw extends Component {\nconst { canEdit, isOpen, toggle, allTags } = this.props;\nconst { tagColors, showTagColors } = this.state;\n- const knownTags = tagColors.map(({ tag, color }) => tag);\n- const unknownTags = allTags.filter((tag) => !knownTags.includes(tag));\n- const unknownTagColors = unknownTags.map((tag) => ({ tag, color: null }));\n- const orderedTags = [...tagColors, ...unknownTagColors];\n+ const orderedTags = this.layoutTagColors();\nconst editableRows = orderedTags.map(({ tag, color }) => {\nconst tagClass = `tag-item ${getTagColorClass(tagColors, tag)}`;\n",
        "org_msg": "Hide deleted tags from the Tag Colors modal.",
        "sim_msg": "fix: remove unused ref",
        "sim_diff": "diff --git a/components/system/components/Tag.js b/components/system/components/Tag.js @@ -265,8 +265,6 @@ export const Tag = ({ tags, onChange, style, placeholder }) => {\nconst [value, setValue] = React.useState(\"\");\nconst [open, setOpen] = React.useState(false);\n- const inputEl = React.useRef();\n-\nconst removeTag = (tag) => {\nconst newTags = [...tags];\nconst tagIndex = tags.indexOf(tag);\n@@ -298,7 +296,6 @@ export const Tag = ({ tags, onChange, style, placeholder }) => {\n<div css={STYLES_TAG_CONTAINER} style={{ ...style }}>\n<div css={STYLES_INPUT_CONTAINER}>\n<input\n- ref={inputEl}\ntype=\"text\"\ncss={STYLES_INPUT}\nplaceholder={placeholder}\n",
        "chatgpt_cot": "Refactor TagColorsModal layout and sorting methods. Add layoutTagColors method to improve code readability and simplify handleSortEnd method."
    },
    {
        "org_diff": "diff --git a/populate_analytics.js b/populate_analytics.js @@ -76,9 +76,7 @@ async function processDeck(deck) {\n// flatten array\nconst deckCards = [];\ndeck.seats[0].deck.forEach((col) => {\n- if (Array.isArray(col)) {\ncol.forEach((row) => {\n- if (row && row.details) {\ndeckCards.push(\ncarddb\n.cardFromId(row.cardID)\n@@ -87,18 +85,7 @@ async function processDeck(deck) {\n.replace(/[\\u0300-\\u036f]/g, '')\n.trim(),\n);\n- }\n});\n- } else {\n- deckCards.push(\n- carddb\n- .cardFromId(col.cardID)\n- .name.toLowerCase()\n- .normalize('NFD')\n- .replace(/[\\u0300-\\u036f]/g, '')\n- .trim(),\n- );\n- }\n});\nfor (let i = 0; i < deckCards.length; i += 1) {\n",
        "org_msg": "Fixed populate analytics script",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Refactor card processing logic in populate_analytics.js for better readability and efficiency."
    },
    {
        "org_diff": "diff --git a/src/utils/draftutil.js b/src/utils/draftutil.js -'use strict';\nconst seedrandom = require('seedrandom');\nconst shuffleSeed = require('shuffle-seed');\nconst Util = require('utils/Util.js');\nrequire('./Card.js');\nconst { filterToString, makeFilter, operatorsRegex } = require('filtering/FilterCards.js');\n-var Sort = require('utils/Sort.js');\nexport function matchingCards(cards, filter) {\nif (filter) {\n@@ -15,7 +13,7 @@ export function matchingCards(cards, filter) {\n}\nfunction compileFilter(filterText) {\n- if (!filterText || filterText === '' || filterText == '*') {\n+ if (!filterText || filterText === '' || filterText === '*') {\nreturn null;\n}\n@@ -89,7 +87,7 @@ function customDraft(cards, duplicates = false, seed = false) {\nseed = Date.now().toString();\n}\nconst rng = seedrandom(seed);\n- return function (cardFilters) {\n+ return (cardFilters) => {\nif (cards.length === 0) {\nthrow new Error('Unable to create draft: not enough cards.');\n}\n@@ -103,16 +101,16 @@ function customDraft(cards, duplicates = false, seed = false) {\nindex = Math.floor(rng() * cardFilters.length);\nconst filter = cardFilters[index];\nvalidCards = matchingCards(cards, filter);\n- if (validCards.length == 0) {\n+ if (validCards.length === 0) {\n// TODO: display warnings for players\nmessages.push(`Warning: no cards matching filter: ${filterToString(filter)}`);\n// try another options and remove this filter as it is now empty\ncardFilters.splice(index, 1);\n}\n- } while (validCards.length == 0 && cardFilters.length > 0);\n+ } while (validCards.length === 0 && cardFilters.length > 0);\n}\n- if (validCards.length == 0) {\n+ if (validCards.length === 0) {\nthrow new Error(`Unable to create draft: not enough cards matching filter.\\n${messages.join('\\n')}`);\n}\n@@ -225,7 +223,7 @@ function createPacks(draft, format, seats, nextCardFn) {\nfor (let packNum = 0; packNum < format.length; packNum++) {\ndraft.initial_state[seat].push([]);\n- let pack = [];\n+ const pack = [];\nfor (let cardNum = 0; cardNum < format[packNum].length; cardNum++) {\nconst result = nextCardFn(format[packNum][cardNum]);\nif (result.messages && result.messages.length > 0) {\n@@ -292,9 +290,9 @@ export function createDraft(format, cards, bots, seats, user, seed = false) {\nfor (let i = 0; i < draft.initial_state.length; i += 1) {\nconst seat = {\n- bot: i == 0 ? null : bots[i - 1],\n- name: i == 0 ? user.username : 'Bot ' + i + ': ' + bots[i - 1][0] + ', ' + bots[i - 1][1],\n- userid: i == 0 ? user._id : null,\n+ bot: i === 0 ? null : bots[i - 1],\n+ name: i === 0 ? user.username : `Bot ${i}: ${bots[i - 1][0]}, ${bots[i - 1][1]}`,\n+ userid: i === 0 ? user._id : null,\ndrafted: [], // organized draft picks\npickorder: [],\npackbacklog: [],\n",
        "org_msg": "Fix style issues in draftutil.js",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "\"Fix comparison operators and use const instead of let to improve code readability and maintainability in draftutil.js.\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -62,7 +62,7 @@ function addCardToCatalog(card, isExtra) {\n}\nnameToId[normalizedName].push(card._id);\nutil.binaryInsert(normalizedName, names);\n- util.binaryInsert(normaliedFullName, full_names);\n+ util.binaryInsert(normalizedFullName, full_names);\n}\nfunction writeJSONFile(filepath, data) {\n@@ -73,7 +73,7 @@ function writeJSONFile(filepath, data) {\nconsole.log(err);\nreject(err);\n} else {\n- resolve(contents);\n+ resolve(data);\n}\n});\n});\n",
        "org_msg": "fix some incorrect variable names",
        "sim_msg": "Write JSON to specific path also",
        "sim_diff": "diff --git a/selenium-test/ratings.js b/selenium-test/ratings.js @@ -84,10 +84,11 @@ function _buildHtmlDoc(htmlTable) {\nfunction _writeToFile (jsonText, opts) {\nconst filename = new Date().toJSON();\nconst jsonData = JSON.parse(jsonText);\n+ const path = opts.output.replace(/\\/$/, '');\n// JSON File Output\n- fs.writeFileSync(`${filename}.json`, jsonText);\n- log(chalk.yellow('JSON Data written to file: ') + chalk.yellow.bold(`${filename}.json`));\n+ fs.writeFileSync(`${path}/${filename}.json`, jsonText);\n+ log(chalk.yellow('JSON Data written to file: ') + chalk.yellow.bold(`${path}/${filename}.json`));\n// Cleanup data for HTML table\nObject.keys(jsonData).forEach(function (key) {\n@@ -117,8 +118,6 @@ function _writeToFile (jsonText, opts) {\n// HTML File Output\nconst htmlTable = tabular.html(jsonData, {classes: {table: \"dataTable display\"} });\nconst htmlDoc = _buildHtmlDoc(htmlTable);\n-\n- const path = opts.output.replace(/\\/$/, '');\nfs.writeFileSync(`${path}/${filename}.html`, htmlDoc);\nlog(chalk.yellow('HTML Table written to file: ') + chalk.yellow.bold(`${path}/${filename}.html`));\n}\n",
        "chatgpt_cot": "Fix typo in variable name in addCardToCatalog function in updatecards.js.Resolved compilation issue by correcting variable name from normaliedFullName to normalizedFullName."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1440,6 +1440,7 @@ router.get('/draft/:id', function(req, res) {\nres.render('cube/cube_draft', {\ncube: cube,\nowner: 'Unknown',\n+ activeLink: 'playtest',\nloginCallback: '/cube/draft/' + req.params.id,\ndraft_raw: JSON.stringify(draft)\n});\n@@ -1447,6 +1448,7 @@ router.get('/draft/:id', function(req, res) {\nres.render('cube/cube_draft', {\ncube: cube,\nowner: user.username,\n+ activeLink: 'playtest',\nloginCallback: '/cube/draft/' + req.params.id,\ndraft_raw: JSON.stringify(draft)\n});\n@@ -1819,6 +1821,7 @@ router.get('/decks/:id', function(req, res) {\nres.render('cube/cube_decks', {\ncube: cube,\nowner: owner_name,\n+ activeLink: 'playtest',\ndecks: deck_page,\npages: pages,\nloginCallback: '/user/decks/' + cubeid\n@@ -1827,6 +1830,7 @@ router.get('/decks/:id', function(req, res) {\nres.render('cube/cube_decks', {\ncube: cube,\nowner: owner_name,\n+ activeLink: 'playtest',\ndecks: decks,\nloginCallback: '/user/decks/' + cubeid\n});\n@@ -1835,6 +1839,7 @@ router.get('/decks/:id', function(req, res) {\nres.render('cube/cube_decks', {\ncube: cube,\nowner: owner_name,\n+ activeLink: 'playtest',\nloginCallback: '/user/decks/' + cubeid,\ndecks: []\n});\n@@ -1872,6 +1877,7 @@ router.get('/deckbuilder/:id', function(req, res) {\nres.render('cube/cube_deckbuilder', {\ncube: cube,\nowner: 'Unknown',\n+ activeLink: 'playtest',\nloginCallback: '/cube/draft/' + req.params.id,\ndeck_raw: JSON.stringify(deck),\nbasics_raw: JSON.stringify(getBasics(carddb)),\n@@ -1881,6 +1887,7 @@ router.get('/deckbuilder/:id', function(req, res) {\nres.render('cube/cube_deckbuilder', {\ncube: cube,\nowner: user.username,\n+ activeLink: 'playtest',\nloginCallback: '/cube/draft/' + req.params.id,\ndeck_raw: JSON.stringify(deck),\nbasics_raw: JSON.stringify(getBasics(carddb)),\n@@ -1941,6 +1948,7 @@ router.get('/deck/:id', function(req, res) {\noldformat: true,\ncube: cube,\nowner: owner_name,\n+ activeLink: 'playtest',\ndrafter: drafter_name,\ncards: player_deck,\nbot_decks: bot_decks,\n@@ -1968,6 +1976,7 @@ router.get('/deck/:id', function(req, res) {\noldformat: false,\ncube: cube,\nowner: owner_name,\n+ activeLink: 'playtest',\ndrafter: drafter_name,\ndeck: JSON.stringify(deck.playerdeck),\nbot_decks: bot_decks,\n",
        "org_msg": "Add active link to all views.",
        "sim_msg": "removes empty array",
        "sim_diff": "diff --git a/server.js b/server.js @@ -309,7 +309,6 @@ app.prepare().then(async () => {\nlet serializedUsersMap = { [creator.id]: creator };\nlet serializedSlatesMap = {};\n- // NOTE(jim): The most expensive call first.\nconst r1 = await Serializers.doSubscriptions({\nusers: [],\nslates: [],\n@@ -330,50 +329,51 @@ app.prepare().then(async () => {\ncreator.subscribers = r2.serializedSubscribers;\n- // let exploreSlates = [];\n-\n- // if (Environment.IS_PRODUCTION) {\n- // exploreSlates = await Data.getSlatesByIds({\n- // ids: [\n- // //NOTE(tara): slates in prod\n- // \"d2861ac4-fc41-4c07-8f21-d0bf06be364c\",\n- // \"9c2c458c-d92a-4e81-a4b6-bf6ab4607470\",\n- // \"7f461144-0647-43d7-8294-788b37ae5979\",\n- // \"f72c2594-b8ac-41f6-91e0-b2da6788ae23\",\n- // \"a0d6e2f2-564d-47ed-bf56-13c42634703d\",\n- // \"0ba92c73-92e7-4b00-900e-afae4856c9ea\",\n- // ],\n- // });\n-\n- // for (let exploreSlate of exploreSlates) {\n- // let user = await Data.getUserById({ id: exploreSlate.data.ownerId });\n- // exploreSlate.username = user.username;\n- // }\n- // } else {\n- // exploreSlates = await Data.getSlatesByIds({\n- // ids: [\n- // //NOTE(tara): slates in localhost for testing\n- // \"857ad84d-7eff-4861-a988-65c84b62fc23\",\n- // \"81fa0b39-0e96-4c7f-8587-38468bb67cb3\",\n- // \"c4e8dad7-4ba0-4f25-a92a-c73ef5522d29\",\n- // \"df05cb1f-2ecf-4872-b111-c4b8493d08f8\",\n- // \"435035e6-dee4-4bbf-9521-64c219a527e7\",\n- // \"ac907aa3-2fb2-46fd-8eba-ec8ceb87b5eb\",\n- // ],\n- // });\n-\n- // for (let exploreSlate of exploreSlates) {\n- // let user = await Data.getUserById({ id: exploreSlate.data.ownerId });\n- // exploreSlate.username = user.username;\n- // }\n- // }\n+ // NOTE(tara+martina)\n+ // Remove this at some point.\n+ /*\n+ if (Environment.IS_PRODUCTION) {\n+ exploreSlates = await Data.getSlatesByIds({\n+ ids: [\n+ //NOTE(tara): slates in prod\n+ \"d2861ac4-fc41-4c07-8f21-d0bf06be364c\",\n+ \"9c2c458c-d92a-4e81-a4b6-bf6ab4607470\",\n+ \"7f461144-0647-43d7-8294-788b37ae5979\",\n+ \"f72c2594-b8ac-41f6-91e0-b2da6788ae23\",\n+ \"a0d6e2f2-564d-47ed-bf56-13c42634703d\",\n+ \"0ba92c73-92e7-4b00-900e-afae4856c9ea\",\n+ ],\n+ });\n+\n+ for (let exploreSlate of exploreSlates) {\n+ let user = await Data.getUserById({ id: exploreSlate.data.ownerId });\n+ exploreSlate.username = user.username;\n+ }\n+ } else {\n+ exploreSlates = await Data.getSlatesByIds({\n+ ids: [\n+ //NOTE(tara): slates in localhost for testing\n+ \"857ad84d-7eff-4861-a988-65c84b62fc23\",\n+ \"81fa0b39-0e96-4c7f-8587-38468bb67cb3\",\n+ \"c4e8dad7-4ba0-4f25-a92a-c73ef5522d29\",\n+ \"df05cb1f-2ecf-4872-b111-c4b8493d08f8\",\n+ \"435035e6-dee4-4bbf-9521-64c219a527e7\",\n+ \"ac907aa3-2fb2-46fd-8eba-ec8ceb87b5eb\",\n+ ],\n+ });\n+\n+ for (let exploreSlate of exploreSlates) {\n+ let user = await Data.getUserById({ id: exploreSlate.data.ownerId });\n+ exploreSlate.username = user.username;\n+ }\n+ }\n+ */\nreturn app.render(req, res, \"/_/profile\", {\nviewer,\ncreator,\nmobile,\nresources: EXTERNAL_RESOURCES,\n- // exploreSlates,\n});\n});\n",
        "chatgpt_cot": "Add 'activeLink: playtest' to cube routes for consistency in rendering cube pages. Fixes navigation bug for cube draft, decks, deckbuilder, and player deck pages."
    },
    {
        "org_diff": "diff --git a/src/components/Markdown.js b/src/components/Markdown.js @@ -83,6 +83,14 @@ const renderCode = ({ language, value }) => {\n);\n};\n+const renderTable = (node) => {\n+ return (\n+ <div className=\"table-responsive\">\n+ <table className=\"table table-bordered\">{node.children}</table>\n+ </div>\n+ );\n+};\n+\nconst renderMath = (node) => {\nreturn <Latex trusted={false} displayMode>{`$$ ${node.value} $$`}</Latex>;\n};\n@@ -150,6 +158,7 @@ const Markdown = ({ markdown, limited }) => {\nblockquote: renderBlockQuote,\nheading: renderHeading,\ncode: renderCode,\n+ table: renderTable,\n// plugins\nmath: renderMath,\ninlineMath: renderInlineMath,\n",
        "org_msg": "added table styling",
        "sim_msg": "Add example where everything works in client side",
        "sim_diff": "diff --git a/index.html b/index.html <script src=\"https://math-demo.abitti.fi/baconjs/dist/Bacon.js\"></script>\n<script src=\"https://math-demo.abitti.fi/mathquill/build/mathquill.js\"></script>\n<script src=\"https://math-demo.abitti.fi/rich-text-editor-bundle.js\"></script>\n+ <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js\">\n+ </script>\n<style>\n.answer { border: 1px solid #aaa; padding: 5px; box-sizing: content-box; min-height: 100px; font: 17px \"Times New Roman\"; }\n+ .rich-text-editor img[src*=\"data:image/svg+xml\"] { vertical-align: middle; margin: 4px; padding: 3px 10px; cursor: pointer; border: 1px solid transparent;}\n+ .rich-text-editor.rich-text-focused img[src*=\"data:image/svg+xml\"],\n+ .rich-text-editor:focus img[src*=\"data:image/svg+xml\"] { background: #EDF9FF; border: 1px solid #E6F2F8; }\n+ .result {display: none;}\n</style>\n</head>\n<body>\n<div class=\"answer\" id=\"answer1\"></div>\n</section>\n</article>\n+<div class=\"result\">\\({}\\)</div>\n<script>\n- makeRichText(document.querySelector('#answer1'), {\n+ MathJax.Hub.Config({\n+ jax: [\"input/TeX\", \"output/SVG\"],\n+ extensions: [\"toMathML.js\", \"tex2jax.js\", \"MathMenu.js\", \"MathZoom.js\", \"fast-preview.js\", \"AssistiveMML.js\", \"a11y/accessibility-menu.js\"],\n+ TeX: {\n+ extensions: [\"AMSmath.js\", \"AMSsymbols.js\", \"noErrors.js\", \"noUndefined.js\"]\n+ },\n+ SVG: {useFontCache: true, useGlobalCache: false, EqnChunk: 1000000, EqnDelay: 0}\n+ });\n+\n+ const answer = document.querySelector('#answer1')\n+ makeRichText(answer, {\nscreenshot: {\nsaver: ({data}) =>\nnew Promise(resolve => {\n},\nbaseUrl: 'https://math-demo.abitti.fi'\n})\n+\n+ let math = null\n+ MathJax.Hub.queue.Push(function () {\n+ math = MathJax.Hub.getAllJax('MathOutput')[0];\n+ });\n+ const updateMath = function (latex, cb) {\n+ MathJax.Hub.queue.Push(['Text', math, '\\\\displaystyle{' + latex + '}']);\n+ MathJax.Hub.Queue(() => {\n+ const svgMarkup = $('.result svg').attr('xmlns', \"http://www.w3.org/2000/svg\").get(0).outerHTML\n+ const dataUrl = 'data:image/svg+xml,' + encodeURIComponent(svgMarkup)\n+ cb(dataUrl)\n+ })\n+ }\n+\n+ let studentDisplay = null\n+ MathJax.Hub.Queue(function () {\n+ studentDisplay = MathJax.Hub.getAllJax(document.querySelector('.result'))[0];\n+ });\n+\n+ $(answer).on('input', answer => {\n+ const $images = $(answer.target).find('img[src*=\"/math.svg\"]')\n+ $images.each((i, img) => {\n+ updateMath(img.alt, url => {\n+ img.src=url\n+ })\n+ })\n+ })\n</script>\n</body>\n</html>\n",
        "chatgpt_cot": "Add renderTable function to Markdown.js for rendering tables in the markdown, improving the functionality of the file."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3226,6 +3226,9 @@ router.post('/api/savesorts/:id', ensureAuth, function(req, res) {\n});\n});\n+const ELO_BASE = 400;\n+const ELO_RANGE = 1600;\n+const ELO_SPEED = 1000;\nrouter.post('/api/draftpickcard/:id', async function(req, res) {\ntry {\nconst draftQ = Draft.findById({ _id: req.body.draft_id });\n@@ -3247,20 +3250,20 @@ router.post('/api/draftpickcard/:id', async function(req, res) {\nrating = new CardRating();\nrating.name = req.body.pick;\nrating.value = updatedRating\n- rating.elo = 1200;\n+ rating.elo = ELO_BASE + ELO_RANGE / 2;\nrating.picks = 1;\n}\nif (isNaN(rating.elo)) {\n- rating.elo = 400 + 1600 / (1 + Math.pow(1000, -(0.5 - rating.value)));\n+ rating.elo = ELO_BASE + ELO_RANGE / (1 + Math.pow(ELO_SPEED, -(0.5 - rating.value)));\n}\n// Update ELO.\nfor (const other of packRatings) {\nif (isNaN(other.elo)) {\nif (isNaN(other.rating)) {\n- other.elo = 1200;\n+ other.elo = ELO_BASE + ELO_RANGE / 2;\n} else {\n- other.elo = 400 + 1600 / (1 + Math.pow(1000, -(0.5 - other.value)));\n+ other.elo = ELO_BASE + ELO_RANGE / (1 + Math.pow(ELO_SPEED, -(0.5 - other.value)));\n}\n}\n",
        "org_msg": "Pull out constants.",
        "sim_msg": "Update getScoreCategory and export.",
        "sim_diff": "diff --git a/assets/js/modules/pagespeed-insights/dashboard/util.js b/assets/js/modules/pagespeed-insights/dashboard/util.js * WordPress dependencies\n*/\nimport { __ } from '@wordpress/i18n';\n+import { CATEGORY_FAST, CATEGORY_AVERAGE, CATEGORY_SLOW } from '../components/constants';\n/**\n* Retrieve the score category slug based on the given score.\n@@ -28,16 +29,16 @@ import { __ } from '@wordpress/i18n';\n*\n* @return {string} Either 'fast', 'average', or 'slow'.\n*/\n-function getScoreCategory( score ) {\n+export function getScoreCategory( score ) {\nif ( 0.9 <= score ) {\n- return 'fast';\n+ return CATEGORY_FAST;\n}\nif ( 0.5 <= score ) {\n- return 'average';\n+ return CATEGORY_AVERAGE;\n}\n- return 'slow';\n+ return CATEGORY_SLOW;\n}\n/**\n",
        "chatgpt_cot": "Refactor ELO calculation in cube_routes.js for draft pick cards using constants for base, range, and speed values to improve readability and maintainability."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -4,6 +4,7 @@ const https = require('https'); // eslint-disable-line import/no-extraneous-depe\nconst JSONStream = require('JSONStream');\nconst es = require('event-stream');\nconst winston = require('winston');\n+const fetch = require('node-fetch');\nconst cardutil = require('../dist/utils/Card.js');\nconst util = require('./util.js');\n@@ -88,8 +89,20 @@ function downloadFile(url, filePath) {\n}\nasync function downloadDefaultCards(basePath = 'private', defaultSourcePath = null, allSourcePath = null) {\n- const defaultUrl = 'https://archive.scryfall.com/json/scryfall-default-cards.json';\n- const allUrl = 'https://archive.scryfall.com/json/scryfall-all-cards.json';\n+ let defaultUrl = 'https://archive.scryfall.com/json/scryfall-default-cards.json';\n+ let allUrl = 'https://archive.scryfall.com/json/scryfall-all-cards.json';\n+\n+ const res = await fetch(`https://api.scryfall.com/bulk-data`);\n+ const json = await res.json();\n+\n+ for (const data of json.data) {\n+ if (data.name === 'Default Cards') {\n+ defaultUrl = data.download_uri;\n+ } else if (data.name === 'All Cards') {\n+ allUrl = data.download_uri;\n+ }\n+ }\n+\nreturn Promise.all([\ndownloadFile(defaultUrl, defaultSourcePath || path.resolve(basePath, 'cards.json')),\ndownloadFile(allUrl, allSourcePath || path.resolve(basePath, 'all-cards.json')),\n@@ -562,6 +575,7 @@ function convertCard(card, isExtra) {\nnewcard.color_identity = Array.from(card.color_identity);\nnewcard.set = card.set;\nnewcard.collector_number = card.collector_number;\n+\nnewcard.promo =\ncard.promo ||\n(card.frame_effects && card.frame_effects.includes('extendedart')) ||\n@@ -719,7 +733,7 @@ async function updateCardbase(basePath = 'private', defaultPath = null, allPath\nfs.mkdirSync(basePath);\n}\n- await module.exports.downloadDefaultCards(basePath, defaultPath, allPath);\n+ await downloadDefaultCards(basePath, defaultPath, allPath);\nwinston.info('Updating cardbase, this might take a little while...');\nawait saveAllCards(basePath, defaultPath, allPath);\n",
        "org_msg": "Use new scryfall bulk endpoints",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "Add fetch module, modify defaultUrl and allUrl, and update downloadDefaultCards function to use the new fetch module."
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -445,6 +445,10 @@ class FilterCollapse extends Component {\n}\nasync updateFilters(overrideFilter) {\n+ if (Query.get('f') === this.state.filterInput) {\n+ return;\n+ }\n+\nconst filterInput = overrideFilter ?? this.state.filterInput;\nif ((filterInput ?? '') === '') {\nthis.props.setFilter(null, '');\n",
        "org_msg": "fixed bug which caused infinite load screen",
        "sim_msg": "no animiation on first render",
        "sim_diff": "diff --git a/src/components/CategoriesFilter.js b/src/components/CategoriesFilter.js @@ -26,31 +26,44 @@ class CategoriesFilter extends Component<\nonPress: () => {}\n};\n- state = {\n+ constructor(props: CategoriesFilterProps) {\n+ super(props);\n+\n+ // No initial animation\n+ Animated.timing(this.decorationWidth, {\n+ toValue: Number(props.selected),\n+ duration: 0,\n+ useNativeDriver: true\n+ }).start();\n+\n+ this.state = {\ntextWidth: 0\n};\n+ }\n+\n+ componentWillReceiveProps(props: CategoriesFilterProps) {\n+ Animated.timing(this.decorationWidth, {\n+ toValue: Number(props.selected),\n+ duration: 200,\n+ useNativeDriver: true\n+ }).start();\n+ }\ndecorationWidth = new Animated.Value(0);\n+ // Measuring text width on initial render\nhandleOnLayout = (event: { nativeEvent: { layout: { width: number } } }) =>\nthis.setState({ textWidth: event.nativeEvent.layout.width });\nrender() {\n- const { category, onPress, selected } = this.props;\n+ const { category, onPress } = this.props;\nconst { textWidth } = this.state;\nreturn (\n<TouchableOpacity\nstyle={styles.itemContainer}\naccessibilityTraits={[\"button\"]}\naccessibilityComponentType=\"button\"\n- onPress={() => {\n- Animated.timing(this.decorationWidth, {\n- toValue: Number(!selected),\n- duration: 300,\n- useNativeDriver: true\n- }).start();\n- onPress(category.label);\n- }}\n+ onPress={() => onPress(category.label)}\n>\n<Animated.View\nstyle={[\n",
        "chatgpt_cot": "Add condition to updateFilters method to prevent unnecessary updates based on filter input value."
    },
    {
        "org_diff": "diff --git a/src/analytics/Suggestions.js b/src/analytics/Suggestions.js @@ -5,11 +5,10 @@ import FilterCollapse from 'components/FilterCollapse';\nimport withAutocard from 'components/WithAutocard';\nimport Filter from 'utils/Filter';\nimport { encodeName } from 'utils/Card';\n+import PagedList from 'components/PagedList';\nimport { Col, Row, ListGroup, ListGroupItem, ListGroupItemHeading, Card, CardBody, CardHeader } from 'reactstrap';\n-const MAX_CARDS = 30;\n-\nconst AutocardA = withAutocard('a');\nconst Suggestion = ({ card, index }) => {\n@@ -52,14 +51,14 @@ const Suggestions = ({ cards, cube }) => {\nconst updateFilter = (val) => {\nsetFilter(val);\n- setAdds(suggestions.filter((card) => Filter.filterCard(card, val)).slice(0, MAX_CARDS));\n+ setAdds(suggestions.filter((card) => Filter.filterCard(card, val)));\n};\nuseEffect(() => {\ngetData(`/cube/api/adds/${cube._id}`, { cards: cards.map((card) => card.details.name) }).then((data) => {\nconsole.log(data);\nsetSuggestions(data);\n- setAdds(data.slice(0, MAX_CARDS));\n+ setAdds(data);\nsetLoading(false);\n});\n}, [cards, cube._id]);\n@@ -93,7 +92,12 @@ const Suggestions = ({ cards, cube }) => {\n{loading && <em>Loading...</em>}\n{!loading &&\n(adds.length > 0 ? (\n- adds.map((add, index) => <Suggestion key={add.cardID} index={index} card={add} />)\n+ <PagedList\n+ pageSize={20}\n+ rows={adds.slice(0).map((add, index) => (\n+ <Suggestion key={add.cardID} index={index} card={add} />\n+ ))}\n+ />\n) : (\n<em>No results with the given filter.</em>\n))}\n",
        "org_msg": "removed limit",
        "sim_msg": "Wrap all CivicCards in error boundaries",
        "sim_diff": "diff --git a/packages/component-library/src/CivicCard/CivicCard.js b/packages/component-library/src/CivicCard/CivicCard.js @@ -2,9 +2,13 @@ import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DataChecker from \"./utils/DataChecker\";\nimport CivicCardLayoutFull from \"./CivicCardLayoutFull\";\n+import ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\nimport { cardMetaKeys, optionalCardMetaKeys } from \"./cardMetaTypes\";\nconst CivicCard = ({ cardMeta, data, isLoading, Layout }) => (\n+ <ErrorBoundary\n+ customMessage={`CivicCard: \"${cardMeta(data).title}\" failed to load`}\n+ >\n<DataChecker\ndata={cardMeta(data)}\ndataAccessors={cardMetaKeys}\n@@ -14,6 +18,7 @@ const CivicCard = ({ cardMeta, data, isLoading, Layout }) => (\n>\n<Layout cardMeta={cardMeta(data)} isLoading={isLoading} data={data} />\n</DataChecker>\n+ </ErrorBoundary>\n);\nCivicCard.propTypes = {\n",
        "chatgpt_cot": "Add PagedList component, remove MAX_CARDS constant, and update filter functionality in Suggestions.js."
    },
    {
        "org_diff": "diff --git a/src/analytics/HyperGeom.js b/src/analytics/HyperGeom.js @@ -261,7 +261,7 @@ const HyperGeom = () => {\nvalue={sampleSuccesses}\nonChange={(event) => setSampleSuccesses(event.target.value, 10)}\n/>\n- <Button className=\"mb-3\" color=\"success\" block>\n+ <Button type=\"submit\" className=\"mb-3\" color=\"success\" block>\nCalculate\n</Button>\n</Form>\n",
        "org_msg": "added button type=submit just to be save in hypergeom)",
        "sim_msg": "show the edit button only when !uploadInProgressOrComplete",
        "sim_diff": "diff --git a/packages/@uppy/dashboard/src/components/FileItem/Buttons/index.js b/packages/@uppy/dashboard/src/components/FileItem/Buttons/index.js @@ -9,9 +9,10 @@ function EditButton ({\ni18n,\nonClick\n}) {\n- if ((!uploadInProgressOrComplete &&\n- metaFields &&\n- metaFields.length > 0) || canEditFile(file)) {\n+ if (\n+ (!uploadInProgressOrComplete && metaFields && metaFields.length > 0) ||\n+ (!uploadInProgressOrComplete && canEditFile(file))\n+ ) {\nreturn (\n<button\nclass=\"uppy-u-reset uppy-Dashboard-Item-action uppy-Dashboard-Item-action--edit\"\n",
        "chatgpt_cot": "\"Modify button type to submit in HyperGeom.js for form submission functionality.\""
    },
    {
        "org_diff": "diff --git a/src/components/TypeAnalysis.js b/src/components/TypeAnalysis.js @@ -36,9 +36,16 @@ const TypeAnalysis = ({ typeByColor, ...props }) => (\n{types.map(type =>\n<tr>\n<th scope=\"row\">{type}</th>\n- {colors.map(([name, path, _]) =>\n- <td>{typeByColor[type][path]}</td>\n- )}\n+ {colors.map(([name, path, _]) => {\n+ count = typeByColor[type][path];\n+ color_total = typeByColor['Total'];\n+ if (name !== 'Total' && path !== 'Total' && count > 1 && color_total > count) {\n+ percent = Number.parseFloat(count / color_total * 100.0).toFixed(1);\n+ return <td>{count}<span class=\"percent\">{percent}%</span></td>;\n+ } else {\n+ return <td>{count}</td>;\n+ }\n+ })}\n</tr>\n)}\n</tbody>\n",
        "org_msg": "Adding percentage to Type Breakdown\nVery quick and dirty untested guess for what might add percentage to the Type Breakdown stats tab.",
        "sim_msg": "[Docs] Add blueGrey color colors",
        "sim_diff": "diff --git a/src/styles/colors.js b/src/styles/colors.js @@ -337,3 +337,16 @@ export const grey = {\nA700: '#616161',\ncontrastDefaultColor: 'dark',\n};\n+\n+export const blueGrey = {\n+ 50: '#eceff1',\n+ 100: '#cfd8dc',\n+ 200: '#b0bec5',\n+ 300: '#90a4ae',\n+ 400: '#78909c',\n+ 500: '#607d8b',\n+ 600: '#546e7a',\n+ 700: '#455a64',\n+ 800: '#37474f',\n+ 900: '#263238',\n+};\n",
        "chatgpt_cot": "\"Add percentage display to TypeAnalysis table for color count, improving data visualization and user experience.\""
    },
    {
        "org_diff": "diff --git a/models/cube.js b/models/cube.js @@ -52,26 +52,19 @@ const cubeSchema = mongoose.Schema({\nname: {\ntype: String,\nrequired: true,\n- index: true,\n},\nshortID: {\ntype: String,\nrequired: true,\n- index: true,\n- },\n- urlAlias: {\n- type: String,\n- index: true,\n},\n+ urlAlias: String,\nowner: {\ntype: String,\nrequired: true,\n- index: true,\n},\nisListed: {\ntype: Boolean,\ndefault: true,\n- index: true,\n},\nprivatePrices: {\ntype: Boolean,\n@@ -80,22 +73,18 @@ const cubeSchema = mongoose.Schema({\nisFeatured: {\ntype: Boolean,\ndefault: false,\n- index: true,\n},\noverrideCategory: {\ntype: Boolean,\ndefault: false,\n- index: true,\n},\ncategoryOverride: {\ntype: String,\ndefault: 'Vintage',\n- index: true,\n},\ncategoryPrefixes: {\ntype: [String],\ndefault: [],\n- index: true,\n},\ntags: {\ntype: [String],\n@@ -129,10 +118,7 @@ const cubeSchema = mongoose.Schema({\nimage_artist: String,\nimage_name: String,\nowner_name: String,\n- date_updated: {\n- type: Date,\n- index: true,\n- },\n+ date_updated: Date,\nupdated_string: String,\ndefault_sorts: [String],\ncard_count: Number,\n@@ -163,6 +149,14 @@ const cubeSchema = mongoose.Schema({\n},\n});\n+cubeSchema.index({\n+ shortID: 1,\n+});\n+\n+cubeSchema.index({\n+ urlAlias: 1,\n+});\n+\ncubeSchema.index({\nowner: 1,\ndate_updated: -1,\n@@ -173,8 +167,21 @@ cubeSchema.index({\ndate_updated: -1,\n});\n+// these indexes are for explore queries\ncubeSchema.index({\n- name: 1,\n+ isFeatured: 1,\n+});\n+\n+cubeSchema.index({\n+ isListed: 1,\n+ owner: 1,\n+ card_count: 1,\n+ date_updated: -1,\n+});\n+\n+cubeSchema.index({\n+ isListed: 1,\n+ owner: 1,\nnumDecks: -1,\n});\n",
        "org_msg": "update cube indexes",
        "sim_msg": "remove unused text feature. fixes",
        "sim_diff": "diff --git a/packages/idyll-document/src/utils/schema2element.js b/packages/idyll-document/src/utils/schema2element.js @@ -7,7 +7,6 @@ const _componentMap = new WeakMap();\nclass ReactJsonSchema {\nconstructor(componentMap) {\nif (componentMap) this.setComponentMap(componentMap);\n-\n}\nparseSchema(schema) {\n@@ -25,10 +24,11 @@ class ReactJsonSchema {\nconst Components = [];\nlet index = 0;\nfor (const subSchema of subSchemas) {\n- if (typeof subSchema === \"string\") {\n+ if (typeof subSchema === 'string') {\nComponents.push(subSchema);\n} else {\n- subSchema.key = typeof subSchema.key !== 'undefined' ? subSchema.key : index;\n+ subSchema.key =\n+ typeof subSchema.key !== 'undefined' ? subSchema.key : index;\nComponents.push(this.parseSchema(subSchema));\nindex++;\n}\n@@ -38,11 +38,11 @@ class ReactJsonSchema {\ncreateComponent(schema) {\nif (schema.type) {\n- if(schema.type === 'textnode') return schema.value;;\n+ if (schema.type === 'textnode') return schema.value;\n}\n- const { component, children, text, ...rest } = schema;\n+ const { component, children, ...rest } = schema;\nconst Component = this.resolveComponent(schema);\n- const Children = typeof text !== 'undefined' ? text : this.resolveComponentChildren(schema);\n+ const Children = this.resolveComponentChildren(schema);\nreturn createElement(Component, rest, Children);\n}\n@@ -51,7 +51,9 @@ class ReactJsonSchema {\nlet Component;\n// bail early if there is no component name\nif (!schema.hasOwnProperty('component')) {\n- throw new Error('ReactJsonSchema could not resolve a component due to a missing component attribute in the schema.');\n+ throw new Error(\n+ 'ReactJsonSchema could not resolve a component due to a missing component attribute in the schema.'\n+ );\n}\n// if it's already a ref bail early\n@@ -77,12 +79,14 @@ class ReactJsonSchema {\nif (DOM.hasOwnProperty(name)) {\nComponent = schema.component;\n} else {\n- console.warn(`Could not find an implementation for: ${schema.component}`);\n+ console.warn(\n+ `Could not find an implementation for: ${schema.component}`\n+ );\nreturn () => (\n<div style={{ color: 'black', border: 'solid 1px red' }}>\n<pre>Could not find an implementation for: {schema.component}</pre>\n</div>\n- )\n+ );\n}\n}\n@@ -91,7 +95,9 @@ class ReactJsonSchema {\n}\nresolveComponentChildren(schema) {\n- const children = (schema.hasOwnProperty('children')) ? this.parseSchema(schema.children) : [];\n+ const children = schema.hasOwnProperty('children')\n+ ? this.parseSchema(schema.children)\n+ : [];\nreturn children.length ? children : undefined;\n}\n",
        "chatgpt_cot": "Add and modify indexes in cube schema for better performance and explore queries. Fixes compilation issues and improves query performance."
    },
    {
        "org_diff": "diff --git a/nearley/cardFilters.ne b/nearley/cardFilters.ne @@ -104,9 +104,9 @@ oracleCondition -> (\"o\"i | \"oracle\"i | \"text\"i) stringOpValue {% ([, valuePred])\nsetCondition -> (\"s\"i | \"set\"i) alphaNumericOpValue {% ([, valuePred]) => genericCondition('set', cardSet, valuePred) %}\n-powerCondition -> (\"pow\"i | \"power\"i) halfIntOpValue {% ([, valuePred]) => genericCondition('power', cardPower, valuePred) %}\n+powerCondition -> (\"pow\"i | \"power\"i) halfIntOpValue {% ([, valuePred]) => genericCondition('power', (c) => parseFloat(cardPower(c), 10), valuePred) %}\n-toughnessCondition -> (\"tough\"i | \"toughness\"i) halfIntOpValue {% ([, valuePred]) => genericCondition('toughness', cardToughness, valuePred) %}\n+toughnessCondition -> (\"tou\"i | \"tough\"i | \"toughness\"i) halfIntOpValue {% ([, valuePred]) => genericCondition('toughness', (c) => parseFloat(cardToughness(c), 10), valuePred) %}\ntagCondition -> (\"tag\"i | \"tags\"i) stringSetElementOpValue {% ([, valuePred]) => genericCondition('tags', cardTags, valuePred) %}\n",
        "org_msg": "Fix querying exact values of power/toughness.",
        "sim_msg": "Look up ancestor by both explicit and implied role",
        "sim_diff": "diff --git a/accessibility-checker-engine/src/v2/checker/accessibility/util/legacy.ts b/accessibility-checker-engine/src/v2/checker/accessibility/util/legacy.ts @@ -2182,15 +2182,15 @@ export class RPTUtil {\nbreak;\n}\ncase \"footer\": {\n- let ancestor = RPTUtil.getAncestor(ruleContext, \"article\");\n+ let ancestor = RPTUtil.getAncestorWithRole(ruleContext, \"article\", true);\nif (ancestor === null)\n- ancestor = RPTUtil.getAncestor(ruleContext, \"aside\");\n+ ancestor = RPTUtil.getAncestorWithRole(ruleContext, \"complementary\", true);\nif (ancestor === null)\n- ancestor = RPTUtil.getAncestor(ruleContext, \"main\");\n+ ancestor = RPTUtil.getAncestorWithRole(ruleContext, \"main\", true);\nif (ancestor === null)\n- ancestor = RPTUtil.getAncestor(ruleContext, \"nav\");\n+ ancestor = RPTUtil.getAncestorWithRole(ruleContext, \"navigation\", true);\nif (ancestor === null)\n- ancestor = RPTUtil.getAncestor(ruleContext, \"section\");\n+ ancestor = RPTUtil.getAncestorWithRole(ruleContext, \"region\", true);\nancestor !== null ? tagProperty = specialTagProperties[\"des-section-article\"] : tagProperty = specialTagProperties[\"not-des-section-article\"];\nbreak;\n}\n@@ -2198,15 +2198,15 @@ export class RPTUtil {\nhasAriaLabel(ruleContext) ? tagProperty = specialTagProperties[\"with-name\"] : tagProperty = specialTagProperties[\"without-name\"];\nbreak;\ncase \"header\":\n- let ancestor = RPTUtil.getAncestor(ruleContext, \"article\");\n+ let ancestor = RPTUtil.getAncestorWithRole(ruleContext, \"article\", true);\nif (ancestor === null)\n- ancestor = RPTUtil.getAncestor(ruleContext, \"aside\");\n+ ancestor = RPTUtil.getAncestorWithRole(ruleContext, \"complementary\", true);\nif (ancestor === null)\n- ancestor = RPTUtil.getAncestor(ruleContext, \"main\");\n+ ancestor = RPTUtil.getAncestorWithRole(ruleContext, \"main\", true);\nif (ancestor === null)\n- ancestor = RPTUtil.getAncestor(ruleContext, \"nav\");\n+ ancestor = RPTUtil.getAncestorWithRole(ruleContext, \"navigation\", true);\nif (ancestor === null)\n- ancestor = RPTUtil.getAncestor(ruleContext, \"section\");\n+ ancestor = RPTUtil.getAncestorWithRole(ruleContext, \"region\", true);\nancestor !== null ? tagProperty = specialTagProperties[\"des-section-article\"] : tagProperty = specialTagProperties[\"not-des-section-article\"];\nbreak;\ncase \"img\":\n@@ -2262,10 +2262,10 @@ export class RPTUtil {\ncase \"td\":\ncase \"th\":\ncase \"tr\":\n- if (RPTUtil.getAncestor(ruleContext, \"table\") !== null) {\n+ if (RPTUtil.getAncestorWithRole(ruleContext, \"table\", true) !== null) {\ntagProperty = specialTagProperties[\"des-table\"];\n} else {\n- RPTUtil.getAncestor(ruleContext, \"grid\") || RPTUtil.getAncestor(ruleContext, \"treegrid\") ? tagProperty = specialTagProperties[\"des-grid\"] : tagProperty = specialTagProperties[\"des-other\"];\n+ RPTUtil.getAncestorWithRole(ruleContext, \"grid\", true) || RPTUtil.getAncestorWithRole(ruleContext, \"treegrid\", true) ? tagProperty = specialTagProperties[\"des-grid\"] : tagProperty = specialTagProperties[\"des-other\"];\n}\nbreak;\ndefault:\n",
        "chatgpt_cot": "Refactor power and toughness conditions to use parseFloat for halfIntOpValue, fixing potential type conversion issues in cardFilters.ne file."
    },
    {
        "org_diff": "diff --git a/src/filtering/FuncOperations.js b/src/filtering/FuncOperations.js @@ -73,7 +73,7 @@ export const nameStringOperation = (op, value) => {\nif (shorthand) {\nexpandedValue = expandedValue.replace(new RegExp(shorthand, 'g'), NAME_PLACEHOLDER);\n}\n- return strOp(expandedValue);\n+ return strOp(fieldValue) || strOp(expandedValue);\n};\n};\n",
        "org_msg": "fixed oracle filter regression",
        "sim_msg": "fix(filter): fixed spelling error",
        "sim_diff": "diff --git a/src/os/ui/filter/ui/filterexport.js b/src/os/ui/filter/ui/filterexport.js @@ -181,7 +181,7 @@ os.ui.filter.ui.export = function(name, filters) {\nif (exportSuccess) {\nos.file.persist.saveFile(name, os.xml.serialize(root), 'text/xml; subtype=FILTER');\n} else {\n- var errorMsg = 'Something went wrong! We were unabled to export your filters.';\n+ var errorMsg = 'Something went wrong! We were unable to export your filters.';\nos.alertManager.sendAlert(errorMsg, os.alert.AlertEventSeverity.ERROR);\n}\n} else {\n",
        "chatgpt_cot": "\"Add fallback to original value in nameStringOperation\""
    },
    {
        "org_diff": "diff --git a/public/css/stylesheet.css b/public/css/stylesheet.css }\n.even-cols .col-even {\n- padding: 1px 3px;\n+ padding: 1px 2px;\n}\n.list-group-item {\n.card-list-item {\ntransition: .25s;\n- font-size: 12px;\n+ font-size: 11px;\nborder-radius: 0 !important;\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: ellipsis;\n}\n.card-list-item:not(:hover){\n- padding: 3px 6px;\n+ padding: 3px 4px;\ncolor: black;\ntext-decoration: none;\n}\n.card-list-item:hover{\n- padding: 3px 6px;\n+ padding: 3px 4px;\ncolor: black;\ntext-decoration: none;\n}\n",
        "org_msg": "Tweaked Cube CSS",
        "sim_msg": "Fix the aspect ratio fix",
        "sim_diff": "diff --git a/src/web/stylesheets/components/_pane.css b/src/web/stylesheets/components/_pane.css line-height: 30px;\nbackground-color: var(--primary-background-colour);\nflex-direction: row;\n+ padding-left: 10px;\n}\n.io-card.card:hover {\nmargin-top: auto;\nmargin-right: auto;\nmargin-bottom: auto;\n- padding: 10px;\n- padding-right: 0px;\n+ padding: 0px;\n}\n",
        "chatgpt_cot": "Update stylesheet.css for improved visual appearance and performance. Adjusted padding and font size for better layout and reduced transition time for smoother user experience."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cards.test.js b/__tests__/serverjs/cards.test.js @@ -5,10 +5,9 @@ beforeEach(() => {});\nafterEach(() => {});\ntest(\"stub\", () => {\n- expect.assertions(2);\n+ expect.assertions(1);\nvar promise = carddb.initializeCardDb(\"__tests__/fixtures\");\nreturn promise.then(function() {\n- expect(carddb.cardnames).not.toBe(undefined);\n- expect(carddb.cardnames.length).not.toBe(0);\n+ expect(carddb.cardnames.length).toBe(100);\n});\n});\n\\ No newline at end of file\n",
        "org_msg": "expect correct fixture length",
        "sim_msg": "Removed the pings from the client, so I cleared out the tests for it.",
        "sim_diff": "diff --git a/server/tests/classes/client.test.js b/server/tests/classes/client.test.js @@ -29,9 +29,6 @@ describe(\"Client\", () => {\nexpect(c.caches).toEqual([]);\nexpect(c.mobile).toBe(false);\nexpect(c.cards).toEqual([]);\n-\n- expect(c.sentPing).toBeNull();\n- expect(c.ping).toBeNull();\n});\ntest(\"should create a Scanner\", () => {\n",
        "chatgpt_cot": "\"Update assertions in cards.test.js to match carddb initialization changes\""
    },
    {
        "org_diff": "diff --git a/src/components/MagicMarkdown.js b/src/components/MagicMarkdown.js @@ -17,13 +17,9 @@ const InnerMarkdown = ({ markdown }) => {\nconst split = markdownStr.split(\n/(\\[.+?\\]\\(.+?\\)|@[a-zA-Z0-9_]+|\\*\\*\\*[^*]+?\\*\\*\\*|\\*\\*[^*]+?\\*\\*|\\*[^*]+?\\*|_[^_]+?_|__[^_]+?__|___[^_]+?___|~~[^~]+?~~|{[wubrgcmtqepxyzWUBRGCMTQEPXYZ\\d/-]+?}|\\[\\[!?[/]?[a-zA-Z ',-|]+?\\]\\]|%%\\d+%%|\\$\\$[^$]+?\\$\\$|\\$\\$\\$[^$]+?\\$\\$\\$|\\n)/gm,\n);\n- console.log('!!!!!!!!!!!!!!!!!\\nInner Markdown split:');\n- console.log(split);\nreturn (\n<>\n{split.map((section, position) => {\n- console.log('Inner Markdown section:');\n- console.log(section);\ntry {\nif (section.startsWith('$$$')) {\nconst sub = section.substring(1, section.length - 1);\n@@ -215,8 +211,6 @@ InnerMarkdown.propTypes = {\nconst Markdown = ({ markdown }) => {\nconst markdownStr = markdown.toString();\nconst split = markdownStr.split(/(#{1,6} .+\\r?\\n|(?:^1\\. .+(?:\\r?\\n|$))+|(?:^- .+(?:\\r?\\n|$))+)/gm);\n- console.log('/////////////////\\nMarkdown split:');\n- console.log(split);\nreturn (\n<>\n{split.map((section) => {\n@@ -290,8 +284,6 @@ const Markdown = ({ markdown }) => {\n} catch (err) {\nconsole.error(err);\n}\n- console.log('Markdown section:');\n- console.log(section);\nreturn <InnerMarkdown markdown={section} />;\n})}\n</>\n@@ -309,13 +301,9 @@ const OuterMarkdown = ({ markdown, limited }) => {\nconst markdownStr = markdown.toString();\nconst split = markdownStr.split(/(<<.+>>|(?:^>(?: .*)?\\r?\\n)+|^>>>[^<>]+<<<)/gm);\n- console.log('####################\\nOuter Markdown split:');\n- console.log(split);\nreturn (\n<>\n{split.map((section) => {\n- console.log(`Outer Markdown Section:`);\n- console.log(section);\nif (section.startsWith('<<')) {\nconst sub = section.substring(2, section.length - 2);\nreturn (\n@@ -338,16 +326,6 @@ const OuterMarkdown = ({ markdown, limited }) => {\n}\nif (section.startsWith('>>>')) {\nsection = section.replace(/>>>\\r?\\n?|<<</gm, '');\n- const lines = section.split('\\n');\n- console.log(`Lines:`);\n- console.log(lines);\n- lines.map((line) => {\n- console.log('Line:');\n- console.log(line);\n- console.log('Replaced');\n- console.log(line.replace(/(>>>)|(<<<)/g, ''));\n- return line;\n- });\nreturn (\n<div className=\"centered\">\n<Markdown markdown={section} />\n",
        "org_msg": "removed debugging statements",
        "sim_msg": "feat(docs): further tweaking",
        "sim_diff": "diff --git a/docs/build/search.js b/docs/build/search.js @@ -218,8 +218,10 @@ const processMarkdown = (syntaxTree, entries, entry) => {\nconst text = contents.join(' ')\n.replace(/\\n/g, ' ')\n.replace(/<br>/g, '')\n+ .replace(/\\|/g, '')\n.replace(/\\s\\s+/g, ' ')\n.replace(/::: tip/g, '')\n+ .replace(/---/g, '')\n.replace(/::: warning/g, '')\n.replace(/::: danger/g, '')\n.replace(/:::/g, '')\n@@ -239,6 +241,8 @@ const processMarkdown = (syntaxTree, entries, entry) => {\n}\nsyntaxTree.forEach((node, index) => {\n+ // skip yaml part\n+ if (index > 1) {\nconst val = processNode(node, parent)\nif (val.anchor) {\nhandleAnchor(val)\n@@ -247,6 +251,7 @@ const processMarkdown = (syntaxTree, entries, entry) => {\nelse if (val.text.charAt(0) !== '<' && val.text.charAt(val.text.length - 1) !== '>') {\ncontents.push(val.text)\n}\n+ }\n})\n// handle last bits on the page\n",
        "chatgpt_cot": "\"Fix console logs, remove unnecessary code, and optimize the file for better performance.\""
    },
    {
        "org_diff": "diff --git a/public/css/stylesheet.css b/public/css/stylesheet.css }\n-.card-list-item{\n- border-top-width: 0;\n- border-bottom-width: 0;\n-}\n-\n.cmc-group:first-of-type .card-list-item:first-of-type{\nborder-top-width: 0;\n}\nborder-bottom-width: 0;\n}\n-.card-list-item:first-of-type {\n- border-left-width: 0;\n- border-right-width: 0;\n- border-top-width:3px;\n- border-style: solid\n-}\n-.card-list-item:last-of-type {\n- border-left-width: 0;\n- border-right-width: 0;\n- border-bottom-width: 3px;\n- border-style: solid\n-}\n.white:not(:hover) {\nbackground-color: #ffffeb;\n}\n",
        "org_msg": "Remove double borders on CMC groups.",
        "sim_msg": "Adjust css to keep aspect ratio of previewed image",
        "sim_diff": "diff --git a/src/web/stylesheets/components/_pane.css b/src/web/stylesheets/components/_pane.css .io-card.card>img {\nfloat: left;\n- width: 128px;\n- height: 128px;\n- margin-left: 10px;\n- margin-top: 11px;\n+ width: auto;\n+ height: auto;\n+ max-width: 128px;\n+ max-height: 128px;\n+ margin-left: auto;\n+ margin-top: auto;\n+ margin-right: auto;\n+ margin-bottom: auto;\n+ padding: 10px;\n+ padding-right: 0px;\n+\n}\n.io-card.card .card-body .close {\n",
        "chatgpt_cot": "\"Refactor card-list-item styles, remove redundant border properties, and add conditional background color for white cards.\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -241,7 +241,7 @@ app.use((err, req, res, next) => {\n});\n});\n-schedule.scheduleJob('0 0 * * *', () => {\n+schedule.scheduleJob('0 8 * * *', () => {\nwinston.info('Starting midnight cardbase update...');\nupdatedb.updateCardbase();\n});\n",
        "org_msg": "Change cardbase to 8am utc",
        "sim_msg": "feat(scheduler): temporary disable the sheduler",
        "sim_diff": "diff --git a/src/main/main.js b/src/main/main.js @@ -111,8 +111,9 @@ function onReady() {\nctx.tokenService.loadTokens(),\nloadIdentity(ctx)\n]);\n- registerJobHandlers(ctx);\n- scheduleInitialJobs(ctx);\n+ // XXX Disable scheduler\n+ // registerJobHandlers(ctx);\n+ // scheduleInitialJobs(ctx);\nctx.txHistoryService.startSyncingJob();\nmainWindow.webContents.send('APP_SUCCESS_LOADING');\n} catch (error) {\n@@ -217,16 +218,16 @@ function createKeystoreFolder() {\n}\n}\n-function registerJobHandlers(ctx) {\n- ctx.vendorSyncJobHandler.registerHandler();\n- ctx.inventorySyncJobHandler.registerHandler();\n- ctx.marketplaceCountrySyncJobHandler.registerHandler();\n- ctx.taxTreatiesSyncJobHandler.registerHandler();\n-}\n+// function registerJobHandlers(ctx) {\n+// ctx.vendorSyncJobHandler.registerHandler();\n+// ctx.inventorySyncJobHandler.registerHandler();\n+// ctx.marketplaceCountrySyncJobHandler.registerHandler();\n+// ctx.taxTreatiesSyncJobHandler.registerHandler();\n+// }\n-function scheduleInitialJobs(ctx) {\n- ctx.inventoryService.start();\n- ctx.vendorService.start();\n- ctx.marketplaceCountryService.start();\n- ctx.taxTreatiesService.start();\n-}\n+// function scheduleInitialJobs(ctx) {\n+// ctx.inventoryService.start();\n+// ctx.vendorService.start();\n+// ctx.marketplaceCountryService.start();\n+// ctx.taxTreatiesService.start();\n+// }\n",
        "chatgpt_cot": "Update scheduled job time for midnight cardbase update in app.js."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -1759,6 +1759,14 @@ function tokenizeInput(filterText, tokens) {\nlet quoteOp_re = new RegExp('(?:' + operators + ')\"');\nlet parens = false;\n+ //find category\n+ let category = '';\n+ if (token.operand == 'none') {\n+ category = 'name';\n+ } else {\n+ category = firstTerm[0].split(operators_re)[0];\n+ }\n+\n//find arg value\n//if there are two quotes, and first char is quote\nif (filterText.indexOf('\"') == 0 && filterText.split('\"').length > 2) {\n@@ -1774,19 +1782,12 @@ function tokenizeInput(filterText, tokens) {\ntoken.arg = filterText.match(quotes_re)[1];\nparens = true;\n} else if (token.operand != 'none'){\n- token.arg = firstTerm[0].split(')')[0].split(operators_re)[1];\n+ token.arg = firstTerm[0].slice(category.length + token.operand.length).split(')')[0];\n} else {\ntoken.arg = firstTerm[0].split(')')[0];\n}\n- let category = '';\n- //find category\n- if (token.operand == 'none') {\n- category = 'name';\n- } else {\n- category = firstTerm[0].split(operators_re)[0];\n- }\nfilterText = filterText.slice((token.operand == 'none' ? (token.arg.length) : (token.arg.length + token.operand.length + category.length)) + (parens ? 2 : 0));\nif (!categoryMap.has(category)) {\n",
        "org_msg": "Fix bugfix with operand checking\nThis commit fixes the failure of expressions that contain multiple\noperands, i.e. 'o:::::::' or similar. Now all operands\n(':','<','>','=','<=','>=') besides the first in an expression are\nignored. so 'o:::::::::::' will return cards whose oracle text contains\n':::::::::'.",
        "sim_msg": "Fix double placement of * due to implicit multiplication\nFix issue",
        "sim_diff": "diff --git a/nerdamer.core.js b/nerdamer.core.js @@ -6132,9 +6132,10 @@ var nerdamer = (function (imports) {\n//assume multiplication if it's not an operator except for minus\nvar is_operator = nxt in operators;\n- if((is_operator && operators[nxt].value === MINUS) || !is_operator)\n+ if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\ntarget.push(new Token(MULT, Token.OPERATOR, col));\n}\n+ }\nhas_space = false; //remove the space\n}\nelse {\n@@ -10006,7 +10007,7 @@ var nerdamer = (function (imports) {\nvar retval = '';\nvar tokens = this.filterTokens(raw_tokens);\nvar replace = {\n- 'cdot': '*',\n+ 'cdot': '',\n'times': '*',\n'infty': 'Infinity'\n};\n@@ -11672,4 +11673,3 @@ var nerdamer = (function (imports) {\nif ((typeof module) !== 'undefined') {\nmodule.exports = nerdamer;\n};\n\\ No newline at end of file\n-\n",
        "chatgpt_cot": "Refactor category handling logic in tokenizeInput function to improve readability and maintainability."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -364,8 +364,7 @@ async function finish() {\ndraft.seats[i].description = `This deck was drafted by a bot with color preference for ${colors.join('')}.`;\nbotIndex += 1;\n} else {\n- const picked = fromEntries(COLOR_COMBINATIONS.map((comb) => [comb.join(''), 0]));\n- picked.cards = [];\n+ const picked = createSeen();\naddSeen(picked, draft.seats[i].pickorder, draft.synergies);\nconst colors = botColors(\nnull,\n",
        "org_msg": "Fix bug with finishing draft.",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "\"Refactor Draft.js to use createSeen function for better code organization and readability\""
    },
    {
        "org_diff": "diff --git a/src/pages/UserAccountPage.js b/src/pages/UserAccountPage.js @@ -30,11 +30,13 @@ import Advertisement from 'components/Advertisement';\nimport DynamicFlash from 'components/DynamicFlash';\nimport MainLayout from 'layouts/MainLayout';\nimport RenderToRoot from 'utils/RenderToRoot';\n+import TextEntry from 'components/TextEntry';\nconst UserAccountPage = ({ user, defaultNav, loginCallback }) => {\nconst [nav, setNav] = useState(defaultNav);\nconst [imageValue, setImageValue] = useState('');\nconst [imageDict, setImageDict] = useState({});\n+ const [markdown, setMarkdown] = useState(user?.about ?? '');\nuseEffect(() => {\nfetch('/cube/api/imagedict')\n@@ -55,6 +57,8 @@ const UserAccountPage = ({ user, defaultNav, loginCallback }) => {\nevent.preventDefault();\n}, []);\n+ const handleChangeMarkdown = useCallback((event) => setMarkdown(event.target.value), [setMarkdown]);\n+\nconst result = imageDict[imageValue.toLowerCase()];\nlet image;\nif (result) {\n@@ -122,16 +126,6 @@ const UserAccountPage = ({ user, defaultNav, loginCallback }) => {\n</dd>\n<dt className=\"col-sm-3\">Email</dt>\n<dd className=\"col-sm-9\">{user.email}</dd>\n- <dt className=\"col-sm-3\">About</dt>\n- <dd className=\"col-sm-9\">\n- <Input\n- type=\"textarea\"\n- maxLength=\"2500\"\n- placeholder=\"Describe yourself here... (max length 2500)\"\n- name=\"body\"\n- defaultValue={user.about}\n- />\n- </dd>\n<dt className=\"col-sm-3\">Profile Pic</dt>\n<dd className=\"col-sm-9\">\n<Row>\n@@ -159,6 +153,10 @@ const UserAccountPage = ({ user, defaultNav, loginCallback }) => {\n</Col>\n</Row>\n</dd>\n+ <dt className=\"col-sm-3\">About</dt>\n+ <dd className=\"col-sm-9\">\n+ <TextEntry maxLength={2500} onChange={handleChangeMarkdown} name=\"body\" value={markdown} />\n+ </dd>\n</dl>\n<Row noGutters>\n<Button className=\"ml-auto\" block outline color=\"success\" type=\"submit\">\n",
        "org_msg": "Added TextEntry to user account page",
        "sim_msg": "[web] Don't show option to change password for SIWE accounts\nSummary: Pretty straightforward, we just hide this setting for accounts that have signed in with Ethereum (based solely on `accountHasPassword` check).\nTest Plan:\nSIWE Account:\n{F342071}\n\"Traditional\" account:\n{F342072}\nReviewers: ashoat, tomek",
        "sim_diff": "diff --git a/web/settings/account-settings.react.js b/web/settings/account-settings.react.js @@ -5,6 +5,7 @@ import * as React from 'react';\nimport { logOut, logOutActionTypes } from 'lib/actions/user-actions';\nimport { useModalContext } from 'lib/components/modal-provider.react';\nimport { preRequestUserStateSelector } from 'lib/selectors/account-selectors';\n+import { accountHasPassword } from 'lib/shared/account-utils.js';\nimport {\nuseDispatchActionPromise,\nuseServerCall,\n@@ -47,12 +48,31 @@ function AccountSettings(): React.Node {\n[popModal, pushModal],\n);\n+ const isAccountWithPassword = useSelector(state =>\n+ accountHasPassword(state.currentUserInfo),\n+ );\n+\nconst currentUserInfo = useSelector(state => state.currentUserInfo);\nif (!currentUserInfo || currentUserInfo.anonymous) {\nreturn null;\n}\nconst { username } = currentUserInfo;\n+ let changePasswordSection;\n+ if (isAccountWithPassword) {\n+ changePasswordSection = (\n+ <li>\n+ <span>Password</span>\n+ <span className={css.passwordContainer}>\n+ <span className={css.password}>******</span>\n+ <a className={css.editPasswordLink} onClick={showPasswordChangeModal}>\n+ <SWMansionIcon icon=\"edit-1\" size={22} />\n+ </a>\n+ </span>\n+ </li>\n+ );\n+ }\n+\nreturn (\n<div className={css.container}>\n<h4 className={css.header}>My Account</h4>\n@@ -67,18 +87,7 @@ function AccountSettings(): React.Node {\n<p className={css.buttonText}>Log out</p>\n</Button>\n</li>\n- <li>\n- <span>Password</span>\n- <span className={css.passwordContainer}>\n- <span className={css.password}>******</span>\n- <a\n- className={css.editPasswordLink}\n- onClick={showPasswordChangeModal}\n- >\n- <SWMansionIcon icon=\"edit-1\" size={22} />\n- </a>\n- </span>\n- </li>\n+ {changePasswordSection}\n<li>\n<span>Friend List</span>\n<Button variant=\"text\" onClick={openFriendList}>\n",
        "chatgpt_cot": "\"Add TextEntry component for markdown and remove Input component for user about section\""
    },
    {
        "org_diff": "diff --git a/public/js/sortfilter.js b/public/js/sortfilter.js @@ -58,8 +58,7 @@ function cardIsLabel(card, label, sort) {\n} else if (sort == 'Color Identity') {\nreturn GetColorIdentity(card.colors) == label;\n} else if (sort == 'Color') {\n- if(!card.details.colors)\n- {\n+ if (!card.details.colors) {\nreturn label == 'Colorless';\n}\nswitch (label) {\n",
        "org_msg": "Fix committed beautify error.",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Fix formatting issue in color check condition in sortfilter.js."
    },
    {
        "org_diff": "diff --git a/src/pages/DashboardPage.js b/src/pages/DashboardPage.js @@ -14,9 +14,13 @@ import Advertisement from 'components/Advertisement';\nimport DynamicFlash from 'components/DynamicFlash';\nimport MainLayout from 'layouts/MainLayout';\nimport RenderToRoot from 'utils/RenderToRoot';\n+import withModal from 'components/WithModal';\n+import CreateCubeModal from 'components/CreateCubeModal';\nimport { Button, Card, Col, Row, CardHeader, CardBody, CardFooter } from 'reactstrap';\n+const CreateCubeModalButton = withModal(Button, CreateCubeModal);\n+\nconst DashboardPage = ({ posts, cubes, decks, user, loginCallback, content }) => {\nconst filteredDecks = cubes.length > 2 ? decks : decks.slice(0, 6);\n@@ -41,9 +45,7 @@ const DashboardPage = ({ posts, cubes, decks, user, loginCallback, content }) =>\n) : (\n<p className=\"m-2\">\nYou don't have any cubes.{' '}\n- <Button data-toggle=\"modal\" data-target=\"#cubeModal\" color=\"success\">\n- Add a new cube?\n- </Button>\n+ <CreateCubeModalButton color=\"success\">Add a new cube?</CreateCubeModalButton>\n</p>\n)}\n</Row>\n",
        "org_msg": "Fixed new cube link in dashboard page",
        "sim_msg": "Render `WidgetNull` when in viewOnly mode.",
        "sim_diff": "diff --git a/assets/js/modules/analytics/components/dashboard/DashboardGoalsWidget.js b/assets/js/modules/analytics/components/dashboard/DashboardGoalsWidget.js @@ -41,11 +41,18 @@ import parseDimensionStringToDate from '../../util/parseDimensionStringToDate';\nimport { isZeroReport } from '../../util';\nimport { generateDateRangeArgs } from '../../util/report-date-range-args';\nimport { useFeature } from '../../../../hooks/useFeature';\n+import useViewOnly from '../../../../hooks/useViewOnly';\nconst { useSelect, useInViewSelect } = Data;\n-function DashboardGoalsWidget( { WidgetReportZero, WidgetReportError } ) {\n+function DashboardGoalsWidget( {\n+ WidgetNull,\n+ WidgetReportZero,\n+ WidgetReportError,\n+} ) {\nconst zeroDataStates = useFeature( 'zeroDataStates' );\n+ const viewOnlyDashboard = useViewOnly();\n+\nconst isGatheringData = useInViewSelect( ( select ) =>\nselect( MODULES_ANALYTICS ).isGatheringData()\n);\n@@ -149,6 +156,10 @@ function DashboardGoalsWidget( { WidgetReportZero, WidgetReportError } ) {\n}\nif ( ! goals?.items?.length ) {\n+ if ( viewOnlyDashboard ) {\n+ return <WidgetNull />;\n+ }\n+\nreturn (\n<CTA\ntitle={ __(\n",
        "chatgpt_cot": "Add CreateCubeModalButton and use withModal HOC to handle cube creation in DashboardPage. Fixes modal button functionality and improves user experience."
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -324,14 +324,15 @@ const CubeListNavbar = ({\nevent.preventDefault();\nconst { target } = event;\nconst collapse = target.getAttribute('data-target');\n- setOpenCollapse((openCollapse) => (openCollapse === collapse ? null : collapse));\n+ // Avoid shadowing the openCollapse prop\n+ setOpenCollapse((openCollapseArg) => (openCollapseArg === collapse ? null : collapse));\n},\n[setOpenCollapse],\n);\n- const handleOpenTagColorsModal = useCallback((event) => setTagColorsModalOpen(true), []);\n- const handleToggleTagColorsModal = useCallback((event) => setTagColorsModalOpen(false), []);\n- const handleToggleSelectEmptyModal = useCallback((event) => setSelectEmptyModalOpen(false), []);\n+ const handleOpenTagColorsModal = useCallback(() => setTagColorsModalOpen(true), []);\n+ const handleToggleTagColorsModal = useCallback(() => setTagColorsModalOpen(false), []);\n+ const handleToggleSelectEmptyModal = useCallback(() => setSelectEmptyModalOpen(false), []);\nreturn (\n<div className={`usercontrols${className ? ` ${className}` : ''}`}>\n@@ -468,16 +469,20 @@ CubeListNavbar.propTypes = {\nsetOpenCollapse: PropTypes.func.isRequired,\ndefaultPrimarySort: PropTypes.string.isRequired,\ndefaultSecondarySort: PropTypes.string.isRequired,\n+ sorts: PropTypes.arrayOf(PropTypes.string),\nsetSorts: PropTypes.func.isRequired,\ndefaultSorts: PropTypes.arrayOf(PropTypes.string).isRequired,\ndefaultFilterText: PropTypes.string.isRequired,\n+ filter: PropTypes.func,\nsetFilter: PropTypes.func.isRequired,\nclassName: PropTypes.string,\n};\nCubeListNavbar.defaultProps = {\nopenCollapse: null,\n- className: '',\n+ sorts: null,\n+ filter: null,\n+ className: null,\n};\nexport default CubeListNavbar;\n",
        "org_msg": "Fix remaining eslint issues in CubeListNavbar",
        "sim_msg": "changing delayPressIn to 50",
        "sim_diff": "diff --git a/src/components/EventList.js b/src/components/EventList.js @@ -26,7 +26,7 @@ const EventList = ({\nrenderItem={({ item: event }) => (\n<View style={styles.eventListItem}>\n<TouchableOpacity\n- delayPressIn={10}\n+ delayPressIn={50}\nonPress={() => onPress(event.fields.name[locale])}\n>\n<EventCard name={event.fields.name[locale]} />\n",
        "chatgpt_cot": "Refactor CubeListNavbar component to avoid shadowing props, update PropTypes, and set default values. Fix handle functions to use useCallback."
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -56,7 +56,8 @@ function cardFromId(id, fields) {\nif (data._carddict[id]) {\ndetails = data._carddict[id];\n} else {\n- winston.error(null, { error: new Error(`Could not find card from id: ${JSON.stringify(id, null, 2)}`) });\n+ // TODO: replace this back with error. it was clogging the logs.\n+ winston.info(null, { error: new Error(`Could not find card from id: ${JSON.stringify(id, null, 2)}`) });\ndetails = getPlaceholderCard(id);\n}\n",
        "org_msg": "put card missing into info. I don't want to see this in error logs right now",
        "sim_msg": "add province strength method to basecard",
        "sim_diff": "diff --git a/server/game/basecard.js b/server/game/basecard.js @@ -492,6 +492,10 @@ class BaseCard {\nreturn this.abilities.actions;\n}\n+ getProvinceStrengthBonus() {\n+ return 0;\n+ }\n+\ngetShortSummary() {\nreturn {\nid: this.cardData.id,\n",
        "chatgpt_cot": "\"Replace error logging with info logging in cardFromId function to prevent log clogging\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -857,7 +857,7 @@ router.get('/samplepack/:id/:seed', function(req, res) {\nmetadata: generateMeta(\n'Cube Cobra Sample Pack',\n`A sample pack from ${cube.name}`,\n- `https://www.cubecobra.com/cube/samplepackimage/${req.params.id}/${pack.seed}`,\n+ `https://www.cubecobra.com/cube/samplepackimage/${req.params.id}/${pack.seed}.png`,\n`https://www.cubecobra.com/cube/samplepack/${req.params.id}/${pack.seed}`\n),\nloginCallback: '/cube/samplepack/' + req.params.id\n@@ -868,6 +868,7 @@ router.get('/samplepack/:id/:seed', function(req, res) {\n});\nrouter.get('/samplepackimage/:id/:seed', function(req, res) {\n+ req.params.seed = req.params.seed.replace('.png','');\ngeneratePack(req.params.id, carddb, req.params.seed, function(err, pack) {\nif (err) {\nreq.flash('danger', 'Pack could not be created');\n",
        "org_msg": "Added .png extension",
        "sim_msg": "feat(proton) properly serve images",
        "sim_diff": "diff --git a/app/templates/proton/rust/src/main.rs b/app/templates/proton/rust/src/main.rs @@ -52,6 +52,21 @@ fn main() {\nthread::spawn(move || {\nrouille::start_server(server_url, move |request| {\n+ let url = request.url();\n+ if url.starts_with(\"/statics/\") || url.starts_with(\"/img/\")\n+ {\n+ let asset = ASSETS.get(&format!(\"../dist/proton/UnPackaged{}\", url)).unwrap().into_owned();\n+ if url.ends_with(\".svg\")\n+ {\n+ rouille::Response::svg(String::from_utf8(asset).unwrap())\n+ }\n+ else\n+ {\n+ rouille::Response::from_data(\"application/octet-stream\", asset)\n+ }\n+ }\n+ else\n+ {\nrouter!(request,\n(GET) (/) => {\nrouille::Response::html(String::from_utf8(ASSETS.get(\"../dist/proton/UnPackaged/index.html\").unwrap().into_owned()).unwrap())\n@@ -65,22 +80,13 @@ fn main() {\nrouille::Response::from_data(\"text/css;charset=utf-8\", ASSETS.get(&format!(\"../dist/proton/UnPackaged/css/{}\", id)).unwrap().into_owned())\n},\n- // webpack managed assets\n- (GET) (/img/{id: String}) => {\n- rouille::Response::from_data(\"application/octet-stream\", ASSETS.get(&format!(\"../dist/proton/UnPackaged/img/{}\", id)).unwrap().into_owned())\n- },\n-\n- // static assets\n- (GET) (/statics/{id: String}) => {\n- rouille::Response::from_data(\"application/octet-stream\", ASSETS.get(&format!(\"../dist/proton/UnPackaged/statics/{}\", id)).unwrap().into_owned())\n- },\n-\n(GET) (/fonts/{id: String}) => {\nrouille::Response::from_data(\"application/octet-stream\", ASSETS.get(&format!(\"../dist/proton/UnPackaged/fonts/{}\", id)).unwrap().into_owned())\n},\n_ => rouille::Response::empty_404()\n)\n+ }\n});\n});\n}\n",
        "chatgpt_cot": "Fix image file extension issue in cube_routes.js. Replace .png with req.params.seed to generate the sample pack image."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1947,6 +1947,7 @@ router.get('/deckbuilder/:id', function(req, res) {\nif (!user || err) {\nres.render('cube/cube_deckbuilder', {\ncube: cube,\n+ cube_id: get_cube_id(cube),\nowner: 'Unknown',\nactiveLink: 'playtest',\nloginCallback: '/cube/draft/' + req.params.id,\n@@ -1957,6 +1958,7 @@ router.get('/deckbuilder/:id', function(req, res) {\n} else {\nres.render('cube/cube_deckbuilder', {\ncube: cube,\n+ cube_id: get_cube_id(cube),\nowner: user.username,\nactiveLink: 'playtest',\nloginCallback: '/cube/draft/' + req.params.id,\n@@ -2018,6 +2020,7 @@ router.get('/deck/:id', function(req, res) {\nreturn res.render('cube/cube_deck', {\noldformat: true,\ncube: cube,\n+ cube_id: get_cube_id(cube),\nowner: owner_name,\nactiveLink: 'playtest',\ndrafter: drafter_name,\n@@ -2046,6 +2049,7 @@ router.get('/deck/:id', function(req, res) {\nreturn res.render('cube/cube_deck', {\noldformat: false,\ncube: cube,\n+ cube_id: get_cube_id(cube),\nowner: owner_name,\nactiveLink: 'playtest',\ndrafter: drafter_name,\n",
        "org_msg": "cube id url bug fix",
        "sim_msg": "docs: async and createDraft / finishDraft",
        "sim_diff": "diff --git a/readme.md b/readme.md @@ -335,6 +335,46 @@ For a more in-depth study, see [Distributing patches and rebasing actions using\nTip: Check this trick to [compress patches](https://medium.com/@david.b.edelstein/using-immer-to-compress-immer-patches-f382835b6c69) produced over time.\n+## Async producers\n+\n+It is allowed to return Promise objects from recipes. Or, in other words, to use `async / await`. This can be pretty useful for long running processes, that only produce the new object once the promise chain resolves. Note that `produce` itself (even in the curried form) itself will return a promise if the producer is async. Example:\n+\n+```javascript\n+import produce from \"immer\"\n+\n+const user = {\n+ name: \"michel\",\n+ todos: []\n+}\n+\n+const loadedUser = await produce(users, async function(draft) {\n+ user.todos = await window.fetch(\"http://host/\" + draft.name).json()\n+})\n+```\n+\n+_Warning: please note that the draft shouldn't be 'leaked' from the async process and stored else where. The draft will still be revoked as soon as the async process completes._\n+\n+## `createDraft` and `finishDraft`\n+\n+`createDraft` and `finishDraft` are two low-level functions that are mostly useful for libraries that build abstractions on top of immer. It avoids the need to always create a function in order to work with drafts. Instead, one can create a draft, modify it, and at some time in the future finish the draft, in which case the next immutable state will be produced. We could for example rewrite our above example as:\n+\n+```javascript\n+import { createDraft, finishDraft } from \"immer\"\n+\n+const user = {\n+ name: \"michel\",\n+ todos: []\n+}\n+\n+const draft = createDraft(user)\n+const draft.todos = await window.fetch(\"http://host/\" + draft.name).json()\n+const loadedUser = finishDraft(draft)\n+```\n+\n+Note: `finishDraft` takes a `patchListener` as second argument, which can be used to record the patches, similarly to `produce`.\n+\n+_Warning: in general, we recommend to use `produce` instead of the `createDraft` / `finishDraft` combo, `produce` is less error prone in usage, and more clearly separates the concepts of mutability and immutability in your code base._\n+\n## Returning data from producers\nIt is not needed to return anything from a producer, as Immer will return the (finalized) version of the `draft` anyway. However, it is allowed to just `return draft`.\n",
        "chatgpt_cot": "Add function to retrieve cube_id in cube_routes.js for rendering cube_deck and cube_deckbuilder templates. Fixing cube rendering logic."
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -164,12 +164,12 @@ class CubeListNavbar extends Component {\n<DropdownToggle nav caret>{canEdit ? 'Import/Export' : 'Export'}</DropdownToggle>\n<DropdownMenu right>\n{!canEdit ? '' : <>\n- <DropdownItem disabled>Export</DropdownItem>\n+ <DropdownItem disabled>Import</DropdownItem>\n<DropdownItem data-toggle=\"modal\" data-target=\"#pasteBulkModal\">Paste Text</DropdownItem>\n<DropdownItem data-toggle=\"modal\" data-target=\"#uploadBulkModal\">Upload File</DropdownItem>\n<DropdownItem data-toggle=\"modal\" data-target=\"#importModal\">Import from CubeTutor</DropdownItem>\n<DropdownItem divider />\n- <DropdownItem disabled>Import</DropdownItem>\n+ <DropdownItem disabled>Export</DropdownItem>\n</>}\n<DropdownItem href={`/cube/download/plaintext/${cubeID}`}>Card Names (.txt)</DropdownItem>\n<DropdownItem href={`/cube/download/csv/${cubeID}`}>Comma-Separated (.csv)</DropdownItem>\n",
        "org_msg": "Flip export/import labels.",
        "sim_msg": "Prevent navigation on submenu item click",
        "sim_diff": "diff --git a/packages/cx-core/src/widgets/nav/MenuItem.js b/packages/cx-core/src/widgets/nav/MenuItem.js @@ -270,6 +270,10 @@ class MenuItemComponent extends VDOM.Component {\nonClick(e) {\ne.stopPropagation();\n+\n+ let {widget} = this.props.instance;\n+ if (widget.dropdown)\n+ e.preventDefault(); //prevent navigation\n}\nonFocus() {\n",
        "chatgpt_cot": "Fix dropdown item labels and enable/disable based on user permissions in CubeListNavbar. Ensure proper import/export functionality and improve user experience."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -98,32 +98,78 @@ app.get('*', function(req, res, next)\n// Home route\napp.get('/', function(req, res)\n{\n- var user_id = '';\n- if(req.user) user_id = req.user._id;\n- Cube.find({\n- 'card_count':{$gt : 200},\n- $or:[ {'isListed':true},{'isListed':null}, {'owner':user_id} ]\n- }).sort({'date_updated': -1}).limit(12).exec(function(err, recents)\n- {\n- Cube.find({\n- $or:[ {'isListed':true},{'isListed':null}, {'owner':user_id} ]\n- }).sort({'numDecks': -1}).limit(12).exec(function(err, drafted)\n- {\n- Blog.find({dev:'true'}).sort({'date': -1}).exec(function(err, blog)\n- {\n- Deck.find().sort({'date': -1}).limit(10).exec(function(err, decks)\n- {\n+ const routeReady = () => {\n+ if (recents && drafted && blog && decks) {\ndecklinks = decks.splice(Math.max(decks.length - 10, 0), decks.length);\nres.render('index',\n{\n- devblog:blog[0],\n+ devblog:blog.length > 0 ? blog[0] : null,\nrecents:recents,\ndrafted:drafted,\ndecks:decklinks\n});\n+ }\n+ };\n+\n+ var user_id = '';\n+ var recents, drafted, blog, decks;\n+\n+ if(req.user) user_id = req.user._id;\n+ Cube.find({\n+ 'card_count':{$gt : 200},\n+ $or:[ {'isListed':true},{'isListed':null}, {'owner':user_id} ]\n+ }).sort({'date_updated': -1}).limit(12).exec(function(err, result) {\n+ if (err) {\n+ recents = [];\n+ console.log('recents failed to load');\n+ }\n+\n+ if (result) {\n+ recents = result;\n+ }\n+\n+ routeReady();\n});\n+\n+ Cube.find({\n+ $or:[ {'isListed':true},{'isListed':null}, {'owner':user_id} ]\n+ }).sort({'numDecks': -1}).limit(12).exec(function(err, result) {\n+ if (err) {\n+ drafted = [];\n+ console.log('drafted failed to load');\n+ }\n+\n+ if (result) {\n+ drafted = result;\n+ }\n+\n+ routeReady();\n});\n+\n+ Blog.find({dev:'true'}).sort({'date': -1}).exec(function(err, result) {\n+ if (err) {\n+ blog = [];\n+ console.log('blog failed to load');\n+ }\n+\n+ if (result) {\n+ blog = result;\n+ }\n+\n+ routeReady();\n});\n+\n+ Deck.find().sort({'date': -1}).limit(10).exec(function(err, result) {\n+ if (err) {\n+ decks = [];\n+ console.log('decks failed to load');\n+ }\n+\n+ if (result) {\n+ decks = result;\n+ }\n+\n+ routeReady();\n});\n});\n",
        "org_msg": "refactor nested callbacks on homepage",
        "sim_msg": "fix(source-wordpress): better error handling",
        "sim_diff": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js @@ -5,6 +5,7 @@ const querystring = require('querystring')\nclass WordPressSource {\nstatic defaultOptions () {\nreturn {\n+ baseUrl: '',\nperPage: 100,\nconcurrent: 10,\nroutes: {},\n@@ -22,9 +23,15 @@ class WordPressSource {\nconst { baseUrl, perPage, concurrent } = this.options\nlet { routes } = this.options\n- const restUrl = `${baseUrl}/wp-json/wp/v2`\n+ const restUrl = `${baseUrl.replace(/\\/+$/, '')}/wp-json/wp/v2`\nconst restBases = { posts: {}, taxonomies: {}}\n+ try {\n+ await axios.get(restUrl)\n+ } catch (err) {\n+ throw new Error(`Failed to fetch baseUrl ${baseUrl}`)\n+ }\n+\nroutes = {\npost: '/:year/:month/:day/:slug',\npost_tag: '/tag/:slug',\n@@ -38,7 +45,6 @@ class WordPressSource {\nconst makeTermId = id => this.source.makeUid(`term-${id}`)\nconst { data: types } = await axios.get(`${restUrl}/types`)\n-\nconst { data: taxonomies } = await axios.get(`${restUrl}/taxonomies`)\nfor (const typeName in types) {\n@@ -66,7 +72,7 @@ class WordPressSource {\nfor (const typeName in restBases.posts) {\nconst restBase = restBases.posts[typeName]\n- const endpoint = `${baseUrl}/wp-json/wp/v2/${restBase}`\n+ const endpoint = `${restUrl}/${restBase}`\nconst posts = await fetchPaged(endpoint, { perPage, concurrent })\nfor (const post of posts) {\n@@ -98,7 +104,7 @@ class WordPressSource {\nfor (const typeName in restBases.taxonomies) {\nconst restBase = restBases.taxonomies[typeName]\n- const endpoint = `${baseUrl}/wp-json/wp/v2/${restBase}`\n+ const endpoint = `${restUrl}/${restBase}`\nconst terms = await fetchPaged(endpoint, { perPage, concurrent })\nfor (const term of terms) {\n@@ -131,7 +137,11 @@ function fetchPaged (url, options = {}) {\nconst totalItems = parseInt(res.headers['x-wp-total'], 10)\nconst totalPages = parseInt(res.headers['x-wp-totalpages'], 10)\n+ try {\nres.data = ensureArrayData(url, res.data)\n+ } catch (err) {\n+ return reject(err)\n+ }\nif (!totalItems || totalPages <= 1) {\nreturn resolve(res.data)\n@@ -152,7 +162,11 @@ function fetchPaged (url, options = {}) {\n})\nqueue.on('task_finish', (id, { data }) => {\n+ try {\nres.data.push(...ensureArrayData(id, data))\n+ } catch (err) {\n+ return reject(err)\n+ }\n})\nqueue.on('drain', () => {\n@@ -166,8 +180,11 @@ function ensureArrayData (url, data) {\ntry {\ndata = JSON.parse(data)\n} catch (err) {\n- console.error(`Failed to parse results from ${url}`)\n- return []\n+ throw new Error(\n+ `Failed to fetch ${url}\\n` +\n+ `Expected JSON response but got:\\n` +\n+ `${data.trim().substring(0, 150)}...\\n`\n+ )\n}\n}\nreturn data\n",
        "chatgpt_cot": "Refactor code for loading data asynchronously in the home route to improve performance and handle potential loading errors better."
    },
    {
        "org_diff": "diff --git a/public/css/stylesheet.css b/public/css/stylesheet.css background-color: #d4edff;\n}\n.black {\n- border-color: #e5dff2;\n- background-color: #e5dff2;\n+ border-color: #d6cbd6;\n+ background-color: #d6cbd6;\n}\n.red {\n- border-color: #ffd8d4;\n- background-color: #ffd8d4;\n+ border-color: #ffc8c8;\n+ background-color: #ffc8c8;\n}\n.green {\nborder-color: #e9ffd4;\nbackground-color: #fcf8a9;\n}\n.colorless {\n- border-color: #dcdae0;\n- background-color: #dcdae0;\n+ border-color: #e9e7eb;\n+ background-color: #e9e7eb;\n}\n.lands {\n- border-color: #ffdac4;\n- background-color: #ffdac4;\n+ border-color: #ffe0c0;\n+ background-color: #ffe0c0;\n}\n.dropdown-menu a:focus {\n",
        "org_msg": "Change colors of card list items to enhance contrast",
        "sim_msg": "Move close button to left",
        "sim_diff": "diff --git a/public/styles.css b/public/styles.css body { color: #333; margin: 5em; font: 14px/1.42 \"Helvetica Neue\", Helvetica, Arial, sans-serif; }\n-.answer { border: 1px solid #aaa; padding: 5px; box-sizing: content-box; }\n+.answer { border: 1px solid #aaa; padding: 5px; box-sizing: content-box; min-height: 100px;}\n.list { border: 1px solid #eee; margin-bottom: 10px; }\n.toggle {display: block;border: none;color: #68b4df;background: none;text-transform: uppercase;cursor: pointer;}\n.button { padding: 5px; display: inline-block; cursor: pointer; width: 20px; text-align: center; }\n@@ -14,12 +14,12 @@ button:hover { background: #eee; }\nborder: 1px solid #aaa;\nline-height: 0.8;\nvertical-align: top;\n- font-size: 30px;\n+ font-size: 20px;\nposition: absolute;\n- right: -15px;\n- top: -15px;\n- width: 30px;\n- height: 30px;\n+ left: -10px;\n+ top: -10px;\n+ width: 20px;\n+ height: 20px;\nborder-radius: 100px;\nbackground: #eee;\ntext-align: center;\n@@ -28,6 +28,7 @@ button:hover { background: #eee; }\n.boxes { display: flex; }\n.equationEditor {\nwidth: 50%;\n+ padding:10px;\n}\n.mathToolbar {\nmargin-bottom: 5px;\n",
        "chatgpt_cot": "Fix color scheme in stylesheet.css to improve visual consistency and accessibility. Update background and border colors for better user experience."
    },
    {
        "org_diff": "diff --git a/src/components/DraftDeck.js b/src/components/DraftDeck.js @@ -136,6 +136,11 @@ const DraftDeck = ({ oldFormat, drafter, cards, deck, botDecks, bots, canEdit })\n<DeckStacksStatic cards={stackedDeck} title={title} subtitle={subtitle(deck.flat().flat())} />\n</Col>\n</Row>\n+ <Row className=\"mt-3\">\n+ <Col>\n+ <DeckStacksStatic cards={stackedDeck} title={\"Sideboard\"} />\n+ </Col>\n+ </Row>\n<h4 className=\"mt-3\">Bot Decks</h4>\n<Row className=\"row-low-padding\">\n{botDecks.map((deck, botIndex) => (\n",
        "org_msg": "Added sideboard area",
        "sim_msg": "Changes to deck for stronghold",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -13,11 +13,12 @@ class Deck {\nvar result = {\nconflictDrawCards: [],\ndynastyDrawCards: [],\n- provinceCards: []\n+ provinceCards: [],\n+ stronghold: []\n};\n//conflict\n- this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ this.eachRepeatedCard(this.data.conflictDrawCards, cardData => {\nif(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\ndrawCard.location = 'conflict draw deck';\n@@ -26,7 +27,7 @@ class Deck {\n});\n//dynasty\n- this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ this.eachRepeatedCard(this.data.dynastyDrawCards, cardData => {\nif(['dynsaty'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\ndrawCard.location = 'dynasty draw deck';\n@@ -42,18 +43,15 @@ class Deck {\n}\n});\n- if(this.data.stronghold) {\n- result.stronghold = new DrawCard(player, _.extend({\n- code: this.data.stronghold.value,\n- type_code: 'stronghold',\n- stronghold_code: this.data.stronghold.value\n- }, this.data.stronghold));\n- } else {\n- result.stronghold = new DrawCard(player, { type_code: 'stronghold' });\n+ this.eachRepeatedCard(this.data.stronghold, cardData => {\n+ if(cardData.type_code === 'stronghold') {\n+ var strongholdCard = this.createCard(StrongholdCard, player, cardData);\n+ strongholdCard.location = 'stronghold deck';\n+ result.stronghold.push(strongholdCard);\n}\n- result.stronghold.moveTo('stronghold');\n+ });\n- result.allCards = [result.stronghold].concat(result.drawCards).concat(result.provinceCards).concat(result.conflictDrawCards).concat(result.dynastyDrawCards);\n+ result.allCards = [result.stronghold].concat(result.provinceCards).concat(result.conflictDrawCards).concat(result.dynastyDrawCards);\nreturn result;\n}\n",
        "chatgpt_cot": "\"Add sideboard to DraftDeck component for better user experience.\""
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -120,6 +120,7 @@ var methods = {\nvar options = carddb.nameToId[name.toLowerCase()];\noptions.forEach(function(option, index2) {\nvar card = carddb.cardFromId(option);\n+ card.display_image = util.getCardImageURL({details:card});\nif (!found && card.set.toLowerCase() == set) {\nfound = true;\nres[name] = {\n",
        "org_msg": "Fixed basics",
        "sim_msg": "Update fetch to look at new image location",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -32,7 +32,9 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.png');\n- var imagesrc = 'bundles/card_images/';\n+ var imagePack = card.pack_cards[0].pack.id;\n+ var imagesrc = 'bundles/card_images/' + imagePack;\n+\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n",
        "chatgpt_cot": "\"Add display image URL for card and fix set comparison in cubefn.js\""
    },
    {
        "org_diff": "diff --git a/public/js/analytics/averageCmc.js b/public/js/analytics/averageCmc.js @@ -42,7 +42,7 @@ onmessage = (e) => {\nfor (const card of cards) {\nconst asfan = card.asfan || 15 / cards.length;\nconst colorCat = GetColorCat(card.colors || card.details.color_identity);\n- const cmc = card.cmc || card.details.cmc;\n+ const cmc = card.cmc !== undefined ? card.cmc : card.details.cmc;\nColorCounts[colorCat].count += cmc;\nColorCounts.Total.count += cmc;\nColorCounts[colorCat].totalCount += 1;\n",
        "org_msg": "Update public/js/analytics/averageCmc.js\nFix handling of 0 cmc's.",
        "sim_msg": "Bugfix gradients handling",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -236,17 +236,12 @@ export const generateCard = async ({\ndescriptionBodyTextEl.innerHTML = lines.slice(1).join('\\n');\n} */\n{\n- const stopEls = el.querySelectorAll('#Background linearGradient > stop');\n+ const linearGradientName = 'linear-gradient-120';\n+ const stopEls = el.querySelectorAll(`#${linearGradientName} > stop`);\n// const c = `stop-color:${spec.art.colors[0]}`;\nstopEls[1].style.cssText = `stop-color:${spec.art.colors[0]}`;\nstopEls[3].style.cssText = `stop-color:${spec.art.colors[1]}`;\n-\n- const g = el.querySelector('#Background linearGradient');\n- const id = 1;\n- g.id = 'background-' + id;\n- const p = g.nextElementSibling;\n- p.style = `fill:url(#${g.id});`;\n- } */\n+ }\n}\nconst image = await new Promise((accept, reject) => {\n",
        "chatgpt_cot": "\"Fix undefined cmc value by checking if cmc is undefined, use card.details.cmc instead for averageCmc.js\""
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -445,7 +445,7 @@ class FilterCollapse extends Component {\n}\nasync updateFilters(overrideFilter) {\n- if (Query.get('f') === this.state.filterInput) {\n+ if (this.props.filter != null && Query.get('f') === this.state.filterInput) {\nreturn;\n}\n",
        "org_msg": "Fix cube list page filtering based on URL params",
        "sim_msg": "(galleryContainerNew.js): delete git comments",
        "sim_diff": "diff --git a/pro-gallery-renderer/src/components/gallery/galleryContainerNew.js b/pro-gallery-renderer/src/components/gallery/galleryContainerNew.js @@ -37,12 +37,9 @@ export class GalleryContainer extends React.Component {\n};\nthis.getMoreItemsIfNeeded = this.getMoreItemsIfNeeded.bind(this);\n-<<<<<<< HEAD\nthis.toggleInfiniteScroll = this.toggleInfiniteScroll.bind(this); //TODO check if needed\nthis.isInfiniteScroll = this.isInfiniteScroll.bind(this); //TODO check if needed\n-=======\nthis.scrollToItem = this.scrollToItem.bind(this);\n->>>>>>> [pgr] refactor (galleryContainerNew): connect scrollToItem to new gallery container\nthis.toggleFullscreen = (typeof props.onItemClicked === 'function') ? (itemIdx => this.props.onItemClicked(this.galleryStructure.items[itemIdx])) : () => {};\n}\n",
        "chatgpt_cot": "\"Fix bug in FilterCollapse updateFilters method to properly check for null filter before comparing with state filterInput.\""
    },
    {
        "org_diff": "diff --git a/src/pages/CubeAnalysisPage.js b/src/pages/CubeAnalysisPage.js @@ -45,7 +45,6 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText, defaultTab, default\n}, [activeTab]);\nconst cards = useMemo(() => {\n- console.log('asfans', asfans);\nreturn (filter ? cube.cards.filter(filter) : cube.cards).map((card) => ({ ...card, asfan: asfans[card.cardID] }));\n}, [asfans, cube, filter]);\n@@ -182,9 +181,7 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText, defaultTab, default\n</Card>\n<Card>\n<CardBody>\n- <ErrorBoundary>\n- {analytics[activeTab].component(filteredCards, cube, adds, cuts, loading)}\n- </ErrorBoundary>\n+ <ErrorBoundary>{analytics[activeTab].component(cards, cube, adds, cuts, loading)}</ErrorBoundary>\n</CardBody>\n</Card>\n</Col>\n",
        "org_msg": "Fix lint error from merging.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Refactor CubeAnalysisPage.js to improve performance and readability by removing unnecessary console log and simplifying ErrorBoundary usage."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -425,7 +425,7 @@ router.get('/overview/:id', async (req, res) => {\nconst pids = new Set();\nfor (const card of cube.cards) {\ncard.details = carddb.cardFromId(card.cardID);\n- const allVersions = carddb.getIdsFromName(card.details.name);\n+ const allVersions = carddb.getIdsFromName(card.details.name) || [];\ncard.allDetails = allVersions.map((id) => carddb.cardFromId(id));\nfor (const details of card.allDetails) {\nif (details.tcgplayer_id) {\n",
        "org_msg": "Fix occasional error.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "fix bug in cube_routes.js related to fetching all versions of a card from the database. Added a check for empty array in allVersions."
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -286,18 +286,22 @@ router.get('/search/:id', function(req, res) {\nvar page = parseInt(raw_split[1]);\nvar query = {};\nvar terms = [];\n- raw_queries.forEach(function(val, index) {\n- if (val.includes('=')) {\n- var split = val.split('=');\n- query[split[0]] = split[1];\n- terms.push(split[0].replace('owner_name', 'owner') + ' is exactly ' + split[1]);\n- } else if (val.includes('~')) {\n- var split = val.split('~');\n- query[split[0]] = {\n- $regex: split[1],\n- $options: 'i',\n- };\n- terms.push(split[0].replace('owner_name', 'owner') + ' contains ' + split[1]);\n+ raw_queries.forEach(function(search_expression) {\n+ let field, filter, search_regex;\n+\n+ if (search_expression.includes('=')) {\n+ [field, filter] = search_expression.split('=');\n+ search_regex = new RegExp(`^${filter}$`, 'i');\n+ expression_term = 'is exactly';\n+ } else if (search_expression.includes('~')) {\n+ [field, filter] = search_expression.split('~');\n+ search_regex = new RegExp(filter, 'i');\n+ expression_term = 'contains';\n+ }\n+\n+ if (search_regex) {\n+ query[field] = { $regex: search_regex };\n+ terms.push(`${field.replace('owner_name', 'owner')} ${expression_term} ${filter.toLowerCase()}`);\n}\n});\n",
        "org_msg": "Adv. search exact match case insensitivity",
        "sim_msg": "Improve term highlighting matches and query term detection",
        "sim_diff": "diff --git a/vis/js/io.js b/vis/js/io.js @@ -411,8 +411,8 @@ IO.prototype = {\nhighlightTerms: function(full_string, term_array) {\nlet result_string = full_string;\nfor (let term of term_array) {\n- let re = new RegExp(\"(^|\\\\s)(\" + term + \")(\\\\s|$)\" ,\"gi\");\n- result_string = result_string.replace(re, \" <span class=\\\"query_term_highlight\\\">$2</span> \");\n+ let re = new RegExp(\"\\\\b(\" + term + \")\\\\b\" ,\"gi\");\n+ result_string = result_string.replace(re, \" <span class=\\\"query_term_highlight\\\">$1</span>\");\n}\nreturn result_string;\n},\n@@ -436,7 +436,7 @@ IO.prototype = {\n//Remove phrases, and, or, +, -, (, ) from query string\nlet query_wt_phrases = full_query.replace(match_query, \" \");\n- let query_wt_rest = query_wt_phrases.replace(/(^|\\s)and\\s/g, \" \").replace(/(^|\\s)or\\s/g, \" \").replace(/(^|\\s)-/g, \" \").replace(/\\+|\\(|\\)/g, \" \")\n+ let query_wt_rest = query_wt_phrases.replace(/\\band\\b|\\bor\\b|\\(|\\)/g, \"\").replace(/(^|\\s)-|\\+/g, \" \");\nterm_array = term_array.concat(query_wt_rest.trim().replace(/\\s+/g, \" \").split(\" \"));\n",
        "chatgpt_cot": "Refactor search query processing in root.js to improve readability and maintainability."
    },
    {
        "org_diff": "diff --git a/src/layouts/MainLayout.js b/src/layouts/MainLayout.js @@ -147,7 +147,7 @@ const MainLayout = ({ user, children, loginCallback }) => {\n</Container>\n</Navbar>\n<Container className=\"flex-grow\">\n- <ThemeContext.Provider value={user.theme}>\n+ <ThemeContext.Provider value={user?.theme ?? 'default'}>\n<ErrorBoundary>{children}</ErrorBoundary>\n</ThemeContext.Provider>\n</Container>\n",
        "org_msg": "added null check to theme selection",
        "sim_msg": "Reduce contrib image size",
        "sim_diff": "diff --git a/src/components/layout.js b/src/components/layout.js @@ -150,7 +150,7 @@ const Layout = props => {\nalt={login}\nsrc={avatar_url}\nstyle={{\n- width: '15%',\n+ width: '10%',\nmargin: '0 10px 10px 0'\n}}\n/>\n",
        "chatgpt_cot": "\"Refactor ThemeContext.Provider to handle null or undefined user theme in MainLayout\""
    },
    {
        "org_diff": "diff --git a/src/pages/GridDraftPage.js b/src/pages/GridDraftPage.js @@ -161,6 +161,7 @@ const GridDraftPage = ({ user, cube, initialDraft, loginCallback }) => {\nconst [pickOrder, setPickOrder] = useState([]);\nconst [botPickOrder, setBotPickOrder] = useState([]);\nconst [turn, setTurn] = useState(0);\n+ const [finished, setFinished] = useState(false);\nconst submitDeckForm = useRef();\n@@ -303,7 +304,7 @@ const GridDraftPage = ({ user, cube, initialDraft, loginCallback }) => {\nif (tempPack.length > 0) {\nsetPack(tempPack);\n} else {\n- finish(tempPicks);\n+ setFinished(true);\n}\n};\n@@ -335,6 +336,10 @@ const GridDraftPage = ({ user, cube, initialDraft, loginCallback }) => {\nmakePick(mask);\n};\n+ if (finished) {\n+ finish();\n+ }\n+\nreturn (\n<MainLayout loginCallback={loginCallback} user={user}>\n<CubeLayout cube={cube} activeLink=\"playtest\">\n",
        "org_msg": "Fix missing last pick in grid draft",
        "sim_msg": "fix(pages): show an error if component is not found",
        "sim_diff": "diff --git a/gridsome/lib/pages/pages.js b/gridsome/lib/pages/pages.js @@ -380,7 +380,11 @@ class Pages {\nconst ext = path.extname(component).substring(1)\nconst hook = this.hooks.parseComponent.get(ext)\n- let results\n+ let results = {}\n+\n+ if (!fs.existsSync(component)) {\n+ throw new Error(`Could not find component ${component}.`)\n+ }\nif (hook) {\nconst source = fs.readFileSync(component, 'utf8')\n",
        "chatgpt_cot": "Add 'finished' state to GridDraftPage, update finish logic to use state, check if finished for additional logic, improve code readability and logic flow."
    },
    {
        "org_diff": "diff --git a/seed.js b/seed.js @@ -10,8 +10,7 @@ var drafts = require(seedsPath + 'drafts.json');\nvar users = require(seedsPath + 'users.json');\n// Data array containing seed data - documents organized by Model\n-var data = [\n- {\n+var data = [{\n'model': 'User',\n'documents': users\n},\n",
        "org_msg": "misc: run beautify to correct linter complaints",
        "sim_msg": "Added Goerli network json accessors in main index file",
        "sim_diff": "diff --git a/index.js b/index.js @@ -33,6 +33,13 @@ const data = {\nrewards: require('./publish/deployed/mainnet/rewards.json'),\nfeeds: require('./publish/deployed/mainnet/feeds.json'),\n},\n+ goerli: {\n+ deployment: require('./publish/deployed/mainnet/deployment.json'),\n+ versions: require('./publish/deployed/mainnet/versions.json'),\n+ synths: require('./publish/deployed/mainnet/synths.json'),\n+ rewards: require('./publish/deployed/mainnet/rewards.json'),\n+ feeds: require('./publish/deployed/mainnet/feeds.json'),\n+ },\n};\nconst assets = require('./publish/assets.json');\n",
        "chatgpt_cot": "Refactor seed data formatting in seed.js for better readability."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cards.test.js b/__tests__/serverjs/cards.test.js @@ -41,7 +41,18 @@ test(\"normalizedName normalizes unicode correctly\", () => {\nexpect(result).toBe(expected);\n});\n-test(\"allIds\", () => {});\n+test(\"allIds correctly maps a cardname to an ID\", () => {\n+ expect.assertions(2);\n+ var promise = carddb.initializeCardDb(fixturesPath);\n+ return promise.then(function() {\n+ const expected = \"ee4d196e-7ce4-4dc1-9d58-102a89aca2a4\";\n+ const result = carddb.allIds({\n+ \"name\": \"Rankle, Master of Pranks\"\n+ });\n+ expect(result.length).toBe(1);\n+ expect(result[0]).toBe(expected);\n+ });\n+});\ntest(\"loadJSONFile loads a JSON file into the correct attribute\", () => {\nexpect.assertions(1);\n",
        "org_msg": "add test for allIds",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add test for mapping cardname to ID in allIds method, fix compilation issue and improve test coverage in cards.test.js."
    },
    {
        "org_diff": "diff --git a/src/pages/DashboardPage.js b/src/pages/DashboardPage.js @@ -51,10 +51,22 @@ const DashboardPage = ({ posts, cubes, decks, user, loginCallback, content, feat\n)}\n</Row>\n</CardBody>\n- <CardFooter>{cubes.length > 2 && <a href={`/user/view/${cubes[0].owner}`}>View All</a>}</CardFooter>\n+ {cubes.length > 2 ? (\n+ <CardFooter>\n+ <a href={`/user/view/${cubes[0].owner}`}>View All</a>\n+ </CardFooter>\n+ ) : (\n+ <CubesCard\n+ title=\"Featured Cubes\"\n+ cubes={featured}\n+ lean\n+ header={{ hLevel: 5, sideLink: '/donate', sideText: 'Learn more...' }}\n+ />\n+ )}\n</Card>\n</Col>\n<Col xs=\"12\" md=\"6\">\n+ {cubes.length > 2 && (\n<CubesCard\nclassName=\"mb-4\"\ntitle=\"Featured Cubes\"\n@@ -62,6 +74,7 @@ const DashboardPage = ({ posts, cubes, decks, user, loginCallback, content, feat\nlean\nheader={{ hLevel: 5, sideLink: '/donate', sideText: 'Learn more...' }}\n/>\n+ )}\n<Card>\n<CardHeader>\n<h5>Recent Drafts of Your Cubes</h5>\n",
        "org_msg": "move featured cubes to the left if you have <=2 cubes",
        "sim_msg": "(fix) dashboard unit g$ styles",
        "sim_diff": "diff --git a/src/components/dashboard/Dashboard.js b/src/components/dashboard/Dashboard.js @@ -156,7 +156,11 @@ const Dashboard = props => {\n<Section.Title>{fullName || ' '}</Section.Title>\n</Section.Row>\n<Section.Row justifyContent=\"center\" alignItems=\"baseline\">\n- <BigGoodDollar number={balance} />\n+ <BigGoodDollar\n+ bigNumberStyles={styles.bigNumberStyles}\n+ bigNumberUnitStyles={styles.bigNumberUnitStyles}\n+ number={balance}\n+ />\n</Section.Row>\n</>\n) : (\n@@ -165,7 +169,11 @@ const Dashboard = props => {\n<Avatar size={42} source={avatar} onPress={() => screenProps.push('Profile')} />\n</Section.Stack>\n<Section.Stack alignItems=\"flex-end\">\n- <BigGoodDollar number={balance} />\n+ <BigGoodDollar\n+ bigNumberStyles={styles.bigNumberStyles}\n+ bigNumberUnitStyles={styles.bigNumberUnitStyles}\n+ number={balance}\n+ />\n</Section.Stack>\n</Section.Row>\n)}\n@@ -238,6 +246,17 @@ const styles = StyleSheet.create({\njustifyContent: 'center',\npadding: 8,\nheight: '256px'\n+ },\n+ bigNumberStyles: {\n+ fontFamily: 'Roboto-Bold',\n+ fontSize: normalize(36),\n+ fontWeight: '700',\n+ marginRight: normalize(3)\n+ },\n+ bigNumberUnitStyles: {\n+ fontFamily: 'Roboto-Bold',\n+ fontSize: normalize(18),\n+ fontWeight: '700'\n}\n})\n",
        "chatgpt_cot": "\"Add conditional rendering for CubesCard component and fix CardFooter component in DashboardPage.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -4174,4 +4174,21 @@ router.get(\n}),\n);\n+router.get('/api/date_updated/:id',\n+ util.wrapAsyncApi(async (req, res) => {\n+ const { id } = req.params;\n+ const cube = await Cube.findOne(buildIdQuery(id)).lean();\n+ if (!cube) {\n+ return res.status(404).send({\n+ success: 'false',\n+ message: 'No such cube.',\n+ });\n+ }\n+\n+ return res.status(200).send({\n+ date_updated: cube.date_updated,\n+ });\n+ }),\n+);\n+\nmodule.exports = router;\n",
        "org_msg": "Add date_updated API path",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "Add new route to get date_updated for cube with specified id. Fixes issue of not being able to retrieve cube date_updated."
    },
    {
        "org_diff": "diff --git a/src/cube_overview.js b/src/cube_overview.js @@ -145,7 +145,9 @@ class CubeOverview extends Component {\n<Card>\n<CardHeader>\n<h3>{cube.name}</h3>\n- <h6 className=\"card-subtitle mb-2 text-muted\">{cube.users_following.length} followers</h6>\n+ <h6 className=\"card-subtitle mb-2 text-muted\">\n+ {(cube.users_following ? cube.users_following : []).length} followers\n+ </h6>\n</CardHeader>\n<div className=\"position-relative\">\n<img className=\"card-img-top w-100\" src={cube.image_uri} />\n",
        "org_msg": "Fix cube overview crash",
        "sim_msg": "Remove see also from the library. It's a pain, and always breaks. Closes",
        "sim_diff": "diff --git a/client/src/components/views/Library/index.js b/client/src/components/views/Library/index.js @@ -17,10 +17,6 @@ const SUB = gql`\ntype\ntitle\nimage\n- seeAlso {\n- id\n- title\n- }\ncategories\n}\n}\n@@ -198,7 +194,7 @@ class Library extends Component {\n)}\n</Asset>\n)}\n- <h4>See Also</h4>\n+ {/* <h4>See Also</h4>\n<Card className=\"entry-seeAlso\">\n<CardBody>\n{sEntry &&\n@@ -217,7 +213,7 @@ class Library extends Component {\n</p>\n))}\n</CardBody>\n- </Card>\n+ </Card> */}\n</Col>\n</Row>\n</Col>\n@@ -237,10 +233,6 @@ const QUERY = gql`\ntype\ntitle\nimage\n- seeAlso {\n- id\n- title\n- }\ncategories\n}\n}\n",
        "chatgpt_cot": "Add conditional rendering of followers count in CubeOverview to handle null users_following array."
    },
    {
        "org_diff": "diff --git a/src/components/ListView.js b/src/components/ListView.js @@ -114,10 +114,10 @@ class ListViewRaw extends Component {\ncube[index].details = json.card;\ncube[index].details.display_image = updated.imgUrl || json.card.image_normal;\ncubeDict[cube[index].index] = cube[index];\n- });\n+ }).catch(err => console.error(err));\n}\n}\n- });\n+ }).catch(err => console.error(err));\n}\naddTag(cardIndex, tag) {\n@@ -164,11 +164,12 @@ class ListViewRaw extends Component {\n});\nif (target.tagName.toLowerCase() === 'select') {\n- const updated = {\n- cardID: name.startsWith('tdversion') ? value : undefined,\n- status: name.startsWith('tdstatus') ? value : undefined,\n- };\n- console.log(updated);\n+ const updated = {};\n+ if (name.startsWith('tdversion')) {\n+ updated.cardID = value;\n+ } else if (name.startsWith('tdstatus')) {\n+ updated.status = value;\n+ }\nthis.syncCard(index, updated);\n}\n@@ -197,8 +198,11 @@ class ListViewRaw extends Component {\ncolors: colorString === 'C' ? [] : [...colorString],\n};\n+ // <select>s handled in handleChange above.\n+ if (target.tagName.toLowerCase() !== 'select') {\nthis.syncCard(index, updated);\n}\n+ }\ncheckAll(event) {\nconst target = event.target;\n",
        "org_msg": "Fix List View bugs.",
        "sim_msg": "[Select] Update `renderValue` prop's TypeScript type",
        "sim_diff": "diff --git a/packages/mui-material/src/Select/Select.spec.tsx b/packages/mui-material/src/Select/Select.spec.tsx @@ -45,3 +45,81 @@ function genericValueTest() {\n// disabledUnderline prop should be available (inherited from InputProps) and NOT throw typescript error\n<Select disableUnderline />;\n}\n+\n+function App() {\n+ enum MyEnum {\n+ FIRST = 'first',\n+ SECOND = 'second',\n+ }\n+\n+ const [selectedValue, setSelectedValue] = React.useState<MyEnum | ''>('');\n+ const [personName, setPersonName] = React.useState<string[]>([]);\n+\n+ return (\n+ <React.Fragment>\n+ {/* displayEmpty is true */}\n+ <Select\n+ renderValue={(value) => {\n+ if (value === '') {\n+ return 'None selected';\n+ }\n+ return value;\n+ }}\n+ displayEmpty\n+ value={selectedValue}\n+ onChange={(e) => setSelectedValue(e.target.value as MyEnum)}\n+ >\n+ <MenuItem value=\"\">\n+ <em>Blank</em>\n+ </MenuItem>\n+ <MenuItem value=\"first\">first</MenuItem>\n+ <MenuItem value=\"second\">second</MenuItem>\n+ </Select>\n+\n+ {/* displayEmpty is false */}\n+ <Select\n+ renderValue={(value) => {\n+ // @ts-expect-error value cannot be empty string since displayEmpty is false\n+ if (value === '') {\n+ return 'None selected';\n+ }\n+ return value;\n+ }}\n+ value={selectedValue}\n+ onChange={(e) => setSelectedValue(e.target.value as MyEnum)}\n+ >\n+ <MenuItem value=\"\">\n+ <em>Blank</em>\n+ </MenuItem>\n+ <MenuItem value=\"first\">first</MenuItem>\n+ <MenuItem value=\"second\">second</MenuItem>\n+ </Select>\n+\n+ {/* displayEmpty is true, multiple is true */}\n+ <Select\n+ displayEmpty\n+ multiple\n+ renderValue={(value) => {\n+ // @ts-expect-error value cannot be empty string\n+ if (value === '') {\n+ return 'None selected';\n+ }\n+\n+ if (value.length === 0) {\n+ return <em>Placeholder</em>;\n+ }\n+\n+ return value.join(', ');\n+ }}\n+ value={personName}\n+ onChange={(e) => setPersonName(e.target.value as string[])}\n+ >\n+ <MenuItem value=\"\">\n+ <em>Blank</em>\n+ </MenuItem>\n+ <MenuItem value=\"Oliver Hansen\">Oliver Hansen</MenuItem>\n+ <MenuItem value=\"Van Henry\">Van Henry</MenuItem>\n+ </Select>\n+ </React.Fragment>\n+ );\n+}\n",
        "chatgpt_cot": "\"Fix compilation issue and handle select elements in ListViewRaw component\""
    },
    {
        "org_diff": "diff --git a/src/pages/CubePlaytestPage.js b/src/pages/CubePlaytestPage.js @@ -114,7 +114,7 @@ const CustomDraftCard = ({ format, onEditFormat, onDeleteFormat, ...props }) =>\n/>\n<LabelRow htmlFor={`seats-${index}`} label=\"Total Seats\" className=\"mb-0\">\n<Input type=\"select\" name=\"seats\" id={`seats-${index}`} defaultValue=\"8\">\n- {rangeOptions(4, 11)}\n+ {rangeOptions(4, 17)}\n</Input>\n</LabelRow>\n</CardBody>\n@@ -176,7 +176,7 @@ const StandardDraftCard = () => {\n</LabelRow>\n<LabelRow htmlFor=\"seats\" label=\"Total Seats\" className=\"mb-0\">\n<Input type=\"select\" name=\"seats\" id=\"seats\" defaultValue=\"8\">\n- {rangeOptions(4, 11)}\n+ {rangeOptions(4, 17)}\n</Input>\n</LabelRow>\n</CardBody>\n",
        "org_msg": "Up to 16 seats\nfixes Change draft dropdown to allow for up to 16 players",
        "sim_msg": "added numberoflines to eventcard",
        "sim_diff": "diff --git a/src/components/EventCard.js b/src/components/EventCard.js @@ -58,7 +58,7 @@ const EventCard = ({\n{timeDisplay}\n</Text>\n<View style={styles.eventNameContainer}>\n- <Text type=\"h3\" style={styles.eventName}>\n+ <Text type=\"h3\" style={styles.eventName} numberOfLines={2}>\n{name}\n</Text>\n</View>\n",
        "chatgpt_cot": "Update range options for total seats to accommodate a wider range of values in CubePlaytestPage.js."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cards.test.js b/__tests__/serverjs/cards.test.js @@ -4,10 +4,17 @@ beforeEach(() => {});\nafterEach(() => {});\n-test(\"stub\", () => {\n+test(\"initializeCardDb loads files properly\", () => {\nexpect.assertions(1);\n+ var fixtureCardCount = 100;\n+ var firstLetterCount = 21;\nvar promise = carddb.initializeCardDb(\"__tests__/fixtures\");\nreturn promise.then(function() {\n- expect(carddb.cardnames.length).toBe(100);\n+ expect(Object.keys(carddb.cardtree).length).toBe(firstLetterCount);\n+ expect(Object.keys(carddb.imagedict).length).toBe(fixtureCardCount);\n+ expect(Object.keys(carddb.cardimages).length).toBe(fixtureCardCount);\n+ expect(carddb.cardnames.length).toBe(fixtureCardCount);\n+ expect(carddb.full_names.length).toBe(fixtureCardCount);\n+ expect(Object.keys(carddb.nameToId).length).toBe(fixtureCardCount);\n});\n});\n\\ No newline at end of file\n",
        "org_msg": "flesh out test of initializeCardDb",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "\"Add test for initializeCardDb function to ensure proper loading of files and data in carddb\""
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -94,7 +94,7 @@ function cardsAreEquivalent(card, details) {\nif (card.cmc != details.cmc) {\nreturn false;\n}\n- if (card.type_line != details.type_line) {\n+ if (card.type_line && details.type_line && card.type_line != details.type_line) {\nreturn false;\n}\nif (!util.arraysEqual(card.tags, details.tags)) {\n@@ -103,7 +103,7 @@ function cardsAreEquivalent(card, details) {\nif (!util.arraysEqual(card.colors, details.colors)) {\nreturn false;\n}\n- if (card.finish != details.finish) {\n+ if (card.finish && details.finish && card.finish != details.finish) {\nreturn false;\n}\n",
        "org_msg": "Fix bug when updating cards with no finish.",
        "sim_msg": "Serve additional card data",
        "sim_diff": "diff --git a/server/services/CardService.js b/server/services/CardService.js @@ -25,7 +25,7 @@ class CardService {\n_.each(result, card => {\nif(options && options.shortForm) {\n- cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'unicity', 'influence_cost', 'pack_cards');\n+ cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'element', 'unicity', 'influence_cost', 'influence_pool', 'pack_cards');\n} else {\ncards[card.id] = card;\n}\n",
        "chatgpt_cot": "\"Fix comparison logic in cardsAreEquivalent function to account for null values in type_line and finish attributes.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3369,7 +3369,6 @@ router.post(\nrouter.post(\n'/api/adds/:id',\n- ensureAuth,\nutil.wrapAsyncApi(async (req, res) => {\nconst response = await fetch(`http://127.0.0.1:8000/?cube_name=${req.params.id}&num_recs=${5}&root=${encodeURIComponent('http://localhost:5000')}`);\n",
        "org_msg": "remove need to be logged in",
        "sim_msg": "add job id to start board for task",
        "sim_diff": "diff --git a/core/api-server/api/rest-api/routes/v1/boards.js b/core/api-server/api/rest-api/routes/v1/boards.js @@ -62,8 +62,8 @@ const routes = (options) => {\n});\nrouter.all('/tensor/start/:taskId?', methods(['POST']), logger(), async (req, res, next) => {\nconst { taskId } = req.params;\n- const { nodeName, pipelineName } = req.body;\n- await boards.startTensorboard({ taskId, nodeName, pipelineName }, 'task');\n+ const { nodeName, pipelineName, jobId } = req.body;\n+ await boards.startTensorboard({ taskId, jobId, nodeName, pipelineName }, 'task');\nres.json({ message: 'OK' });\nnext();\n});\n",
        "chatgpt_cot": "Remove ensureAuth middleware from POST route for adding new cube records to improve accessibility and streamline the request handling process."
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -57,7 +57,7 @@ function cardFromId(id, fields) {\nif (data._carddict[id]) {\ndetails = data._carddict[id];\n} else {\n- winston.error(null, { error: new Error(`Could not find card from id: ${Json.stringify(id, null, 2)}`) });\n+ winston.error(null, { error: new Error(`Could not find card from id: ${JSON.stringify(id, null, 2)}`) });\ndetails = getPlaceholderCard(id);\n}\n",
        "org_msg": "Linting card.js",
        "sim_msg": "Serve additional card data",
        "sim_diff": "diff --git a/server/services/CardService.js b/server/services/CardService.js @@ -25,7 +25,7 @@ class CardService {\n_.each(result, card => {\nif(options && options.shortForm) {\n- cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'unicity', 'influence_cost', 'pack_cards');\n+ cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'element', 'unicity', 'influence_cost', 'influence_pool', 'pack_cards');\n} else {\ncards[card.id] = card;\n}\n",
        "chatgpt_cot": "\"Fix JSON.stringify typo in error message to properly display card id in cards.js\""
    },
    {
        "org_diff": "diff --git a/fixtures/examplecards.js b/fixtures/examplecards.js @@ -119,8 +119,7 @@ const exampleDoubleFacedCard = {\nartist: 'Cynthia Sheppard',\nartist_id: '9dfbdd58-65e6-40cf-951a-80e141061939',\nillustration_id: '0d4098f2-0d18-47a0-b79e-0875511dde0c',\n- image_uris: [\n- {\n+ image_uris: {\nsmall: 'https://img.scryfall.com/cards/small/front/6/f/6f35e364-81d9-4888-993b-acc7a53d963c.jpg?1562921188',\nnormal: 'https://img.scryfall.com/cards/normal/front/6/f/6f35e364-81d9-4888-993b-acc7a53d963c.jpg?1562921188',\nlarge: 'https://img.scryfall.com/cards/large/front/6/f/6f35e364-81d9-4888-993b-acc7a53d963c.jpg?1562921188',\n@@ -130,7 +129,6 @@ const exampleDoubleFacedCard = {\nborder_crop:\n'https://img.scryfall.com/cards/border_crop/front/6/f/6f35e364-81d9-4888-993b-acc7a53d963c.jpg?1562921188',\n},\n- ],\n},\n{\nobject: 'card_face',\n@@ -148,8 +146,7 @@ const exampleDoubleFacedCard = {\nartist: 'Cynthia Sheppard',\nartist_id: '9dfbdd58-65e6-40cf-951a-80e141061939',\nillustration_id: 'd91819c2-9961-4c71-a27a-9e6c1b469d7e',\n- image_uris: [\n- {\n+ image_uris: {\nsmall: 'https://img.scryfall.com/cards/small/back/6/f/6f35e364-81d9-4888-993b-acc7a53d963c.jpg?1562921188',\nnormal: 'https://img.scryfall.com/cards/normal/back/6/f/6f35e364-81d9-4888-993b-acc7a53d963c.jpg?1562921188',\nlarge: 'https://img.scryfall.com/cards/large/back/6/f/6f35e364-81d9-4888-993b-acc7a53d963c.jpg?1562921188',\n@@ -159,7 +156,6 @@ const exampleDoubleFacedCard = {\nborder_crop:\n'https://img.scryfall.com/cards/border_crop/back/6/f/6f35e364-81d9-4888-993b-acc7a53d963c.jpg?1562921188',\n},\n- ],\n},\n],\nlegalities: {\n",
        "org_msg": "Fix tests with respect to card images.",
        "sim_msg": "Hook in glyph generator to card generator",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -2,6 +2,7 @@ import metaversefile from 'metaversefile';\nimport {generateStats, types} from './procgen/procgen.js';\nimport {screenshotObjectApp} from './object-screenshotter.js';\nimport {screenshotAvatarUrl} from './avatar-screenshotter.js';\n+import {generateGlyph} from './glyph-generator.js';\n// const baseUrl = import.meta.url.replace(/(\\/)[^\\/\\\\]*$/, '$1');\n// const cardsSvgUrl = `${baseUrl}cards.svg`;\n@@ -102,6 +103,9 @@ export const generateObjectCard = async ({\n});\nminterAvatarPreview = await _getCanvasDataUrl(minterAvatarPreview);\n+ let glyphImage = generateGlyph(url);\n+ glyphImage = await _getCanvasDataUrl(glyphImage);\n+\n// _previewImage(minterAvatarPreview, width, height);\nconst minterUsername = 'Scillia';\nconsole.log('call generate card', {\n@@ -112,6 +116,7 @@ export const generateObjectCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n});\nconst cardImg = await generateCard({\nstats,\n@@ -123,6 +128,7 @@ export const generateObjectCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n});\n_previewImage(cardImg, width, height);\nreturn cardImg;\n@@ -138,6 +144,7 @@ export const generateCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n} = {}) => {\nconst cardSvgSource = await _loadCachedSvgSource();\nawait _waitForAllCardFonts();\n@@ -217,6 +224,15 @@ export const generateCard = async ({\nurlEl.innerHTML = url;\n}\n+ // glyph image\n+ {\n+ const glyphImageEl = el.querySelector('#glyph-image');\n+ // window.glyphImageEl = glyphImageEl;\n+ // glyphImageEl.innerHTML = glyphImage;\n+ glyphImageEl.setAttribute('image-rendering', 'pixelated');\n+ glyphImageEl.setAttribute('xlink:href', glyphImage);\n+ }\n+\n/* {\nconst lines = description.split('\\n');\nconst descriptionHeaderTextEl = el.querySelector('#description-header-text');\n",
        "chatgpt_cot": "Update image_uris structure in examplecards.js to use object instead of array for better data organization and readability."
    },
    {
        "org_diff": "diff --git a/public/js/autocard.js b/public/js/autocard.js @@ -107,7 +107,7 @@ function autocard_show_card(card_image, card_flip, show_art_crop, tags, foil) {\n'<div style=\"position:relative\"><img class=\"foilOverlay\" src=\"/content/foilOverlay.png\" style=\"border-radius:\"' +\n// magic cards have a border radius of 3mm and a width of 63mm\n(3 / 63) * 255 +\n- '\"x\" }}><img id=\"autocard-img\" src=\"\" width=225 height=' +\n+ 'px;\" }}><img id=\"autocard-img\" src=\"\" width=225 height=' +\nh +\n'></div>';\n} else {\n",
        "org_msg": "fix px in autocard",
        "sim_msg": "Add cards drop loading blackening",
        "sim_diff": "diff --git a/metaverse_modules/card/index.js b/metaverse_modules/card/index.js @@ -25,6 +25,8 @@ function getCardFrontTexture(appUrl) {\n);\ntexture.image = imageBitmap;\ntexture.needsUpdate = true;\n+\n+ texture.dispatchEvent({type: 'load'});\n})();\nreturn texture;\n}\n@@ -35,6 +37,8 @@ function getCardBackTexture() {\nimg.crossOrigin = 'Anonymous';\nimg.onload = () => {\ntexture.needsUpdate = true;\n+\n+ texture.dispatchEvent({type: 'load'});\n};\nimg.onerror = err => {\nconsole.warn(err);\n@@ -76,7 +80,23 @@ const _makeCardMesh = ({\n]);\nconst frontTexture = getCardFrontTexture(appUrl);\n+ {\n+ const load = () => {\n+ material.uniforms.uFrontTexLoaded.value = 1;\n+ material.uniforms.uFrontTexLoaded.needsUpdate = true;\n+ frontTexture.removeEventListener('load', load);\n+ };\n+ frontTexture.addEventListener('load', load);\n+ }\nconst backTexture = getCardBackTexture();\n+ {\n+ const load = () => {\n+ material.uniforms.uBackTexLoaded.value = 1;\n+ material.uniforms.uBackTexLoaded.needsUpdate = true;\n+ backTexture.removeEventListener('load', load);\n+ };\n+ backTexture.addEventListener('load', load);\n+ }\nconst material = new WebaverseShaderMaterial({\nuniforms: {\n@@ -88,6 +108,14 @@ const _makeCardMesh = ({\nvalue: backTexture,\nneedsUpdate: true,\n},\n+ uFrontTexLoaded: {\n+ value: 0,\n+ needsUpdate: true,\n+ },\n+ uBackTexLoaded: {\n+ value: 0,\n+ needsUpdate: true,\n+ },\n},\nvertexShader: `\\\n// uniform vec4 cameraBillboardQuaternion;\n@@ -113,15 +141,17 @@ const _makeCardMesh = ({\nfragmentShader: `\\\nuniform sampler2D uFrontTex;\nuniform sampler2D uBackTex;\n+ uniform int uFrontTexLoaded;\n+ uniform int uBackTexLoaded;\nvarying vec2 vUv;\nflat varying int vSide;\nvoid main() {\nvec4 diffuseColor;\nif (vSide == 0) {\n- diffuseColor = texture2D(uFrontTex, vUv);\n+ diffuseColor = uFrontTexLoaded == 1 ? texture2D(uFrontTex, vUv) : vec4(vec3(0.0), 1.0);\n} else {\n- diffuseColor = texture2D(uBackTex, vUv);\n+ diffuseColor = uBackTexLoaded == 1 ? texture2D(uBackTex, vUv) : vec4(vec3(0.0), 1.0);\n}\ngl_FragColor = diffuseColor;\nif (gl_FragColor.a < 0.1) {\n",
        "chatgpt_cot": "Fix image display issue in autocard.js. Changed the width and height attributes of the image to resolve the problem with the card image display."
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -38,6 +38,7 @@ html\n#navbar.collapse.navbar-collapse(style='flex: 10000 1 auto')\nul.navbar-nav.mr-auto\nform(method='POST', action='/search').form-inline\n+ input(type='hidden', name='_csrf', value=csrfToken)\n.input-group.mt-2.mb-sm-2\ninput.form-control(width='300px' type='search', placeholder='Search', aria-label='Search', name='search')\n.input-group-append\n",
        "org_msg": "Add missing hidden input.",
        "sim_msg": "Swapped 3.3.7, 4.0.0-beta posistions, added info panel",
        "sim_diff": "diff --git a/views/index.pug b/views/index.pug @@ -2,11 +2,11 @@ extends layout\nblock content\nh2.text-center=title\n- h3.text-center='v' + config.bootstrap4[0].version\n+ h3.text-center='v' + config.bootstrap[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].stylesheet\n- - var sri = config.bootstrap4[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].stylesheet\n+ - var sri = config.bootstrap[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -20,9 +20,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].javascript\n- - var sri = config.bootstrap4[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].javascript\n+ - var sri = config.bootstrap[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n@@ -35,12 +35,21 @@ block content\nspan.help-block Click to copy\ninclude _partials/jscode.pug\n+ hr\n+ .panel.panel-info\n+ .panel-heading\n+ h3.panel-title Info\n+ .panel-body\n+ | Bootstrap 4 is currently in Beta release and should be treated as such. For details check out\n+ a(href='https://blog.getbootstrap.com/2017/08/10/bootstrap-4-beta/', target='_blank', rel='noopener').\n+ the Bootstrap 4 Beta announcement\n+ | .\n- h3.text-center='v' + config.bootstrap[0].version\n+ h3.text-center='v' + config.bootstrap4[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].stylesheet\n- - var sri = config.bootstrap[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].stylesheet\n+ - var sri = config.bootstrap4[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -54,9 +63,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].javascript\n- - var sri = config.bootstrap[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].javascript\n+ - var sri = config.bootstrap4[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n",
        "chatgpt_cot": "\"Add hidden input field for CSRF token in layout.pug\""
    },
    {
        "org_diff": "diff --git a/src/components/TagInput.js b/src/components/TagInput.js @@ -7,7 +7,7 @@ const TagInput = ({ tags, addTag, deleteTag, reorderTag }) => (\n<TagContext.Consumer>\n{({ allSuggestions, addSuggestion }) => (\n<ReactTags\n- tags={tags}\n+ tags={/* global */ tags.map(tag => ({ ...tag, className: getTagColorClass(tag.text) }))}\nsuggestions={allSuggestions}\nhandleAddition={tag => { addSuggestion(tag); addTag(tag); }}\nhandleDelete={deleteTag}\n",
        "org_msg": "Fix tag color.",
        "sim_msg": "fix: active state",
        "sim_diff": "diff --git a/components/core/Tag.js b/components/core/Tag.js @@ -189,8 +189,6 @@ const Dropdown = ({ open, setOpen, tags, value, handleAdd, handleRemove }) => {\nconst dropdownEl = React.useRef();\n- const isActiveTag = (index) => tags.includes(allTagsOnSlates[index]);\n-\nconst filterTags = (allTags) => {\nlet matches = allTags.filter((tag) => {\nconst regex = new RegExp(`${value}`, \"gi\");\n@@ -200,6 +198,9 @@ const Dropdown = ({ open, setOpen, tags, value, handleAdd, handleRemove }) => {\nreturn matches;\n};\n+ const filteredTags = filterTags(allTagsOnSlates);\n+ const isActiveTag = (index) => tags.includes(filteredTags[index]);\n+\nconst _handleClickOutside = (e) => {\nif (dropdownEl.current.contains(e.target)) {\nreturn;\n@@ -232,7 +233,7 @@ const Dropdown = ({ open, setOpen, tags, value, handleAdd, handleRemove }) => {\n</li>\n) : (\n<>\n- {(filterTags(allTagsOnSlates) || []).map((tag, index) => (\n+ {(filteredTags || []).map((tag, index) => (\n<li\nkey={tag}\ncss={STYLES_DROPDOWN_ITEM}\n",
        "chatgpt_cot": "\"Enhance TagInput.js to add class based on tag text for styling\""
    },
    {
        "org_diff": "diff --git a/src/components/Markdown.js b/src/components/Markdown.js @@ -10,11 +10,14 @@ import strikethrough from 'markdown/strikethrough';\nimport symbols from 'markdown/symbols';\nimport cardlink from 'markdown/cardlink';\nimport withAutocard from 'components/WithAutocard';\n+import withModal from 'components/WithModal';\n+import LinkModal from 'components/LinkModal';\nimport FoilCardImage from 'components/FoilCardImage';\nimport { Col, Row, Card, CardBody } from 'reactstrap';\nconst AutocardLink = withAutocard('a');\n+const Link = withModal('a', LinkModal);\nfunction renderBlockQuote(node) {\nreturn (\n@@ -24,6 +27,24 @@ function renderBlockQuote(node) {\n);\n}\n+function renderLink(node) {\n+ const ref = encodeURI(node.node?.url ?? '');\n+\n+ const isInternalURL = (to) => {\n+ try {\n+ const url = new URL(to, window.location.origin);\n+ return url.hostname === window.location.hostname;\n+ } catch {\n+ return false;\n+ }\n+ };\n+\n+ if (isInternalURL(ref)) {\n+ return <a target=\"_blank\" rel=\"noopen noreferrer\" href={ref} children={node.children} />;\n+ }\n+ return <Link href=\"#\" modalProps={{ link: ref }} children={node.children} />;\n+}\n+\nfunction renderMath(node) {\nreturn <Latex trusted={false} displayMode>{`$$ ${node.value} $$`}</Latex>;\n}\n@@ -77,6 +98,7 @@ function renderCardImage(node) {\nconst Markdown = ({ markdown, limited }) => {\nconst renderers = {\n+ link: renderLink,\nblockquote: renderBlockQuote,\nmath: renderMath,\ninlineMath: renderInlineMath,\n",
        "org_msg": "added link renderer",
        "sim_msg": "add regex for deeplinks and mentions",
        "sim_diff": "diff --git a/components/system/components/Markdown.js b/components/system/components/Markdown.js import * as React from \"react\";\n-import unified from 'unified'\n-import parse from 'remark-parse'\n-import remark2react from 'remark-react'\n+import unified from \"unified\";\n+import parse from \"remark-parse\";\n+import remark2react from \"remark-react\";\n+import linkifyRegex from \"remark-linkify-regex\";\nexport const Markdown = ({ md, options }) => {\n- return <React.Fragment>\n- {unified().use(parse).use(remark2react, options).processSync(md).result}\n- </React.Fragment>\n+ return (\n+ <React.Fragment>\n+ {\n+ unified()\n+ .use(parse)\n+ .use(linkifyRegex(/[@#](\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g))\n+ .use(remark2react, options)\n+ .processSync(md).result\n}\n+ </React.Fragment>\n+ );\n+};\n",
        "chatgpt_cot": "\"Add LinkModal and Link component, update renderLink function, and add internal URL check to renderLink.\""
    },
    {
        "org_diff": "diff --git a/src/components/TagContext.js b/src/components/TagContext.js @@ -18,7 +18,7 @@ class TagContextProvider extends Component {\naddTag(tag) {\nthis.setState(({ tags }) =>\n- tags.indexOf(tags) >= 0 ? {} : {\n+ tags.some(t => t.id === tag.id) ? {} : {\ntags: [...tags, tag],\n}\n);\n",
        "org_msg": "Prevent duplicate tags in suggestions.\nFixes",
        "sim_msg": "update tagmanager setup submit handler",
        "sim_diff": "diff --git a/assets/js/modules/tagmanager/setup.js b/assets/js/modules/tagmanager/setup.js @@ -235,25 +235,26 @@ class TagmanagerSetup extends Component {\nconst {\nselectedAccount,\nselectedContainer,\n+ usageContext,\n} = this.state;\nconst { finishSetup } = this.props;\n+ const containerKey = usageContext === 'amp' ? 'ampContainerID' : 'containerID';\ntry {\n- const optionData = {\n+ const dataParams = {\naccountID: selectedAccount,\n- containerID: selectedContainer,\n+ [ containerKey ]: selectedContainer,\n+ usageContext,\n};\n- const responseData = await data.set( TYPE_MODULES, 'tagmanager', 'settings', optionData );\n+ const savedSettings = await data.set( TYPE_MODULES, 'tagmanager', 'settings', dataParams );\n+\nif ( finishSetup ) {\nfinishSetup();\n}\n- googlesitekit.modules.tagmanager.settings = {\n- accountID: responseData.accountId, // Capitalization rule exception: `accountId` is a property of an API returned value.\n- containerID: responseData.containerId, // Capitalization rule exception: `containerId` is a property of an API returned value.\n- };\n+ googlesitekit.modules.tagmanager.settings = savedSettings;\nif ( this._isMounted ) {\nthis.setState( {\n",
        "chatgpt_cot": "Fix bug in addTag method to prevent duplicate tags from being added to the context."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -323,13 +323,15 @@ test(\"getBasics returns the expected set of basic lands\", () => {\ntest(\"selectionContainsCard\", () => {});\ntest(\"setCubeType correctly sets the type and card_count of its input cube\", () => {\n- expect.assertions(2);\n+ expect.assertions(4);\nvar exampleCube = JSON.parse(JSON.stringify(cubefixture.exampleCube));\nvar promise = carddb.initializeCardDb(fixturesPath, true);\nreturn promise.then(function() {\nvar result = cubefn.setCubeType(exampleCube, carddb);\nexpect(result.card_count).toBe(exampleCube.cards.length);\nexpect(result.type).toBe(\"Vintage\");\n+ expect(exampleCube.card_count).toBe(exampleCube.cards.length);\n+ expect(exampleCube.type).toBe(\"Vintage\");\n});\n});\n",
        "org_msg": "test for object mutation as well as return value",
        "sim_msg": "Add some basic API functions",
        "sim_diff": "diff --git a/test/boardTests.js b/test/boardTests.js @@ -15,7 +15,7 @@ describe('Board', () => {\n})\nit('should have no capture information', () => {\nlet board = new Board()\n- assert.deepEqual(board.captures, {'-1': 0, '1': 0})\n+ assert.deepEqual(board.captures, [0, 0])\n})\nit('should have no markups and lines', () => {\nlet board = new Board()\n@@ -244,8 +244,8 @@ describe('Board', () => {\nwhite.forEach(x => board.set(x, -1))\nlet move = board.makeMove(1, [3, 1])\n- assert.equal(move.captures[-1], 0)\n- assert.equal(move.captures[1], white.length)\n+ assert.equal(move.captures[1], 0)\n+ assert.equal(move.captures[0], white.length)\nboard = new Board()\n@@ -253,8 +253,8 @@ describe('Board', () => {\nmove = board.makeMove(1, [1, 0])\n- assert.equal(move.captures[-1], 0)\n- assert.equal(move.captures[1], 1)\n+ assert.equal(move.captures[1], 0)\n+ assert.equal(move.captures[0], 1)\n})\nit('should handle suicide correctly', () => {\nlet board = new Board()\n",
        "chatgpt_cot": "\"Update assertions in setCubeType test in cubefn.test.js for consistency and accuracy\""
    },
    {
        "org_diff": "diff --git a/routes/comment_routes.js b/routes/comment_routes.js @@ -89,7 +89,7 @@ router.post(\ncomment.image = poster.image;\ncomment.artist = poster.artist;\ncomment.updated = false;\n- comment.content = sanitize(req.body.comment.substring(0, 5000));\n+ comment.content = req.body.comment.substring(0, 5000);\n// the -1000 is to prevent weird time display error\ncomment.timePosted = Date.now() - 1000;\ncomment.date = Date.now() - 1000;\n@@ -148,7 +148,7 @@ router.post(\n: req.user.image;\ncomment.artist = newComment.owner ? 'Allan Pollack' : req.user.artist;\ncomment.updated = true;\n- comment.content = sanitize(newComment.content.substring(0, 500));\n+ comment.content = newComment.content.substring(0, 500);\n// the -1000 is to prevent weird time display error\ncomment.timePosted = Date.now() - 1000;\n",
        "org_msg": "removed server-side comment sanitization, since the parser itself also sanitizes",
        "sim_msg": "Use same path for stored screenshots as in koe",
        "sim_diff": "diff --git a/app/index.js b/app/index.js @@ -67,7 +67,7 @@ app.post('/saveImg', (req, res) => {\nconst sessionId = req.session.id\nconst {answerId} = req.query\nconst id = String(new Date().getTime())\n- const url = `/loadImg?answerId=${req.query.answerId}&id=${id}`\n+ const url = `/screenshot?answerId=${req.query.answerId}&id=${id}`\nconst fileWriteStream = createFileWriteStream(sessionId, answerId, id + '.png')\nreq.pipe(fileWriteStream).on('finish', () => res.json({url}))\n})\n@@ -86,7 +86,7 @@ app.get('/load', (req, res) => {\nres.json(null)\n}\n})\n-app.get('/loadImg', (req, res) => {\n+app.get('/screenshot', (req, res) => {\nconst {answerId, id} = req.query\nif (isUnsafe(answerId) || isUnsafe(id)) {\nres.send(404)\n",
        "chatgpt_cot": "Refactor comment_routes.js for content sanitization\nThe code diff modifies the content sanitization process in the comment_routes.js file, removing the unnecessary sanitize function and updating the content length."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.test.js b/__tests__/serverjs/updatecards.test.js @@ -99,6 +99,7 @@ test(\"updateCardbase creates the expected files\", () => {\n});\nvar downloadMock = jest.fn();\ndownloadMock.mockReturnValue(noopPromise);\n+ var initialDownloadDefaultCards = updatecards.downloadDefaultCards;\nupdatecards.downloadDefaultCards = downloadMock;\nreturn updatecards.updateCardbase(cardsFixturePath).then(function() {\nexpect(fs.existsSync('private/cardtree.json')).toBe(true);\n@@ -109,6 +110,7 @@ test(\"updateCardbase creates the expected files\", () => {\nexpect(fs.existsSync('private/nameToId.json')).toBe(true);\nexpect(fs.existsSync('private/full_names.json')).toBe(true);\n});\n+ updatecards.downloadDefaultCards = initialDownloadDefaultCards;\n});\ntest(\"addCardToCatalog successfully adds a card's information to the internal structures\", () => {\n",
        "org_msg": "undo global state change after test",
        "sim_msg": "Compare file contents on Windows",
        "sim_diff": "diff --git a/test/test-project/test.js b/test/test-project/test.js @@ -79,10 +79,6 @@ test('creates the expected files', () => {\n})\ntest('creates the expected output', () => {\n- var isWin = /^win/.test(process.platform);\n- if (isWin) {\n- return;\n- }\nexpect(projectBuildResults).toEqual(EXPECTED_BUILD_RESULTS);\n})\n",
        "chatgpt_cot": "\"Fix updateCardbase creates the expected files test by mocking downloadDefaultCards function and restoring it after the test.\""
    },
    {
        "org_diff": "diff --git a/views/cube/cube_overview.pug b/views/cube/cube_overview.pug @@ -92,8 +92,8 @@ block content\n// edit overview modal\n#overviewModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='cubeModalLabel', aria-hidden='true')\n.modal-dialog.modal-lg(role='document')\n- .modal-content\nform#postBlogForm(method='POST', action='/cube/editoverview/'+cube._id, autocomplete='off')\n+ .modal-content\n.modal-header\nh5.modal-title Edit Overview\nbutton.close(type='button', data-dismiss='modal', aria-label='Close')\n",
        "org_msg": "Update cube_overview.pug",
        "sim_msg": "add save and new for add documentation quick action",
        "sim_diff": "diff --git a/templates/workflow/modals/add_document_modal.html b/templates/workflow/modals/add_document_modal.html dropdownParent: $('#addDocumentModal'),\n});\n- $(() => {\n- $('#submitDocumentation').click(e => {\n+ // show quick add modal if quick-modal to true\n+ const url = new URL(window.location.href);\n+ if (url.searchParams.get('quick-modal')) {\n+ $('#addDocumentModal').modal('show');\n+ }\n+ });\n+\n+ var saveDocumentation = (buttonId) => {\n+ $(`#${buttonId}`).click(e => {\ne.preventDefault();\nconst formValue = $('#addDocumentationForm').serializeArray();\n.select('val', '')\n.trigger('change');\n+ $('#addDocumentModal').modal('hide');\n+\n+ const urlWithoutQueryString = window.location.href.split('?')[0];\n+ if (buttonId === 'submitDocumentationAndNew') {\n+ window.location.replace(`${urlWithoutQueryString}?quick-modal=true`);\n+ } else {\nsetTimeout(() => {\n- window.location.reload();\n+ window.location.replace(urlWithoutQueryString);\n}, 2000);\n+ }\n},\nerror: function (xhr, status, error) {\ntoastr.error(error, 'Failed');\n},\n});\n});\n- });\n+ }\n+\n+ $(() => {\n+ saveDocumentation('submitDocumentationAndNew');\n+ saveDocumentation('submitDocumentation');\n});\n</script>\n<!-- Add Document modal -->\n-<div\n- class=\"modal fade\"\n- id=\"addDocumentModal\"\n- tabindex=\"-1\"\n- role=\"dialog\"\n- aria-labelledby=\"addProjectModalLabel\"\n->\n+<div class=\"modal fade\" id=\"addDocumentModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"addProjectModalLabel\">\n<div class=\"modal-dialog\" role=\"form\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n- <button\n- type=\"button\"\n- class=\"close\"\n- data-dismiss=\"modal\"\n- aria-label=\"Close\"\n- >\n+ <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n<span aria-hidden=\"true\">&times;</span>\n</button>\n<h4 class=\"modal-title\" id=\"addProjectModalLabel\">\n{% csrf_token %}\n<div class=\"form-group\">\n<label for=\"name\">Name</label>\n- <input\n- type=\"text\"\n- name=\"name\"\n- id=\"name\"\n- class=\"form-control\"\n- placeholder=\"Name of the document\"\n- required\n- />\n+ <input type=\"text\" name=\"name\" id=\"name\" class=\"form-control\" placeholder=\"Name of the document\" required />\n</div>\n<div class=\"form-group\">\n<label for=\"program\">Program</label>\n</div>\n<div class=\"form-group\">\n<label for=\"name\">URL</label>\n- <input\n- type=\"text\"\n- name=\"url\"\n- id=\"url\"\n- class=\"form-control\"\n- placeholder=\"e.g https://documents.example.com/files/doca.pdf\"\n- required\n- />\n+ <input type=\"text\" name=\"url\" id=\"url\" class=\"form-control\"\n+ placeholder=\"e.g https://documents.example.com/files/doca.pdf\" required />\n</div>\n</div>\n<button type=\"reset\" class=\"btn btn-close\" data-dismiss=\"modal\">\nClose\n</button>\n- <button\n- type=\"submit\"\n- class=\"btn btn-success\"\n- id=\"submitDocumentation\"\n- >\n+\n+ <button type=\"submit\" class=\"btn btn-outline-success\" id=\"submitDocumentationAndNew\">\n+ Save &amp; New\n+ </button>\n+ <button type=\"submit\" class=\"btn btn-success\" id=\"submitDocumentation\">\nSave\n</button>\n</div>\n",
        "chatgpt_cot": "Update cube overview modal in cube_overview.pug file to fix modal display issue."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -189,6 +189,11 @@ router.post('/format/add/:id', ensureAuth, async (req, res) => {\nreq.body.html = sanitize(req.body.html);\nconst cube = await Cube.findOne(build_id_query(req.params.id));\n+ if (!req.user._id.equals(cube.owner)) {\n+ req.flash('danger', 'Formats can only be changed by cube owner.');\n+ return res.redirect(`/cube/list/${req.params.id}`);\n+ }\n+\nlet message = '';\nif (req.body.id === '-1') {\nif (!cube.draft_formats) {\n@@ -235,13 +240,6 @@ router.post('/blog/post/:id', ensureAuth, async (req, res) => {\nreturn res.redirect(`/cube/blog/${req.params.id}`);\n}\n- let cube = await Cube.findOne(build_id_query(req.params.id));\n-\n- cube.date_updated = Date.now();\n- cube.updated_string = cube.date_updated.toLocaleString('en-US');\n- cube = setCubeType(cube, carddb);\n-\n- await cube.save();\nconst { user } = req;\nif (req.body.id && req.body.id.length > 0) {\n@@ -261,12 +259,21 @@ router.post('/blog/post/:id', ensureAuth, async (req, res) => {\nreq.flash('success', 'Blog update successful');\nreturn res.redirect(`/cube/blog/${req.params.id}`);\n}\n+\n+ let cube = await Cube.findOne(build_id_query(req.params.id));\n+\n// post new blog\nif (!user._id.equals(cube.owner)) {\nreq.flash('danger', 'Unable to post this blog post: Unauthorized.');\nreturn res.redirect(`/cube/blog/${req.params.id}`);\n}\n+ cube.date_updated = Date.now();\n+ cube.updated_string = cube.date_updated.toLocaleString('en-US');\n+ cube = setCubeType(cube, carddb);\n+\n+ await cube.save();\n+\nconst blogpost = new Blog();\nblogpost.html = req.body.html;\nblogpost.title = req.body.title;\n@@ -2758,7 +2765,7 @@ router.get(\nrouter.post(\n'/api/getversions',\nbody([], 'Body must be an array.').isArray(),\n- body('*', 'Each ID must be a valid UUID.').isUUID(4),\n+ body('*', 'Each ID must be a valid UUID.').matches(/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/),\njsonValidationErrors,\nutil.wrapAsyncApi(async (req, res) => {\nconst allDetails = req.body.map((cardID) => carddb.cardFromId(cardID));\n@@ -3031,7 +3038,7 @@ router.post('/remove/:id', ensureAuth, async (req, res) => {\nif (!req.user._id.equals(cube.owner)) {\nreq.flash('danger', 'Not Authorized');\n- res.redirect(`/cube/overview/${req.params.id}`);\n+ return res.redirect(`/cube/overview/${req.params.id}`);\n}\nawait Cube.deleteOne(build_id_query(req.params.id));\n",
        "org_msg": "Make sure every cube route has authentication.",
        "sim_msg": "Don't save empty drafts",
        "sim_diff": "diff --git a/src/post/Write/Write.js b/src/post/Write/Write.js @@ -122,11 +122,18 @@ export class RawNewPost extends Component {\nconst postBody = this.editor.getContent();\nconst { location: { query } } = this.props;\nlet id = query.draft;\n- if (id === undefined) {\n+\n+ // Remove zero width space\n+ const isBodyEmpty = postBody.markdown.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim().length === 0;\n+\n+ if (id === undefined && !isBodyEmpty) {\nid = Date.now().toString(16);\nthis.props.router.push({ pathname: '/write', query: { draft: id } });\n}\n+\n+ if (id !== undefined) {\nthis.props.saveDraft({ postData: data, rawBody: postBody.raw, id });\n+ }\n}, 400);\ncomponentWillReceiveProps(nextProps) {\n",
        "chatgpt_cot": "Add ownership check for format change in cube_routes.js, refactor blog post handling, and improve UUID validation."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeDraftPage.js b/src/pages/CubeDraftPage.js @@ -250,10 +250,15 @@ const CubeDraftPage = ({ cube, cubeID, initialDraft }) => {\npackNumber={packNumber}\npickNumber={pickNumber}\npicking={picking}\n- onMoveCard={handleMoveCard}\n- onClickCard={handleClickCard}\n+ onMoveCard={sealed ? () => {} : handleMoveCard}\n+ onClickCard={sealed ? () => {} : handleClickCard}\n/>\n</ErrorBoundary>\n+ {sealed && (\n+ <Button color=\"primary\" onClick={nextPack}>\n+ Next Pack\n+ </Button>\n+ )}\n{showBotBreakdown && (\n<ErrorBoundary>\n<Card className=\"mt-3\">\n",
        "org_msg": "Fix sealed packs in CubeDraftPage.js",
        "sim_msg": "Add Void Fist test\nCheck if cancelled cards correctly count towards cards played",
        "sim_diff": "diff --git a/test/server/cards/04.5-AaN/VoidFist.spec.js b/test/server/cards/04.5-AaN/VoidFist.spec.js @@ -12,10 +12,20 @@ describe('Void Fist', function() {\nplayer2: {\ninPlay: ['bayushi-liar'],\ndynastyDiscard: ['hidden-moon-dojo', 'seeker-initiate'],\n- hand: ['ornate-fan', 'infiltrator', 'banzai']\n+ hand: ['ornate-fan', 'infiltrator', 'banzai', 'court-games', 'forged-edict']\n}\n});\n+\n+ this.courtGames = this.player2.findCardByName('court-games');\n+ this.forgedEdict = this.player2.findCardByName('forged-edict');\n+\nthis.bayushiLiar = this.player2.findCardByName('bayushi-liar');\n+ this.bayushiLiar.dishonor();\n+\n+ this.hurricanePunch = this.player1.findCardByName('hurricane-punch');\n+ this.fineKatana = this.player1.findCardByName('fine-katana');\n+ this.togashiMitsu = this.player1.findCardByName('togashi-mitsu');\n+\nthis.player2.placeCardInProvince('hidden-moon-dojo', 'province 1');\nthis.seekerInitiate = this.player2.placeCardInProvince('seeker-initiate', 'province 2');\nthis.player1.pass();\n@@ -62,6 +72,39 @@ describe('Void Fist', function() {\nexpect(this.bayushiLiar.inConflict).toBe(false);\n});\n+ it('should trigger if the player has played 2 cards (1 card was canceled, but should count)', function() {\n+ expect(this.bayushiLiar.inConflict).toBe(true);\n+ this.player2.playAttachment('ornate-fan', 'bayushi-liar');\n+\n+ this.player1.clickCard(this.fineKatana);\n+ this.player1.clickCard(this.togashiMitsu);\n+ expect(this.togashiMitsu.militarySkill).toBe(6);\n+\n+ this.player2.clickCard(this.courtGames);\n+ this.player2.clickPrompt('Honor a friendly character');\n+ this.player2.clickCard(this.bayushiLiar);\n+\n+ expect(this.player1).toHavePrompt('Conflict Action Window');\n+ this.player1.clickCard('void-fist');\n+ expect(this.player1).toHavePrompt('Conflict Action Window');\n+ this.player1.clickCard(this.hurricanePunch);\n+ this.player1.clickCard(this.togashiMitsu);\n+\n+ expect(this.player2).toHavePrompt('Triggered Abilities');\n+ expect(this.player2).toBeAbleToSelect(this.forgedEdict);\n+ this.player2.clickCard(this.forgedEdict);\n+ this.player2.clickCard(this.bayushiLiar);\n+\n+ this.player2.pass();\n+\n+ expect(this.player1).toHavePrompt('Conflict Action Window');\n+ this.player1.clickCard('void-fist');\n+ expect(this.player1).toHavePrompt('Void Fist');\n+ this.player1.clickCard(this.bayushiLiar);\n+ expect(this.bayushiLiar.bowed).toBe(true);\n+ expect(this.bayushiLiar.inConflict).toBe(false);\n+ });\n+\nit('should not trigger for the opponent if they haven\\'t played 2 cards', function() {\nthis.player1.moveCard('void-fist', 'conflict deck');\nthis.player2.playAttachment('ornate-fan', 'bayushi-liar');\n",
        "chatgpt_cot": "\"Add conditional rendering for next pack button and onClickCard/onMoveCard functions based on sealed status\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -142,6 +142,6 @@ app.use((req, res) => {\n});\n// Start server\n-http.createServer(app).listen(4999, 'localhost', () => {\n- console.log('server started on port 4999...');\n+http.createServer(app).listen(5000, 'localhost', () => {\n+ console.log('server started on port 5000...');\n});\n\\ No newline at end of file\n",
        "org_msg": "removed debug values",
        "sim_msg": "Clean up connect button url",
        "sim_diff": "diff --git a/planet.js b/planet.js @@ -957,7 +957,7 @@ document.getElementById('connectButton').addEventListener('click', async (e) =>\nif (response.ok) {\nconst json = await response.json();\n// console.log(json);\n- location.search = `?w=${json.id}`;\n+ location.search = `?u=${json.id}.worlds.webaverse.com`;\n}\n}\n});\n\\ No newline at end of file\n",
        "chatgpt_cot": "Change server port from 4999 to 5000 to start server on a different port."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -631,7 +631,7 @@ function getLabels(sort) {\n}\nelse if (sort == 'Type')\n{\n- return ['Artifact','Conspiracy','Contraption','Creature','Enchantment','Instant','Land','Phenomenon','Plane','Planeswalker','Scheme','Sorcery','Vanguard'];\n+ return ['Creature','Planeswalker','Instant','Sorcery','Artifact','Enchantment','Conspiracy','Contraption','Phenomenon','Plane','Scheme','Vanguard''Land'];\n}\nelse if (sort == 'Supertype')\n{\n",
        "org_msg": "updated type sort per discord",
        "sim_msg": "refactor function lookup",
        "sim_diff": "diff --git a/src/components/drawing/index.js b/src/components/drawing/index.js @@ -943,7 +943,8 @@ drawing.textPointStyle = function(s, trace, gd) {\n}\nif(texttemplate) {\n- var labels = trace._module.formatLabels ? trace._module.formatLabels(d, trace, fullLayout) : {};\n+ var fn = trace._module.formatLabels;\n+ var labels = fn ? fn(d, trace, fullLayout) : {};\nvar pointValues = {};\nappendArrayPointValue(pointValues, trace, d.i);\nvar meta = trace._meta || {};\n",
        "chatgpt_cot": "Reorder card types to match game rules."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2209,15 +2209,11 @@ router.get(\n}),\n);\n-router.post('/editdeck/:id', async (req, res) => {\n+router.post('/editdeck/:id', ensureAuth, async (req, res) => {\ntry {\nconst deck = await Deck.findById(req.params.id);\n- if (!deck) {\n- req.flash('danger', 'Deck not found');\n- return res.status(404).render('misc/404', {});\n- }\n- if ((deck.owner && !req.user) || (deck.owner && deck.owner != req.user._id)) {\n+ if (deck.owner && deck.owner != req.user._id) {\nreq.flash('danger', 'Unauthorized');\nreturn res.status(404).render('misc/404', {});\n}\n@@ -2238,11 +2234,7 @@ router.post('/editdeck/:id', async (req, res) => {\nreq.flash('success', 'Deck saved succesfully');\nres.redirect('/cube/deck/' + deck._id);\n} catch (err) {\n- console.error(err);\n- res.status(500).send({\n- success: 'false',\n- message: err,\n- });\n+ util.handleRouteError(res, err, '/404');\n}\n});\n@@ -2306,11 +2298,7 @@ router.post('/submitdeck/:id', async (req, res) => {\nreturn res.redirect('/cube/deckbuilder/' + deck._id);\n} catch (err) {\n- console.error(err);\n- res.status(500).send({\n- success: 'false',\n- message: err,\n- });\n+ util.handleRouteError(res, err, '/cube/playtest/' + req.params.id);\n}\n});\n@@ -2373,16 +2361,12 @@ router.get('/decks/:cubeid/:page', async (req, res) => {\n`Cube Cobra Decks: ${cube.name}`,\ncube.type ? `${cube.card_count} Card ${cube.type} Cube` : `${cube.card_count} Card Cube`,\ncube.image_uri,\n- `https://cubecobra.com/user/decks/${req.params.id}`,\n+ `https://cubecobra.com/user/decks/${req.params.cubeid}`,\n),\nloginCallback: '/user/decks/' + cubeid,\n});\n} catch (err) {\n- console.error(err);\n- res.status(500).send({\n- success: 'false',\n- message: err,\n- });\n+ util.handleRouteError(res, err, '/cube/playtest/' + req.params.cubeid);\n}\n});\n@@ -2452,10 +2436,7 @@ router.get('/rebuild/:id', ensureAuth, async (req, res) => {\nreturn res.redirect('/cube/deckbuilder/' + deck._id);\n} catch (err) {\n- console.error(err);\n-\n- req.flash('danger', 'This deck is not able to be cloned and rebuilt.');\n- res.redirect('/cube/deck/' + req.params.id);\n+ util.handleRouteError(res, err, '/cube/playtest/' + req.params.id);\n}\n});\n@@ -2492,10 +2473,7 @@ router.get('/redraft/:id', async (req, res) => {\nawait draft.save();\nres.redirect('/cube/draft/' + draft._id);\n} catch (err) {\n- console.error(err);\n-\n- req.flash('danger', 'This deck is not able to be redrafted.');\n- res.redirect('/cube/deck/' + req.params.id);\n+ util.handleRouteError(res, err, '/cube/playtest/' + req.params.id);\n}\n});\n@@ -2556,9 +2534,7 @@ router.get('/deckbuilder/:id', async (req, res) => {\ndeckid: deck._id,\n});\n} catch (err) {\n- console.error(err);\n- req.flash('danger', err.message);\n- res.redirect('/404');\n+ util.handleRouteError(res, err, '/404');\n}\n});\n",
        "org_msg": "Refactor deck routes",
        "sim_msg": "Fixes to Deck Checker",
        "sim_diff": "diff --git a/client/deck-validator.js b/client/deck-validator.js @@ -14,7 +14,7 @@ function getDeckCount(deck) {\nfunction getStronghold(deck) {\nvar stronghold;\n_.each(deck, card => {\n- if(card.type === 'stronghold') {\n+ if(card.card.type === 'stronghold') {\nstronghold = card;\n}\n});\n@@ -62,7 +62,7 @@ module.exports = function validateDeck(deck, packs) {\nvar isValid = true;\nif(_.any(deck.stronghold, card => {\n- return !card.clan;\n+ return !card.card.clan;\n})) {\nstatus = 'Invalid';\nextendedStatus.push('Deck contains invalid cards');\n@@ -155,8 +155,8 @@ module.exports = function validateDeck(deck, packs) {\n}\nif(_.any(combined, card => {\n- if(card.count > card.deck_limit) {\n- extendedStatus.push(card.name + ' has limit ' + card.deck_limit);\n+ if(card.count > card.card.deck_limit) {\n+ extendedStatus.push(card.card.name + ' has limit ' + card.card.deck_limit);\nreturn true;\n}\n@@ -169,8 +169,8 @@ module.exports = function validateDeck(deck, packs) {\n//Check for out of faction cards in stronghold, provinces, dynasty\nif(_.any(combinedClan, card => {\n- if(!(_.contains([deck.faction.value,'neutral'],card.clan))) {\n-\n+ if(!(_.contains([deck.faction.value,'neutral'],card.card.clan))) {\n+ extendedStatus.push(card.card.name + ' is not in faction ' + deck.faction.value);\n//console.log(card.card.label + ' has clan ' + card.card.clan);\nreturn true;\n}\n@@ -183,8 +183,8 @@ module.exports = function validateDeck(deck, packs) {\n//Check for out of faction cards in conflict\nif(_.any(deck.conflictCards, card => {\n- if(!(_.contains([deck.faction.value, deck.alliance.value, 'neutral'],card.clan))) {\n-\n+ if(!(_.contains([deck.faction.value, deck.alliance.value, 'neutral'],card.card.clan))) {\n+ extendedStatus.push(card.card.name + ' is not in faction ' + deck.faction.value);\nreturn true;\n}\n@@ -198,8 +198,8 @@ module.exports = function validateDeck(deck, packs) {\n//Total up influence count\n_.each(deck.conflictCards, card => {\n- if(card.clan === deck.alliance.value) {\n- influenceTotal = influenceTotal + (card.influence_cost * card.count);\n+ if(card.card.clan === deck.alliance.value) {\n+ influenceTotal = influenceTotal + (card.card.influence_cost * card.count);\n}\n});\n@@ -223,7 +223,7 @@ module.exports = function validateDeck(deck, packs) {\nstatus = 'Unreleased Cards';\n_.each(unreleasedCards, card => {\n- extendedStatus.push(card.name + ' is not yet released');\n+ extendedStatus.push(card.card.name + ' is not yet released');\n});\n}\n}\n",
        "chatgpt_cot": "Add ensureAuth middleware to editdeck and submitdeck routes, handle errors using util.handleRouteError. Update redirect URL in decks route."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -791,7 +791,7 @@ router.get('/list/:id', async function(req, res) {\nconst reactProps = {\ncanEdit: req.user && req.user.id === cube.owner,\n- cubeID: cube._id.toString(),\n+ cubeID: req.params.id,\ndefaultTagColors: cube.tag_colors,\ndefaultShowTagColors: !req.user || !req.user.hide_tag_colors,\ndefaultSorts: cube.default_sorts,\n",
        "org_msg": "Fix source of cubeid.\nUesrs were being erroneously redirected to the long-ID page.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "\"Fix cubeID assignment in cube_routes.js to use request parameter instead of cube._id.toString()\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/draftutil.test.js b/__tests__/serverjs/draftutil.test.js @@ -5,33 +5,20 @@ test(\"it can get the correct number of draft bots\", () => {\nseats: 5\n};\nconst result = methods.getDraftBots(params);\n-\n- // The number of bots should be number of seats - 1\n- expect(result.length).toBe(4);\n+ expect(result.length).toBe(params.seats - 1);\n});\ntest(\"it can get bots with the correct properties\", () => {\n+ const allColors = [\"W\", \"U\", \"B\", \"R\", \"G\"];\nconst params = {\n- seats: 2\n+ seats: 2,\n};\nconst result = methods.getDraftBots(params);\n- // Bots should have two random colors selected\nexpect(result[0].length).toBe(2);\n- expect(\n- result[0][0] == \"W\" ||\n- result[0][0] == \"U\" ||\n- result[0][0] == \"B\" ||\n- result[0][0] == \"R\" ||\n- result[0][0] == \"G\"\n- ).toBe(true);\n- expect(\n- result[0][1] == \"W\" ||\n- result[0][1] == \"U\" ||\n- result[0][1] == \"B\" ||\n- result[0][1] == \"R\" ||\n- result[0][1] == \"G\"\n- ).toBe(true);\n+ expect(allColors.includes(result[0][0])).toBe(true);\n+ expect(allColors.includes(result[0][1])).toBe(true);\n+ expect(result[0][0] === result[0][1]).toBe(false);\n});\ntest(\"it returns the index of the first instance of a tag from a list of cards\", () => {\n",
        "org_msg": "slight improvements and code deduplication in draftutil test suite",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "\"Refactor draftutil.test.js to use allColors array, and fix the number of bots calculation based on seats parameter.\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -236,10 +236,6 @@ app.use('/user', users);\napp.use('/dev', devs);\napp.use('/tool', tools);\n-app.get('/500', (req, res, next) => {\n- next(new Error('Test error'));\n-});\n-\napp.use((req, res) => {\nres.status(404).render('misc/404', {});\n});\n",
        "org_msg": "Remove test route.",
        "sim_msg": "Make Vizor 360 teaser page the default home route\nServe Patches home page when accessing home route from patches.vizor.io.",
        "sim_diff": "diff --git a/app.js b/app.js @@ -271,12 +271,13 @@ app.get('/', function(req, res, next) {\ncase '360.vizor.io':\ncase '360.vizor.lol':\nreturn threesixtyController.index(req, res, next)\n- default:\n+ case 'patches.vizor.io':\nreturn homeController.index(req, res, next)\n+ default:\n+ return vizor2TeaserController.index(req, res, next)\n}\n})\n-app.get('/vizor2teaser', vizor2TeaserController.index)\napp.get('/threesixty', threesixtyController.index)\napp.get('/threesixty/featured', threesixtyController.featured)\n",
        "chatgpt_cot": "\"Remove error route and handle 404 in app.js\""
    },
    {
        "org_diff": "diff --git a/models/cube.js b/models/cube.js @@ -116,7 +116,10 @@ const cubeSchema = mongoose.Schema({\ntype: Number,\ndefault: -1,\n},\n- numDecks: Number,\n+ numDecks: {\n+ type: Number,\n+ default: 0,\n+ },\ndescription: String,\ndescriptionhtml: String,\nimage_uri: String,\n",
        "org_msg": "create default for numdecks",
        "sim_msg": "swagger v2 complete",
        "sim_diff": "diff --git a/bin/definition/schema.js b/bin/definition/schema.js @@ -186,6 +186,7 @@ Object.assign(Schema.properties, {\n},\nenum: {\nitems: {\n+ allowed: ({ parent }) => !!(parent && parent.parent),\ntype: ({ parent }) => parent.parent.value.type,\ndeserialize: ({ exception, parent, value }) => {\nreturn Schema.helpers.deserializeDate(parent.parent.value, exception, value);\n@@ -213,27 +214,30 @@ Object.assign(Schema.properties, {\nproperties: Schema\n},\ndiscriminator: {\n- allowed: ({ parent }) => parent && parent.validator === Schema && parent.type === 'object',\n+ allowed: ({ parent }) => parent && parent.validator === Schema && parent.validator.type === 'object',\ntype: 'string',\n- error: ({ exception, major, parent, value }) => {\n+ errors: ({ exception, major, parent, value }) => {\nif (major === 2) {\nif (!parent.value.required || !parent.value.required.includes(value)) {\n- exception('Value must be found in the parent\\'s required properties list.');\n+ exception('Value \"' + value + '\" must be found in the parent\\'s required properties list.');\n}\nif (!parent.value.properties || !parent.value.properties.hasOwnProperty(value)) {\n- exception('Value must be found in the parent\\'s properties definition.');\n+ exception('Value \"' + value + '\" must be found in the parent\\'s properties definition.');\n}\n}\n}\n},\nreadOnly: {\n- allowed: ({ parent }) => parent && parent.validator === Schema && parent.value.type === 'object',\n+ allowed: ({ parent, value }) => {\n+ return parent && parent.parent && parent.parent.key === 'properties' &&\n+ parent.parent.parent && parent.parent.parent.validator === Schema;\n+ },\ntype: 'boolean',\ndefault: false,\n- error: ({ parent, value, warn }) => {\n- if (parent && parent.value.required && parent.required.includes(value)) {\n- warn('Value should not be exist in the parent\\'s required properties list.');\n+ errors: ({ parent, value, warn }) => {\n+ if (parent && parent.parent && parent.parent.parent && parent.parent.parent.value.required && parent.parent.parent.value.required.includes(parent.key)) {\n+ parent.warn('Property should not be marked as both read only and required');\n}\n}\n},\n",
        "chatgpt_cot": "Add default value to numDecks in cube model. The modification ensures that numDecks always has a default value of 0."
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"prettier\": \"prettier --write {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js' webpack.'*'.js\",\n\"prettier-master\": \"prettier --write $(git diff master --name-only | grep -E '.js$')\",\n\"prettier-head\": \"prettier --write $(git diff HEAD --name-only | grep -E '.js$')\",\n- \"lint\": \"prettier --check {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js' && eslint routes\",\n+ \"lint\": \"prettier --check {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js' && eslint routes src/pages\",\n\"nodemon\": \"nodemon --ignore src --ignore public\",\n\"webpack-dev-server\": \"webpack-dev-server --config webpack.dev.js\",\n\"build\": \"webpack --mode production --config webpack.prod.js && rollup -c\",\n",
        "org_msg": "Add src/pages to blocking lint.",
        "sim_msg": "Do not lint layout.worker.bundled.js",
        "sim_diff": "diff --git a/package.json b/package.json \"prepare\": \"lerna run --stream --sort prepublishOnly\",\n\"prettier-comment\": \"https://github.com/yarnpkg/yarn/issues/6300\",\n\"prettier\":\n- \"./node_modules/prettier/bin-prettier.js --write '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n+ \"./node_modules/prettier/bin-prettier.js --write '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(layout.worker.bundled|react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n\"prettier-lint\":\n- \"./node_modules/prettier/bin-prettier.js --list-different '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n+ \"./node_modules/prettier/bin-prettier.js --list-different '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(layout.worker.bundled|react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n\"test\": \"lerna run test\",\n\"tsc-lint\": \"tsc\",\n\"tsc-lint-debug\": \"tsc --listFiles\",\n",
        "chatgpt_cot": "Update lint script to include eslint for src/pages and remove nodemon ignore for src and public. Add webpack-dev-server and build scripts."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2448,7 +2448,9 @@ router.post(\nmax: 100,\n}),\nbody('name', 'Cube name may not use profanity.').custom((value) => !util.hasProfanity(value)),\n- body('urlAlias', 'Custom URL must contain only alphanumeric characters or underscores.').matches(/^[A-Za-z0-9_]*$/),\n+ body('urlAlias', 'Custom URL must contain only alphanumeric characters, dashes, or underscores.').matches(\n+ /^[A-Za-z0-9_-]*$/,\n+ ),\nbody('urlAlias', `Custom URL may not be longer than 100 characters.`).isLength({\nmax: 100,\n}),\n",
        "org_msg": "added dash to allowed cube url characters",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Update URL alias validation to allow dashes and underscores. Fix profanity check for cube name to improve user experience.\""
    },
    {
        "org_diff": "diff --git a/src/components/FoilOverlay.js b/src/components/FoilOverlay.js @@ -8,7 +8,7 @@ const FoilOverlay = (Tag) => (props) => {\nfinish = props.card.finish;\n}\nreturn (\n- <div>\n+ <div className=\"position-relative\">\n{finish !== 'Foil' ? '' : <img src=\"/content/foilOverlay.png\" className=\"foilOverlay card-border\" width=\"100%\" />}\n<Tag {...props} />\n</div>\n",
        "org_msg": "Fix card modal foil overlay.",
        "sim_msg": "Reduce avatar size",
        "sim_diff": "diff --git a/src/components/layout.js b/src/components/layout.js @@ -223,7 +223,7 @@ const Layout = props => {\n>\n<img\nalt={login}\n- src={avatar_url}\n+ src={`${avatar_url}&s=48`}\nstyle={{\nwidth: '10%',\nmargin: '0 10px 10px 0'\n",
        "chatgpt_cot": "Add position-relative class to FoilOverlay div to handle positioning of foilOverlay image. Fixes issue with overlay image not displaying correctly."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -238,7 +238,14 @@ app.use((err, req, res, next) => {\n});\n});\n+schedule.scheduleJob('0 0 * * *', () => {\n+ winston.info('Starting midnight cardbase update...');\n+ updatedb.updateCardbase();\n+});\n+\n// Start server after carddb is initialized.\n-http.createServer(app).listen(process.env.PORT || 5000, '127.0.0.1', () => {\n- winston.info(`Server started on port ${process.env.PORT}...`);\n+carddb.initializeCardDb().then(() => {\n+ http.createServer(app).listen(5000, 'localhost', () => {\n+ winston.info('Server started on port 5000...');\n+ });\n});\n",
        "org_msg": "add back update",
        "sim_msg": "refactor: allows for web routes to worked on locally even if powergate and devnet are not running",
        "sim_diff": "diff --git a/server.js b/server.js @@ -67,6 +67,7 @@ app.prepare().then(async () => {\nif (!production) {\n// TODO(jim): Remove later.\n// We wipe all of the local data each time you run the application.\n+ try {\nawait Utilities.resetFileSystem();\nconst updates = await Utilities.refresh({ PG: PowerGate });\n@@ -120,6 +121,11 @@ app.prepare().then(async () => {\nconst parsedLibrary = FS.readFileSync(\"./.data/library.json\", \"utf8\");\nstate.library = JSON.parse(parsedLibrary).library;\n}\n+ } catch (e) {\n+ console.log(\n+ \"[ prototype ] you can not run the filecoin client, only web views allowed.\"\n+ );\n+ }\n}\nconst server = express();\n@@ -324,7 +330,7 @@ app.prepare().then(async () => {\n});\nserver.get(\"/\", async (req, res) => {\n- if (production) {\n+ if (production || !state.token) {\nreturn res.redirect(Constants.GITHUB_URL);\n}\n",
        "chatgpt_cot": "Add scheduled job for midnight cardbase update and initialize card database before starting server. Fixes server startup and cardbase update related issues."
    },
    {
        "org_diff": "diff --git a/jobs/populate_analytics.js b/jobs/populate_analytics.js @@ -437,8 +437,6 @@ const run = async () => {\nif ((i + 1) % 10 === 0) {\nwinston.info(`Finished: ${i + 1} of ${count} cubes.`);\n}\n-\n- break;\n}\nwinston.info('Finished: all cubes');\n@@ -452,7 +450,6 @@ const run = async () => {\nif ((i + 1) % 1000 === 0) {\nwinston.info(`Finished: ${i + 1} of ${count} decks.`);\n}\n- break;\n}\nwinston.info('Finished: all decks');\n",
        "org_msg": "remove debug break",
        "sim_msg": "fix: fullstory init stuck",
        "sim_diff": "diff --git a/src/lib/analytics/analytics.js b/src/lib/analytics/analytics.js @@ -68,8 +68,7 @@ const initAmplitude = async key => {\n/** @private */\n// eslint-disable-next-line require-await\n-const initFullStory = async () =>\n- new Promise(resolve => {\n+const initFullStory = new Promise(resolve => {\nconst { _fs_ready } = window\nObject.assign(window, {\n@@ -97,7 +96,7 @@ export const initAnalytics = async () => {\nisMauticEnabled = !!Mautic\n// pre-initializing & preloading FS & Amplitude\n- await Promise.all([isFSEnabled && initFullStory(), isAmplitudeEnabled && initAmplitude(amplitudeKey)])\n+ await Promise.all([isFSEnabled && initFullStory, isAmplitudeEnabled && initAmplitude(amplitudeKey)])\nif (isAmplitudeEnabled) {\nconst identity = new Amplitude.Identify().setOnce('first_open_date', new Date().toString())\n@@ -125,7 +124,7 @@ export const initAnalytics = async () => {\n})\n}\n- log.debug('Initialized analytics:', {\n+ log.debug('available analytics:', {\nFS: isFSEnabled,\nSentry: isSentryEnabled,\nAmplitude: isAmplitudeEnabled,\n",
        "chatgpt_cot": "Remove unnecessary break statements in populate_analytics.js to ensure all cubes and decks are processed correctly."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -653,7 +653,7 @@ router.post('/importcubetutor/:id',ensureAuth, function(req,res,next) {\nvar changelog = \"\";\ncards.forEach(function(card, index)\n{\n- var currentId =carddb.nameToId[card.name.toLowerCase().trim()];\n+ var currentId =carddb.nameToId[card.name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").trim()];\nif(currentId && currentId[0])\n{\nvar found = false;\n@@ -831,7 +831,7 @@ function bulkuploadCSV(req, res, cards, cube) {\nstatus:split[5],\ntags:split[6].split(',')\n};\n- var currentId =carddb.nameToId[card.name.toLowerCase().trim()];\n+ var currentId =carddb.nameToId[card.name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").trim()];\nif(currentId && currentId[0])\n{\nvar found = false;\n@@ -2346,7 +2346,8 @@ router.get('/api/getcardfromid/:id', function(req, res)\nrouter.get('/api/getversions/:id', function(req, res)\n{\ncards = [];\n- carddb.nameToId[carddb.carddict[req.params.id].name.toLowerCase()].forEach(function(id, index)\n+ console.log(carddb.carddict[req.params.id].name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"));\n+ carddb.nameToId[carddb.carddict[req.params.id].name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")].forEach(function(id, index)\n{\ncards.push(carddb.carddict[id]);\n});\n@@ -2363,7 +2364,7 @@ router.post('/api/getversions', function(req, res)\nreq.body.forEach(function(cardid, index)\n{\ncards[cardid] = [];\n- carddb.nameToId[carddb.carddict[cardid].name.toLowerCase()].forEach(function(id, index)\n+ carddb.nameToId[carddb.carddict[cardid].name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")].forEach(function(id, index)\n{\ncards[cardid].push({\nid:id,\n",
        "org_msg": "Fixed issue with accented cards",
        "sim_msg": "Remove /transfer route",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -8,7 +8,6 @@ import Settings from './app/AppSettings';\nimport Page from './feed/Page';\nimport User from './user/User';\n-import Transfer from './wallet/Transfer';\nimport Tags from './tags/Tags';\nimport Donors from './statics/Donors';\nimport Post from './post/Post';\n@@ -29,13 +28,6 @@ export default (\n<Route path=\"/team\" component={Team} />\n<Route path=\"/tags\" component={Tags} />\n<Route path=\"/donors\" component={Donors} />\n- <Route\n- path=\"/transfer\"\n- render={() =>\n- (<RequireLogin>\n- <Transfer />\n- </RequireLogin>)}\n- />\n<Route\npath=\"/bookmarks\"\nrender={() =>\n",
        "chatgpt_cot": "Normalize card names to improve consistency and accuracy. Fix issues with special characters in card names for better data retrieval."
    },
    {
        "org_diff": "diff --git a/webpack.prod.js b/webpack.prod.js @@ -7,7 +7,7 @@ const common = require('./webpack.common.js');\nconst config = {\nmode: 'production',\n- devtool: false,\n+ devtool: 'source-map',\nplugins: [\nnew webpack.DefinePlugin({\n'process.env.NODE_ENV': JSON.stringify('production'),\n@@ -24,6 +24,7 @@ const config = {\nminimizer: [\nnew TerserPlugin({\nparallel: true,\n+ sourceMap: true,\n}),\n],\nusedExports: true,\n",
        "org_msg": "Enable source maps on production build.",
        "sim_msg": "fixed css loading in webpack.config.prod.js",
        "sim_diff": "diff --git a/webpack.config.prod.js b/webpack.config.prod.js @@ -79,14 +79,14 @@ module.exports = {\n],\nmodule: {\nloaders: [\n- { test: /\\.jsx?$/, exclude: /node_modules/, loader: 'babel?presets[]=es2015' },\n+ { test: /\\.js$/, exclude: /node_modules/, loaders: ['babel?presets[]=es2015'] },\n{ test: /\\.eot(\\?v=\\d+.\\d+.\\d+)?$/, loader: 'url?name=[name].[ext]' },\n{ test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: 'url-loader?limit=10000&mimetype=application/font-woff&name=[name].[ext]' },\n{ test: /\\.[ot]tf(\\?v=\\d+.\\d+.\\d+)?$/, loader: 'url-loader?limit=10000&mimetype=application/octet-stream&name=[name].[ext]' },\n{ test: /\\.svg(\\?v=\\d+.\\d+.\\d+)?$/, loader: 'url-loader?limit=10000&mimetype=image/svg+xml&name=[name].[ext]' },\n{ test: /\\.(jpe?g|png|gif)$/i, loader: 'file?name=[name].[ext]' },\n{ test: /\\.ico$/, loader: 'file?name=[name].[ext]' },\n- { test: /(\\.css|\\.scss)$/, loaders: ['style', 'css?sourceMap', 'postcss'] },\n+ { test: /(\\.css|\\.scss)$/, loader: ExtractTextPlugin.extract('style', 'css?sourceMap&modules', 'postcss') },\n{ test: /\\.json$/, loader: 'json' },\n],\n},\n",
        "chatgpt_cot": "\"Add source map for production build in webpack.prod.js\""
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -1535,8 +1535,8 @@ function renderTableView() {\n}\n});\n- var res = '<div class=\"row even-cols\" style=\"margin: 0 -17px\">';\n- res += `<style>@media(min-width: 992px) { .color-column { max-width: ${100 / Object.keys(columns).length}%; } }</style>`;\n+ var res = `<style>@media(min-width: 992px) { .even-cols { flex-wrap: nowrap } .color-column { width: ${100 / Object.keys(columns).length}% } }</style>`;\n+ res += '<div class=\"row even-cols\" style=\"margin: 0 -17px\">';\nObject.keys(columns).forEach(function(column_label, col_index) {\nvar column = columns[column_label];\n",
        "org_msg": "Fix column widths.",
        "sim_msg": "fix(wfs): refactors autodetection to be done against WFS feature type\nAutodetection was previously being done against features, which is slow and inaccurate. It was\nresulting in cases where we'd miss altitude on data that only sparsely contained altitudes.",
        "sim_diff": "diff --git a/src/plugin/ogc/wfs/wfslayerconfig.js b/src/plugin/ogc/wfs/wfslayerconfig.js goog.provide('plugin.ogc.wfs.WFSLayerConfig');\n+\ngoog.require('goog.async.Deferred');\ngoog.require('goog.string');\ngoog.require('os.im.mapping.AltMapping');\n+goog.require('os.im.mapping.OrientationMapping');\n+goog.require('os.im.mapping.RadiusMapping');\n+goog.require('os.im.mapping.SemiMajorMapping');\n+goog.require('os.im.mapping.SemiMinorMapping');\ngoog.require('os.im.mapping.TimeFormat');\ngoog.require('os.im.mapping.TimeType');\ngoog.require('os.im.mapping.time.DateTimeMapping');\n@@ -254,12 +259,13 @@ plugin.ogc.wfs.WFSLayerConfig.prototype.addMappings = function(layer, options) {\nvar startField = this.featureType.getStartDateColumnName();\nvar endField = this.featureType.getEndDateColumnName();\n+ var columns = this.featureType.getColumns();\n+ // do time autodetection\nif (animate && startField) {\nif (startField === 'validTime' && this.url.indexOf('/ogc/wfsServer') > -1) {\n// validTime means that the feature type is dynamic, which means we need to find the actual start/end fields\n// for the purposes of our mappings\n- var columns = this.featureType.getColumns();\nfor (var i = 0, ii = columns.length; i < ii; i++) {\nvar col = columns[i];\nif (col['name'] === 'DATE_TIME') {\n@@ -304,17 +310,32 @@ plugin.ogc.wfs.WFSLayerConfig.prototype.addMappings = function(layer, options) {\n}\n}\n+ // do the other autodetections\n+ var columnObj = {};\n+ columns.forEach(function(column) {\n+ columnObj[column['name']] = column['type'];\n+ });\n+\n+ var autodetects = [\n+ new os.im.mapping.AltMapping(),\n+ new os.im.mapping.RadiusMapping(),\n+ new os.im.mapping.OrientationMapping(),\n+ new os.im.mapping.SemiMajorMapping(),\n+ new os.im.mapping.SemiMinorMapping()\n+ ];\n+\n+ for (var i = 0, ii = autodetects.length; i < ii; i++) {\n+ var mapping = autodetects[i];\n+ var detected = mapping.autoDetect([columnObj]);\n+\n+ if (detected) {\n+ execMappings.push(detected);\n+ }\n+ }\n+\nif (execMappings && execMappings.length > 0) {\nimporter.setExecMappings(execMappings);\n}\n-\n- // tell the importer we want to run a different set of autodetection mappers\n- importer.selectAutoMappings([\n- os.im.mapping.AltMapping.ID,\n- os.im.mapping.RadiusMapping.ID,\n- os.im.mapping.OrientationMapping.ID,\n- os.im.mapping.SemiMajorMapping.ID,\n- os.im.mapping.SemiMinorMapping.ID]);\n};\n",
        "chatgpt_cot": "\"Fix rendering issue in editcube.js by updating CSS style for even columns\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -20,13 +20,15 @@ const schedule = require('node-schedule');\nconst updatedb = require('./serverjs/updatecards.js');\nconst carddb = require('./serverjs/cards.js');\n-const formatInfo = ({ level, message }) => `[${level}] ${JSON.stringify(message)}`;\n-const formatError = ({ message, stack, request }) => {\n- if (request) {\n- return `[error] ${message} \\nTarget: ${request.originalUrl}\\nUUID: ${request.uuid}\\nStackTrace: ${stack}`;\n- }\n- return `[error] ${message} \\nStackTrace: ${stack}`;\n-};\n+const formatInfo = ({ message }) => JSON.stringify(message);\n+const formatError = ({ message, stack, request }) =>\n+ JSON.stringify({\n+ level: 'error',\n+ message,\n+ target: request ? request.originalUrl : null,\n+ uuid: request ? request.uuid : null,\n+ stack: stack.split('\\n'),\n+ });\nconst linearFormat = winston.format((info) => {\nif (info.message.type === 'request') {\n@@ -51,8 +53,8 @@ if (process.env.AWS_ACCESS_KEY_ID && process.env.AWS_ACCESS_KEY_ID.length > 0) {\nnew WinstonCloudWatch({\nlevel: 'info',\ncloudWatchLogs: new AWS.CloudWatchLogs(),\n- logGroupName: process.env.AWS_LOG_GROUP,\n- logStreamName: `${process.env.AWS_LOG_STREAM}_info`,\n+ logGroupName: `${process.env.AWS_LOG_GROUP}_${process.env.AWS_LOG_STREAM}_info`,\n+ logStreamName: uuid(),\nawsAccessKeyId: process.env.AWS_ACCESS_KEY_ID,\nawsSecretKey: process.env.AWS_SECRET_ACCESS_KEY,\nawsRegion: process.env.AWS_REGION,\n@@ -62,8 +64,8 @@ if (process.env.AWS_ACCESS_KEY_ID && process.env.AWS_ACCESS_KEY_ID.length > 0) {\nnew WinstonCloudWatch({\nlevel: 'error',\ncloudWatchLogs: new AWS.CloudWatchLogs(),\n- logGroupName: process.env.AWS_LOG_GROUP,\n- logStreamName: `${process.env.AWS_LOG_STREAM}_error`,\n+ logGroupName: `${process.env.AWS_LOG_GROUP}_${process.env.AWS_LOG_STREAM}_error`,\n+ logStreamName: uuid(),\nawsAccessKeyId: process.env.AWS_ACCESS_KEY_ID,\nawsSecretKey: process.env.AWS_SECRET_ACCESS_KEY,\nawsRegion: process.env.AWS_REGION,\n",
        "org_msg": "update log format to use insights",
        "sim_msg": "Update to the new proto names",
        "sim_diff": "diff --git a/explore/explore.go b/explore/explore.go @@ -50,13 +50,13 @@ type mockAPIGatewayRequest struct {\n// the golang lambda handler running on localhost. Most clients should use NewLambdaRequest or\n// NewAPIGatewayRequest to create mock data. This function is available for\n// advanced test cases who need more control over the mock request.\n-func NewRawRequest(lambdaName string, context *proxy.LambdaContext, eventData interface{}, testingURL string) (*http.Response, error) {\n+func NewRawRequest(lambdaName string, context *proxy.AWSLambdaContext, eventData interface{}, testingURL string) (*http.Response, error) {\n// Marshal the event data to a byte stream\nmarshaledData, marshaledDataErr := json.Marshal(eventData)\nif marshaledDataErr != nil {\nreturn nil, marshaledDataErr\n}\n- proxyRequest := proxy.ProxyRequest{\n+ proxyRequest := proxy.AWSProxyRequest{\nContext: context,\nEvent: marshaledData,\n}\n@@ -85,7 +85,7 @@ func NewRawRequest(lambdaName string, context *proxy.LambdaContext, eventData in\nfunc NewLambdaRequest(lambdaName string, eventData interface{}, testingURL string) (*http.Response, error) {\nnowTime := time.Now()\n- context := &proxy.LambdaContext{\n+ context := &proxy.AWSLambdaContext{\nAwsRequestId: \"12341234-1234-1234-1234-123412341234\",\nLogGroupName: \"/aws/lambda/SpartaApplicationMockLogGroup-9ZX7FITHEAG8\",\nLogStreamName: fmt.Sprintf(\"%d/%d/%d/[$LATEST]%d\", nowTime.Year(), nowTime.Month(), nowTime.Day(), nowTime.Unix()),\n",
        "chatgpt_cot": "Refactor logging format and add error level to WinstonCloudWatch. Update logStreamName to include AWS_LOG_STREAM and generate unique logStreamName."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -24,15 +24,18 @@ let Draft = require('../models/draft');\nlet CardRating = require('../models/cardrating');\nvar token = null;\n+var cached_prices = {};\n+\nfunction GetToken(callback)\n{\n- if(token)\n+ if(token && Date(Date.now()) < token.expires)\n{\n//TODO: check if token is expired, if so, fetch a new one\ncallback(token.access_token);\n}\nelse\n{\n+ console.log(Date(Date.now()).toString(), 'fetching fresh token');\nvar options = {\nurl: 'https://api.tcgplayer.com/token',\nmethod: 'POST',\n@@ -48,14 +51,22 @@ function GetToken(callback)\n}\nelse\n{\n- console.log(body);\ntoken = JSON.parse(body);\n+ token.expires = Tomorrow();\ncallback(token.access_token);\n}\n});\n}\n}\n+function Tomorrow()\n+{\n+ var date = new Date();\n+ //add 1 day to expiration date\n+ date.setDate(date.getDate() + 1);\n+ return date;\n+}\n+\nfunction listToString(list)\n{\nvar str = '';\n@@ -85,8 +96,28 @@ function parseJSON(response) {\n//callback with a dict of card prices\nfunction GetPrices(card_ids, callback)\n{\n+ var price_dict = {};\n+\n+ //trim card_ids if we have a recent cached date\n+ for(i = card_ids.length-1; i >= 0; i--)\n+ {\n+ if(cached_prices[card_ids[i]] && cached_prices[card_ids[i]].expires > Date(Date.now()))\n+ {\n+ if(cached_prices[card_ids[i]].price)\n+ {\n+ price_dict[card_ids[i]] = cached_prices[card_ids[i]].price;\n+ }\n+ if(cached_prices[card_ids[i]].price_foil)\n+ {\n+ price_dict[card_ids[i]+'_foil'] = cached_prices[card_ids[i]].price_foil;\n+ }\n+ card_ids.splice(i,1);\n+ }\n+ }\n+\nif(card_ids.length > 0)\n{\n+\nvar chunkSize = 250;\n//max tcgplayer request size is 250\nvar chunks = [];\n@@ -108,18 +139,25 @@ function GetPrices(card_ids, callback)\n.then(parseJSON)\n)).then(function(responses)\n{\n- var price_dict = {};\nresponses.forEach(function(response, index)\n{\nresponse.results.forEach(function(item, index)\n{\n+ if(!cached_prices[item.productId])\n+ {\n+ cached_prices[item.productId] = {};\n+ }\nif(item.marketPrice && item.subTypeName == 'Normal')\n{\nprice_dict[item.productId] = item.marketPrice;\n+ cached_prices[item.productId].price = item.marketPrice;\n+ cached_prices[item.productId].expires = Tomorrow();\n}\nelse if(item.marketPrice && item.subTypeName =='Foil')\n{\nprice_dict[item.productId+'_foil'] = item.marketPrice;\n+ cached_prices[item.productId].price_foil = item.marketPrice;\n+ cached_prices[item.productId].expires = Tomorrow();\n}\n});\n});\n@@ -129,7 +167,7 @@ function GetPrices(card_ids, callback)\n}\nelse\n{\n- callback({});\n+ callback(price_dict);\n}\n}\n",
        "org_msg": "Added price + token caching",
        "sim_msg": "Optimize Sorts\nNo need to parseFloat() on float values",
        "sim_diff": "diff --git a/node-binance-api.js b/node-binance-api.js @@ -2425,16 +2425,14 @@ let api = function Binance( options = {} ) {\nlet object = {}, count = 0, cache;\nif ( typeof symbol === 'object' ) cache = symbol;\nelse cache = getDepthCache( symbol ).bids;\n- let sorted = Object.keys( cache ).sort( function ( a, b ) {\n- return parseFloat( b ) - parseFloat( a )\n- } );\n+ const sorted = Object.keys( cache ).sort( ( a, b ) => parseFloat( b ) - parseFloat( a ) );\nlet cumulative = 0;\nfor ( let price of sorted ) {\n- if ( baseValue === 'cumulative' ) {\n- cumulative += parseFloat( cache[price] );\n+ if ( !baseValue ) object[price] = cache[price];\n+ else if ( baseValue === 'cumulative' ) {\n+ cumulative += cache[price];\nobject[price] = cumulative;\n- } else if ( !baseValue ) object[price] = parseFloat( cache[price] );\n- else object[price] = parseFloat( ( cache[price] * parseFloat( price ) ).toFixed( 8 ) );\n+ } else object[price] = parseFloat( ( cache[price] * parseFloat( price ) ).toFixed( 8 ) );\nif ( ++count >= max ) break;\n}\nreturn object;\n@@ -2451,16 +2449,14 @@ let api = function Binance( options = {} ) {\nlet object = {}, count = 0, cache;\nif ( typeof symbol === 'object' ) cache = symbol;\nelse cache = getDepthCache( symbol ).asks;\n- let sorted = Object.keys( cache ).sort( function ( a, b ) {\n- return parseFloat( a ) - parseFloat( b );\n- } );\n+ const sorted = Object.keys( cache ).sort( ( a, b ) => parseFloat( a ) - parseFloat( b ) );\nlet cumulative = 0;\nfor ( let price of sorted ) {\n- if ( baseValue === 'cumulative' ) {\n- cumulative += parseFloat( cache[price] );\n+ if ( !baseValue ) object[price] = cache[price];\n+ else if ( baseValue === 'cumulative' ) {\n+ cumulative += cache[price];\nobject[price] = cumulative;\n- } else if ( !baseValue ) object[price] = parseFloat( cache[price] );\n- else object[price] = parseFloat( ( cache[price] * parseFloat( price ) ).toFixed( 8 ) );\n+ } else object[price] = parseFloat( ( cache[price] * parseFloat( price ) ).toFixed( 8 ) );\nif ( ++count >= max ) break;\n}\nreturn object;\n",
        "chatgpt_cot": "Add GetToken function for fetching fresh token, add Tomorrow function for getting expiration date, add GetPrices function for fetching card prices."
    },
    {
        "org_diff": "diff --git a/src/components/BlogDeleteModal.js b/src/components/BlogDeleteModal.js @@ -10,12 +10,12 @@ class BlogDeleteModal extends React.Component {\nthis.toggle = props.toggle;\nthis.acceptButton = React.createRef();\nthis.confirm = this.confirm.bind(this);\n- this.focusAcceptButton = this.focusAcceptButton.bind(this)\n+ this.focusAcceptButton = this.focusAcceptButton.bind(this);\n}\nfocusAcceptButton() {\nif (this.acceptButton.current) {\n- this.acceptButton.current.focus()\n+ this.acceptButton.current.focus();\n}\n}\n",
        "org_msg": "Add some missing ;",
        "sim_msg": "feat(SearchModal): add support to initialize the query from custom event",
        "sim_diff": "diff --git a/components/core/SearchModal.js b/components/core/SearchModal.js @@ -477,8 +477,8 @@ export class SearchModal extends React.Component {\nthis._handleHide();\n};\n- _handleShow = async () => {\n- this.setState({ modal: true });\n+ _handleShow = async (e) => {\n+ this.setState({ modal: true, inputValue: e.detail.initialValue });\nawait this.fillLocalDirectory();\nthis.setState({ loading: false });\nif (!this.initialized) {\n",
        "chatgpt_cot": "\"Fix syntax error in BlogDeleteModal.js by adding missing semicolon in focusAcceptButton method.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3546,10 +3546,9 @@ router.post('/resize/:id/:size', async (req, res) => {\nlet cube = await Cube.findOne(buildIdQuery(req.params.id));\nconst response = await fetch(\n- `${process.env.FLASKROOT}/?cube_name=${req.params.id}&num_recs=${Math.max(\n- 0,\n- req.params.size - cube.cards.length,\n- )}&root=${encodeURIComponent(process.env.HOST)}`,\n+ `${process.env.FLASKROOT}/?cube_name=${req.params.id}&num_recs=${1000}&root=${encodeURIComponent(\n+ process.env.HOST,\n+ )}`,\n);\nif (!response.ok) {\nreturn util.handleRouteError(req, res, 'Error fetching suggestion data.', `/cube/list/${req.params.id}`);\n",
        "org_msg": "Fix resize when using filters",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Fix fetch request to include default value for num_recs parameter in cube_routes file."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeBlogPage.js b/src/pages/CubeBlogPage.js @@ -165,7 +165,8 @@ const CubeBlogPage = ({ cube, cubeID, canEdit, pages, activePage, posts, userid,\n</Navbar>\n<DynamicFlash />\n{pages > 1 && <Paginate count={pages} active={activePage} urlF={(i) => `/cube/blog/${cubeID}/${i}`} />}\n- {posts.map((post) => (\n+ {posts.length > 0 ? (\n+ posts.map((post) => (\n<BlogPost\nkey={post._id}\npost={post}\n@@ -175,8 +176,11 @@ const CubeBlogPage = ({ cube, cubeID, canEdit, pages, activePage, posts, userid,\nonDelete={handleDelete}\nonEdit={handleEdit}\n/>\n- ))}\n- {pages && pages.length > 1 && <Paginate pages={pages} />}\n+ ))\n+ ) : (\n+ <h5>No blog posts for this cube.</h5>\n+ )}\n+ {pages > 1 && <Paginate count={pages} active={activePage} urlF={(i) => `/cube/blog/${cubeID}/${i}`} />}\n<EditBlogModal\nisOpen={editOpen}\ntoggle={toggleEdit}\n",
        "org_msg": "Better display when no blog posts.",
        "sim_msg": "Fix readme profile display",
        "sim_diff": "diff --git a/src/templates/readme-profile.js b/src/templates/readme-profile.js @@ -5,6 +5,7 @@ import Layout from '../components/Layouts/Layout'\nimport { rhythm, scale } from '../utils/typography'\nimport Toc from '../components/Toc'\nimport { If } from '../components/utils'\n+import DeveloperCard from '../components/DeveloperCard'\nconst BlogContent = React.memo(({ html }) => {\n@@ -13,13 +14,12 @@ const BlogContent = React.memo(({ html }) => {\nfunction BlogPost(props) {\nconst post = props.data.markdownRemark\n- const siteTitle = props.data.site.siteMetadata.title\n- const { previous, next } = props.pageContext\n-\n+ const card = props.data.contributor\nreturn (\n<Layout>\n<div className=\"blog-main-container\">\n<main className=\"blog-mid-container blog-post-content\">\n+ <div className=\"developer-card-container\"><DeveloperCard {...card} /></div>\n<BlogContent html={post.html} />\n<hr\nstyle={{\n@@ -35,13 +35,32 @@ function BlogPost(props) {\nexport default BlogPost\nexport const pageQuery = graphql`\n- query($slug: String!) {\n+ query($slug: String!, $githubUserId: String!) {\nsite {\nsiteMetadata {\ntitle\nauthor\n}\n}\n+ contributor(githubUserId: {eq: $githubUserId}) {\n+ id\n+ countryCode\n+ repositoryCount\n+ contributionYears\n+ country\n+ firstContribution\n+ followersCount\n+ githubUserId\n+ issuesCount\n+ linkedin\n+ website\n+ name\n+ pullRequestsCount\n+ repoContributedCount\n+ thisYearContribution\n+ twitter\n+ avatarUrl\n+ }\nmarkdownRemark(fields: { slug: { eq: $slug } }) {\nid\nhtml\n",
        "chatgpt_cot": "\"Add conditional rendering for blog posts and pagination, and display a message when no blog posts are available.\""
    },
    {
        "org_diff": "diff --git a/src/components/VisualSpoiler.js b/src/components/VisualSpoiler.js @@ -19,10 +19,10 @@ const VisualSpoilerRaw = ({ cards, primary, secondary, tertiary, ...props }) =>\ngetLabels(primary).filter(label1 => groups[label1]).map(label1 =>\ngetLabels(secondary).filter(label2 => groups[label1][label2]).map(label2 =>\ngetLabels(tertiary).filter(label3 => groups[label1][label2][label3]).map(label3 =>\n- groups[label1][label2][label3].map(({ index, details }) =>\n+ groups[label1][label2][label3].map(({ index, tags, details }) =>\n<Col key={index} className=\"w-auto flex-grow-0\">\n<div className=\"visualSpoilerCardContainer\">\n- <AutocardImage key={index} index={index} {...details} />\n+ <AutocardImage key={index} index={index} tags={tags} {...details} />\n</div>\n</Col>\n)\n",
        "org_msg": "Fix tag display in Visual Spoiler.",
        "sim_msg": "fix rte link serialization",
        "sim_diff": "diff --git a/src/components/Widgets/MarkdownControl/VisualEditor/index.js b/src/components/Widgets/MarkdownControl/VisualEditor/index.js @@ -90,27 +90,36 @@ const MARK_TAGS = {\ncode: 'code'\n}\n-const NODE_COMPONENTS = {\n- 'quote': props => <blockquote {...props.attributes}>{props.children}</blockquote>,\n+const BLOCK_COMPONENTS = {\n+ 'paragraph': props => <p>{props.children}</p>,\n+ 'list-item': props => <li {...props.attributes}>{props.children}</li>,\n'bulleted-list': props => <ul {...props.attributes}>{props.children}</ul>,\n+ 'numbered-list': props => <ol {...props.attributes}>{props.children}</ol>,\n+ 'quote': props => <blockquote {...props.attributes}>{props.children}</blockquote>,\n+ 'code': props => <pre {...props.attributes}><code>{props.children}</code></pre>,\n'heading-one': props => <h1 {...props.attributes}>{props.children}</h1>,\n'heading-two': props => <h2 {...props.attributes}>{props.children}</h2>,\n'heading-three': props => <h3 {...props.attributes}>{props.children}</h3>,\n'heading-four': props => <h4 {...props.attributes}>{props.children}</h4>,\n'heading-five': props => <h5 {...props.attributes}>{props.children}</h5>,\n'heading-six': props => <h6 {...props.attributes}>{props.children}</h6>,\n- 'list-item': props => <li {...props.attributes}>{props.children}</li>,\n- 'numbered-list': props => <ol {...props.attributes}>{props.children}</ol>,\n- 'code': props => <pre {...props.attributes}><code>{props.children}</code></pre>,\n- 'link': props => <a href={props.node.data.href} {...props.attributes}>{props.children}</a>,\n- 'paragraph': props => <p>{props.children}</p>,\n};\n+const NODE_COMPONENTS = {\n+ ...BLOCK_COMPONENTS,\n+ 'link': props => {\n+ const href = props.node && props.node.getIn(['data', 'href']) || props.href;\n+ return <a href={href} {...props.attributes}>{props.children}</a>;\n+ },\n+}\n+\n+\nconst MARK_COMPONENTS = {\nbold: props => <strong>{props.children}</strong>,\n- code: props => <code>{props.children}</code>,\nitalic: props => <em>{props.children}</em>,\nunderlined: props => <u>{props.children}</u>,\n+ strikethrough: props => <s>{props.children}</s>,\n+ code: props => <code>{props.children}</code>,\n};\nconst RULES = [\n@@ -125,7 +134,7 @@ const RULES = [\n}\n},\nserialize(entity, children) {\n- const component = NODE_COMPONENTS[entity.type]\n+ const component = BLOCK_COMPONENTS[entity.type]\nif (!component) {\nreturn;\n}\n@@ -166,7 +175,6 @@ const RULES = [\n}\n},\n},\n- /*\n{\n// Special case for links, to grab their href.\ndeserialize(el, next) {\n@@ -180,8 +188,19 @@ const RULES = [\n}\n}\n},\n+ serialize(entity, children) {\n+ if (entity.type !== 'link') {\n+ return;\n+ }\n+ const data = entity.get('data');\n+ const props = {\n+ href: data.get('href'),\n+ attributes: data.get('attributes'),\n+ children,\n+ };\n+ return NODE_COMPONENTS.link(props);\n+ }\n},\n- */\n]\nconst serializer = new SlateHtml({ rules: RULES });\n",
        "chatgpt_cot": "Add 'tags' attribute to AutocardImage component to display additional information in VisualSpoiler component."
    },
    {
        "org_diff": "diff --git a/src/components/SampleHandModal.js b/src/components/SampleHandModal.js @@ -43,6 +43,7 @@ class SampleHandModal extends Component {\ndraw() {\nconst { hand, pool } = this.state;\n+ const newPool = [...pool];\nif (pool.length > 0) {\nhand.push(pool.splice(0, 1)[0]);\n",
        "org_msg": "Update src/components/SampleHandModal.js",
        "sim_msg": "Fix custom gas input styles",
        "sim_diff": "diff --git a/src/components/stepThree/GasPriceInput.js b/src/components/stepThree/GasPriceInput.js @@ -69,6 +69,7 @@ class GasPriceInput extends Component {\n{this.state.isCustom ? (\n<input\ntype=\"number\"\n+ className=\"input\"\nvalue={this.state.customGasPrice}\nonChange={(e) => this.handleCustomGasPriceChange(e.target.value)}\n/>\n",
        "chatgpt_cot": "Add newPool variable to avoid mutating state directly in SampleHandModal component."
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -227,7 +227,7 @@ class CubeListNavbarRaw extends Component {\n</Collapse>\n</Navbar>\n{!canEdit ? '' : <EditCollapse cubeID={cubeID} isOpen={this.props.openCollapse === 'edit'} />}\n- <SortCollapse isOpen={this.props.openCollapse === 'sort'} />\n+ <SortCollapse canEdit={canEdit} isOpen={this.props.openCollapse === 'sort'} />\n<FilterCollapse\nfilter={filter}\nsetFilter={setFilter}\n",
        "org_msg": "Fix missing save default sorts button.",
        "sim_msg": "fix: get value from current item instead of parent",
        "sim_diff": "diff --git a/src/components/NavigationDesktop/NavigationItemDesktop.js b/src/components/NavigationDesktop/NavigationItemDesktop.js @@ -122,7 +122,7 @@ class NavigationItemDesktop extends Component {\n<MenuList disablePadding>\n<MenuItem>\n<Link onClick={this.onClose} route={`${this.linkPath(item)}`}>\n- <ListItemText primary={navigationItem.data.content[0].value} />\n+ <ListItemText primary={item.navigationItem.data.content[0].value} />\n</Link>\n</MenuItem>\n{Array.isArray(item.items) && this.renderSubNav(item)}\n",
        "chatgpt_cot": "\"Add canEdit prop to SortCollapse component in CubeListNavbarRaw to control visibility based on user permissions.\""
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -84,17 +84,32 @@ function initializeCardDb(dataRoot) {\nif (dataRoot === undefined) {\ndataRoot = \"private\";\n}\n+ var carddictPromise = new Promise((resolve, reject) => {\nfs.readFile(dataRoot + '/carddict.json', 'utf8', function(err, contents) {\n+ console.log(\"loading carddict\");\ncarddict = JSON.parse(contents);\nconsole.log(\"carddict loaded\");\n+ if (err) {\n+ reject(err)\n+ } else {\n+ resolve(contents)\n+ };\n+ });\n});\nfs.readFile(dataRoot + '/cardtree.json', 'utf8', function(err, contents) {\ndata.cardtree = JSON.parse(contents);\nconsole.log(\"cardtree loaded\");\n});\n+ var cardnamesPromise = new Promise((resolve, reject) => {\nfs.readFile(dataRoot + '/names.json', 'utf8', function(err, contents) {\ndata.cardnames = JSON.parse(contents);\nconsole.log(\"names loaded\");\n+ if (err) {\n+ reject(err)\n+ } else {\n+ resolve(contents)\n+ };\n+ });\n});\nfs.readFile(dataRoot + '/nameToId.json', 'utf8', function(err, contents) {\ndata.nameToId = JSON.parse(contents);\n@@ -161,6 +176,7 @@ function initializeCardDb(dataRoot) {\nconsole.log(\"full_names reloaded\");\n});\n});\n+ return Promise.all([carddictPromise, cardnamesPromise]);\n}\ndata.cardFromId = cardFromId;\n",
        "org_msg": "promisify a few filesystem reads for testing",
        "sim_msg": "Fix importdata after merge",
        "sim_diff": "diff --git a/server/scripts/importdata.js b/server/scripts/importdata.js @@ -5,9 +5,9 @@ const _ = require('underscore');\nconst CardService = require('../services/CardService.js');\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\n-let files = fs.readdirSync('thronesdb-json-data/pack');\n+let files = fs.readdirSync('fiveringdsdb-data/Pack');\nlet totalCards = [];\nlet packs = JSON.parse(fs.readFileSync('fiveringdsdb-data/Pack.json'));\nlet types = JSON.parse(fs.readFileSync('fiveringdsdb-data/Type.json'));\n",
        "chatgpt_cot": "Add promises for reading card data files in initializeCardDb function. Fixes compilation issues and improves asynchronous file reading performance."
    },
    {
        "org_diff": "diff --git a/public/js/main.js b/public/js/main.js @@ -48,6 +48,14 @@ $(document).ready(function() {\n})\n});\n+function ISODateToYYYYMMDD(dateString) {\n+ if (dateString === undefined) {\n+ return undefined;\n+ }\n+ var date = new Date(dateString);\n+ return date.getFullYear() + \"-\" + date.getMonth() + \"-\" + date.getDate();\n+}\n+\nfunction toggleRecent() {\nvar x = document.getElementById(\"recentMore\");\nif (x.innerHTML === \"View More...\") {\n",
        "org_msg": "implement library function ISODateToYYYYMMDD",
        "sim_msg": "fix(ui/date): fix incorrect reference when changing date with \"months\"",
        "sim_diff": "diff --git a/ui/src/utils/date.js b/ui/src/utils/date.js @@ -334,7 +334,7 @@ function getChange (date, mod, add) {\nObject.keys(mod).forEach(key => {\nif (key === 'months') {\n- setMonth(t, t.getMonth() + 1 + sign * mod.month)\n+ setMonth(t, t.getMonth() + 1 + sign * mod.months)\nreturn\n}\n",
        "chatgpt_cot": "Add new function to convert ISO date to YYYY-MM-DD format and fix compilation issue due to new function in main.js."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeBlogPage.js b/src/pages/CubeBlogPage.js @@ -32,14 +32,14 @@ const EditBlogModal = ({ isOpen, toggle, html, setHtml, post }) => {\nreturn (\n<Modal isOpen={isOpen} toggle={toggle} labelledBy=\"#blogEditTitle\">\n<CSRFForm method=\"POST\" action={`/cube/blog/post/${cubeID}`}>\n- <ModalHeader toggle={toggle}>\n- <h5 id=\"blogEditTitle\">Edit Blog Post</h5>\n+ <ModalHeader toggle={toggle} id=\"blogEditTitle\">\n+ Edit Blog Post\n</ModalHeader>\n<ModalBody>\n<Label>Title:</Label>\n- <Input maxlength=\"200\" name=\"title\" type=\"text\" defaultValue={post ? post.title : ''} />\n+ <Input maxLength=\"200\" name=\"title\" type=\"text\" defaultValue={post ? post.title : ''} />\n<Label>Body:</Label>\n- <Input type=\"hidden\" name=\"id\" value={post ? post._id : -1} />\n+ {post && <Input type=\"hidden\" name=\"id\" value={post._id} />}\n<TextEntry name=\"html\" value={html} onChange={handleChangeHtml} />\n</ModalBody>\n<ModalFooter>\n@@ -113,6 +113,8 @@ const CubeBlogPage = ({ cube, cubeID, canEdit, pages, posts, userid, loggedIn })\n[posts],\n);\n+ const handleNew = useCallback(() => handleEdit(-1), [handleEdit]);\n+\nconst handleDelete = useCallback(\n(id) => {\nconst postIndex = posts.findIndex((post) => post._id === id);\n@@ -130,7 +132,7 @@ const CubeBlogPage = ({ cube, cubeID, canEdit, pages, posts, userid, loggedIn })\n<Collapse navbar>\n<Nav navbar>\n<NavItem>\n- <NavLink href=\"#\">Create new blog post</NavLink>\n+ <NavLink href=\"#\" onClick={handleNew}>Create new blog post</NavLink>\n</NavItem>\n</Nav>\n</Collapse>\n",
        "org_msg": "Fix new modal + delete modal.",
        "sim_msg": "Update handleCreate function to create new draft idea (WIP).",
        "sim_diff": "diff --git a/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/Idea.js b/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/Idea.js @@ -25,14 +25,16 @@ import PropTypes from 'prop-types';\n* WordPress dependencies\n*/\nimport { __ } from '@wordpress/i18n';\n-import { useCallback } from '@wordpress/element';\n+import { useCallback, useState } from '@wordpress/element';\n/**\n* Internal dependencies\n*/\n+import Data from 'googlesitekit-data';\nimport Button from '../../../../../components/Button';\nimport { Grid, Cell, Row } from '../../../../../material-components';\nimport {\n+ STORE_NAME,\nIDEA_HUB_BUTTON_CREATE,\nIDEA_HUB_BUTTON_PIN,\nIDEA_HUB_BUTTON_UNPIN,\n@@ -44,7 +46,12 @@ import CreateIcon from '../../../../../../svg/idea-hub-create.svg';\nimport PinIcon from '../../../../../../svg/idea-hub-pin.svg';\nimport UnpinIcon from '../../../../../../svg/idea-hub-unpin.svg';\n+const { useDispatch } = Data;\n+\nconst Idea = ( { postEditURL, name, text, topics, buttons } ) => {\n+ const { createIdeaDraftPost } = useDispatch( STORE_NAME );\n+ const [ isProcessing, setIsProcessing ] = useState( false );\n+\nconst handleDelete = useCallback( () => {\n// @TODO: Implement callback.\nglobal.console.log( `Deleted: ${ name }` );\n@@ -61,9 +68,12 @@ const Idea = ( { postEditURL, name, text, topics, buttons } ) => {\n}, [ name ] );\nconst handleCreate = useCallback( () => {\n+ setIsProcessing( true );\n+ createIdeaDraftPost( { name, text, topics } );\n// @TODO: Implement callback.\nglobal.console.log( `Created: ${ name }` );\n- }, [ name ] );\n+ setIsProcessing( false );\n+ }, [ name, text, topics, createIdeaDraftPost ] );\nreturn (\n<Grid className=\"googlesitekit-idea-hub__idea--single\">\n@@ -83,6 +93,7 @@ const Idea = ( { postEditURL, name, text, topics, buttons } ) => {\nonClick={ handleDelete }\nicon={ <DeleteIcon /> }\nclassName=\"googlesitekit-idea-hub__actions--delete\"\n+ disabled={ isProcessing }\n/>\n) }\n@@ -91,6 +102,7 @@ const Idea = ( { postEditURL, name, text, topics, buttons } ) => {\nonClick={ handlePin }\nicon={ <PinIcon /> }\nclassName=\"googlesitekit-idea-hub__actions--pin\"\n+ disabled={ isProcessing }\n/>\n) }\n@@ -99,6 +111,7 @@ const Idea = ( { postEditURL, name, text, topics, buttons } ) => {\nonClick={ handleUnpin }\nicon={ <UnpinIcon /> }\nclassName=\"googlesitekit-idea-hub__actions--unpin\"\n+ disabled={ isProcessing }\n/>\n) }\n@@ -106,6 +119,7 @@ const Idea = ( { postEditURL, name, text, topics, buttons } ) => {\n<Button\nonClick={ handleCreate }\nicon={ <CreateIcon /> }\n+ disabled={ isProcessing }\n/>\n) }\n",
        "chatgpt_cot": "Refactor CubeBlogPage.js to improve user experience and code readability, including maxLength attribute, hidden input handling, and new blog post creation."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -68,7 +68,9 @@ function saveAllCards(arr) {\nlet card_images = {\nimage_normal: card.image_normal\n};\n- if (card.image_flip) card_images.image_flip = card.image_flip;\n+ if (card.image_flip) {\n+ card_images.image_flip = card.image_flip;\n+ }\ncardimages[normalizedName] = card_images;\n//only add if it doesn't exist, this makes the default the newest edition\n",
        "org_msg": "use brackets around conditional body to avoid subtle bugs",
        "sim_msg": "Update fetchdata to skip over incomplete data",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -43,12 +43,14 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- var imagesrc = card.pack_cards[0].image_url;\n+ if(card.pack_cards.length > 0 && card.pack_cards[0].image_url) {\n+ var imagesrc = card.pack_cards[0].image_url;\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n+ }\n});\nreturn cards;\n",
        "chatgpt_cot": "\"Fix conditional block in saveAllCards function to correctly assign card_images.image_flip if card.image_flip exists\""
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -989,6 +989,47 @@ function filteredCube() {\nreturn res;\n}\n+function setFilterQsargs() {\n+ var qsargsToSet = {}, modifier;\n+ filters.forEach(function(filter, index) {\n+ if (!qsargsToSet[filter.category]) {\n+ qsargsToSet[filter.category] = \"\";\n+ }\n+ modifier = \"+\";\n+ if (filter.not) {\n+ modifier = \"-\";\n+ }\n+ qsargsToSet[filter.category] += modifier + filter.value + \",\";\n+ });\n+ var newUrl = window.location.href.split('?')[0];\n+ if (!$.isEmptyObject(qsargsToSet)) {\n+ newUrl += \"?\" + $.param(qsargsToSet);\n+ }\n+ window.history.pushState({}, '', newUrl);\n+}\n+\n+function buildFiltersFromQsargs() {\n+ var validCategories = getSorts(),\n+ qsargs = new URLSearchParams(window.location.search),\n+ qsargValues, value, valueIndex, qsargCategory;\n+ for (qsargCategory of qsargs.keys()) {\n+ if (!validCategories.includes(qsargCategory)) {\n+ continue;\n+ }\n+ qsargValues = qsargs.get(qsargCategory).split(\",\");\n+ for (valueIndex = 0; valueIndex < qsargValues.length; valueIndex++) {\n+ value = qsargValues[valueIndex];\n+ if (value.length > 0) {\n+ filters.push({\n+ category: qsargCategory,\n+ value: value.substring(1),\n+ not: value[0] === \"-\"\n+ });\n+ }\n+ }\n+ }\n+}\n+\nfunction updateCubeList() {\nif (view == 'list') {\n$('#massEdit').text('Edit Selected');\n@@ -1010,6 +1051,7 @@ function updateCubeList() {\nbreak;\n}\nautocard_hide_card();\n+ setFilterQsargs();\n}\nfunction renderListView() {\n@@ -1803,6 +1845,7 @@ window.onload = function() {\nif (prev_handler) {\nprev_handler();\n}\n+ buildFiltersFromQsargs();\nbuildFilterArea();\nupdateCubeList();\nactivateTags();\n",
        "org_msg": "set querystring arguments on filter\nset filter based on qsargs",
        "sim_msg": "Align tools mesh bootstrap",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -5112,7 +5112,10 @@ function animate(timestamp, frame) {\n.decompose(localVector, localQuaternion, localVector2);\nif (!lastSelector) {\ntoolsMesh.position.copy(localVector);\n- toolsMesh.quaternion.copy(localQuaternion);\n+ localEuler.setFromQuaternion(localQuaternion, 'YXZ');\n+ localEuler.x = 0;\n+ localEuler.z = 0;\n+ toolsMesh.quaternion.setFromEuler(localEuler);\n}\ntoolsMesh.update(localVector);\ntoolsMesh.visible = true;\n",
        "chatgpt_cot": "\"Add setFilterQsargs and buildFiltersFromQsargs functions to handle URL query string parameters and update filter area accordingly.\""
    },
    {
        "org_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -38,11 +38,12 @@ Issues are tagged with 'good first issue' if we think it's a good beginner task\nOur community of contributors is large, and growing fast. We don't have regularly\nscheduled working hours dedicated to Cube Cobra. Thus, we can't simply message each\nother on Discord to understand the current state of the project. Discord is\n-a great tool for synchronous communication, but our project also requires\n-a focus on asynchronous methods of communication. The goal is for the current state\n-of the project, including features being worked on, issues not yet resolved,\n-and near-term roadmap plans, to be fully discoverable by a passerby without\n-needing to chat in realtime with anyone else.\n+a great tool for synchronous communication, but it falls short at allowing\n+community members to discover conversations they didn't participate in. Our project\n+also requires a focus on asynchronous methods of communication. The goal is for\n+the current state of the project, including features being worked on, issues not\n+yet resolved, and near-term roadmap plans, to be fully discoverable by a passerby\n+without needing to chat in realtime with anyone else.\nGitHub projects, issues, and pull requests serve this purpose beautifully. We\ntreat the dekkerglen/CubeCobra repository as the source of truth about what\n@@ -70,10 +71,8 @@ when learning about the group's thoughts on a given bug or feature request.\nWhen we notice a bug, we first look for an existing open issue that references the\nbug. If we find one, we comment on the issue or use a GitHub reaction emoji to\nindicate that we have also noticed the bug. If we don't find one, we open a new\n-issue about the bug.\n-\n-When we notice a change in a bug's behavior, or a new case in which the bug\n-can be replicated, we leave comments to that effect on the issue.\n+issue about the bug. When we notice a change in a bug's behavior, or a new case in\n+which the bug can be replicated, we leave comments to that effect on the issue.\nWhen we begin actively working on a feature, we comment to that effect on the\ncorresponding issue. This comment of \"I'm working on this\" indicates to other\n@@ -99,10 +98,6 @@ from the community. When we do this, we're communicating that we'd like others\nto be aware of the details of our progress without requesting a detailed code\nreview just yet.\n-Sometimes, WIP pull requests include checklists in their descriptions\n-describing work remaining to be done. We use these checklists to indicate\n-progress to observers and to keep track of it for ourselves.\n-\nWhen we feel that a feature we're working on is \"code complete\", we open pull\nrequests. These pull requests have descriptions that briefly summarize the\nchanges, and sometimes include more detailed breakdowns of the architectural\n",
        "org_msg": "improve wording and remove some cruft",
        "sim_msg": "Add mouse story control",
        "sim_diff": "diff --git a/story.js b/story.js @@ -189,6 +189,7 @@ class Conversation extends EventTarget {\nreturn this.messages[this.messages.length - n] ?? null;\n}\nprogress() {\n+ if (!this.finished) {\nconst lastMessage = this.#getMessageAgo(1);\nif (this.localTurn) {\n@@ -232,6 +233,9 @@ class Conversation extends EventTarget {\nthis.progressChat();\n}\n}\n+ } else {\n+ this.close();\n+ }\n}\nfinish() {\nthis.finished = true;\n@@ -343,6 +347,10 @@ export const listenHack = () => {\n_playerSay(localPlayer, comment);\n}\n})();\n+ } else if (e.button === 0 && currentConversation) {\n+ if (!currentConversation.progressing) {\n+ currentConversation.progress();\n+ }\n}\n});\n};\n",
        "chatgpt_cot": "Refactor CONTRIBUTING.md to emphasize asynchronous communication and use of GitHub for issue tracking and pull requests. Clarify bug reporting and feature development process."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3457,7 +3457,7 @@ router.post('/resize/:id/:size', async (req, res) => {\n// we cut from cube\nfor (const card of list) {\nfor (let i = 0; i < cube.cards.length; i++) {\n- if (cube.cards[i].cardID === card.cardID) {\n+ if (carddb.cardFromId(cube.cards[i].cardID).name === carddb.cardFromId(card.cardID).name) {\ncube.cards.splice(i, 1);\ni = cube.cards.length;\n}\n",
        "org_msg": "fix card match to use name",
        "sim_msg": "Clean up needed coords tracking",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -1627,19 +1627,13 @@ const _makeChunkMesh = (seedString, parcelSize, subparcelSize) => {\nmesh.updatePackages = () => {\npackagesNeedUpdate = true;\n};\n- let neededCoords = Array((chunkDistance*2+1)**3);\n- let lastNeededCoords = Array((chunkDistance*2+1)**3);\n+ let neededCoords = [];\n+ let lastNeededCoords = [];\nlet neededCoordIndices = {};\nlet lastNeededCoordIndices = {};\nconst addedCoords = [];\nconst removedCoords = [];\n- [neededCoords, lastNeededCoords].forEach(neededCoords => {\n- for (let i = 0; i < neededCoords.length; i++) {\n- const v = new THREE.Vector3();\n- v.index = 0;\n- neededCoords[i] = v;\n- }\n- });\n+ let neededCoordsInitialized = false;\nconst _updateCurrentCoord = position => {\nlocalVector3.copy(position)\n.applyMatrix4(localMatrix2.getInverse(mesh.matrixWorld));\n@@ -1664,7 +1658,12 @@ const _makeChunkMesh = (seedString, parcelSize, subparcelSize) => {\nfor (let dz = -chunkDistance; dz <= chunkDistance; dz++) {\nconst az = dz + currentCoord.z;\n- const neededCoord = neededCoords[i++];\n+ const j = i++;\n+ let neededCoord = neededCoords[j];\n+ if (!neededCoord) {\n+ neededCoord = new THREE.Vector3();\n+ neededCoords[j] = neededCoord;\n+ }\nneededCoord.x = ax;\nneededCoord.y = ay;\nneededCoord.z = az;\n@@ -1683,6 +1682,7 @@ const _makeChunkMesh = (seedString, parcelSize, subparcelSize) => {\nremovedCoords.push(lastNeededCoord);\n}\n}\n+ neededCoordsInitialized = true;\nhadCoords = true;\n}\n};\n",
        "chatgpt_cot": "\"Refactor card removal logic in cube_routes.js to use card names instead of IDs for clarity and readability\""
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -20,7 +20,7 @@ html(lang='en')\nmeta(property=metadatum.property, content=metadatum.content)\nlink(rel='icon', href='/content/favicon.ico', type='image/x-icon')\ntitle=title ? title + ' - Cube Cobra' : 'Cube Cobra'\n- link(rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.min.css')\n+ link(rel='stylesheet', href='https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css', integrity='sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh', crossorigin='anonymous')\nlink(rel='stylesheet' href='/css/stylesheet.css')\nbody\n@@ -181,8 +181,8 @@ html(lang='en')\ninput.btn.btn-success(type='submit',value='Create')\nbutton.btn.btn-secondary(type='button', data-dismiss='modal') Close\n- script(src='/bower_components/jquery/dist/jquery.slim.min.js')\n- script(src='/bower_components/bootstrap/dist/js/bootstrap.min.js', async)\n+ script(src='https://code.jquery.com/jquery-3.4.1.slim.min.js', integrity='sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n', crossorigin='anonymous')\n+ script(src='https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js', integrity='sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6', crossorigin='anonymous', async)\nscript(src='/js/csrf.js', async)\nscript(src='/js/toolbar.js', async)\nblock scripts\n",
        "org_msg": "Move jquery + bootstrap to CDN.",
        "sim_msg": "Move linkedcat bootstrap.js below headstart.js",
        "sim_diff": "diff --git a/examples/linkedcat/headstart.php b/examples/linkedcat/headstart.php @@ -5,8 +5,6 @@ include 'config.php';\n<html>\n<head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<link href=\"https://fonts.googleapis.com/css?family=Lato:300,400,700\" rel=\"stylesheet\">\n- <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">\n- <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"></script>\n</head>\n<body style=\"margin:0px; padding:0px\">\n@@ -39,6 +37,8 @@ include 'config.php';\n}\n</script>\n<script type=\"text/javascript\" src=\"<?php echo $HEADSTART_PATH; ?>dist/headstart.js\"></script>\n+ <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">\n+ <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"></script>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo $HEADSTART_PATH; ?>dist/headstart.css\"></link>\n<script type=\"text/javascript\">\nheadstart.start();\n",
        "chatgpt_cot": "Update layout.pug to use CDN for Bootstrap and jQuery for faster loading and improved security."
    },
    {
        "org_diff": "diff --git a/src/components/CubeAnalysisNavbar.js b/src/components/CubeAnalysisNavbar.js -import React, { useState } from 'react';\n+import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Collapse, Nav, NavItem, NavLink, Navbar, NavbarToggler, Input } from 'reactstrap';\nimport FilterCollapse from 'components/FilterCollapse';\n+import useToggle from 'hooks/UseToggle';\nconst CubeAnalysisNavBar = ({\ndraftFormats,\n@@ -14,13 +15,13 @@ const CubeAnalysisNavBar = ({\nnumCards,\ndefaultFilterText,\n}) => {\n- const [navCollapseOpen, setNavCollapse] = useState(false);\n- const [filterCollapseOpen, setFilterCollapse] = useState(false);\n+ const [navCollapseOpen, toggleNavCollapse] = useToggle(false);\n+ const [filterCollapseOpen, toggleFilterCollapse] = useToggle(false);\nreturn (\n<div className=\"usercontrols\">\n<Navbar expand=\"md\" className=\"navbar-light\">\n- <NavbarToggler onClick={() => setNavCollapse(!navCollapseOpen)} />\n+ <NavbarToggler onClick={toggleNavCollapse} />\n<Collapse isOpen={navCollapseOpen} navbar>\n<Nav navbar>\n<h6 className=\"mt-2\">Selected Draft Format:</h6>\n@@ -40,13 +41,7 @@ const CubeAnalysisNavBar = ({\n</Input>\n</div>\n<NavItem>\n- <NavLink\n- href=\"#\"\n- onClick={() => {\n- console.log(filterCollapseOpen);\n- setFilterCollapse(!filterCollapseOpen);\n- }}\n- >\n+ <NavLink href=\"#\" onClick={toggleFilterCollapse}>\nFilter\n</NavLink>\n</NavItem>\n",
        "org_msg": "Use useToggle",
        "sim_msg": "Remove ant-d",
        "sim_diff": "diff --git a/src/pages/index.js b/src/pages/index.js @@ -6,11 +6,8 @@ import { rhythm } from '../utils/typography'\nimport BlogPostTemplate from '../components/Layouts/BlogLayout'\nimport Layout from '../components/Layouts/Layout'\nimport DeveloperCard from '../components/DeveloperCard'\n-import Search from 'antd/lib/input/Search'\n-import 'antd/dist/antd.css'\n-import { Button, Input, Popover, Select, Tag } from 'antd'\n-import { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons'\n+import { AiOutlineArrowUp, AiOutlineArrowDown } from \"react-icons/ai\";\nclass DeveloperCommunityHome extends React.Component {\nconstructor(props) {\nsuper(props)\n@@ -208,8 +205,7 @@ class DeveloperCommunityHome extends React.Component {\n]}\n/>\n<div className=\"filter-bar\">\n- <Input\n- enterButton=\"Search\"\n+ <input\nsize=\"large\"\nclassName=\"search-bar\"\nplaceholder=\"Search dev by username\"\n@@ -218,93 +214,20 @@ class DeveloperCommunityHome extends React.Component {\n/>\n<div className=\"sort-list\">\n{this.state.sortableFields.map(sort => (\n- <div\n+ <button\nkey={sort.type}\nonClick={() => this.toggleSort(sort)}\n- className=\"sort-field\"\n+ className=\"button\"\n>\n{sort.name}{' '}\n{this.state.sort && sort.type === this.state.sort.type ? (\nthis.state.sort.order === 'asc' ? (\n- <ArrowUpOutlined />\n+ <AiOutlineArrowUp />\n) : (\n- <ArrowDownOutlined />\n+ <AiOutlineArrowDown />\n)\n) : null}\n- </div>\n- ))}\n- </div>\n- <Popover\n- overlayClassName=\"add-filter-overlay\"\n- onVisibleChange={this.onPopoverVisibilityChange}\n- visible={this.state.isAddFilterPopoverOpen}\n- placement=\"bottom\"\n- content={\n- <div className=\"add-filter-container\">\n- <Select\n- placeholder=\"Select a filter\"\n- allowClear\n- style={{ width: 120 }}\n- onChange={this.updateSelectedFilterType}\n- >\n- {this.state.filterableFields.map(filter => (\n- <Select.Option\n- value={JSON.stringify({\n- name: filter.name,\n- type: filter.type,\n- })}\n- >\n- {filter.name}\n- </Select.Option>\n- ))}\n- </Select>\n- <Input\n- placeholder=\"Enter a filter value\"\n- onChange={this.updateSelectedFilterValue}\n- />\n- {!!this.state.selectedFilter.name && (\n- <span className=\"filter-preview\">\n- {this.state.selectedFilter.name} ={' '}\n- {this.state.selectedFilter.value}\n- </span>\n- )}\n- <div className=\"action-buttons\">\n- <Button type=\"outline\" onClick={this.hidePopover}>\n- Cancel\n- </Button>\n- <Button type=\"primary\" onClick={this.addFilter}>\n- Apply\n- </Button>\n- </div>\n- </div>\n- }\n- destroyTooltipOnHide\n- title=\"Add filter\"\n- trigger=\"click\"\n- disabled={\n- this.state.filters.length === this.state.filterableFields.length\n- }\n- >\n- <Button\n- disabled={\n- this.state.filters.length === this.state.filterableFields.length\n- }\n- className=\"add-filter-button\"\n- type=\"primary\"\n- >\n- Add filter\n- </Button>\n- </Popover>\n- <div className=\"filters-list\">\n- {this.state.filters.map((filter, index) => (\n- <Tag\n- className=\"filter\"\n- closable\n- key={index}\n- onClose={() => this.deleteFilter(index)}\n- >\n- {`${filter.name} = ${filter.value}`}\n- </Tag>\n+ </button>\n))}\n</div>\n</div>\n",
        "chatgpt_cot": "Refactor CubeAnalysisNavbar to use custom hook for toggling state, replacing useState with useToggle for improved code readability and maintainability."
    },
    {
        "org_diff": "diff --git a/src/components/GroupModal.js b/src/components/GroupModal.js @@ -80,7 +80,6 @@ const GroupModal = ({ cubeID, canEdit, children, ...props }) => {\nif (name === 'deleteTags') {\nextra.addTags = false;\n}\n-\nsetFormValues((formValues) => ({\n...formValues,\n[name]: value,\n@@ -96,10 +95,22 @@ const GroupModal = ({ cubeID, canEdit, children, ...props }) => {\nsetCardIndices((cards) => cards.filter((c) => c !== parseInt(index)));\n});\n+ const setTagInput = useCallback((value) =>\n+ setFormValues((formValues) => ({\n+ ...formValues,\n+ tagInput: value,\n+ })),\n+ );\n+\nconst setTags = useCallback((tagF) => {\nsetFormValues(({ tags, ...formValues }) => ({ ...formValues, tags: tagF(tags) }));\n});\n- const addTag = useCallback((tag) => setTags((tags) => [...tags, tag]));\n+ const addTag = useCallback((tag) => {\n+ console.log(tag);\n+ setTags((tags) => [...tags, tag]);\n+ setTagInput('');\n+ });\n+ const addTagText = useCallback((tag) => tag.trim() && addTag({ text: tag.trim(), id: tag.trim() }));\nconst deleteTag = useCallback((tagIndex) => {\nsetTags((tags) => tags.filter((tag, i) => i !== tagIndex));\n});\n@@ -290,7 +301,15 @@ const GroupModal = ({ cubeID, canEdit, children, ...props }) => {\n</Label>\n</FormGroup>\n</FormGroup>\n- <TagInput tags={formValues.tags} {...{ addTag, deleteTag, reorderTag }} />\n+ <TagInput\n+ tags={formValues.tags}\n+ inputValue={formValues.tagInput}\n+ handleInputChange={setTagInput}\n+ handleInputBlur={addTagText}\n+ addTag={addTag}\n+ deleteTag={deleteTag}\n+ reorderTag={reorderTag}\n+ />\n</Form>\n</Col>\n</Row>\n",
        "org_msg": "Revised group modal to reflect card modal",
        "sim_msg": "fix: dropdown states",
        "sim_diff": "diff --git a/components/system/components/Tag.js b/components/system/components/Tag.js @@ -165,10 +165,11 @@ const STYLES_REMOVE_BUTTON = css`\n`;\nexport const Tag = (props) => {\n- const [value, setValue] = React.useState(null);\n+ const [value, setValue] = React.useState();\nconst [open, setOpen] = React.useState(false);\n- let inputEl = React.useRef();\n+ const inputEl = React.useRef();\n+ const dropdownEl = React.useRef();\nconst removeTag = (i) => {\nconst newTags = [...props.value];\n@@ -182,15 +183,16 @@ export const Tag = (props) => {\nconst handleAdd = () => {\nconst tags = props.value || [];\n- if (tags.find((tag) => tag.toLowerCase() === value.toLowerCase())) {\n+ if (value && tags.find((tag) => tag.toLowerCase() === value.toLowerCase())) {\nreturn;\n}\nif (props.onChange) {\nprops.onChange({ target: { name: \"tags\", value: [...tags, value] } });\n- }\n- setValue(null);\n+ setValue(\"\");\n+ setOpen(false);\n+ }\n};\nconst handleChange = (e) => {\n@@ -201,11 +203,26 @@ export const Tag = (props) => {\nconst handleFocus = () => setOpen(true);\n- const handleBlur = () => setOpen(false);\n+ const handleClick = (e) => {\n+ console.log(dropdownEl.current.contains(e.target));\n+ if (dropdownEl.current.contains(e.target)) {\n+ return;\n+ }\n+\n+ setOpen(false);\n+ };\n+\n+ React.useEffect(() => {\n+ document.addEventListener(\"mousedown\", handleClick);\n+\n+ return () => {\n+ document.removeEventListener(\"mousedown\", handleClick);\n+ };\n+ }, []);\nreturn (\n<div css={STYLES_TAG_CONTAINER} style={{ ...props.style }}>\n- <div css={STYLES_INPUT_CONTAINER}>\n+ <div css={STYLES_INPUT_CONTAINER} ref={dropdownEl}>\n<input\nref={inputEl}\ntype=\"text\"\n@@ -214,7 +231,6 @@ export const Tag = (props) => {\nvalue={value}\nonChange={handleChange}\nonFocus={handleFocus}\n- onBlur={handleBlur}\n/>\n<div>\n<ul css={STYLES_DROPDOWN} style={{ display: open ? \"block\" : \"none\" }}>\n",
        "chatgpt_cot": "Add functionality to handle tag input in GroupModal, including setting tag input value, adding tags, and handling tag text. Fixes tag input behavior."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -658,7 +658,7 @@ function getLabels(sort) {\n}\nelse if (sort == 'Guilds')\n{\n- return ['Azorius','Dimir','Rakdos','Gruul','Selesnya','Orzhov','Izzet','Golgari','Boros','Simic'];\n+ return ['Azorius','Dimir','Rakdos','Gruul','Selesnya','Orzhov','Golgari','Simic','Izzet','Boros'];\n}\nelse if (sort == 'Shards / Wedges')\n{\n",
        "org_msg": "Reordered guilds",
        "sim_msg": "Move mesh drawer to thing shader",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -3603,7 +3603,8 @@ const MeshDrawer = (() => {\nuvs[i+7] = index;\n}\ngeometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n- const material = _makeDrawMaterial(0xff7043, 0xef5350, 0);\n+\n+ const material = _makeDrawMaterial(localColor.setStyle('#' + colors[0]).getHex(), localColor.setStyle('#' + colors[1]).getHex(), 0);\nconst mesh = new THREE.Mesh(geometry, material);\nmesh.visible = false;\nmesh.frustumCulled = false;\n@@ -3622,7 +3623,7 @@ const MeshDrawer = (() => {\nstart(p, q, v) {\nthis.lastPosition.copy(p);\nthis.lastQuaternion.copy(q);\n- this.numPoints = 0;\n+ // this.numPoints = 0;\nthis.numPositions = 0;\nthis.numIndices = 0;\nthis.mesh.geometry.setDrawRange(0, 0);\n@@ -3635,11 +3636,20 @@ const MeshDrawer = (() => {\ngeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\nconst uvs = this.mesh.geometry.attributes.uv.array.slice(0, this.numPositions/3*2);\ngeometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n+ const colors = new Float32Array(geometry.attributes.position.array.length);\n+ for (let i = 0; i < geometry.attributes.uv.array.length; i += 2) {\n+ const y = geometry.attributes.uv.array[i+1]/this.mesh.material.uniforms.numPoints.value;\n+ localColor.copy(this.mesh.material.uniforms.color1.value).lerp(this.mesh.material.uniforms.color2.value, y)\n+ .toArray(colors, i/2*3);\n+ geometry.attributes.uv.array[i] = -1;\n+ geometry.attributes.uv.array[i+1] = -1;\n+ }\n+ geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\nconst indices = this.mesh.geometry.index.array.slice(0, this.numIndices);\ngeometry.setIndex(new THREE.BufferAttribute(indices, 1));\ngeometry.boundingBox = new THREE.Box3().setFromBufferAttribute(geometry.attributes.position);\n- const material = _makeDrawMaterial(this.mesh.material.uniforms.color1.value.getHex(), this.mesh.material.uniforms.color2.value.getHex(), this.mesh.material.uniforms.numPoints.value);\n- const mesh = new THREE.Mesh(geometry, material);\n+ // const material = _makeDrawMaterial(this.mesh.material.uniforms.color1.value.getHex(), this.mesh.material.uniforms.color2.value.getHex(), this.mesh.material.uniforms.numPoints.value);\n+ const mesh = new THREE.Mesh(geometry, meshComposer.material);\nmesh.matrix.copy(this.mesh.matrixWorld)\n.decompose(mesh.position, mesh.quaternion, mesh.scale);\nmesh.frustumCulled = false;\n",
        "chatgpt_cot": "Reorder guilds array to fix sorting issue in getLabels function."
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -33,18 +33,12 @@ router.get('/explore', async (req, res) => {\nconst recentsq = Cube.find({\n$or: [\n- {\n- $and: [\n{\ncard_count: {\n$gt: 200,\n},\n- },\n- {\nisListed: true,\n},\n- ],\n- },\n{\nowner: userID,\n},\n@@ -128,11 +122,7 @@ router.get('/random', async (req, res) => {\nrouter.get('/dashboard', async (req, res) => {\ntry {\n- if (!req.user) {\n- return res.redirect('/landing');\n- }\n-\n- const user = await User.findById(req.user._id);\n+ const { user } = req;\nif (!user) {\nreturn res.redirect('/landing');\n}\n@@ -213,7 +203,7 @@ router.get('/dashboard/decks/:page', async (req, res) => {\ntry {\nconst pagesize = 30;\nconst { page } = req.params;\n- const user = await User.findById(req.user._id);\n+ const { user } = req;\nif (!user) {\nreturn res.redirect('/landing');\n}\n",
        "org_msg": "Performance in root.js.",
        "sim_msg": "Rename 'protected' middleware to 'secured'",
        "sim_diff": "diff --git a/articles/quickstart/webapp/nodejs/01-login.md b/articles/quickstart/webapp/nodejs/01-login.md @@ -170,15 +170,15 @@ This tutorial implements logout by closing the local user session. After logging\n### Middleware to protect routes\n-Create a `protected` middleware to protect routes and ensure they are only accessible if logged in.\n+Create a `secured` middleware to protect routes and ensure they are only accessible if logged in.\nIf the user is not logged in, the requested route will be stored in the session and the user will be redirected to the login page. Upon successful login, the user will be redirected to the previously requested URL (see callback route above).\n```js\n-// lib/middleware/protected.js\n+// lib/middleware/secured.js\nmodule.exports = function() {\n- return function protected(req, res, next) {\n+ return function secured(req, res, next) {\nif (req.user) { return next(); }\nreq.session.returnTo = req.originalUrl;\nres.redirect('/login');\n@@ -188,17 +188,17 @@ module.exports = function() {\n### Create the user profile route\n-The `/user` route (the user's profile) should only be accessible if the user is logged in. Use the protected middleware to secure the route.\n+The `/user` route (the user's profile) should only be accessible if the user is logged in. Use the secured middleware to secure the route.\n```js\n// routes/users.js\nvar express = require('express');\n-var protected = require('../lib/middleware/protected');\n+var secured = require('../lib/middleware/secured');\nvar router = express.Router();\n/* GET user profile. */\n-router.get('/user', protected(), function(req, res, next) {\n+router.get('/user', secured(), function(req, res, next) {\nconst { _raw, _json, ...userProfile } = req.user;\nres.render('user', {\nuserProfile: JSON.stringify(userProfile, null, 2),\n@@ -309,6 +309,6 @@ block content\n## See it in action\n-Install the dependencies, start your app and point your browser to [http://localhost:3000](http://localhost:3000). Follow the **Log In** link to log in or sign up to your Auth0 tenant. Upon successful login or signup, you should be redirected to the user's profile page.\n+Install the dependencies, svtart your app and point your browser to [http://localhost:3000](http://localhost:3000). Follow the **Log In** link to log in or sign up to your Auth0 tenant. Upon successful login or signup, you should be redirected to the user's profile page.\n![login page](/media/articles/web/hosted-login.png)\n",
        "chatgpt_cot": "Refactor route handlers to destructure user object for improved readability and maintainability. Remove redundant user check in dashboard route. Fix #123."
    },
    {
        "org_diff": "diff --git a/jobs/populate_analytics.js b/jobs/populate_analytics.js @@ -210,13 +210,10 @@ async function processCard(card) {\n// cubed with\n// create correl dict\n- const cubedWith = [];\n- for (const otherCard of carddb.allCards()) {\n- cubedWith.push({\n- other: otherCard.oracle_id,\n- count: correlations[correlationIndex[oracle_id]][correlationIndex[otherCard.oracle_id]],\n- });\n- }\n+ const cubedWith = carddb.allOracleIds().map((otherOracleId) => ({\n+ other: otherOracleId,\n+ count: correlations[correlationIndex[oracle_id]][correlationIndex[otherOracleId]],\n+ }));\n// quickselect isn't sorting correctly for some reason\ncubedWith.sort((first, second) => {\n",
        "org_msg": "Fix computation of cubedWith array.\nIt should use oracle IDs as well.",
        "sim_msg": "add: rollbar logging for etoro",
        "sim_diff": "diff --git a/src/lib/analytics/analytics.js b/src/lib/analytics/analytics.js @@ -46,7 +46,7 @@ export const initAnalytics = async (goodWallet: GoodWallet, userStorage: UserSto\ncaptureUncaught: true,\ncaptureUnhandledRejections: true,\npayload: {\n- environment: Config.env,\n+ environment: Config.env + Config.network,\nperson: {\nid: emailOrId,\nidentifier,\n",
        "chatgpt_cot": "Refactor cubedWith array creation using map function for better readability and efficiency in populate_analytics.js."
    },
    {
        "org_diff": "diff --git a/src/components/Markdown.js b/src/components/Markdown.js @@ -22,15 +22,15 @@ import { Col, Row, Card, CardBody } from 'reactstrap';\nconst AutocardLink = withAutocard('a');\nconst Link = withModal('a', LinkModal);\n-function renderBlockQuote(node) {\n+const renderBlockQuote = (node) => {\nreturn (\n<Card className=\"bg-light\">\n<CardBody>{node.children}</CardBody>\n</Card>\n);\n-}\n+};\n-function renderLink(node) {\n+const renderLink = (node) => {\nconst ref = encodeURI(node.node?.url ?? '');\nconst isInternalURL = (to) => {\n@@ -55,31 +55,31 @@ function renderLink(node) {\n{node.children}\n</Link>\n);\n-}\n+};\n-function renderMath(node) {\n+const renderMath = (node) => {\nreturn <Latex trusted={false} displayMode>{`$$ ${node.value} $$`}</Latex>;\n-}\n+};\n-function renderInlineMath(node) {\n+const renderInlineMath = (node) => {\nreturn <Latex trusted={false}>{`$ ${node.value} $`}</Latex>;\n-}\n+};\n-function renderUserlink(node) {\n+const renderUserlink = (node) => {\nconst name = node.value;\nreturn (\n<a href={`/user/view/${name}`} target=\"_blank\" rel=\"noopener noreferrer\">\n@{name}\n</a>\n);\n-}\n+};\n-function renderSymbol(node) {\n+const renderSymbol = (node) => {\nconst symbol = node.value.replace('/', '-').toLowerCase();\nreturn <img src={`/content/symbols/${symbol}.png`} alt={symbol} className=\"mana-symbol-sm\" />;\n-}\n+};\n-function renderCardlink({ name, id, dfc }) {\n+const renderCardlink = ({ name, id, dfc }) => {\nconst idURL = encodeURIComponent(id ?? name);\nconst details = { image_normal: `/tool/cardimage/${idURL}` };\nif (dfc) details.image_flip = `/tool/cardimageflip/${idURL}`;\n@@ -89,9 +89,9 @@ function renderCardlink({ name, id, dfc }) {\n{name}\n</AutocardLink>\n);\n-}\n+};\n-function renderCardImage(node) {\n+const renderCardImage = (node) => {\nconst name = node.value;\nconst nameURL = encodeURIComponent(name);\nconst details = { image_normal: `/tool/cardimage/${nameURL}` };\n@@ -104,11 +104,11 @@ function renderCardImage(node) {\n</a>\n</Col>\n);\n-}\n+};\n-function renderCentering(node) {\n+const renderCentering = (node) => {\nreturn <div className=\"centered-markdown\">{node.children}</div>;\n-}\n+};\nconst Markdown = ({ markdown, limited }) => {\nconst renderers = {\n",
        "org_msg": "changed render functions to lambdas",
        "sim_msg": "Hook in glyph generator to card generator",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -2,6 +2,7 @@ import metaversefile from 'metaversefile';\nimport {generateStats, types} from './procgen/procgen.js';\nimport {screenshotObjectApp} from './object-screenshotter.js';\nimport {screenshotAvatarUrl} from './avatar-screenshotter.js';\n+import {generateGlyph} from './glyph-generator.js';\n// const baseUrl = import.meta.url.replace(/(\\/)[^\\/\\\\]*$/, '$1');\n// const cardsSvgUrl = `${baseUrl}cards.svg`;\n@@ -102,6 +103,9 @@ export const generateObjectCard = async ({\n});\nminterAvatarPreview = await _getCanvasDataUrl(minterAvatarPreview);\n+ let glyphImage = generateGlyph(url);\n+ glyphImage = await _getCanvasDataUrl(glyphImage);\n+\n// _previewImage(minterAvatarPreview, width, height);\nconst minterUsername = 'Scillia';\nconsole.log('call generate card', {\n@@ -112,6 +116,7 @@ export const generateObjectCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n});\nconst cardImg = await generateCard({\nstats,\n@@ -123,6 +128,7 @@ export const generateObjectCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n});\n_previewImage(cardImg, width, height);\nreturn cardImg;\n@@ -138,6 +144,7 @@ export const generateCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n} = {}) => {\nconst cardSvgSource = await _loadCachedSvgSource();\nawait _waitForAllCardFonts();\n@@ -217,6 +224,15 @@ export const generateCard = async ({\nurlEl.innerHTML = url;\n}\n+ // glyph image\n+ {\n+ const glyphImageEl = el.querySelector('#glyph-image');\n+ // window.glyphImageEl = glyphImageEl;\n+ // glyphImageEl.innerHTML = glyphImage;\n+ glyphImageEl.setAttribute('image-rendering', 'pixelated');\n+ glyphImageEl.setAttribute('xlink:href', glyphImage);\n+ }\n+\n/* {\nconst lines = description.split('\\n');\nconst descriptionHeaderTextEl = el.querySelector('#description-header-text');\n",
        "chatgpt_cot": "Refactor render functions to arrow functions in Markdown.js for clarity and consistency. Update function declarations and improve code readability."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -229,7 +229,10 @@ router.post('/blog/post/:id', ensureAuth, async (req, res) => {\n}\n});\n-router.post('/follow/:id', ensureAuth, async (req, res) => {\n+router.post(\n+ '/follow/:id',\n+ ensureAuth,\n+ util.wrapAsyncApi(async (req, res) => {\ntry {\nif (!req.user._id) {\nreq.flash('danger', 'Not Authorized');\n@@ -266,7 +269,8 @@ router.post('/follow/:id', ensureAuth, async (req, res) => {\n});\nconsole.error(err);\n}\n-});\n+ }),\n+);\nrouter.post('/unfollow/:id', ensureAuth, async (req, res) => {\ntry {\n",
        "org_msg": "Revised follow route",
        "sim_msg": "Add missing route back in",
        "sim_diff": "diff --git a/app/router.js b/app/router.js @@ -125,6 +125,9 @@ Router.map(function() {\nthis.route('add', {path: '/add/:cloud_id'});\n});\n+ this.route('new', {path: '/add'}, function() {\n+ this.route('index', {path: '/'});\n+ });\nthis.route('host', {path: '/:host_id', resetNamespace: true}, function() {\nthis.route('containers');\n",
        "chatgpt_cot": "Refactor follow route to use async wrapper for error handling in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/src/components/BlogContextMenu.js b/src/components/BlogContextMenu.js @@ -7,10 +7,6 @@ import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Collapse, Modal,\nclass BlogDeleteModal extends React.Component {\nconstructor(props) {\nsuper(props);\n- this.state = {\n- isOpen: false,\n- };\n-\nthis.open = this.open.bind(this);\nthis.close = this.close.bind(this);\nthis.confirm = this.confirm.bind(this);\n@@ -19,15 +15,15 @@ class BlogDeleteModal extends React.Component {\nopen() {\ndocument.addEventListener(\"keyup\", this.keyPress);\n- this.setState({\n- isOpen: true,\n+ this.props.menu.setState({\n+ deleteModalIsOpen: true,\n});\n}\nclose() {\ndocument.removeEventListener(\"keyup\", this.keyPress);\n- this.setState({\n- isOpen: false,\n+ this.props.menu.setState({\n+ deleteModalIsOpen: false,\n});\n}\n@@ -51,7 +47,7 @@ class BlogDeleteModal extends React.Component {\n}\nrender() {\n- const {isOpen} = this.state;\n+ const isOpen = this.props.menu.state.deleteModalIsOpen;\nreturn (\n<>\n<span onClick={this.open}>\n@@ -83,6 +79,7 @@ class BlogContextMenu extends React.Component {\nthis.state = {\ndropdownOpen: false,\ncollapseOpen: false,\n+ deleteModalIsOpen: false,\n};\n}\n@@ -110,37 +107,6 @@ class BlogContextMenu extends React.Component {\n});\n}\n- clickDelete(post) {\n- const clickDeleteBlog = function(e) {\n- if (event.keyCode === 13) {\n- $('.delete-blog').click();\n- }\n- };\n-\n- $('#deleteModal').modal('show');\n-\n- $(window).on('keyup', clickDeleteBlog)\n-\n- $('#deleteModal').on('hidden.bs.modal', function() {\n- $(window).off('keyup', clickDeleteBlog)\n- });\n-\n- $('.delete-blog')\n- .off()\n- .on('click', function(e) {\n- csrfFetch('/cube/blog/remove/' + post._id, {\n- method: 'DELETE',\n- headers: {},\n- }).then((response) => {\n- if (!response.ok) {\n- console.log(response);\n- } else {\n- window.location.href = '';\n- }\n- });\n- });\n- }\n-\nrender() {\nreturn (\n@@ -151,7 +117,7 @@ class BlogContextMenu extends React.Component {\n<DropdownMenu right>\n<DropdownItem onClick={() => this.clickEdit(this.props.post)}>Edit</DropdownItem>\n<DropdownItem>\n- <BlogDeleteModal postID={this.props.post._id}></BlogDeleteModal>\n+ <BlogDeleteModal postID={this.props.post._id} menu={this}></BlogDeleteModal>\n</DropdownItem>\n</DropdownMenu>\n</Dropdown>\n",
        "org_msg": "Fix bug of modal not opening by lifting up state to dropdown",
        "sim_msg": "add comments as docs for usage",
        "sim_diff": "diff --git a/src/widgets/modal/Modal.js b/src/widgets/modal/Modal.js @@ -4,6 +4,41 @@ import ReactModal2 from 'react-modal2';\nimport Icon from '../Icon';\nimport './Modal.scss';\n+/**\n+ * This component is only created to facilitate the process of using react-modal2 with react gateway\n+ *\n+ * You can import this Modal and use onClose props with internal state to control its appearance:\n+ *\n+ *export default class MyComponent extends React.Component {\n+ * state = {\n+ * isModalOpen: false\n+ * };\n+ *\n+ * handleOpen = () => {\n+ * this.setState({ isModalOpen: true });\n+ * };\n+ *\n+ * handleClose = () => {\n+ * this.setState({ isModalOpen: false });\n+ * };\n+ *\n+ * render() {\n+ * return (\n+ * <div>\n+ * <button onClick={this.handleOpen}>Open</button>\n+ * {this.state.isModalOpen && (\n+ * <MyCustomModal onClose={this.handleClose}>\n+ * <h1>Hello from Modal</h1>\n+ * <button onClick={this.handleClose}>Close</button>\n+ * </MyCustomModal>\n+ * )}\n+ * </div>\n+ * );\n+ * }\n+ *}\n+ *\n+ * more info: https://www.npmjs.com/package/react-modal2\n+ */\nexport default class Modal extends React.Component {\nstatic propTypes = {\n",
        "chatgpt_cot": "Refactor BlogContextMenu.js, move deleteModal state to parent component, update state references, and pass menu prop to BlogDeleteModal component."
    },
    {
        "org_diff": "diff --git a/src/components/AutocompleteInput.js b/src/components/AutocompleteInput.js @@ -242,7 +242,7 @@ const AutocompleteInput = forwardRef(\n);\nconst matches = useMemo(() => getAllMatches(tree, inputValue), [tree, inputValue]);\n- const showMatches = visible && inputValue && !(matches.length === 1 && matches[0] === inputValue);\n+ const showMatches = visible && inputValue && matches.length > 0 && !(matches.length === 1 && matches[0] === inputValue);\nconst handleKeyDown = useCallback(\n(event) => {\n",
        "org_msg": "Fix UI crash when tab on empty autocomplete.\nFixes",
        "sim_msg": "Handle HOME/END keypress in PostSearcherAutoSuggest component.",
        "sim_diff": "diff --git a/assets/js/components/PostSearcherAutoSuggest.js b/assets/js/components/PostSearcherAutoSuggest.js @@ -33,7 +33,7 @@ import {\n*/\nimport { useState, useEffect, useCallback, useRef } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\n-import { ENTER, ESCAPE } from '@wordpress/keycodes';\n+import { END, ENTER, ESCAPE, HOME } from '@wordpress/keycodes';\n/**\n* Internal dependencies\n@@ -183,17 +183,37 @@ export default function PostSearcherAutoSuggest( {\n}\n}, [ currentEntityTitle ] );\n+ const inputRef = useRef();\n+\nconst onKeyDown = useCallback(\n( e ) => {\nif ( ! unifiedDashboardEnabled ) {\nreturn;\n}\n- if ( e.keyCode === ESCAPE ) {\n- return onClose();\n- }\n- if ( e.keyCode === ENTER ) {\n+ const input = inputRef.current;\n+\n+ switch ( e.keyCode ) {\n+ case ESCAPE:\n+ return onClose();\n+ case ENTER:\nreturn onSelectCallback( searchTerm );\n+ case HOME:\n+ if ( input?.value ) {\n+ e.preventDefault();\n+ input.selectionStart = 0;\n+ input.selectionEnd = 0;\n+ }\n+ break;\n+ case END:\n+ if ( input?.value ) {\n+ e.preventDefault();\n+ input.selectionStart = input.value.length;\n+ input.selectionEnd = input.value.length;\n+ }\n+ break;\n+ default:\n+ break;\n}\n},\n[ onClose, onSelectCallback, searchTerm, unifiedDashboardEnabled ]\n@@ -205,6 +225,7 @@ export default function PostSearcherAutoSuggest( {\nonSelect={ onSelectCallback }\n>\n<ComboboxInput\n+ ref={ inputRef }\nid={ id }\nclassName=\"autocomplete__input autocomplete__input--default\"\ntype=\"text\"\n",
        "chatgpt_cot": "Refactor showMatches condition to display matches when there are more than 0 matches, improving visibility and user experience in AutocompleteInput component."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1837,7 +1837,7 @@ router.get('/deck/download/mtgo/:id/:seat', async (req, res) => {\n}\nfor (const [key, value] of Object.entries(side)) {\nconst name = key.replace(' // ', '/');\n- res.write(`${value} ${key}\\r\\n`);\n+ res.write(`${value} ${name}\\r\\n`);\n}\nreturn res.end();\n} catch (err) {\n",
        "org_msg": "Actually fix the issue.",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "Fix formatting issue in deck download route to replace special characters in key with '/' for better readability."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -285,9 +285,9 @@ function convertLegalities(card, isExtra) {\n} else {\nreturn {\nLegacy: card.legalities.legacy == 'legal',\n- Modern: card.legalities.modern == 'legal',\n- Standard: card.legalities.standard == 'legal',\n- Pauper: card.legalities.pauper == 'legal'\n+ Modern: card.legalities.modern == 'legal' || card.legalities.modern == 'banned',\n+ Standard: card.legalities.standard == 'legal' || card.legalities.standard == 'banned',\n+ Pauper: card.legalities.pauper == 'legal' || card.legalities.pauper == 'banned',\n};\n}\n}\n",
        "org_msg": "allowing banned cards to still count towards pauper, standard and modern cube types",
        "sim_msg": "Handle cards with no pack data better",
        "sim_diff": "diff --git a/client/deck-validator.js b/client/deck-validator.js @@ -25,10 +25,16 @@ function getStronghold(deck) {\n}\nfunction isCardInReleasedPack(packs, card) { // eslint-disable-line no-unused-vars\n- let cardPack = card.pack_cards[0].pack.id;\n- let pack = _.find(packs, pack => {\n+ let cardPack = '';\n+ let pack = false;\n+\n+ if(card.pack_cards.length > 0) {\n+ cardPack = card.pack_cards[0].pack.id;\n+ pack = _.find(packs, pack => {\nreturn cardPack === pack.id;\n});\n+ }\n+\nif(!pack) {\nreturn false;\n",
        "chatgpt_cot": "\"Update legalities to include 'banned' status in Modern and Standard formats\""
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -324,16 +324,8 @@ class FilterCollapse extends Component {\n}\nasync applyQuick(event) {\n+ event.preventDefault();\nconst tokens = [];\n- for (const name of ['type', 'text']) {\n- let value = this.state[`${name}Quick`];\n- if (!value) continue;\n- if (value.includes(' ')) {\n- value = value.replace('\"', '\\\\\"');\n- value = `\"${value}\"`;\n- }\n- tokens.push(`${name}:${value}`);\n- }\nconst colors = [];\nfor (const color of [...'WUBRGC']) {\n@@ -349,6 +341,16 @@ class FilterCollapse extends Component {\ntokens.push(`cmc${this.state.cmcQuickOp}${this.state.cmcQuick}`);\n}\n+ for (const name of ['type', 'text']) {\n+ let value = this.state[`${name}Quick`];\n+ if (!value) continue;\n+ if (value.includes(' ')) {\n+ value = value.replace('\"', '\\\\\"');\n+ value = `\"${value}\"`;\n+ }\n+ tokens.push(`${name}:${value}`);\n+ }\n+\nconst filterInput = tokens.join(' ');\nthis.setState({ filterInput });\nawait this.updateFilters(filterInput);\n@@ -441,6 +443,7 @@ class FilterCollapse extends Component {\n</Col>\n</Row>\n<Row style={{ margin: '0 -5px' }}>\n+ <Form inline>\n<Col xs=\"auto\" style={{ padding: '0 5px' }}>\n<ColorChecksControl\nsize=\"sm\"\n@@ -451,20 +454,6 @@ class FilterCollapse extends Component {\nonChange={this.handleChange}\n/>\n</Col>\n- <Col xs=\"auto\" style={{ padding: '0 5px' }}>\n- <InputGroup size=\"sm\" className=\"mb-3\">\n- <InputGroupAddon addonType=\"prepend\">\n- <InputGroupText htmlFor=\"typeQuick\">Type</InputGroupText>\n- </InputGroupAddon>\n- <Input\n- name=\"typeQuick\"\n- id=\"typeQuick\"\n- value={this.state.typeQuick}\n- onChange={this.handleChange}\n- style={{ width: '8rem' }}\n- />\n- </InputGroup>\n- </Col>\n<Col xs=\"auto\" style={{ padding: '0 5px' }}>\n<InputGroup size=\"sm\" className=\"mb-3\">\n<InputGroupAddon addonType=\"prepend\">\n@@ -497,6 +486,20 @@ class FilterCollapse extends Component {\n</InputGroupAddon>\n</InputGroup>\n</Col>\n+ <Col xs=\"auto\" style={{ padding: '0 5px' }}>\n+ <InputGroup size=\"sm\" className=\"mb-3\">\n+ <InputGroupAddon addonType=\"prepend\">\n+ <InputGroupText htmlFor=\"typeQuick\">Type</InputGroupText>\n+ </InputGroupAddon>\n+ <Input\n+ name=\"typeQuick\"\n+ id=\"typeQuick\"\n+ value={this.state.typeQuick}\n+ onChange={this.handleChange}\n+ style={{ width: '8rem' }}\n+ />\n+ </InputGroup>\n+ </Col>\n<Col xs=\"auto\" style={{ padding: '0 5px' }}>\n<InputGroup size=\"sm\" className=\"mb-3\">\n<InputGroupAddon addonType=\"prepend\">\n@@ -512,10 +515,11 @@ class FilterCollapse extends Component {\n</InputGroup>\n</Col>\n<Col xs=\"auto\" style={{ padding: '0 5px' }}>\n- <Button onClick={this.applyQuick} size=\"sm\" color=\"primary\">\n+ <Button type=\"submit\" onClick={this.applyQuick} size=\"sm\" color=\"primary\" className=\"mb-3\">\nQuick Filter\n</Button>\n</Col>\n+ </Form>\n</Row>\n<Row>\n<Col>\n",
        "org_msg": "Fix minor UX issues.",
        "sim_msg": "fix: alignment of Trezor Enter Passphrase popup",
        "sim_diff": "diff --git a/src/renderer/wallet/unlock/trezor/enter-passphrase.jsx b/src/renderer/wallet/unlock/trezor/enter-passphrase.jsx @@ -18,6 +18,16 @@ import { push } from 'connected-react-router';\nconst styles = theme => ({\npointer: {\ncursor: 'pointer'\n+ },\n+ inputWidth: {\n+ width: '380px'\n+ },\n+ header: {\n+ marginBottom: '20px',\n+ marginTop: '30px'\n+ },\n+ h1: {\n+ marginBottom: '0.5em'\n}\n});\n@@ -92,15 +102,21 @@ class EnterPassphrase extends Component {\nconst { classes } = this.props;\nreturn (\n<Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={40}>\n- <Grid item>\n- <Typography variant=\"h1\">Please Enter Your Passphrase.</Typography>\n- </Grid>\n- <Grid item>\n- <Typography variant=\"h3\">\n+ <Grid\n+ container\n+ direction=\"column\"\n+ justify=\"center\"\n+ alignItems=\"center\"\n+ className={classes.header}\n+ >\n+ <Typography variant=\"h1\" className={classes.h1}>\n+ Please enter your passphrase.\n+ </Typography>\n+ <Typography variant=\"body1\" color=\"secondary\">\nNote that your passphrase is case-sensitive.\n</Typography>\n</Grid>\n- <Grid item>\n+ <Grid item className={classes.inputWidth}>\n<Grid\ncontainer\ndirection=\"column\"\n@@ -113,7 +129,7 @@ class EnterPassphrase extends Component {\nPASSPHRASE\n</Typography>\n</Grid>\n- <Grid item>\n+ <Grid item style={{ width: '100%' }}>\n<Input\nfullWidth\nerror={this.state.error !== ''}\n@@ -131,7 +147,7 @@ class EnterPassphrase extends Component {\n</Grid>\n</Grid>\n</Grid>\n- <Grid item>\n+ <Grid item className={classes.inputWidth}>\n<Grid\ncontainer\ndirection=\"column\"\n@@ -144,7 +160,7 @@ class EnterPassphrase extends Component {\nRECONFIRM PASSPHRASE\n</Typography>\n</Grid>\n- <Grid item>\n+ <Grid item style={{ width: '100%' }}>\n<Input\nfullWidth\nerror={this.state.error !== ''}\n@@ -162,13 +178,13 @@ class EnterPassphrase extends Component {\n</Grid>\n</Grid>\n</Grid>\n- <Grid item>\n{this.state.error !== '' && (\n+ <Grid item>\n<Typography variant=\"subtitle2\" color=\"error\" gutterBottom>\n{this.state.error}\n</Typography>\n- )}\n</Grid>\n+ )}\n<Grid item>\n<Grid\ncontainer\n@@ -199,7 +215,7 @@ class EnterPassphrase extends Component {\n<Modal open={true}>\n<ModalWrap>\n<ModalCloseButton onClick={this.handleCancel}>\n- <ModalCloseIcon />\n+ <ModalCloseIcon style={{ marginTop: '20px' }} />\n</ModalCloseButton>\n<ModalHeader>\n<Grid\n@@ -209,7 +225,7 @@ class EnterPassphrase extends Component {\nalignItems=\"center\"\n>\n<Grid item>\n- <Typography variant=\"h6\">Trezor PASSPHRASE</Typography>\n+ <Typography variant=\"body1\">Trezor PASSPHRASE</Typography>\n</Grid>\n</Grid>\n</ModalHeader>\n",
        "chatgpt_cot": "Add event.preventDefault() to applyQuick to prevent page reload and improve user experience. Remove redundant input fields and add type-specific input fields."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -42,6 +42,8 @@ let CardRating = require('../models/cardrating');\nconst { ensureAuth, csrfProtection } = require('./middleware');\n+const NODE_ENV = process.env.NODE_ENV;\n+\nfunction cardHtml(card) {\nif (card.image_flip) {\nreturn (\n@@ -794,9 +796,9 @@ router.get('/list/:id', async function(req, res) {\n};\nres.render('cube/cube_list', {\n- reactHTML: await ReactDOMServer.renderToString(\n+ reactHTML: NODE_ENV === 'production' ? await ReactDOMServer.renderToString(\nReact.createElement(CubeListPage, reactProps)\n- ),\n+ ) : undefined,\nreactProps,\ncube,\nactiveLink: 'list',\n",
        "org_msg": "Use SSR only in production.",
        "sim_msg": "routes/index.js linting complete",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js var fs = require(\"fs\");\nvar path = require(\"path\");\nvar log = require(\"../log\").logger(\"routes\");\n-var restify = require(\"restify\");\n-var util = require(\"../util\");\n-var authentication = require(\"../authentication\");\nvar config = require(\"../config\");\nvar getStaticServeFunction = require(\"../static\");\n@@ -12,13 +9,13 @@ module.exports = function (server) {\nvar routeDir = __dirname;\nvar files = fs.readdirSync(routeDir);\nfiles.forEach(function (file) {\n- filePath = path.resolve(\"./\", routeDir, file);\n+ var filePath = path.resolve(\"./\", routeDir, file);\nif (\npath.extname(filePath) == \".js\" &&\npath.basename(filePath) != \"index.js\"\n) {\ntry {\n- routes = require(filePath);\n+ var routes = require(filePath);\nif (typeof routes == \"function\") {\nroutes(server);\nlog.debug(' Loaded routes from \"' + filePath + '\"');\n",
        "chatgpt_cot": "\"Add NODE_ENV variable and conditionally render React component to fix production environment issue in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2450,6 +2450,7 @@ router.post('/api/updatecard/:id', ensureAuth, function(req, res) {\nif (!found && req.body.src && cardsAreEquivalent(card, req.body.src, carddb)) {\nfound = true;\nvar updated = req.body.updated;\n+ console.log(updated);\nObject.keys(Cube.schema.paths.cards.schema.paths).forEach(function(key) {\nif (!updated.hasOwnProperty(key)) {\nupdated[key] = card[key];\n@@ -2461,6 +2462,7 @@ router.post('/api/updatecard/:id', ensureAuth, function(req, res) {\n}\n});\ncube.cards[index] = updated;\n+ console.log(cube.cards[index]);\n}\n});\nif (!found) {\n@@ -2471,9 +2473,7 @@ router.post('/api/updatecard/:id', ensureAuth, function(req, res) {\n} else {\ncube = setCubeType(cube, carddb);\n- Cube.updateOne({\n- _id: cube._id\n- }, cube, function(err) {\n+ cube.save(function(err) {\nif (err) {\nres.status(500).send({\nsuccess: 'false',\n@@ -2554,9 +2554,7 @@ router.post('/api/updatecards/:id', ensureAuth, function(req, res) {\n}\n}\n}\n- Cube.updateOne({\n- _id: cube._id\n- }, cube, function(err) {\n+ cube.save(function(err) {\nif (err) {\nres.status(500).send({\nsuccess: 'false',\n",
        "org_msg": "Swapped to cube.save",
        "sim_msg": "feat(create-did): add more test",
        "sim_diff": "diff --git a/src/main/wallet/wallet.spec.js b/src/main/wallet/wallet.spec.js @@ -79,6 +79,33 @@ describe('Wallet model', () => {\nexpect(check.keystoreFilePath).not.toBe(itm.keystoreFilePath);\n});\n+ it('updateSetup', async () => {\n+ let itm = await Wallet.query().insertAndFetch(testItm);\n+ expect(itm.isSetupFinished).toEqual(0);\n+ itm.setup = 1;\n+ await Wallet.updateSetup(itm);\n+ let check = await Wallet.query().findById(itm.id);\n+ expect(check.isSetupFinished).toBe(itm.setup);\n+ });\n+\n+ it('updateName', async () => {\n+ let itm = await Wallet.query().insertAndFetch(testItm);\n+ expect(itm.name).toBeNull();\n+ itm.name = 'name';\n+ await Wallet.updateName(itm);\n+ let check = await Wallet.query().findById(itm.id);\n+ expect(check.name).toBe(itm.name);\n+ });\n+\n+ it('updateDID', async () => {\n+ let itm = await Wallet.query().insertAndFetch(testItm);\n+ expect(itm.did).toBeNull();\n+ itm.did = 'did';\n+ await Wallet.updateDID(itm);\n+ let check = await Wallet.query().findById(itm.id);\n+ expect(check.did).toBe(itm.did);\n+ });\n+\nit('selectProfilePictureById', async () => {\nlet itm = await Wallet.query().insertAndFetch({\n...testItm,\n",
        "chatgpt_cot": "Refactor cube_routes.js, replace Cube.updateOne with cube.save to improve code readability and maintainability. Add console logs for debugging purposes."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -820,7 +820,7 @@ router.get('/list/:id', async function(req, res) {\nconst reactProps = {\ncanEdit: req.user ? req.user.id === cube.owner : false,\ncubeID: req.params.id,\n- defaultTagColors: cube.tag_colors,\n+ defaultTagColors: cube.tag_colors ? cube.tag_colors : [],\ndefaultShowTagColors: !req.user || !req.user.hide_tag_colors,\ndefaultSorts: cube.default_sorts,\ncards,\n",
        "org_msg": "Fix error with null check",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Fix defaultTagColors assignment in cube_routes.js to handle null values, preventing potential errors related to cube.tag_colors."
    },
    {
        "org_diff": "diff --git a/src/analytics/Averages.js b/src/analytics/Averages.js @@ -18,7 +18,21 @@ const Averages = ({ cards, characteristics }) => {\nconst counts = Object.entries(groups)\n.map((tuple) => {\n- const vals = tuple[1].map((card) => characteristics[characteristic](card)).filter((x) => x);\n+ const vals = tuple[1]\n+ .filter((card) => {\n+ if (characteristic === 'CMC') {\n+ const type = card.type_line || card.detail.type;\n+ if (type.toLowerCase().includes('land')) return false;\n+ }\n+ return true;\n+ })\n+ .map((card) => {\n+ return characteristics[characteristic](card);\n+ })\n+ .filter((x) => {\n+ return x || x === 0;\n+ });\n+ console.log(vals);\nconst avg = average(vals);\nreturn {\nlabel: tuple[0],\n",
        "org_msg": "filter lands from cmc average, but leave all other zero values",
        "sim_msg": "Update averageObjectListValue to not filter items.",
        "sim_diff": "diff --git a/assets/js/util/average-object-list-value.js b/assets/js/util/average-object-list-value.js */\n/**\n- * Internal dependencies\n+ * External dependencies\n*/\n-import sumObjectListValue from './sum-object-list-value.js';\n+import get from 'lodash/get';\n+import mean from 'lodash/mean';\n/**\n* Returns the average of a given fieldName in a list.\n@@ -32,19 +33,18 @@ import sumObjectListValue from './sum-object-list-value.js';\n* @return {number} The average.\n*/\nexport default function averageObjectListValue( list, fieldName ) {\n- // Filter the list to remove any entries that don't have fieldName so our length is correct for division.\n- const filteredList = list.filter( ( item ) => {\n- return Object.keys( item ).includes( fieldName );\n- } );\n+ if ( ! list?.length ) {\n+ return 0;\n+ }\n- const allIntegers = filteredList.every( ( item ) => {\n- return Number.isInteger( item[ fieldName ] );\n- } );\n+ const values = list.map( ( item ) => get( item, fieldName, 0 ) );\n+ const average = mean( values );\n- // Ensure that we don't divide empty arrays by 0.\n- const average = filteredList.length ? sumObjectListValue( list, fieldName ) / filteredList.length : 0;\n+ if ( Number.isInteger( average ) ) {\n+ return average;\n+ }\n- if ( average > 0 && allIntegers ) {\n+ if ( values.every( Number.isInteger ) ) {\nreturn Math.round( average );\n}\n",
        "chatgpt_cot": "\"Refactor filtering logic for characteristic values in Averages.js to handle 'CMC' type, improve code readability and maintainability.\""
    },
    {
        "org_diff": "diff --git a/models/cube.js b/models/cube.js @@ -62,11 +62,14 @@ let cubeSchema = mongoose.Schema({\ndraft_formats: {}\n});\n+// Indexes for home page queries\n+cubeSchema.index({\n+ isFeatured: 1,\n+});\n+\ncubeSchema.index({\nisListed: 1,\n- card_count: 1,\nowner: 1,\n- isFeatured: 1\n-})\n+});\nlet Cube = module.exports = mongoose.model('Cube', cubeSchema)\n\\ No newline at end of file\n",
        "org_msg": "Fix indexes.",
        "sim_msg": "additional property needs to increment index",
        "sim_diff": "diff --git a/bin/random.js b/bin/random.js @@ -194,7 +194,7 @@ exports.object = function(schema) {\nlet count = 0;\nlet index = 1;\nwhile (count < 3 && remaining) {\n- const key = 'additionalProperty' + index;\n+ const key = 'additionalProperty' + index++;\nif (!result.hasOwnProperty(key)) {\ncount++;\nremaining--;\n",
        "chatgpt_cot": "Add indexes for home page queries in cube model. Fix compilation issue by adding missing index for isFeatured attribute."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -9,6 +9,7 @@ var analytics = require('../serverjs/analytics.js');\nvar draftutil = require('../serverjs/draftutil.js');\nvar carddb = require('../serverjs/cards.js');\nvar util = require('../serverjs/util.js');\n+const tcgconfig = require('../../cubecobrasecrets/tcgplayer');\n//grabbing sortfilter.cardIsLabel from client-side\nvar sortfilter = require('../public/js/sortfilter.js');\n@@ -421,6 +422,7 @@ router.get('/list/:id', function(req, res)\n}\nelse\n{\n+ var pids = [];\ncube.cards.forEach(function(card, index)\n{\ncard.details = carddb.carddict[card.cardID];\n@@ -428,6 +430,26 @@ router.get('/list/:id', function(req, res)\n{\ncard.type_line = card.details.type;\n}\n+ if(card.details.tcgplayer_id)\n+ {\n+ pids.push(card.details.tcgplayer_id);\n+ }\n+ });\n+ var options = {\n+ headers: {\n+ Authorization: ' Bearer ' + tcgconfig.Public_Key\n+ },\n+ method: 'GET',\n+ url: 'http://api.tcgplayer.com/v1.32.0/pricing/product/'+pids\n+ };\n+\n+ request(options, function (error, response, body) {\n+ if (error)\n+ {\n+ console.log(error);\n+ }\n+\n+ console.log(body);\n});\nif(req.user)\n",
        "org_msg": "Added TCG api call",
        "sim_msg": "Added on error handlers everywhere",
        "sim_diff": "diff --git a/node-binance-api.js b/node-binance-api.js @@ -188,7 +188,10 @@ let api = function Binance( options = {} ) {\nreturn cb( null, JSONbig.parse( body ) );\n}\n- const proxyRequest = ( opt, cb ) => request( addProxy( opt ), reqHandler( cb ) );\n+ const proxyRequest = ( opt, cb ) => {\n+ const req = request( addProxy( opt ), reqHandler( cb ) ).on('error', (err) => { cb( err, {} ) });\n+ return req;\n+ }\nconst reqObj = ( url, data = {}, method = 'GET', key ) => ( {\nurl: url,\n@@ -568,7 +571,7 @@ let api = function Binance( options = {} ) {\n} catch ( err ) {\nreturn reject( `promiseRequest error #${ response.statusCode }` );\n}\n- } );\n+ } ).on( 'error', reject );\n} catch ( err ) {\nreturn reject( err );\n}\n@@ -3151,7 +3154,7 @@ let api = function Binance( options = {} ) {\nlet result = {};\nresult[symbol] = JSON.parse( response.body ).price;\nreturn resolve( result );\n- } );\n+ } ).on( 'error', reject );\n} );\n}\nrequest( addProxy( opt ), ( error, response, body ) => {\n@@ -3160,7 +3163,7 @@ let api = function Binance( options = {} ) {\nlet result = {};\nresult[symbol] = JSON.parse( response.body ).price;\nreturn callback( null, result );\n- } );\n+ } ).on( 'error', callback );\n},\n/**\n@@ -3183,14 +3186,14 @@ let api = function Binance( options = {} ) {\nif ( error ) return reject( error );\nif ( response.statusCode !== 200 ) return reject( response );\nreturn resolve( priceData( JSON.parse( body ) ) );\n- } );\n+ } ).on( 'error', reject );\n} );\n}\nrequest( addProxy( opt ), ( error, response, body ) => {\nif ( error ) return callback( error );\nif ( response.statusCode !== 200 ) return callback( response );\nreturn callback( null, priceData( JSON.parse( body ) ) );\n- } );\n+ } ).on( 'error', callback );\n},\n/**\n@@ -3213,7 +3216,7 @@ let api = function Binance( options = {} ) {\nif ( response.statusCode !== 200 ) return reject( response );\nconst result = symbol ? JSON.parse( body ) : bookPriceData( JSON.parse( body ) );\nreturn resolve( result );\n- } );\n+ } ).on( 'error', reject );\n} );\n}\nrequest( addProxy( opt ), ( error, response, body ) => {\n@@ -3221,7 +3224,7 @@ let api = function Binance( options = {} ) {\nif ( response.statusCode !== 200 ) return callback( response );\nconst result = symbol ? JSON.parse( body ) : bookPriceData( JSON.parse( body ) );\nreturn callback( null, result );\n- } );\n+ } ).on( 'error', callback );\n},\n/**\n",
        "chatgpt_cot": "Add TCGPlayer pricing API call\nThe changes add a TCGPlayer pricing API call to get card prices based on TCGPlayer IDs."
    },
    {
        "org_diff": "diff --git a/src/components/Changelist.js b/src/components/Changelist.js @@ -68,7 +68,7 @@ const Changelist = () => {\nif (change.add) {\nreturn <Add key={change.id} card={change.add} changeId={change.id} close={close} />;\n} else if (change.remove) {\n- return <Remove key={change.id} card={change.add} changeId={change.id} close={close} />;\n+ return <Remove key={change.id} card={change.remove} changeId={change.id} close={close} />;\n} else if (change.replace) {\nreturn <Replace key={change.id} cards={change.replace} changeId={change.id} close={close} />;\n}\n",
        "org_msg": "Fix remove/replace button.\nFixes",
        "sim_msg": "Add check if wrapper id is already set otherwise generate random id",
        "sim_diff": "diff --git a/src/components/a11y/a11y.js b/src/components/a11y/a11y.js @@ -146,9 +146,9 @@ const A11y = {\n// Wrapper\nconst $wrapperEl = swiper.$wrapperEl;\n- const randomWrapperId = `swiper-wrapper-${swiper.a11y.getRandomNumber(16)}`;\n+ const wrapperId = $wrapperEl.attr('id') || `swiper-wrapper-${swiper.a11y.getRandomNumber(16)}`;\nlet live;\n- swiper.a11y.addElId($wrapperEl, randomWrapperId);\n+ swiper.a11y.addElId($wrapperEl, wrapperId);\nif (swiper.params.autoplay && swiper.params.autoplay.enabled) {\nlive = 'off';\n@@ -184,7 +184,7 @@ const A11y = {\n$nextEl.on('keydown', swiper.a11y.onEnterKey);\n}\nswiper.a11y.addElLabel($nextEl, params.nextSlideMessage);\n- swiper.a11y.addElControls($nextEl, randomWrapperId);\n+ swiper.a11y.addElControls($nextEl, wrapperId);\n}\nif ($prevEl) {\nswiper.a11y.makeElFocusable($prevEl);\n@@ -193,7 +193,7 @@ const A11y = {\n$prevEl.on('keydown', swiper.a11y.onEnterKey);\n}\nswiper.a11y.addElLabel($prevEl, params.prevSlideMessage);\n- swiper.a11y.addElControls($prevEl, randomWrapperId);\n+ swiper.a11y.addElControls($prevEl, wrapperId);\n}\n// Pagination\n",
        "chatgpt_cot": "Fix bug in Changelist.js to correctly render Remove component with the correct card attribute, resolving rendering issue for remove changes."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -581,7 +581,7 @@ router.get('/compare/:id_a/to/:id_b', function(req, res) {\n} else {\nlet pids = [];\ncubeA.cards.forEach(function(card, index) {\n- card.details = carddb.cardFromId(card.cardID);\n+ card.details = { ...carddb.cardFromId(card.cardID) };\nif (!card.type_line) {\ncard.type_line = card.details.type;\n}\n@@ -682,7 +682,7 @@ router.get('/list/:id', function(req, res) {\n} else {\nvar pids = [];\ncube.cards.forEach(function(card, index) {\n- card.details = carddb.cardFromId(card.cardID);\n+ card.details = { ...carddb.cardFromId(card.cardID) };\ncard.details.display_image = util.getCardImageURL(card);\nif (!card.type_line) {\ncard.type_line = card.details.type;\n",
        "org_msg": "Mostly fix duplicate card custom images.\nFixes in list and compare view but not elsewhere. Ultimate issue is the\ndisplay_image field which needs to be replaced with runtime computation.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "fix object assignment in cube_routes.js to prevent mutation of original object properties."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -61,7 +61,7 @@ if (process.env.NODE_ENV !== 'production') {\n);\n}\n-winston.info(`Logging to ${errorFile.name} and ${combinedFile.name}`);\n+console.log(`Logging to ${errorFile.name} and ${combinedFile.name}`);\n// Connect db\nmongoose.connect(mongosecrets.connectionString, {\n",
        "org_msg": "Give logfile paths on console.",
        "sim_msg": "run redux-logger in dev env on default",
        "sim_diff": "diff --git a/src/store.js b/src/store.js @@ -60,8 +60,7 @@ const middleware = [\n})\n];\n-if (process.env.ENABLE_LOGGER &&\n- process.env.IS_BROWSER &&\n+if (process.env.IS_BROWSER &&\nprocess.env.NODE_ENV !== 'production') {\nmiddleware.push(createLogger({\ncollapsed: true,\n",
        "chatgpt_cot": "Change logging method from winston to console.log for easier debugging and maintenance."
    },
    {
        "org_diff": "diff --git a/src/components/SortContext.js b/src/components/SortContext.js @@ -33,11 +33,6 @@ class SortContextProvider extends React.Component {\n}\n}\n- componentDidUpdate() {\n- sorts[0] = this.state.primary;\n- sorts[1] = this.state.secondary;\n- }\n-\nchangeSort(change) {\nthis.setState(change);\n}\n",
        "org_msg": "Fix sorts issue.",
        "sim_msg": "Sort <SortTable> only after mounting\nSafari and IE11 rendered before sorting, while Safari and IE11 render after sorting, causing a React invariant violation. Solved this by only sorting after the SortTable component is mounted.",
        "sim_diff": "diff --git a/src/encoded/static/components/sorttable.js b/src/encoded/static/components/sorttable.js @@ -199,13 +199,22 @@ export class SortTable extends React.Component {\nthis.state = {\nsortColumn, // ID of currently sorting column\nreversed: false, // True if sorting of current sort column is reversed\n+ mounted: false, // True if this component has mounted (ENCD-3459)\n};\n+ // Initialize object data members.\n+ this.mounted = false; // `true` if this React component has mounted\n+\n// Bind this to non-React methods.\nthis.sortDir = this.sortDir.bind(this);\nthis.sortColumn = this.sortColumn.bind(this);\n}\n+ componentDidMount() {\n+ // Record that this component has mounted, and sorting can be enabled (ENCD-3459).\n+ this.setState({ mounted: true });\n+ }\n+\n// Handle clicks in the column headers for sorting columns\nsortDir(column) {\nconst reversed = column === this.state.sortColumn ? !this.state.reversed : false;\n@@ -269,6 +278,10 @@ export class SortTable extends React.Component {\n// Calculate the colspan for the table\nconst colCount = columnIds.length - hiddenCount;\n+ // Sort the list according to the requested sorting column. Only do this *after* this\n+ // component has mounted (ENCD-3459).\n+ const sortedList = this.state.mounted ? list.sort(this.sortColumn) : list;\n+\n// Now display the table, but only if we were passed a non-empty list\nif (list && list.length) {\nreturn (\n@@ -303,7 +316,7 @@ export class SortTable extends React.Component {\n{!this.props.collapsed ?\n<tbody>\n- {list.sort(this.sortColumn).map((item, i) => {\n+ {sortedList.map((item, i) => {\nconst rowClassStr = rowClasses ? rowClasses(item, i) : '';\nreturn (\n<tr key={i} className={rowClassStr}>\n",
        "chatgpt_cot": "Remove componentDidUpdate method and refactor changeSort function in SortContextProvider class."
    },
    {
        "org_diff": "diff --git a/src/components/CubeDraftPage.js b/src/components/CubeDraftPage.js @@ -175,7 +175,7 @@ const CubeDraftPage = ({ cube, cubeID, initialDraft }) => {\n);\nreturn (\n- <CubeLayout cube={cube} cubeID={cubeID}>\n+ <CubeLayout cube={cube} cubeID={cubeID} activeLink=\"playtest\">\n<DisplayContextProvider>\n<Navbar expand=\"xs\" light className=\"usercontrols\">\n<Collapse navbar>\n",
        "org_msg": "Fix activeLink on draft page.",
        "sim_msg": "Reset board transformations on file load",
        "sim_diff": "diff --git a/src/components/App.js b/src/components/App.js @@ -696,7 +696,8 @@ class App extends Component {\nrepresentedFilename: null,\ngameIndex: 0,\ngameTrees,\n- gameCurrents: gameTrees.map(_ => ({}))\n+ gameCurrents: gameTrees.map(_ => ({})),\n+ boardTransformation: ''\n})\nlet [firstTree, ] = gameTrees\n",
        "chatgpt_cot": "add activeLink prop to CubeLayout to set the active link to \"playtest\" for CubeDraftPage."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -223,14 +223,25 @@ router.get('/api/downloadcubes/:page/:key', async (req, res) => {\n});\n}\n- const cubes = await Cube.find({}, 'cards')\n+ let cubeQ;\n+ if (req.query.maxShortId) {\n+ cubeQ = Deck.find({ shortID: { $gt: req.query.maxShortId } }, 'cards shortID')\n+ .sort({ shortID: 1 })\n+ .limit(cubePageSize)\n+ .lean();\n+ } else {\n+ cubeQ = Deck.find({}, 'cards shortID')\n.sort({ shortID: 1 })\n.skip(req.params.page * cubePageSize)\n.limit(cubePageSize)\n.lean();\n+ }\n+ const cubes = await cubeQ;\n+ const maxShortId = cubes[cubes.length - 1].shortID;\nreturn res.status(200).send({\nsuccess: 'true',\n+ maxShortId,\npages: Math.ceil(count / cubePageSize),\ncubes: cubes.map((cube) => cube.cards.map((card) => carddb.cardFromId(card.cardID).name_lower)),\n});\n@@ -260,14 +271,26 @@ router.get('/api/downloaddecks/:page/:key', async (req, res) => {\n});\n}\n- const decks = await Deck.find({}, 'seats')\n+ let deckQ;\n+ if (req.query.maxDate) {\n+ deckQ = Deck.find({ date: { $gt: req.query.maxDate } }, 'seats date')\n+ .sort({ date: 1 })\n+ .limit(deckPageSize)\n+ .lean();\n+ } else {\n+ deckQ = Deck.find({}, 'seats date')\n.sort({ date: 1 })\n.skip(req.params.page * deckPageSize)\n.limit(deckPageSize)\n.lean();\n+ }\n+ const decks = await deckQ;\n+\n+ const maxDate = decks[decks.length - 1].date;\nreturn res.status(200).send({\nsuccess: 'true',\n+ maxDate,\npages: Math.ceil(count / deckPageSize),\ndecks: decks.map((deck) => {\nconst main = [];\n",
        "org_msg": "Allow optimization of deck and cube downloads.",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "\"Add conditions for querying cubes and decks and returning maxShortId and maxDate.\""
    },
    {
        "org_diff": "diff --git a/src/components/Paginate.js b/src/components/Paginate.js @@ -5,12 +5,7 @@ import { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\nconst RealPage = ({ index, active, urlF, onClick }) => (\n<PaginationItem active={active === index}>\n- <PaginationLink\n- tag=\"a\"\n- href={urlF ? urlF(index) : ''}\n- data-index={onClick ? index : undefined}\n- onClick={onClick ? () => onClick(index) : () => {}}\n- >\n+ <PaginationLink tag=\"a\" href={urlF(index)} data-index={onClick ? index : undefined} onClick={() => onClick(index)}>\n{index + 1}\n</PaginationLink>\n</PaginationItem>\n@@ -24,8 +19,8 @@ RealPage.propTypes = {\n};\nRealPage.defaultProps = {\n- urlF: null,\n- onClick: undefined,\n+ urlF: () => '#',\n+ onClick: () => {},\n};\nconst FakePage = ({ text }) => (\n@@ -90,7 +85,7 @@ const Paginate = ({ count, active, urlF, onClick }) => {\n<PaginationLink\ntag=\"a\"\nprevious\n- href={urlF ? urlF(active - 1) : ''}\n+ href={urlF(active - 1)}\ndata-index={onClick ? active - 1 : undefined}\nonClick={() => onClick(active - 1)}\n/>\n@@ -100,7 +95,7 @@ const Paginate = ({ count, active, urlF, onClick }) => {\n<PaginationLink\ntag=\"a\"\nnext\n- href={urlF ? urlF(active + 1) : ''}\n+ href={urlF(active + 1)}\ndata-index={onClick ? active + 1 : undefined}\nonClick={() => onClick(active + 1)}\n/>\n@@ -117,8 +112,8 @@ Paginate.propTypes = {\n};\nPaginate.defaultProps = {\n- urlF: null,\n- onClick: undefined,\n+ urlF: () => '#',\n+ onClick: () => {},\n};\nexport default Paginate;\n",
        "org_msg": "Fix list view",
        "sim_msg": "Remove props for Pagination component and query data store.",
        "sim_diff": "diff --git a/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/Pagination.js b/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/Pagination.js @@ -25,47 +25,52 @@ import { Icon, chevronLeft, chevronRight } from '@wordpress/icons';\n/**\n* WordPress dependencies\n*/\n-import { _x, sprintf } from '@wordpress/i18n';\n+// import { _x, sprintf } from '@wordpress/i18n';\n/**\n* Internal dependencies\n*/\nimport Button from '../../../../../components/Button';\n-import { IDEA_HUB_IDEAS_PER_PAGE } from '../../../datastore/constants';\n+// import { IDEA_HUB_IDEAS_PER_PAGE } from '../../../datastore/constants';\n+import { CORE_UI } from '../../../../../googlesitekit/datastore/ui/constants';\n+import Data from 'googlesitekit-data';\n+\n+const { useSelect } = Data;\n+\n+const Pagination = ( { tab } ) => {\n+ const page =\n+ useSelect( ( select ) =>\n+ select( CORE_UI ).getValue( `idea-hub-page-${ tab }` )\n+ ) || 1;\n-const Pagination = ( {\n- total,\n- page,\n- ideasPerPage,\n- handlePrev,\n- handleNext,\n-} ) => {\nreturn (\n<div className=\"googlesitekit-idea-hub__pagination\">\n<span className=\"googlesitekit-idea-hub__pagination--legend\">\n- { sprintf(\n- /* translators: 1: from, 2: to, 3: total items */\n- _x(\n- '%1$s - %2$s of %3$s',\n- '{from} - {to} of {total}',\n- 'google-site-kit'\n- ),\n- page === 1 ? page : ( page - 1 ) * ideasPerPage + 1,\n- total < page * ideasPerPage ? total : page * ideasPerPage,\n- total\n- ) }\n+ {\n+ // sprintf(\n+ // /* translators: 1: from, 2: to, 3: total items */\n+ // _x(\n+ // '%1$s - %2$s of %3$s',\n+ // '{from} - {to} of {total}',\n+ // 'google-site-kit'\n+ // ),\n+ // page === 1 ? page : ( page - 1 ) * ideasPerPage + 1,\n+ // total < page * ideasPerPage ? total : page * ideasPerPage,\n+ // total\n+ // )\n+ }\n</span>\n<div className=\"googlesitekit-idea-hub__pagination--buttons\">\n<Button\nicon={ <Icon icon={ chevronLeft } /> }\n- onClick={ handlePrev }\n+ // onClick={ handlePrev }\ndisabled={ page === 1 }\n/>\n<Button\nicon={ <Icon icon={ chevronRight } /> }\n- onClick={ handleNext }\n- disabled={ page * ideasPerPage > total }\n+ // onClick={ handleNext }\n+ // disabled={ page * ideasPerPage > total }\n/>\n</div>\n</div>\n@@ -73,17 +78,11 @@ const Pagination = ( {\n};\nPagination.propTypes = {\n- total: PropTypes.number.isRequired,\n- page: PropTypes.number.isRequired,\n- ideasPerPage: PropTypes.number,\n- handlePrev: PropTypes.func,\n- handleNext: PropTypes.func,\n+ tab: PropTypes.string,\n};\nPagination.defaultProps = {\n- ideasPerPage: IDEA_HUB_IDEAS_PER_PAGE,\n- handlePrev: () => {},\n- handleNext: () => {},\n+ tab: 'new-ideas',\n};\nexport default Pagination;\n",
        "chatgpt_cot": "Refactor Pagination component for cleaner code. Set default URL and onClick functions. Simplify onClick handler for PaginationLink."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -4072,6 +4072,8 @@ router.post(\nconst [draft, rating, packRatings] = await Promise.all([draftQ, ratingQ, packQ]);\nif (draft) {\n+ // TODO: fix cube schema, fix out of sync if an edit is also occuring\n+ /*\nconst cube = await Cube.findOne(buildIdQuery(draft.cube));\nif (cube) {\n@@ -4103,6 +4105,7 @@ router.post(\n}\nawait cube.save();\n}\n+ */\nif (!rating.elo) {\nrating.name = req.body.pick;\n",
        "org_msg": "disable deck stats",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Fix cube schema and out of sync issue during edit in cube_routes.js. Commented out unnecessary code and added a TODO for future fix."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.test.js b/__tests__/serverjs/updatecards.test.js @@ -2,7 +2,6 @@ const rimraf = require('rimraf');\nconst updatecards = require('../../serverjs/updatecards');\nconst carddb = require('../../serverjs/cards');\nconst examplecards = require('../../fixtures/examplecards');\n-const fs = require('fs');\nconst cardsFixturePath = 'fixtures/cards_small.json';\nconst convertedExampleCard = {\n",
        "org_msg": "removed dupilicate",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Remove unnecessary fs module import in updatecards.test.js. Fixtures and cards modules are used for testing."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2113,7 +2113,7 @@ router.get('/draft/:id', async (req, res) => {\nreturn res.render('cube/cube_draft', {\nreactHTML: CubeDraftPage\n- ? await ReactDOMServer.renderToString(React.createElement(CubeDraftPage, reactProps))\n+ ? ReactDOMServer.renderToString(React.createElement(CubeDraftPage, reactProps))\n: undefined,\nreactProps: serialize(reactProps),\ntitle: `${abbreviate(cube.name)} - Draft`,\n@@ -2244,7 +2244,7 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\n});\n// API routes\n-router.get('/api/cardnames', (req, res) => {\n+router.get('/api/cardnames', (_, res) => {\nreturn res.status(200).send({\nsuccess: 'true',\ncardnames: carddb.cardtree,\n@@ -2252,7 +2252,7 @@ router.get('/api/cardnames', (req, res) => {\n});\n// Get the full card images including image_normal and image_flip\n-router.get('/api/cardimages', (req, res) => {\n+router.get('/api/cardimages', (_, res) => {\nreturn res.status(200).send({\nsuccess: 'true',\ncardimages: carddb.cardimages,\n@@ -2594,14 +2594,14 @@ router.post(\n}),\n);\n-router.get('/api/imagedict', (req, res) => {\n+router.get('/api/imagedict', (_, res) => {\nres.status(200).send({\nsuccess: 'true',\ndict: carddb.imagedict,\n});\n});\n-router.get('/api/fullnames', (req, res) => {\n+router.get('/api/fullnames', (_, res) => {\nres.status(200).send({\nsuccess: 'true',\ncardnames: carddb.full_names,\n@@ -3802,7 +3802,7 @@ router.post(\nconst maybe = [...(cube.maybe || [])];\nconst removeIndices = Array.isArray(req.body.remove) ? req.body.remove : [];\n- const withRemoved = maybe.filter((card, index) => !removeIndices.includes(index));\n+ const withRemoved = maybe.filter((_, index) => !removeIndices.includes(index));\nconst addCards = Array.isArray(req.body.add) ? req.body.add : [];\nconst addCardsNoDetails = addCards.map(({ details, ...card }) => ({ ...util.newCard(details), ...card }));\n",
        "org_msg": "Fix serveral warnings in cube_routes.js",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Refactor cube_routes.js for improved performance and readability. Updated route handlers to use anonymous functions and optimized array filtering for better efficiency."
    },
    {
        "org_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -99,7 +99,8 @@ to be aware of the details of our progress without requesting a detailed code\nreview just yet.\nWhen we feel that a feature we're working on is \"code complete\", we open pull\n-requests. These pull requests have descriptions that briefly summarize the\n+requests. These pull requests have titles that reference the substantive\n+changes they contain, descriptions that briefly summarize the\nchanges, and sometimes include more detailed breakdowns of the architectural\nor coding approach. The goal of these descriptions is to aid in the code\nreview process, making it easier for a community member with no prior\n",
        "org_msg": "add note on pr titles",
        "sim_msg": "Fix typo\nthanks in advanced -> thanks in advance",
        "sim_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -16,7 +16,7 @@ When reporting an issue include information such as:\nThe more information available when we take a look at your issue the more likely we can deal with it in a quick manner.\n## Developing\n-We love pull requests! If you're reading this section thanks in advanced.\n+We love pull requests! If you're reading this section thanks in advance.\nTo help accelerate the review process:\n* Consider adding specs.\n",
        "chatgpt_cot": "\"Refactor pull request descriptions to include more detailed breakdowns of architectural or coding approach for easier code review process.\""
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -282,6 +282,27 @@ async function finish() {\n}\n}\n+ for (const seat of draft.seats) {\n+ for (const category of [seat.drafted, seat.sideboard, seat.packbacklog]) {\n+ for (const card of category) {\n+ delete card.details;\n+ }\n+ }\n+ for (const card of seat.pickorder) {\n+ delete card.details;\n+ }\n+ }\n+\n+ for (const category of [draft.initial_state, draft.unopenedPacks]) {\n+ for (const seat of category) {\n+ for (const pack of seat) {\n+ for (const card of pack) {\n+ delete card.details;\n+ }\n+ }\n+ }\n+ }\n+\n// save draft. if we fail, we fail\nawait csrfFetch(`/cube/api/draftpick/${draft.cube}`, {\nmethod: 'POST',\n",
        "org_msg": "remove details prior to draft submit",
        "sim_msg": "Improve drafts page layout",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -26,12 +26,10 @@ let DraftRow = (props) => {\nDraftRow = connect(() => ({}), { deleteDraft })(DraftRow);\nconst DraftList = ({ editor: { draftPosts } }) =>\n- (\n<div className=\"main-panel\">\n<Header />\n- <div className=\"my-3\">\n+ <div className=\"my-3 container container-small\">\n<h1 className=\"text-xs-center\">Drafts</h1>\n- <div className=\"container\">\n{ _.size(draftPosts) === 0 &&\n<h3 className=\"text-xs-center\">\nYou don't have any draft saved.\n@@ -41,8 +39,6 @@ const DraftList = ({ editor: { draftPosts } }) =>\n<DraftRow key={key} data={draft.postData} id={key} />)\n}\n</div>\n- </div>\n- </div>\n- );\n+ </div>;\nexport default connect(state => ({ editor: state.editor }))(DraftList);\n",
        "chatgpt_cot": "\"Remove card details in Draft.js for all seats, categories, and packs to improve data privacy and security.\""
    },
    {
        "org_diff": "diff --git a/src/cube_overview.js b/src/cube_overview.js @@ -227,6 +227,7 @@ class CubeOverview extends Component {\n)}\n</CardBody>\n{loggedIn &&\n+ !canEdit &&\n(followed ? (\n<Button outline color=\"danger\" className=\"rounded-0\" onClick={this.unfollow}>\nUnfollow\n",
        "org_msg": "Don't show follow button for own cube\nfixes Don't show follow/unfollow for own cubes, similar to how the follow/unfollow button is hidden for users.",
        "sim_msg": "Remove see also from the library. It's a pain, and always breaks. Closes",
        "sim_diff": "diff --git a/client/src/components/views/Library/index.js b/client/src/components/views/Library/index.js @@ -17,10 +17,6 @@ const SUB = gql`\ntype\ntitle\nimage\n- seeAlso {\n- id\n- title\n- }\ncategories\n}\n}\n@@ -198,7 +194,7 @@ class Library extends Component {\n)}\n</Asset>\n)}\n- <h4>See Also</h4>\n+ {/* <h4>See Also</h4>\n<Card className=\"entry-seeAlso\">\n<CardBody>\n{sEntry &&\n@@ -217,7 +213,7 @@ class Library extends Component {\n</p>\n))}\n</CardBody>\n- </Card>\n+ </Card> */}\n</Col>\n</Row>\n</Col>\n@@ -237,10 +233,6 @@ const QUERY = gql`\ntype\ntitle\nimage\n- seeAlso {\n- id\n- title\n- }\ncategories\n}\n}\n",
        "chatgpt_cot": "Add button to unfollow cube if user is logged in and cannot edit the cube."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -287,7 +287,7 @@ const findShortestKSpanningTree = (nodes, distanceFunc, k) => {\nthrow new Error('Not enough nodes to make a K-set.');\n}\n}\n- const length = distance + closestI[iInd][0] + closestJ[jInd][0];\n+ const length = distance + (iInd >= 0 ? closestI[iInd][0] : 0) + (jInd >= 0 ? closestJ[jInd][0] : 0);\nif (length < bestDistance) {\nbestNodes = seen;\nbestDistance = length;\n@@ -322,7 +322,7 @@ export async function buildDeck(cards, picked, synergies, initialState, basics)\nside = [...outOfColor];\n}\n- let chosen;\n+ let chosen = [];\nif (synergies) {\nconst distanceFunc = (c1, c2) => 1 - similarity(synergies[c1.index], synergies[c2.index]); // + (4800 - c1.rating - c2.rating) / 2400;\n// const distanceFunc = (c1, c2) => {\n",
        "org_msg": "Fix edge cases in spanning tree implementation.",
        "sim_msg": "Add avatar-based object ui mesh hover support",
        "sim_diff": "diff --git a/editor.js b/editor.js @@ -2647,6 +2647,28 @@ Promise.all([\nif (objectUiMeshes.length > 0) {\nlet closestObjectUiMesh;\nif (!weaponsManager.getMouseSelectedObject() && !weaponsManager.contextMenu) {\n+ const maxDistance = 8;\n+ if (!rigManager.localRigMatrixEnabled) {\n+ rigManager.localRigMatrix.decompose(\n+ localVector,\n+ localQuaternion,\n+ localVector2\n+ );\n+ const distanceSpecs = objectUiMeshes.map(objectUiMesh => {\n+ let distance = objectUiMesh.position.distanceTo(localVector);\n+ if (distance > maxDistance) {\n+ distance = Infinity;\n+ }\n+ return {\n+ distance,\n+ objectUiMesh,\n+ };\n+ }).sort((a, b) => a.distance - b.distance);\n+ const closestDistanceSpec = distanceSpecs[0];\n+ if (isFinite(closestDistanceSpec.distance)) {\n+ closestObjectUiMesh = closestDistanceSpec.objectUiMesh;\n+ }\n+ } else {\nlocalRay.set(\ncamera.position,\nlocalVector.set(0, 0, -1)\n@@ -2654,7 +2676,7 @@ Promise.all([\n);\nconst distanceSpecs = objectUiMeshes.map(objectUiMesh => {\nconst distance =\n- objectUiMesh.position.distanceTo(camera.position) < 8 ?\n+ objectUiMesh.position.distanceTo(camera.position) < maxDistance ?\nlocalRay.distanceToPoint(objectUiMesh.position)\n:\nInfinity;\n@@ -2663,7 +2685,11 @@ Promise.all([\nobjectUiMesh,\n};\n}).sort((a, b) => a.distance - b.distance);\n- closestObjectUiMesh = distanceSpecs[0].objectUiMesh;\n+ const closestDistanceSpec = distanceSpecs[0];\n+ if (isFinite(closestDistanceSpec.distance)) {\n+ closestObjectUiMesh = closestDistanceSpec.objectUiMesh;\n+ }\n+ }\n} else {\nclosestObjectUiMesh = null;\n}\n",
        "chatgpt_cot": "Fix calculation error in findShortestKSpanningTree and initialize chosen as an empty array in buildDeck function."
    },
    {
        "org_diff": "diff --git a/src/components/CubeOverviewModal.js b/src/components/CubeOverviewModal.js @@ -362,9 +362,10 @@ class CubeOverviewModal extends Component {\n<TagInput tags={tags} {...this.tagActions} />\n<br />\n- <h6>Custom ID</h6>\n+ <h6>Short ID</h6>\n<input\nclassName=\"form-control\"\n+ id=\"shortID\"\nname=\"shortID\"\ntype=\"text\"\nvalue={cube.shortID}\n@@ -372,6 +373,7 @@ class CubeOverviewModal extends Component {\nrequired={true}\nplaceholder=\"Give this cube an easy to remember URL.\"\n/>\n+ <FormText>Changing the short ID may break existing links to your cube.</FormText>\n<br />\n</ModalBody>\n<ModalFooter>\n",
        "org_msg": "updated overview modal",
        "sim_msg": "Increased the spacing between the two main PDP sections to match the design spec.",
        "sim_diff": "diff --git a/src/components/ProductDetail/ProductDetail.js b/src/components/ProductDetail/ProductDetail.js @@ -227,7 +227,7 @@ class ProductDetail extends Component {\nreturn (\n<Fragment>\n- <Grid container spacing={theme.spacing.unit * 3}>\n+ <Grid container spacing={theme.spacing.unit * 5}>\n<Hidden xsDown>\n<Grid item className={classes.breadcrumbGrid} xs={12}>\n<Breadcrumbs isPDP={true} tag={tag} tags={tags} product={product} />\n",
        "chatgpt_cot": "Change CubeOverviewModal custom ID to short ID, add warning about changing short ID."
    },
    {
        "org_diff": "diff --git a/nearley/cardFilters.ne b/nearley/cardFilters.ne @@ -151,7 +151,7 @@ eloCondition -> \"elo\"i integerOpValue {% ([, valuePred]) => genericCondition('el\nnameCondition -> (\"n\"i | \"name\"i) stringOpValue {% ([, valuePred]) => genericCondition('name_lower', cardNameLower, valuePred) %}\n| stringValue {% ([value]) => genericCondition('name_lower', cardNameLower, (fieldValue) => fieldValue.includes(value.toLowerCase())) %}\n-manaCostCondition -> (\"mana\"i | \"cost\"i) manaCostOpValue {% ([, valuePred]) => genericCondition('parsed_cost', cardCost, valuePred) %}\n+manaCostCondition -> (\"mana\"i | \"cost\"i | \"m\"i) manaCostOpValue {% ([, valuePred]) => genericCondition('parsed_cost', cardCost, valuePred) %}\ncastableCostCondition -> (\"cw\"i | \"cast\"i | \"castable\"i | \"castwith\"i | \"castablewith\"i) castableCostOpValue {% ([, valuePred]) => genericCondition('parsed_cost', cardCost, valuePred) %}\n",
        "org_msg": "Added 'm:' syntax for mana cost filter",
        "sim_msg": "refactor: includeFilter://h:name",
        "sim_diff": "diff --git a/lib/rules/rules.js b/lib/rules/rules.js @@ -1143,10 +1143,7 @@ function resolveMatchFilter(list) {\n}\n} else {\nvar index = value.indexOf('=');\n- if (index === -1 || !index || index === value.length - 1) {\n- return;\n- }\n- var key = value.substring(0, index).toLowerCase();\n+ var key = (index === -1 ? value : value.substring(0, index)).toLowerCase();\nvar lastIndex = key.length - 1;\nif (key[lastIndex] === '!') {\nkey = key.substring(0, lastIndex);\n@@ -1155,7 +1152,7 @@ function resolveMatchFilter(list) {\n}\nnot = !not;\n}\n- orgVal = value.substring(index + 1);\n+ orgVal = index === -1 ? '' : value.substring(index + 1);\nvalue = { key: key };\nif (pattern = util.toRegExp(orgVal)) {\nvalue.hPattern = pattern;\n@@ -1316,9 +1313,18 @@ function matchFilter(url, filter, req) {\nvar filterHeader = function(headers, filterVal) {\nif (!filterVal || !headers) {\n+ return true;\n+ }\n+ var value = headers[filterVal.key];\n+ if (value == null) {\n+ result = false;\n+ return;\n+ }\n+ if (!value) {\n+ result = !filterVal.value;\nreturn;\n}\n- var value = String(headers[filterVal.key] || '');\n+ value = String(value);\nif (filterVal.hPattern) {\nresult = filterVal.hPattern.test(value);\n} else {\n",
        "chatgpt_cot": "Add support for shorthand \"m\" for mana cost condition in cardFilters.ne. This modification expands the options for specifying mana cost conditions in the cardFilters.ne file."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -111,7 +111,7 @@ router.post('/add', ensureAuth, async (req, res) => {\ncube.image_name = details.full_name;\ncube.image_artist = details.artist;\ncube.description = 'This is a brand new cube!';\n- cube.ownerName = user.username;\n+ cube.owner_name = user.username;\ncube.date_updated = Date.now();\ncube.updated_string = cube.date_updated.toLocaleString('en-US');\ncube = setCubeType(cube, carddb);\n@@ -160,7 +160,7 @@ router.get('/clone/:id', async (req, res) => {\ncube.image_name = source.image_name;\ncube.image_artist = source.image_artist;\ncube.description = source.description;\n- cube.ownerName = user.username;\n+ cube.owner_name = user.username;\ncube.date_updated = Date.now();\ncube.updated_string = cube.date_updated.toLocaleString('en-US');\ncube = setCubeType(cube, carddb);\n@@ -1035,7 +1035,7 @@ router.post('/importcubetutor/:id', ensureAuth, async (req, res) => {\nblogpost.cube = cube._id;\nblogpost.dev = 'false';\nblogpost.date_formatted = blogpost.date.toLocaleString('en-US');\n- blogpost.username = cube.ownerName;\n+ blogpost.username = cube.owner_name;\nblogpost.cubename = cube.name;\nif (missing.length === 0) {\n@@ -1213,7 +1213,7 @@ async function bulkUploadCSV(req, res, cards, cube) {\nblogpost.cube = cube._id;\nblogpost.dev = 'false';\nblogpost.date_formatted = blogpost.date.toLocaleString('en-US');\n- blogpost.username = cube.ownerName;\n+ blogpost.username = cube.owner_name;\nblogpost.cubename = cube.name;\n//\n@@ -1326,7 +1326,7 @@ async function bulkUpload(req, res, list, cube) {\nblogpost.cube = cube._id;\nblogpost.dev = 'false';\nblogpost.date_formatted = blogpost.date.toLocaleString('en-US');\n- blogpost.username = cube.ownerName;\n+ blogpost.username = cube.owner_name;\nblogpost.cubename = cube.name;\nif (missing.length > 0) {\n@@ -1707,7 +1707,7 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\nblogpost.cube = cube._id;\nblogpost.dev = 'false';\nblogpost.date_formatted = blogpost.date.toLocaleString('en-US');\n- blogpost.username = cube.ownerName;\n+ blogpost.username = cube.owner_name;\nblogpost.cubename = cube.name;\ncube = setCubeType(cube, carddb);\n",
        "org_msg": "Fix ownerName issue.",
        "sim_msg": "add routes for addressBook and orders on profile",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -9,7 +9,8 @@ routes\n.add(\"login\", \"/login\", \"login\")\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:slugOrId\", \"product\")\n.add(\"product\", \"/product/:slugOrId/:variantId?\", \"product\")\n- .add(\"addressBook\", \"/profile/address\", \"profileAddressBook\")\n+ .add(\"profileAddressBook\", \"/profile/address\", \"profile\")\n+ .add(\"profileOrders\", \"/profile/orders\", \"profile\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"productGrid\")\n.add(\"tag\", \"/tag/:slug\", \"tag\");\n",
        "chatgpt_cot": "Refactor ownerName to owner_name for consistency in cube_routes.js to improve code readability and maintainability."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1611,7 +1611,9 @@ router.post('/startsealed/:id', body('packs').toInt({ min: 1, max: 16 }), body('\n}\nif (cube.cards.length < numCards) {\n- throw new Error('Could not create sealed pool: not enough cards');\n+ // This is a 4XX error, not a 5XX error\n+ req.flash('danger', 'Could not create sealed pool: not enough cards.');\n+ return res.redirect(`/cube/playtest/${req.params.id}`);\n}\nconst source = shuffle(cube.cards).slice(0, numCards);\n",
        "org_msg": "Make starting a draft with too small card pool 4xx error",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "Refactor error handling in cube_routes.js to redirect with flash message if not enough cards for sealed pool."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3457,7 +3457,7 @@ router.post('/resize/:id/:size', async (req, res) => {\n// we cut from cube\nfor (const card of list) {\nfor (let i = 0; i < cube.cards.length; i++) {\n- if (cube.cards[i].cardID.equals(card.cardID)) {\n+ if (cube.cards[i].cardID === card.cardID) {\ncube.cards.splice(i, 1);\ni = cube.cards.length;\n}\n",
        "org_msg": "Fix cube shrink",
        "sim_msg": "Clean up needed coords tracking",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -1627,19 +1627,13 @@ const _makeChunkMesh = (seedString, parcelSize, subparcelSize) => {\nmesh.updatePackages = () => {\npackagesNeedUpdate = true;\n};\n- let neededCoords = Array((chunkDistance*2+1)**3);\n- let lastNeededCoords = Array((chunkDistance*2+1)**3);\n+ let neededCoords = [];\n+ let lastNeededCoords = [];\nlet neededCoordIndices = {};\nlet lastNeededCoordIndices = {};\nconst addedCoords = [];\nconst removedCoords = [];\n- [neededCoords, lastNeededCoords].forEach(neededCoords => {\n- for (let i = 0; i < neededCoords.length; i++) {\n- const v = new THREE.Vector3();\n- v.index = 0;\n- neededCoords[i] = v;\n- }\n- });\n+ let neededCoordsInitialized = false;\nconst _updateCurrentCoord = position => {\nlocalVector3.copy(position)\n.applyMatrix4(localMatrix2.getInverse(mesh.matrixWorld));\n@@ -1664,7 +1658,12 @@ const _makeChunkMesh = (seedString, parcelSize, subparcelSize) => {\nfor (let dz = -chunkDistance; dz <= chunkDistance; dz++) {\nconst az = dz + currentCoord.z;\n- const neededCoord = neededCoords[i++];\n+ const j = i++;\n+ let neededCoord = neededCoords[j];\n+ if (!neededCoord) {\n+ neededCoord = new THREE.Vector3();\n+ neededCoords[j] = neededCoord;\n+ }\nneededCoord.x = ax;\nneededCoord.y = ay;\nneededCoord.z = az;\n@@ -1683,6 +1682,7 @@ const _makeChunkMesh = (seedString, parcelSize, subparcelSize) => {\nremovedCoords.push(lastNeededCoord);\n}\n}\n+ neededCoordsInitialized = true;\nhadCoords = true;\n}\n};\n",
        "chatgpt_cot": "Fix comparison method in resizing cards loop in cube_routes.js. Replaced \".equals\" with \"===\" for cardID comparison for proper functionality."
    },
    {
        "org_diff": "diff --git a/src/components/DeckPreview.js b/src/components/DeckPreview.js @@ -9,6 +9,10 @@ const DeckPreview = ({ deck }) => {\nconst { date } = deck;\nlet { name } = deck.seats[0];\n+\n+ if (!name) {\n+ name = 'Untitled Deck';\n+ }\nif (name.length > maxLength) {\nname = `${name.slice(0, maxLength - 3)}...`;\n}\n",
        "org_msg": "Fix empty deck name issue",
        "sim_msg": "Fix onHover/tooltip flickering",
        "sim_diff": "diff --git a/modules/core/src/lib/deck.js b/modules/core/src/lib/deck.js @@ -530,7 +530,7 @@ export default class Deck {\nif (_pickRequest.event) {\n// Perform picking\nconst {result, emptyInfo} = this._pick('pickObject', 'pickObject Time', _pickRequest);\n- const pickedInfo = result[0] || emptyInfo;\n+ const pickedInfo = result.find(info => info.picked) || emptyInfo;\n// Update tooltip\nif (this.props.getTooltip) {\n",
        "chatgpt_cot": "Add logic to handle untitled decks and truncate long deck names in DeckPreview component. Fix potential display issues."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2228,7 +2228,13 @@ router.post('/api/updatecard/:id', function(req, res) {\n}\nif (!found && cardsAreEquivalent(card, req.body.src, carddb)) {\nfound = true;\n- cube.cards[index] = req.body.updated;\n+ var updated = req.body.updated;\n+ Object.keys(Cube.schema.paths.cards.schema.paths).forEach(function(key) {\n+ if (!updated.hasOwnProperty(key)) {\n+ updated[key] = card[key];\n+ }\n+ });\n+ cube.cards[index] = updated;\n}\n});\nif (!found) {\n",
        "org_msg": "allow card update objects not to contain all card fields",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "\"Add new properties to updated card in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/src/components/MagicMarkdown.js b/src/components/MagicMarkdown.js @@ -308,7 +308,7 @@ const OuterMarkdown = ({ markdown, limited }) => {\n}\nconst markdownStr = markdown.toString();\n- const split = markdownStr.split(/(<<.+>>|(?:^> .{0,}\\r?\\n)+|^>>>[^<>]+<<<)/gm);\n+ const split = markdownStr.split(/(<<.+>>|(?:^>(?: .*)?\\r?\\n)+|^>>>[^<>]+<<<)/gm);\nconsole.log('####################\\nOuter Markdown split:');\nconsole.log(split);\nreturn (\n",
        "org_msg": "fixed empty continuing quote",
        "sim_msg": "[docs] Fix GitHub source links in the demo toolbar",
        "sim_diff": "diff --git a/docs/src/modules/components/MarkdownDocs.js b/docs/src/modules/components/MarkdownDocs.js @@ -82,6 +82,10 @@ function MarkdownDocs(props) {\n);\n}\n+ const splitLocationBySlash = location.split('/');\n+ splitLocationBySlash.pop();\n+ const fileNameWithLocation = `${splitLocationBySlash.join('/')}/${name}`;\n+\nreturn (\n<Demo\nkey={index}\n@@ -94,7 +98,7 @@ function MarkdownDocs(props) {\n}}\ndisableAd={disableAd}\ndemoOptions={renderedMarkdownOrDemo}\n- githubLocation={`${process.env.SOURCE_CODE_REPO}/blob/v${process.env.LIB_VERSION}/docs/src/${name}`}\n+ githubLocation={`${process.env.SOURCE_CODE_REPO}/blob/v${process.env.LIB_VERSION}${fileNameWithLocation}`}\n/>\n);\n})}\n",
        "chatgpt_cot": "\"Update split regex to handle additional markdown patterns for MagicMarkdown component\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1817,8 +1817,8 @@ router.post(\n'/startdraft/:id',\nbody('id').toInt(),\nbody('seats').toInt({ min: 2, max: 16 }),\n- body('packs').toInt(),\n- body('cards').toInt(),\n+ body('packs').toInt({ min: 1, max: 36 }),\n+ body('cards').toInt({ min: 1, max: 90 }),\nasync (req, res) => {\ntry {\nconst cube = await Cube.findOne(\n",
        "org_msg": "Enforce verifications on packs and cards for drafts.",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "\"Update validation for packs and cards in startdraft route to ensure minimum and maximum values are enforced.\""
    },
    {
        "org_diff": "diff --git a/src/util/draftutil.js b/src/util/draftutil.js @@ -65,11 +65,11 @@ function standardDraft(cards, probabilistic = false) {\nthrow new Error('Unable to create draft: not enough cards.');\n}\n// remove a random card\n- return { card: cards.pop(), messages: '' };\n+ return { card: cards.pop(), messages: [] };\n};\n}\n-function standDraftAsfan(cards) {\n+function standardDraftAsfan(cards) {\nif (cards.length === 0) {\nthrow new Error('Unable to create draft asfan: not enough cards.');\n}\n@@ -77,7 +77,7 @@ function standDraftAsfan(cards) {\nconst poolWeight = 1 / poolCount;\nreturn (cardFilters) => {\ncards.forEach((card) => (card.asfan += poolWeight));\n- return { card: true, messages: '' };\n+ return { card: true, messages: [] };\n};\n}\n@@ -132,7 +132,7 @@ function customDraftAsfan(cards, duplicates = false) {\n// each filter is an array of parsed filter tokens, we choose one randomly\nlet validCardGroups = [];\nfor (let i = 0; i < cardFilters.length; i++) {\n- let validCards = matchingCards(cards, cardFilter[i]);\n+ let validCards = matchingCards(cards, cardFilters[i]);\nif (!duplicates) {\nvalidCards = validCards.filter((card) => card.asfan < 1);\n}\n@@ -156,7 +156,7 @@ function customDraftAsfan(cards, duplicates = false) {\nvalidCards.forEach((card) => (card.asfan += (1 - card.asfan) * poolWeight));\n}\n});\n- return { card: true, messages: messages };\n+ return { card: true, messages: [] };\n};\n}\n",
        "org_msg": "Fix to asfan calculations in draftutils.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Refactor draftutil.js to fix method name typo, change return type of messages to array, and correct variable name in customDraftAsfan."
    },
    {
        "org_diff": "diff --git a/views/info/filters.pug b/views/info/filters.pug @@ -21,7 +21,7 @@ block content\ntr\ntd(scope=\"col\") #[code t:instant t:tribal]\ntd(scope=\"col\") Cards that are both instants and tribal.\n- p You can use quotes to ignore spaces.\n+ p You can use quotes to require an exact match. To match names in quotes, you must use the #[code name:] operator.\np #[strong Examples:]\ntable.table\ntr\n@@ -55,8 +55,8 @@ block content\ntd(scope=\"col\") #[code -o:draw]\ntd(scope=\"col\") Cards which do not have draw in their oracle text.\ntr\n- td(scope=\"col\") #[code -bob]\n- td(scope=\"col\") Cards which do not have bob in their names.\n+ td(scope=\"col\") #[code -t:creature]\n+ td(scope=\"col\") Cards which are not creatures.\n.card\n#color-syntax.card-header(data-toggle=\"collapse\" data-target=\"#collapseColor\" aria-expanded=\"true\" aria-controls=\"collapseColor\")\nbutton(class=\"btn btn-link\" type=\"button\")\n@@ -225,14 +225,14 @@ block content\nbutton(class=\"btn btn-link\" type=\"button\")\nh5 Price\n#collapsePrice.collapse(aria-labelledby=\"collapsePrice-syntax\" data-parent=\"#syntax-accordion\")\n- p You can use #[code price:], #[code priceNormal:], or #[code priceFoil:] to filter cards by price.\n+ p You can use #[code price:], #[code priceNormal:], or #[code priceFoil:] to filter cards by price. When filtering in individual cubes, #[code price:] uses the printing specified for the cube.\np #[strong Examples:]\ntable.table\ntr\ntd(scope=\"col\") #[code price>10.5]\ntd(scope=\"col\") All cards in a cube whose specified printing has a price over $10.50.\ntr\n- td(scope=\"col\") #[code priceFoil<10 OR price<10]\n+ td(scope=\"col\") #[code priceFoil<10 OR priceNormal<10]\ntd(scope=\"col\") All cards with a price under $10.\n.card\n#collapseMiscellaneous-syntax.card-header(data-toggle=\"collapse\" data-target=\"#collapseMiscellaneous\" aria-expanded=\"true\" aria-controls=\"collapseMiscellaneous\")\n",
        "org_msg": "More filters and example updates",
        "sim_msg": "typings: sync with rambda",
        "sim_diff": "diff --git a/index.d.ts b/index.d.ts @@ -590,8 +590,8 @@ add(a: number, b: number): number\nnone<T>(predicate: Pred<T>): (list: T[]) => boolean\nnot<T>(value: T): boolean\n- nth<T>(n: number, list: Array<T>): T | undefined;\n- nth(n: number): <T>(list: Array<T>) => T | undefined;\n+ nth<T>(n: number, list: T[]): T | undefined;\n+ nth(n: number): <T>(list: T[]) => T | undefined;\nomit<T, K extends Array<keyof T>>(names: K, obj: T): Omit<T, K[number]>\nomit<T, K extends keyof T>(name: K, obj: T): Omit<T, K>\n@@ -753,8 +753,11 @@ add(a: number, b: number): number\nwithout<T>(listOfWithouts: T[], input: T[]): T[]\nwithout<T>(listOfWithouts: T[]): (input: T[]) => T[]\n- zipObj<T>(keys: ReadonlyArray<string>, values: ReadonlyArray<T>): { [index: string]: T }\n- zipObj(keys: ReadonlyArray<string>): <T>(values: ReadonlyArray<T>) => { [index: string]: T } }\n+ zip<K, V>(list1: K[], list2: V[]): Array<KeyValuePair<K, V>>\n+ zip<K>(list1: K[]): <V>(list2: V[]) => Array<KeyValuePair<K, V>>\n+\n+ zipObj<T>(keys: string[], values: T[]): { [index: string]: T }\n+ zipObj(keys: string[]): <T>(values: T[]) => { [index: string]: T } }\n}\ndeclare let Rambdax: R.X\n",
        "chatgpt_cot": "Add more filtering options to the cards, fix the filter descriptions, and correct the examples to provide accurate information for filtering cards."
    },
    {
        "org_diff": "diff --git a/src/markdown/symbols/index.js b/src/markdown/symbols/index.js @@ -5,12 +5,12 @@ import { add } from 'markdown/utils';\nexport default symbols;\nfunction symbols(options) {\n- if (!options.allowed) {\n+ if (!options?.allowed) {\nconsole.warn('[remark-symbols] Warning: no symbols specified!');\n}\nconst data = this.data();\n- const valid = options.allowed || '';\n+ const valid = options?.allowed || '';\nadd(data, 'micromarkExtensions', syntax(valid));\nadd(data, 'fromMarkdownExtensions', fromMarkdown);\n}\n\\ No newline at end of file\n",
        "org_msg": "added nullish check",
        "sim_msg": "Export pools and lanes.",
        "sim_diff": "diff --git a/src/components/index.js b/src/components/index.js @@ -15,6 +15,8 @@ import {\ntask,\nscriptTask,\ntextAnnotation,\n+ pool,\n+ poolLane,\n} from './nodes/index';\nexport {\n@@ -30,4 +32,6 @@ export {\ntask,\nscriptTask,\ntextAnnotation,\n+ pool,\n+ poolLane,\n};\n",
        "chatgpt_cot": "Fix potential null pointer exception in symbols/index.js. Modified condition to use optional chaining to check for null before accessing property."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3236,6 +3236,11 @@ router.get('/deckbuilder/:id', async (req, res) => {\nrouter.get('/deck/:id', async (req, res) => {\ntry {\n+ if (req.params.id && req.params.id !== 'null') {\n+ req.flash('danger', 'Deck not found');\n+ return res.status(404).render('misc/404', {});\n+ }\n+\nconst deck = await Deck.findById(req.params.id).lean();\nif (!deck) {\n",
        "org_msg": "Fix erraneous crash with invalid deck id",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "Add validation for deck id in deck route to handle null value, return 404 if id is null."
    },
    {
        "org_diff": "diff --git a/webpack.common.js b/webpack.common.js @@ -51,10 +51,10 @@ const clientConfig = merge(config, {\nconst serverConfig = merge(config, {\ntarget: 'node',\nentry: {\n- CubeListPage: './components/CubeListPage.js',\n- CubePlaytestPage: './components/CubePlaytestPage.js',\n- DashboardPage: './components/DashboardPage.js',\n- DraftView: './components/DraftView.js',\n+ CubeListPage: './src/components/CubeListPage.js',\n+ CubePlaytestPage: './src/components/CubePlaytestPage.js',\n+ DashboardPage: './src/components/DashboardPage.js',\n+ DraftView: './src/components/DraftView.js',\n},\noutput: {\nfilename: '[name].js',\n",
        "org_msg": "Fix webpack config.",
        "sim_msg": "Fiddle build fix",
        "sim_diff": "diff --git a/fiddle/webpack.config.js b/fiddle/webpack.config.js @@ -42,8 +42,6 @@ var common = {\n},\nmodules: false,\nloose: true,\n- corejs: 3,\n- useBuiltIns: \"usage\",\ncx: {\nimports: true\n}\n",
        "chatgpt_cot": "Update file paths for components in webpack config to src folder."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js import { alphaCompare, fromEntries } from 'utils/Util';\nimport { cardDevotion, cardPriceEur, cardTix, cardCmc } from 'utils/Card';\n-function ISODateToYYYYMMDD(dateString) {\n- const locale = 'en-US';\n-\n- if (dateString === undefined) {\n- return undefined;\n- }\n-\n- return new Date(dateString).toLocaleDateString(locale);\n-}\n-\n-function removeAdjacentDuplicates(arr) {\n- return arr.filter((x, i) => i === 0 || x !== arr[i - 1]);\n-}\n-\n-export function GetColorIdentity(colors) {\n- if (colors.length === 0) {\n- return 'Colorless';\n- }\n- if (colors.length > 1) {\n- return 'Multicolored';\n- }\n- if (colors.length === 1) {\n- switch (colors[0]) {\n- case 'W':\n- return 'White';\n- case 'U':\n- return 'Blue';\n- case 'B':\n- return 'Black';\n- case 'R':\n- return 'Red';\n- case 'G':\n- return 'Green';\n- case 'C':\n- return 'Colorless';\n- default:\n- return 'None';\n- }\n- }\n-}\n-\nconst COLOR_MAP = {\nW: 'White',\nU: 'Blue',\n@@ -85,6 +44,38 @@ const GUILDS = ['Azorius', 'Dimir', 'Rakdos', 'Gruul', 'Selesnya', 'Orzhov', 'Iz\nconst SHARDS = ['Bant', 'Esper', 'Grixis', 'Jund', 'Naya', 'Abzan', 'Jeskai', 'Sultai', 'Mardu', 'Temur'];\nconst FOUR_AND_FIVE_COLOR = ['4c', '5c'];\n+function ISODateToYYYYMMDD(dateString) {\n+ const locale = 'en-US';\n+\n+ if (dateString === undefined) {\n+ return undefined;\n+ }\n+\n+ return new Date(dateString).toLocaleDateString(locale);\n+}\n+\n+function removeAdjacentDuplicates(arr) {\n+ return arr.filter((x, i) => i === 0 || x !== arr[i - 1]);\n+}\n+\n+export function GetColorIdentity(colors) {\n+ if (colors.length === 0) {\n+ return 'Colorless';\n+ }\n+ if (colors.length === 1) {\n+ if (Object.keys(COLOR_MAP).includes(colors[0])) {\n+ return COLOR_MAP[colors[0]];\n+ }\n+ if (colors[0] === 'C') {\n+ return 'Colorless';\n+ }\n+ return 'None';\n+ }\n+ if (colors.length > 1) {\n+ return 'Multicolored';\n+ }\n+}\n+\nexport function GetColorCategory(type, colors, full) {\nif (type.toLowerCase().includes('land')) {\nreturn 'Lands';\n@@ -92,6 +83,15 @@ export function GetColorCategory(type, colors, full) {\nif (colors.length === 0) {\nreturn 'Colorless';\n}\n+ if (colors.length === 1) {\n+ if (Object.keys(COLOR_MAP).includes(colors[0])) {\n+ return COLOR_MAP[colors[0]];\n+ }\n+ if (colors[0] === 'C') {\n+ return 'Colorless';\n+ }\n+ return 'None';\n+ }\nif (colors.length > 1) {\nif (full) {\nconst ordered = [...'WUBRG'].filter((c) => colors.includes(c)).join('');\n@@ -111,24 +111,6 @@ export function GetColorCategory(type, colors, full) {\nreturn 'Multicolored';\n}\n}\n- if (colors.length === 1) {\n- switch (colors[0]) {\n- case 'W':\n- return 'White';\n- case 'U':\n- return 'Blue';\n- case 'B':\n- return 'Black';\n- case 'R':\n- return 'Red';\n- case 'G':\n- return 'Green';\n- case 'C':\n- return 'Colorless';\n- default:\n- return 'None';\n- }\n- }\n}\nexport function getSorts() {\n",
        "org_msg": "Make use of COLOR_MAP instead of switch statements",
        "sim_msg": "Refactor flattenColorPalette util function",
        "sim_diff": "diff --git a/src/util/flattenColorPalette.js b/src/util/flattenColorPalette.js -import _ from 'lodash'\n+const flattenColorPalette = (colors) =>\n+ Object.assign(\n+ ...Object.entries(colors).flatMap(([color, values]) =>\n+ typeof values == 'object'\n+ ? Object.entries(flattenColorPalette(values)).map(([number, hex]) => ({\n+ [color + (number === 'DEFAULT' ? '' : `-${number}`)]: hex,\n+ }))\n+ : [{ [`${color}`]: values }]\n+ )\n+ )\n-export default function flattenColorPalette(colors) {\n- const result = _(colors)\n- .flatMap((color, name) => {\n- if (_.isFunction(color) || !_.isObject(color)) {\n- return [[name, color]]\n- }\n-\n- return _.map(flattenColorPalette(color), (value, key) => {\n- const suffix = key === 'DEFAULT' ? '' : `-${key}`\n- return [`${name}${suffix}`, value]\n- })\n- })\n- .fromPairs()\n- .value()\n-\n- return result\n-}\n+export default flattenColorPalette\n",
        "chatgpt_cot": "\"Refactor Sort.js: removed ISODateToYYYYMMDD and removeAdjacentDuplicates, added GetColorIdentity and GetColorCategory functions with color mapping and handling, and updated GetColorCategory to handle different color lengths.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -975,6 +975,9 @@ router.get('/samplepack/:id/:seed', async (req, res) => {\npack: pack.pack,\n};\n+ const width = Math.floor(Math.sqrt((5 / 3) * pack.pack.length));\n+ const height = Math.ceil(pack.pack.length / width);\n+\nreturn res.render('cube/cube_samplepack', {\ncube,\ntitle: `${abbreviate(cube.name)} - Sample Pack`,\n@@ -985,8 +988,8 @@ router.get('/samplepack/:id/:seed', async (req, res) => {\n`A sample pack from ${cube.name}`,\n`https://cubecobra.com/cube/samplepackimage/${req.params.id}/${pack.seed}.png`,\n`https://cubecobra.com/cube/samplepack/${req.params.id}/${pack.seed}`,\n- CARD_WIDTH * 5,\n- CARD_HEIGHT * 3,\n+ CARD_WIDTH * width,\n+ CARD_HEIGHT * height,\n),\nloginCallback: `/cube/samplepack/${req.params.id}`,\n});\n",
        "org_msg": "Fix metadata for p1p1.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Add dynamic calculation for sample pack image dimensions based on pack length to improve display consistency."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -174,6 +174,11 @@ router.get('/card/:id', async (req, res) => {\nid = scryfall.oracle_id;\n}\n+ if (!carddb.oracleToId[id]) {\n+ req.flash('danger', `Card with id ${id} not found.`);\n+ return res.redirect('/404');\n+ }\n+\n// otherwise just go to this ID.\nconst card = carddb.getMostReasonableById(carddb.oracleToId[id][0]);\nconst data = await CardHistory.findOne({ oracleId: id });\n",
        "org_msg": "Fix erraneous crash with invalid card id",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Add error handling for card not found scenario in card route. Fixes redirection issue and displays appropriate flash message."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1836,6 +1836,7 @@ router.get('/deck/download/mtgo/:id/:seat', async (req, res) => {\n}\n}\nfor (const [key, value] of Object.entries(side)) {\n+ const name = key.replace(' // ', '/');\nres.write(`${value} ${key}\\r\\n`);\n}\nreturn res.end();\n",
        "org_msg": "Fix mtgo export for sideboards.",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "Add name formatting for deck download side entries in cube_routes."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -546,7 +546,7 @@ const methods = {\nconst draft = createDraft(format, cube.cards, 0, 1, { username: 'Anonymous' }, seed);\nreturn {\nseed,\n- pack: draft.unopenedPacks[0][0].map((card) => card.details),\n+ pack: draft.initial_state[0][0],\n};\n},\ngenerateShortId,\n",
        "org_msg": "Fix p1p1 error",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "\"Refactor pack generation in cubefn.js for better performance and readability\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cards.test.js b/__tests__/serverjs/cards.test.js const carddb = require(\"../../serverjs/cards\");\n+const fixturesPath = \"__tests__/fixtures\";\n+const firstLetterCount = 21;\n+const fixtureCardCount = 100;\nbeforeEach(() => {});\nafterEach(() => {});\ntest(\"initializeCardDb loads files properly\", () => {\n- expect.assertions(1);\n- var fixtureCardCount = 100;\n- var firstLetterCount = 21;\n- var promise = carddb.initializeCardDb(\"__tests__/fixtures\");\n+ expect.assertions(6);\n+ var promise = carddb.initializeCardDb(fixturesPath);\nreturn promise.then(function() {\nexpect(Object.keys(carddb.cardtree).length).toBe(firstLetterCount);\nexpect(Object.keys(carddb.imagedict).length).toBe(fixtureCardCount);\nexpect(Object.keys(carddb.cardimages).length).toBe(fixtureCardCount);\nexpect(carddb.cardnames.length).toBe(fixtureCardCount);\n- expect(carddb.full_names.length).toBe(fixtureCardCount);\n+ expect(Object.keys(carddb.full_names).length).toBe(firstLetterCount);\nexpect(Object.keys(carddb.nameToId).length).toBe(fixtureCardCount);\n});\n});\n+\n+test(\"cardFromId\", () => {});\n+test(\"getCardDetails\", () => {});\n+test(\"normalizedName\", () => {});\n+test(\"allIds\", () => {});\n+\n+test(\"loadJSONFile loads a JSON file into the correct attribute\", () => {\n+ expect.assertions(1);\n+ const attribute = \"testAttribute\";\n+ return carddb.loadJSONFile(fixturesPath + \"/names.json\", attribute).then(function() {\n+ expect(carddb[attribute].length).toBe(fixtureCardCount);\n+ });\n+});\n+\n+test(\"getPlaceholderCard\", () => {});\n\\ No newline at end of file\n",
        "org_msg": "stub tests, implement loadJSONFile test",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add fixtures path, fix compilation issue, and add new test cases to cards.test.js for proper file loading and attribute handling."
    },
    {
        "org_diff": "diff --git a/src/layouts/CubeLayout.js b/src/layouts/CubeLayout.js import React, { useContext } from 'react';\n+import PropTypes from 'prop-types';\nimport { NavItem, NavLink } from 'reactstrap';\n@@ -16,14 +17,24 @@ const CubeNavItem = ({ link, activeLink, children }) => {\n);\n};\n+CubeNavItem.propTypes = {\n+ link: PropTypes.string.isRequired,\n+ activeLink: PropTypes.string.isRequired,\n+ children: PropTypes.node,\n+}\n+\n+CubeNavItem.defaultProps = {\n+ children: false,\n+}\n+\nconst CubeLayout = ({ cube, cubeID, canEdit, activeLink, children }) => {\nconst categories =\n- cube.categoryPrefixes && cube.categoryPrefixes.length > 0 ? cube.categoryPrefixes.join(' ') + ' ' : '';\n+ cube.categoryPrefixes && cube.categoryPrefixes.length > 0 ? `${cube.categoryPrefixes.join(' ')} ` : '';\nconst subtitle = cube.overrideCategory\n? `${cube.card_count} Card ${categories}${cube.categoryOverride} Cube`\n: `${cube.card_count} Card ${cube.type} Cube`;\nreturn (\n- <CubeContextProvider initialCube={cube.cards} cubeID={cubeID} canEdit={canEdit}>\n+ <CubeContextProvider initialCube={cube.cards || []} cubeID={cubeID} canEdit={canEdit}>\n<link rel=\"stylesheet\" href=\"/css/autocomplete.css\" />\n<ul className=\"cubenav nav nav-tabs nav-fill d-flex flex-column flex-sm-row pt-2\">\n<div className=\"nav-item px-lg-4 px-3 text-sm-left text-center font-weight-boldish mt-auto mb-2\">\n@@ -53,4 +64,25 @@ const CubeLayout = ({ cube, cubeID, canEdit, activeLink, children }) => {\n);\n};\n+CubeLayout.propTypes = {\n+ cube: PropTypes.shape({\n+ overrideCategory: PropTypes.bool,\n+ categoryPrefixes: PropTypes.arrayOf(PropTypes.string),\n+ categoryOverride: PropTypes.string,\n+ card_count: PropTypes.number.isRequired,\n+ name: PropTypes.string.isRequired,\n+ type: PropTypes.string.isRequired,\n+ cards: PropTypes.arrayOf(PropTypes.shape({})),\n+ }).isRequired,\n+ cubeID: PropTypes.string.isRequired,\n+ canEdit: PropTypes.bool,\n+ activeLink: PropTypes.string.isRequired,\n+ children: PropTypes.node,\n+};\n+\n+CubeLayout.defaultProps = {\n+ canEdit: false,\n+ children: false,\n+};\n+\nexport default CubeLayout;\n",
        "org_msg": "Fix CubeLayout.js.",
        "sim_msg": "refactor: moved the Cart into the Layout component",
        "sim_diff": "diff --git a/src/components/Layout/Layout.js b/src/components/Layout/Layout.js -import React from \"react\";\n+import React, { Component } from \"react\";\n+import PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\n+\nimport Header from \"components/Header\";\n+import { Cart } from \"components/Cart\";\n+\n+class Layout extends Component {\n+ static propTypes = {\n+ children: PropTypes.node,\n+ title: PropTypes.string\n+ };\n+\n+ static defaultProps = {\n+ title: \"\"\n+ };\n-export default ({ children, title = \"\" }) => (\n+ render() {\n+ const { children, title } = this.props;\n+ return (\n<div>\n<Helmet>\n<title>{title}</title>\n</Helmet>\n<Header />\n-\n- {children}\n-\n+ <main>{children}</main>\n+ <Cart />\n</div>\n);\n+ }\n+}\n+\n+export default Layout;\n",
        "chatgpt_cot": "Add PropTypes validation for CubeNavItem and CubeLayout components, providing default values and ensuring data integrity and type safety."
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -513,7 +513,7 @@ router.get('/view/:id', async (req, res) => {\nconst [cubes, followers] = await Promise.all([cubesQ, followersQ]);\n- const following = req.user ? user.users_following.includes(req.user.id) : false;\n+ const following = req.user && user.users_following ? user.users_following.includes(req.user.id) : false;\ndelete user.users_following;\nreturn res.render('user/user_view', {\nreactProps: serialize({\n",
        "org_msg": "Fix view user error",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Fix issue with following user logic in view route. Updated logic to check if user is following another user."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2777,8 +2777,8 @@ router.get(\nrouter.post(\n'/api/getversions',\n- body([], 'Body must be an array').isArray(),\n- body('*', 'Each ID must be 36 characters').isLength({ min: 36, max: 36 }),\n+ body([], 'Body must be an array.').isArray(),\n+ body('*', 'Each ID must be a valid UUID.').isUUID(4),\njsonValidationErrors,\nutil.wrapAsyncApi(async (req, res) => {\nconst allDetails = req.body.map((cardID) => carddb.cardFromId(cardID));\n",
        "org_msg": "Fix validation.",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "\"Update validation for /api/getversions endpoint in cube_routes.js to ensure body is an array and each ID is a valid UUID.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2261,15 +2261,19 @@ router.get('/deck/:id', function(req, res) {\nif (typeof deck.cards[deck.cards.length - 1][0] === 'object') {\n//old format\ndeck.cards[0].forEach(function(card, index) {\n- player_deck.push(carddb.cardFromId(card));\n+ card.details = carddb.cardFromId(card);\n+ card.details.display_image = util.getCardImageURL(card);\n+ player_deck.push(card.details);\n});\nfor (i = 1; i < deck.cards.length; i++) {\nvar bot_deck = [];\ndeck.cards[i].forEach(function(card, index) {\n- if (!card[0].cardID && !carddb.cardFromId(card[0].cardID)) {\n+ if (!card[0].cardID && !carddb.cardFromId(card[0].cardID).error) {\nconsole.log(req.params.id + \": Could not find seat \" + (bot_decks.length + 1) + \", pick \" + (bot_deck.length + 1));\n} else {\n- bot_deck.push(carddb.cardFromId(card[0].cardID));\n+ card.details = carddb.cardFromId(card[0].cardID);\n+ card.details.display_image = util.getCardImageURL(card);\n+ bot_deck.push(card.details);\n}\n});\nbot_decks.push(bot_deck);\n",
        "org_msg": "Fixed draft decks",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Add card details and display image to player and bot decks in cube_routes.js. Fix potential error when card details are not found."
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -294,10 +294,12 @@ router.get('/landing', async (req, res) => {\nrouter.post('/advanced_search', (req, res) => {\nlet url = '/search/';\nif (req.body.name && req.body.name.length > 0) {\n- url += `name${req.body.nameType}${req.body.name};`;\n+ const encoded = encodeURIComponent(req.body.name);\n+ url += `name${req.body.nameType}${encoded};`;\n}\nif (req.body.owner && req.body.owner.length > 0) {\n- url += `owner_name${req.body.ownerType}${req.body.owner};`;\n+ const encoded = encodeURIComponent(req.body.owner);\n+ url += `owner_name${req.body.ownerType}${encoded};`;\n}\nres.redirect(url);\n});\n",
        "org_msg": "255 URL encode params from\nadvanced search form",
        "sim_msg": "Find deleted meta posts as well",
        "sim_diff": "diff --git a/DiscussedOnMeta.user.js b/DiscussedOnMeta.user.js // @description For questions and answers, displays info if it's discussed on Meta. On arrow mouseover, displays the Meta posts\n// @homepage https://github.com/samliew/SO-mod-userscripts\n// @author @samliew\n-// @version 2.12\n+// @version 2.13\n//\n// @include https://stackoverflow.com/questions/*\n// @include https://serverfault.com/questions/*\nif(pid <= 99999) return;\nconst query = encodeURIComponent(`url://${location.hostname}/*/${pid}`);\n- const searchUrl = `https://${metaDomain}/search?tab=newest&q=${query}`;\n+ const searchUrl = `https://${metaDomain}/search?tab=newest&q=${query}&deleted=any`;\najaxPromise(searchUrl)\n.then(function(data) {\nif(location.hostname === 'stackoverflow.com') {\nconst query = encodeURIComponent(`url://${location.hostname}/*/${pid}`);\n- const searchUrl = `https://${mseDomain}/search?tab=newest&q=${query}`;\n+ const searchUrl = `https://${mseDomain}/search?tab=newest&q=${query}&deleted=any`;\najaxPromise(searchUrl)\n.then(function(data) {\n",
        "chatgpt_cot": "Refactor URL encoding in advanced search route to prevent injection attacks. Fixes potential security vulnerability in root.js."
    },
    {
        "org_diff": "diff --git a/.prettierrc b/.prettierrc {\n\"singleQuote\": true,\n\"trailingComma\": \"all\",\n- \"bracketSpacing\": false,\n\"parser\": \"flow\",\n\"tabWidth\": 2,\n\"semi\": true,\n- \"arrowParens\": \"always\",\n- \"jsxBracketSameLine\": true\n+ \"arrowParens\": \"always\"\n}\n",
        "org_msg": "modifying rules based on conversation",
        "sim_msg": "Fix syntax in .prettierrc",
        "sim_diff": "diff --git a/.prettierrc b/.prettierrc \"singleQuote\": false,\n\"jsxSingleQuote\": false,\n\"trailingComma\": \"none\",\n- \"bracketSpacing\": \"true\",\n- \"jsxBracketSameLine\": \"false\",\n+ \"bracketSpacing\": true,\n+ \"jsxBracketSameLine\": false,\n\"arrowParens\": \"avoid\",\n\"proseWrap\": \"preserve\",\n\"htmlWhitespaceSensitivity\": \"css\",\n",
        "chatgpt_cot": "\"Update .prettierrc to use arrowParens always and remove jsxBracketSameLine, fix formatting and maintain consistency.\""
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -163,7 +163,7 @@ class FilterCollapse extends Component {\nhandleChange(event) {\nconst target = event.target;\n- var value = ['checkbox', 'radio'].includes(target.type) ? target.checked : target.value;\n+ const value = ['checkbox', 'radio'].includes(target.type) ? target.checked : target.value;\nconst name = target.name;\nconst extra = {};\n",
        "org_msg": "Fix mistake typo",
        "sim_msg": "fix renderMultiselect filter type for null values",
        "sim_diff": "diff --git a/src/components/TableFilter.js b/src/components/TableFilter.js @@ -251,7 +251,7 @@ class TableFilter extends React.Component {\n<MenuItem value={filterValue} key={filterIndex + 1}>\n<Checkbox\nchecked={filterList[index].indexOf(filterValue) >= 0 ? true : false}\n- value={filterValue.toString()}\n+ value={filterValue !== null ? filterValue.toString() : ''}\nclassName={classes.checkboxIcon}\nclasses={{\nroot: classes.checkbox,\n",
        "chatgpt_cot": "Fix variable declaration to use const instead of var in FilterCollapse component. Improve code readability and maintainability."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/util.test.js b/__tests__/serverjs/util.test.js @@ -157,12 +157,6 @@ test('arraysEqual returns false for unequal arrays', () => {\nexpect(result).toBe(false);\n});\n-test('CSVtoArray returns an array of the correct length when commas are included in values', () => {\n- const testCSV = '\"a,g\",\"b\",\"c\"';\n- const result = util.CSVtoArray(testCSV);\n- expect(result.length).toBe(3);\n-});\n-\ntest('generateEditToken does not generate the same token on sequential calls', () => {\nconst firstResult = util.generateEditToken();\nconst secondResult = util.generateEditToken();\n",
        "org_msg": "Update CSV tests.",
        "sim_msg": "* Fixing an edge case causing bulk drag to fail, and a failed drag no longer floods the inventory with bad items.",
        "sim_diff": "diff --git a/src/module/actor/actor-inventory.js b/src/module/actor/actor-inventory.js @@ -248,6 +248,11 @@ export async function moveItemBetweenActorsAsync(sourceActor, itemToMove, target\n/** Ensure the original to-move item has the quantity correct. */\nitemData[0].data.quantity = quantity;\n+ if (itemData.length != items.length) {\n+ console.log(['Mismatch in item count', itemData, items]);\n+ return;\n+ }\n+\nconst createOwnedItemResult = await targetActor.createOwnedItem(itemData);\nconst createResult = createOwnedItemResult instanceof Array ? createOwnedItemResult : [createOwnedItemResult];\nif (targetActor.actor?.sheet) {\n@@ -257,19 +262,51 @@ export async function moveItemBetweenActorsAsync(sourceActor, itemToMove, target\ntargetActor.token.sheet.stopRendering = false;\n}\n+ if (createResult.length != items.length) {\n+ console.log(['Mismatch in item count after creating', createResult, items]);\n+ const deleteIds = createResult.map(x => x._id);\n+ return targetActor.deleteOwnedItem(deleteIds);\n+ }\n+\nconst updatesToPerform = [];\nfor (let i = 0; i<items.length; i++) {\nconst itemToTest = items[i];\nconst itemToUpdate = createResult[i];\nif (itemToTest.children && itemToTest.children.length > 0) {\n- const indexMap = itemToTest.item.data.container.contents.map(x => items.indexOf(items.find(y => y.item._id == x.id)));\n- const newContents = duplicate(itemToUpdate.data.container.contents);\n+ const indexMap = itemToTest.item.data.container.contents.map(x => {\n+ const foundItem = items.find(y => y.item._id === x.id);\n+ const foundItemIndex = items.indexOf(foundItem);\n+ return foundItemIndex;\n+ });\n+ let newContents = duplicate(itemToUpdate.data.container.contents);\nfor (let j = 0; j<indexMap.length; j++) {\nconst index = indexMap[j];\n+ if (index === -1) {\n+ newContents[j].id = \"deleteme\";\n+ continue;\n+ }\n+\n+ try {\nnewContents[j].id = createResult[index]._id;\n+ } catch (error) {\n+ console.log({\n+ index: index,\n+ items: items,\n+ createResult: createResult,\n+ itemToTest: itemToTest,\n+ itemToUpdate: itemToUpdate,\n+ indexMap: indexMap\n+ });\n+ const deleteIds = createResult.map(x => x._id);\n+ await targetActor.deleteOwnedItem(deleteIds);\n+ throw error;\n}\n+ }\n+\n+ newContents = newContents.filter(x => x.id !== \"deleteme\");\n+\nupdatesToPerform.push({ _id: itemToUpdate._id, 'data.container.contents': newContents});\n}\n}\n",
        "chatgpt_cot": "\"Remove CSVtoArray test and add test for generateEditToken in util.test.js\""
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -652,7 +652,7 @@ router.get('/faq', (req, res) => {\n},\n{\nlabel: 'What tech stack does Cube Cobra use?',\n- text: 'Cube Cobra used NodeJS with MongoDB for server side, and React front end with Bootstrap for CSS.',\n+ text: 'Cube Cobra uses NodeJS with MongoDB for server side, and React front end with Bootstrap for CSS.',\n},\n{\nlabel: 'Is Cube Cobra Open Source?',\n@@ -662,7 +662,7 @@ router.get('/faq', (req, res) => {\n{\nlabel: 'I am not a developer, can I still help improve Cube Cobra?',\ntext:\n- 'Yes! Even if you are not a developer, you can still get involved in helping Cube Cobra become a better platform for everyone! If you want to be more involved in the community, join the discord linked under contact. You can submit bug reports, make feature requests, and talk to the developers directly there.',\n+ 'Yes! Even if you are not a developer, you can still get involved in helping Cube Cobra become a better platform for everyone! If you want to be more involved in the community, join the Discord linked under Contact. You can submit bug reports, make feature requests, and talk to the developers directly there.',\n},\n{\nlabel: \"I'm having trouble building my cube, where can I go for help?\",\n",
        "org_msg": "Fix typos on FAQ page",
        "sim_msg": "docs(README): fix typo, remove unnecessary details",
        "sim_diff": "diff --git a/README.md b/README.md @@ -60,7 +60,7 @@ $ cd activity\nor similar for your OS.\n-## Setting up on Virtual Environment\n+## Setup the Virtual Environment\nYou can setup virtual environment either using `virtualenv` or `pipenv`.\n### Using virtualenv\n@@ -71,12 +71,6 @@ $ source <myvirtualenvironmentname>/bin/activate # Activate your virtual enviro\n$ source <myvirtualenvironmentname>/script/activate # ... or on Windows\n$ pip install -r requirements.txt # Install the dependencies\n```\n-\n-Virtualenv will take care of:\n-- managing the project's dependencies in isolation from the system's packages\n-- providing a new Python binary/executable with the version specified (check this using `which python` on Linux and `python --version`)\n-\n-\n### Using pipenv\n```bash\n$ pip install pipenv # Install pipenv\n@@ -194,7 +188,8 @@ $ docker-compose exec web python manage.py createsuperuser\n```\n### Create 'Activity users'\n-- Before logging in to the application you will need to go to the admin console (http://localhost:8000/admin/).\n+Before logging in to the application, you will need to create an Activity User through Django's Admin Dashboard.\n+- Go to the Admin dashboard: http://localhost:8000/admin/.\n- Navigate to `Workflow > Activity users` and add an Activity user.\n- Make to sure to select the superuser name you created earlier.\n@@ -221,3 +216,5 @@ Feel free to checkout and learn more about:\n- Our [development process](https://team.hikaya.io/start/development-process.html)\nWe are always looking for a fresh set of :eyes: who want to contribute to **Activity**, so if you are interested, you can reach out and create an issue and we'll help you get started!\n+\n+<!-- TODO point to Github discussions -->\n\\ No newline at end of file\n",
        "chatgpt_cot": "Fix capitalization and grammar issues in FAQ text."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -4289,15 +4289,16 @@ router.get(\n'/api/date_updated/:id',\nutil.wrapAsyncApi(async (req, res) => {\nconst { id } = req.params;\n- const cube = await Cube.findOne(buildIdQuery(id)).lean();\n- if (!cube) {\n+ const result = await Cube.findOne(buildIdQuery(id), { date_updated: 1, _id: 0 }).lean();\n+ if (!result) {\nreturn res.status(404).send({\nsuccess: 'false',\nmessage: 'No such cube.',\n});\n}\nreturn res.status(200).send({\n- date_updated: cube.date_updated.valueOf(),\n+ success: 'true',\n+ date_updated: result.date_updated.valueOf(),\n});\n}),\n);\n",
        "org_msg": "Use projection in db query",
        "sim_msg": "add job id to start board for task",
        "sim_diff": "diff --git a/core/api-server/api/rest-api/routes/v1/boards.js b/core/api-server/api/rest-api/routes/v1/boards.js @@ -62,8 +62,8 @@ const routes = (options) => {\n});\nrouter.all('/tensor/start/:taskId?', methods(['POST']), logger(), async (req, res, next) => {\nconst { taskId } = req.params;\n- const { nodeName, pipelineName } = req.body;\n- await boards.startTensorboard({ taskId, nodeName, pipelineName }, 'task');\n+ const { nodeName, pipelineName, jobId } = req.body;\n+ await boards.startTensorboard({ taskId, jobId, nodeName, pipelineName }, 'task');\nres.json({ message: 'OK' });\nnext();\n});\n",
        "chatgpt_cot": "\"Fix date_updated API to return success message and result, handle case where cube is not found, and use result instead of cube for date_updated value.\""
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -114,15 +114,14 @@ function unloadCardDb() {\n}\n}\n-module.exports = {\n- ...data,\n- cardFromId,\n- getCardDetails,\n- normalizedName: card => card.name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").trim(),\n- allIds: card => data.nameToId[data.normalizedName(card)],\n- initializeCardDb,\n- loadJSONFile,\n- getPlaceholderCard,\n- unloadCardDb,\n- allCards: () => Object.values(data._carddict),\n-};\n\\ No newline at end of file\n+data.cardFromId = cardFromId;\n+data.getCardDetails = getCardDetails;\n+data.normalizedName = card => card.name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").trim();\n+data.allIds = card => data.nameToId[data.normalizedName(card)];\n+data.allCards = () => Object.values(data._carddict);\n+data.initializeCardDb = initializeCardDb;\n+data.loadJSONFile = loadJSONFile;\n+data.getPlaceholderCard = getPlaceholderCard;\n+data.unloadCardDb = unloadCardDb;\n+\n+module.exports = data;\n\\ No newline at end of file\n",
        "org_msg": "Fix serverjs issue.",
        "sim_msg": "remove agendas",
        "sim_diff": "diff --git a/server/game/cards/index.js b/server/game/cards/index.js @@ -11,12 +11,6 @@ const events = require('./events');\nvar cards = {};\n-_.each(fs.readdirSync(path.join(__dirname, 'agendas')), file => {\n- var card = require('./agendas/' + file);\n-\n- cards[card.code] = card;\n-});\n-\ncards = _.extend(cards, strongholds, provinces, holdings, characters, attachments, events);\nmodule.exports = cards;\n",
        "chatgpt_cot": "Refactor export of card functions in cards.js for clarity and consistency with module.exports assignment. Fix potential issues with exporting functions."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -250,7 +250,7 @@ function addTokens(card) {\nsourceCardId: _catalog.dict[card.id]._id\n});\n}\n- if (_catalog.dict[card.id].oracle_text.includes('Infect (')) {\n+ if (_catalog.dict[card.id].oracle_text.includes('poison counter')) {\nmentionedTokens.push({\ntokenId: getTokenIDForSpecialCaseToken('Poison'),\nsourceCardId: _catalog.dict[card.id]._id\n",
        "org_msg": "small fix of poison token search criteria",
        "sim_msg": "Serve additional card data",
        "sim_diff": "diff --git a/server/services/CardService.js b/server/services/CardService.js @@ -25,7 +25,7 @@ class CardService {\n_.each(result, card => {\nif(options && options.shortForm) {\n- cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'unicity', 'influence_cost', 'pack_cards');\n+ cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'element', 'unicity', 'influence_cost', 'influence_pool', 'pack_cards');\n} else {\ncards[card.id] = card;\n}\n",
        "chatgpt_cot": "Change condition to check for 'poison counter' instead of 'Infect' in updatecards.js. Fix for special case token."
    },
    {
        "org_diff": "diff --git a/views/cube/cube_samplepack.pug b/views/cube/cube_samplepack.pug @@ -9,8 +9,9 @@ block cube_content\n.row\n.col-md-6\nh5.card-title Sample Pack\n- .col-md-6\n- a.float-right(href=`/cube/samplepackimage/${cube_id}/${seed}`) Get Image\n+ .col-md-6.text-right\n+ a.btn.btn-success.mr-2(href=`/cube/samplepack/${cube_id}`) New Pack\n+ a.btn.btn-success(href=`/cube/samplepackimage/${cube_id}/${seed}`) Get Image\n.card-body\n.samplepack.row\nif pack\n",
        "org_msg": "feat(views): [Fixes add button for new sample pack",
        "sim_msg": "Updated cover image to be mobile responsive\nUsed Github image markdown instead of p tag",
        "sim_diff": "diff --git a/README.md b/README.md [![CI](https://github.com/pikapkg/snowpack/workflows/CI/badge.svg?event=push)](https://github.com/pikapkg/snowpack/actions)\n-<p align=\"center\">\n- <img height=\"420\" src=\"https://imgur.com/uXHFm5y.jpg\" alt=\"cover image\">\n-</p>\n+![cover image](https://imgur.com/uXHFm5y.jpg)\n**Snowpack is a web app build tool that works without bundling.** Thanks to [ESM imports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) Snowpack is able to remove the expensive (and unnecesary) bundling step from your dev workflow. That means no startup time spent waiting for your application to bundle PLUS no time wasted rebundling on every change.\n",
        "chatgpt_cot": "Update cube sample pack layout with new buttons for creating a new pack and getting images, improving user experience in cube sample pack view."
    },
    {
        "org_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -33,8 +33,40 @@ Contributing to Cube Cobra does not entitle any contributor to compensation of a\nIssues are tagged with 'good first issue' if we think it's a good beginner task to tackle. Complete a few small changes to become familar with the codebase before diving into a huge feature.\n-# Getting started\n-### How to submit a contribution.\n+# How we collaborate - asynchronous communication\n+\n+Our community of contributors is large, and growing fast. We don't have regularly\n+scheduled working hours dedicated to Cube Cobra. Thus, we can't simply message each\n+other on Discord to understand the current state of the project. Discord is\n+a great tool for synchronous communication, but our project also requires\n+a focus on asynchronous methods of communication. The goal is for the current state\n+of the project, including features being worked on, issues not yet resolved,\n+and near-term roadmap plans, to be fully discoverable by a passerby without\n+needing to chat in realtime with anyone else.\n+\n+GitHub projects, issues, and pull requests serve this purpose beautifully. We\n+treat the dekkerglen/CubeCobra repository as the source of truth about what\n+work is complete, in progress, and not yet started. If you want to know\n+whether someone is working on a feature, for example, or if anyone else has\n+noticed the issue you're seeing, GitHub pull requests and issues are the first\n+place you should look.\n+\n+## How we use GitHub issues\n+\n+when you notice a bug, first look for an existing issue. if exists, comment,\n+ else open new\n+when there's an important update related to a bug, for example you noticed\n+ a new replication case, add a comment to the issue indicating that\n+\n+## How we use GitHub pull requests\n+\n+WIP\n+checklists\n+description\n+when closed, make issues for hanging threads\n+code review - line comments\n+\n+## How we use git branches\nThe master branch is the branch that contains live code. The development branch is the branch with changes that are pending for the next update. First, assign yourself to an issue, and create a fork of the code. When you are finished with the feature, create a pull request back into the development branch. An admin will review your code and merge if it is accepted. Expect some comments and feedback.\n",
        "org_msg": "scratch notes for collaboration doc",
        "sim_msg": "Update Idea Hub dashboard widget heading.",
        "sim_diff": "diff --git a/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/index.js b/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/index.js @@ -236,7 +236,7 @@ function DashboardIdeasWidget( props ) {\n<div className=\"googlesitekit-idea-hub__header\">\n<h3 className=\"googlesitekit-idea-hub__title\">\n{ __(\n- 'Ideas to write about based on unanswered searches',\n+ 'Ideas to write about, from actual questions people asked on Search',\n'google-site-kit'\n) }\n",
        "chatgpt_cot": "Improve collaboration using asynchronous communication methods in Cube Cobra project by updating CONTRIBUTING.md with guidelines for GitHub issues, pull requests, and git branches."
    },
    {
        "org_diff": "diff --git a/src/pages/CubePlaytestPage.js b/src/pages/CubePlaytestPage.js @@ -245,7 +245,7 @@ const DEFAULT_FORMAT = {\npacks: [['rarity:Mythic', 'tag:new', 'identity>1']],\n};\nconst CubePlaytestPage = ({ cube, cubeID, canEdit, decks, draftFormats }) => {\n- const [alerts, addAlert] = useAlerts();\n+ const { alerts, addAlert } = useAlerts();\nconst [formats, setFormats] = useState(draftFormats);\nconst [editModalOpen, setEditModalOpen] = useState(false);\nconst [editFormatIndex, setEditFormatIndex] = useState(-1);\n@@ -345,7 +345,7 @@ const CubePlaytestPage = ({ cube, cubeID, canEdit, decks, draftFormats }) => {\nCubePlaytestPage.propTypes = {\ncube: PropTypes.shape({\n- cards: PropTypes.arrayOf(PropTypes.object).isRequired,\n+ cards: PropTypes.arrayOf(PropTypes.object),\n}).isRequired,\ncubeID: PropTypes.string.isRequired,\ncanEdit: PropTypes.bool.isRequired,\n",
        "org_msg": "Fix CubePlaytestPage.js",
        "sim_msg": "Working on template loading",
        "sim_diff": "diff --git a/editor.js b/editor.js @@ -136,6 +136,16 @@ const bindTextarea = codeEl => {\nconst _ = React.createElement;\nconst container = document.getElementById('container');\n+ const defaultFiles = [\n+ {\n+ name: 'index.rtfjs',\n+ value: '// default content',\n+ },\n+ {\n+ name: '.metaversefile',\n+ value: '{}',\n+ },\n+ ];\nconst jsx = `\n(() => {\nconst width = 50;\n@@ -230,7 +240,11 @@ const bindTextarea = codeEl => {\n<div className=\"section files\">\n{files.map((file, i) => {\nreturn (\n- <div className={['file', selectedFileIndex === i ? 'selected' : ''].join(' ')} onClick={e => setSelectedFileIndex(i)} key={i}>\n+ <div\n+ className={['file', selectedFileIndex === i ? 'selected' : ''].join(' ')}\n+ onClick={e => setSelectedFileIndex(i)}\n+ key={i}\n+ >\n<div className=\"file-inner\">{file.name}</div>\n</div>\n);\n@@ -479,7 +493,6 @@ const bindTextarea = codeEl => {\nconst [selectedTab, setSelectedTab] = useState('editor');\nconst [cards, setCards] = useState([]);\nconst [searchResults, setSearchResults] = useState(null);\n- const [files, setFiles] = useState([]);\nconst [objects, setObjects] = useState([]);\nconst [selectedFileIndex, setSelectedFileIndex] = useState(0);\nconst [selectedObjectIndex, setSelectedObjectIndex] = useState(0);\n@@ -488,6 +501,7 @@ const bindTextarea = codeEl => {\nconst [lastQ, setLastQ] = useState('');\nconst [templateOptions, setTemplateOptions] = useState([]);\nconst [selectedTemplateOption, setSelectedTemplateOption] = useState();\n+ const [files, setFiles] = useState(defaultFiles);\nconst [editor, setEditor] = useState(null);\ngetEditor = () => editor;\n@@ -500,15 +514,6 @@ const bindTextarea = codeEl => {\nsetCards(j);\n}, []);\n- useEffect(async () => {\n- setFiles([\n- 'index.rtfjs',\n- '.metaversefile',\n- ].map(name => ({\n- name,\n- })));\n- }, []);\n-\nuseEffect(async () => {\nconst objects = world.getObjects();\nsetObjects(objects);\n@@ -555,15 +560,32 @@ const bindTextarea = codeEl => {\nuseEffect(async () => {\nif (editor && selectedTemplateOption) {\n- console.log('load', );\n-\nconst u = 'https://templates.webaverse.com/' + selectedTemplateOption;\nconst res = await fetch(u);\nconst text = await res.text();\n- editor.setValue(text);\n+ const files = [\n+ {\n+ name: selectedTemplateOption,\n+ value: text,\n+ },\n+ ];\n+ setFiles(files);\n}\n}, [editor, selectedTemplateOption]);\n+ useEffect(async () => {\n+ if (editor && selectedFileIndex === 0) {\n+ const file = files[selectedFileIndex];\n+ if (file) {\n+ editor.setValue(file.value);\n+ } else {\n+ editor.setValue('');\n+ }\n+ } else {\n+ editor.setValue('');\n+ }\n+ }, [editor, files, selectedFileIndex]);\n+\nreturn <div className=\"root\">\n<div className=\"left\">\n<div className=\"top\">\n",
        "chatgpt_cot": "\"Refactor CubePlaytestPage to use destructuring assignment for alerts and addAlert, and update PropTypes for cards to be optional.\""
    },
    {
        "org_diff": "diff --git a/__tests__/routes/cube/download.test.js b/__tests__/routes/cube/download.test.js @@ -10,7 +10,8 @@ const { buildIdQuery } = require('../../../serverjs/cubefn');\nconst carddb = require('../../../serverjs/cards');\nconst fixturesPath = 'fixtures';\n-const cubeID = cubefixture.exampleCube.shortID;\n+const exampleCube = cubefixture.exampleCube;\n+const cubeID = exampleCube.shortID;\napp.use('/', router);\n@@ -19,7 +20,7 @@ let mongoServer;\nbeforeAll(async () => {\nmongoServer = await dbSetup.connect();\nawait carddb.initializeCardDb(fixturesPath, true);\n- await new Cube(cubefixture.exampleCube).save();\n+ await new Cube(exampleCube).save();\n});\nafterAll(async () => {\n@@ -30,10 +31,11 @@ afterAll(async () => {\ntest('text download', () => {\nreturn request(app)\n.get('/cubecobra/' + cubeID)\n- .expect('Content-Type', 'text/plain')\n.expect(200)\n+ .expect('Content-Type', 'text/plain')\n+ .expect('Content-disposition', 'attachment; filename=' + exampleCube.name + '.txt')\n.expect(function (res) {\n- // TODO: add more expectations\nexpect(res.text).toEqual(expect.stringContaining('Acclaimed Contender [eld-1]'));\n+ expect(res.text.trim().split('\\n').length).toEqual(exampleCube.cards.length);\n});\n});\n",
        "org_msg": "Assert on content disposition",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Refactor cube download test to use exampleCube variable, improving readability and maintainability. Fix content disposition header and add card count expectation."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2749,7 +2749,6 @@ router.get(\nconst cardIds = carddb.allIds(carddb.cardFromId(req.params.id));\n// eslint-disable-next-line prefer-object-spread\nconst cards = cardIds.map((id) => Object.assign({}, carddb.cardFromId(id)));\n- // eslint-disable-next-line camelcase\nconst tcg = [...new Set(cards.map(({ tcgplayer_id }) => tcgplayer_id).filter((tid) => tid))];\nconst names = [...new Set(cards.map(({ name }) => name).filter((name) => name))];\nconst [priceDict, eloDict] = await [GetPrices(tcg), getElo(names, true)];\n",
        "org_msg": "Remove unnecessary eslint-disable",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "\"Refactor cube_routes.js to improve code readability and remove unnecessary eslint-disable comments\""
    },
    {
        "org_diff": "diff --git a/src/pages/CubeAnalysisPage.js b/src/pages/CubeAnalysisPage.js @@ -129,7 +129,9 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText }) => {\nreturn (\n<CubeLayout cube={cube} cubeID={cubeID} canEdit={false} activeLink=\"analysis\">\n<DynamicFlash />\n- <Row className=\"mt-3\">\n+ {cube.cards.length === 0\n+ ? <h5 className=\"mt-3 mb-3\">This cube doesn't have any cards. Add cards to see analytics.</h5>\n+ : <Row className=\"mt-3\">\n<Col xs=\"12\" lg=\"2\">\n<Nav vertical=\"lg\" pills className=\"justify-content-sm-start justify-content-center mb-3\">\n{analytics.map((analytic, index) => (\n@@ -161,6 +163,8 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText }) => {\n</Card>\n</Col>\n</Row>\n+ }\n+\n</CubeLayout>\n);\n};\n",
        "org_msg": "renders message instead of analytics if cube has zero cards",
        "sim_msg": "Update 'card not found' page",
        "sim_diff": "diff --git a/packages/component-library/src/CardDetail/CardDetailPage.js b/packages/component-library/src/CardDetail/CardDetailPage.js @@ -17,11 +17,11 @@ const CardDetailPage = ({ params, CardRegistry }) => {\nreturn (\n<PageLayout>\n+ <section>\n<h1>Card not found</h1>\n- <p>\n- The card you are looking for doesn&apos;t exist.\n- <Link to=\"/cities/portland\">View the Portland Collection</Link>\n- </p>\n+ <p>The card you are looking for doesn&apos;t exist.</p>\n+ <Link to=\"/cards\">Other cards</Link>\n+ </section>\n</PageLayout>\n);\n};\n",
        "chatgpt_cot": "Add conditional rendering for cube cards to display analytics if available, improving user experience on CubeAnalysisPage."
    },
    {
        "org_diff": "diff --git a/src/components/DeckbuilderNavbar.js b/src/components/DeckbuilderNavbar.js @@ -188,8 +188,7 @@ const DeckbuilderNavbar = ({\nconst autoBuildDeck = useCallback(async () => {\nconst main = deck.playerdeck.flat(2).concat(deck.playersideboard.flat());\n- const picked = fromEntries(COLOR_COMBINATIONS.map((comb) => [comb.join(''), 0]));\n- picked.cards = [];\n+ const picked = createSeen();\naddSeen(picked, main);\nconst { sideboard: side, deck: newDeck } = await buildDeck(\nmain,\n",
        "org_msg": "Fix bug with build for me.",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "Refactor autoBuildDeck method in DeckbuilderNavbar to use createSeen function for better readability and maintainability."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -869,9 +869,11 @@ router.get('/analysis/:id', async (req, res) => {\ncard.type_line = card.details.type;\n}\nif (card.details.tokens) {\n- for (const element of card.details.tokens) {\n+ card.details.tokens = card.details.tokens.map((element) => {\nconst tokenDetails = carddb.cardFromId(element.tokenId);\n- element.token = {\n+ return {\n+ ...element,\n+ token: {\ntags: [],\nstatus: 'Not Owned',\ncolors: tokenDetails.color_identity,\n@@ -882,8 +884,9 @@ router.get('/analysis/:id', async (req, res) => {\nimgUrl: undefined,\nfinish: 'Non-foil',\ndetails: { ...(element.tokenId === card.cardID ? {} : tokenDetails) },\n+ },\n};\n- }\n+ });\n}\n}\ncube.cards = await addPrices(cube.cards);\n",
        "org_msg": "Fix in-place modification of carddb.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "\"Refactor token details mapping in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2653,8 +2653,13 @@ router.get(\nutil.wrapAsyncApi(async (req, res) => {\nconst cube = await Cube.findOne(buildIdQuery(req.params.id)).lean();\n+ if (!cube) {\n+ return res.status(404).send('Cube not found.');\n+ }\n+\nconst names = cube.cards.map((card) => carddb.cardFromId(card.cardID).name);\nres.contentType('text/plain');\n+ res.set('Access-Control-Allow-Origin', '*');\nreturn res.status(200).send(names.join('\\n'));\n}),\n);\n",
        "org_msg": "Update dr4ft endpoint",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Add error handling for cube not found, set Access-Control-Allow-Origin header for cube routes."
    },
    {
        "org_diff": "diff --git a/src/utils/Affiliate.js b/src/utils/Affiliate.js @@ -22,8 +22,12 @@ export const getCardMarketLink = (card) =>\nexport const getCardHoarderLink = (card) =>\n`https://www.cardhoarder.com/cards?data%5Bsearch%5D=${card.details.name}?affiliate_id=cubecobra&utm_source=cubecobra&utm_campaign=affiliate&utm_medium=card`;\n+const ck = (str) => str.replace(/ /g, '-').replace(/:/g, '').replace(/\\./g, '').toLowerCase();\n+\nexport const getCardKingdomLink = (card) =>\n- `https://www.cardkingdom.com/purchasing/mtg_singles?partner=CubeCobra&utm_source=CubeCobra&utm_medium=affiliate&utm_campaign=CubeCobra&filter[search]=mtg_advanced&filter[name]=${card.details.name}`;\n+ `https://www.cardkingdom.com/mtg/${ck(card.details.set_name)}/${ck(\n+ card.details.name,\n+ )}?partner=CubeCobra&utm_source=CubeCobra&utm_medium=affiliate&utm_campaign=CubeCobra`;\nexport const tcgMassEntryUrl =\n'https://store.tcgplayer.com/massentry?partner=CubeCobra' +\n",
        "org_msg": "Update CK link to buy page",
        "sim_msg": "Add card renderer flipY support",
        "sim_diff": "diff --git a/card-renderer.js b/card-renderer.js @@ -77,6 +77,7 @@ export const generateObjectUrlCard = async ({\nstart_url,\nwidth = 300,\n// height = width,\n+ flipY = false,\nsignal = null,\n}) => {\nconst app = await metaversefile.createAppAsync({\n@@ -87,6 +88,7 @@ export const generateObjectUrlCard = async ({\napp,\nwidth,\n// height,\n+ flipY,\n});\nif (signal?.aborted) throw new Error();\nreturn result;\n@@ -95,6 +97,7 @@ export const generateObjectCard = async ({\napp,\nwidth = 300,\n// height = width,\n+ flipY = false,\n}) => {\nconst stats = generateStats(app.contentId);\nconst {\n@@ -131,6 +134,7 @@ export const generateObjectCard = async ({\nminterUsername,\nminterAvatarPreview,\nglyphImage,\n+ flipY,\n});\n// _previewImage(cardImg, width, height);\nreturn cardImg;\n@@ -147,6 +151,7 @@ export const generateCard = async ({\nminterUsername,\nminterAvatarPreview,\nglyphImage,\n+ flipY,\n} = {}) => {\ndescription = description || 'A great mystery.';\n@@ -286,6 +291,8 @@ export const generateCard = async ({\nURL.revokeObjectURL(url);\n}\n});\n- const imageBitmap = await createImageBitmap(image);\n+ const imageBitmap = await createImageBitmap(image, {\n+ imageOrientation: flipY ? 'flipY' : 'none',\n+ });\nreturn imageBitmap;\n};\n\\ No newline at end of file\n",
        "chatgpt_cot": "Add function to format strings for Card Kingdom link, improve readability and maintainability for Card Kingdom link generation in Affiliate.js."
    },
    {
        "org_diff": "diff --git a/views/info/filters.pug b/views/info/filters.pug @@ -200,3 +200,18 @@ block content\ntr\ntd(scope=\"col\") #[code a:reb]\ntd(scope=\"col\") All cards illustrated by artists with \"reb\" in their name.\n+ .card\n+ #collapseDevotion-syntax.card-header(data-toggle=\"collapse\" data-target=\"#collapseDevotion\" aria-expanded=\"true\" aria-controls=\"collapseDevotion\")\n+ button(class=\"btn btn-link\" type=\"button\" )\n+ h5 Devotion\n+ #collapseDevotion.collapse(aria-labelledby=\"collapseDevotion-syntax\" data-parent=\"#syntax-accordion\")\n+ p You can use #[code d:], #[code dev:], or #[code devotion:] to search for cards with a given mono-color devotion.\n+ p You can also append a color to the query to use numbers instead like #[code dw:] or #[code devotiontow:].\n+ p #[strong Examples:]\n+ table.table\n+ tr\n+ td(scope=\"col\") #[code d:www]\n+ td(scope=\"col\") All cards with exactly 3 white devotion\n+ tr\n+ td(scope=\"col\") #[code devotiontor>2]\n+ td(scope=\"col\") All cards with more than 2 devotion to red.\n",
        "org_msg": "Added examples for devotion filtering.",
        "sim_msg": "Fix static files references with conditionals",
        "sim_diff": "diff --git a/src/renderer/templates/member/marketplace/exchange-item.pug b/src/renderer/templates/member/marketplace/exchange-item.pug .sk-list(style=\"margin-top: 28px;\")\n.item\n.bullet\n- img(src=\"{{$root.appendStaticPath('assets/images/icons/{{isInKycFields('first_name') ? 'tick' : 'question-mark'}}.svg')}}\" height=9)\n+ img(src=\"{{$root.appendStaticPath('assets/images/icons/'+(isInKycFields('first_name') ? 'tick' : 'question-mark')+'.svg')}}\" height=9)\nspan First Name\n.item\n.bullet\n- img(src=\"{{$root.appendStaticPath('assets/images/icons/{{isInKycFields('last_name') ? 'tick' : 'question-mark'}}.svg')}}\" height=9)\n+ img(src=\"{{$root.appendStaticPath('assets/images/icons/'+(isInKycFields('last_name') ? 'tick' : 'question-mark')+'.svg')}}\" height=9)\nspan Last Name\n.item\n.bullet\n- img(src=\"{{$root.appendStaticPath('assets/images/icons/{{isInKycFields('country_of_residency') ? 'tick' : 'question-mark'}}.svg')}}\" height=9)\n+ img(src=\"{{$root.appendStaticPath('assets/images/icons/'+(isInKycFields('country_of_residency') ? 'tick' : 'question-mark')+'.svg')}}\" height=9)\nspan Country Of Residence\n.column\n.sk-list(style=\"margin-top: 28px;\")\n.item\n.bullet\n- img(src=\"{{$root.appendStaticPath('assets/images/icons/{{isInKycFields('national_id') ? 'tick' : 'question-mark'}}.svg')}}\" height=9)\n+ img(src=\"{{$root.appendStaticPath('assets/images/icons/'+(isInKycFields('national_id') ? 'tick' : 'question-mark')+'.svg')}}\" height=9)\nspan National ID\n.item\n.bullet\n- img(src=\"{{$root.appendStaticPath('assets/images/icons/{{isInKycFields('id_selfie') ? 'tick' : 'question-mark'}}.svg')}}\" height=9)\n+ img(src=\"{{$root.appendStaticPath('assets/images/icons/'+(isInKycFields('id_selfie') ? 'tick' : 'question-mark')+'.svg')}}\" height=9)\nspan National ID Selfie\n",
        "chatgpt_cot": "Add new search options for cards with specific mono-color devotion levels in the \"filters.pug\" file under the \"info\" views directory."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1367,7 +1367,7 @@ function writeCard(res, card, maybe) {\nres.write(`${card.status},`);\nres.write(`${card.finish},`);\nres.write(`${maybe},`);\n- res.write(`${imgUrl},\"`);\n+ res.write(`${imgUrl},`);\nres.write(`${imgBackUrl},\"`);\ncard.tags.forEach((tag, tagIndex) => {\nif (tagIndex !== 0) {\n",
        "org_msg": "Remove extra comma in CSV export",
        "sim_msg": "More card generator debugging",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -31,14 +31,22 @@ const _waitForAllCardFonts = () => Promise.all([\nconsole.warn(err);\n});\n-const _getCanvasBlob = canvas => new Promise(function(resolve, reject) {\n+const _getCanvasBlob = canvas => new Promise((resolve, reject) => {\ncanvas.toBlob(blob => {\nresolve(blob);\n});\n});\n-const _getCanvasUrl = async canvas => {\n+const _getBlobDataUrl = async blob => new Promise((resolve, reject) => {\n+ const fileReader = new FileReader();\n+ fileReader.onload = () => {\n+ resolve(fileReader.result);\n+ };\n+ fileReader.onerror = reject;\n+ fileReader.readAsDataURL(blob);\n+});\n+const _getCanvasDataUrl = async canvas => {\nconst blob = await _getCanvasBlob(canvas);\n- const url = URL.createObjectURL(blob);\n+ const url = await _getBlobDataUrl(blob);\nreturn url;\n};\n@@ -80,12 +88,12 @@ export const generateObjectCard = async ({\nlet objectImage = await screenshotObjectApp({\napp,\n});\n- objectImage = await _getCanvasUrl(objectImage);\n+ objectImage = await _getCanvasDataUrl(objectImage);\nlet minterAvatarPreview = await screenshotAvatarUrl({\nstart_url: `./avatars/4205786437846038737.vrm`,\n});\n- minterAvatarPreview = await _getCanvasUrl(minterAvatarPreview);\n+ minterAvatarPreview = await _getCanvasDataUrl(minterAvatarPreview);\n// _previewImage(minterAvatarPreview, width, height);\nconst minterUsername = 'Scillia';\n@@ -98,7 +106,6 @@ export const generateObjectCard = async ({\nminterUsername,\nminterAvatarPreview,\n});\n- // try {\nconst cardImg = await generateCard({\nstats,\nwidth,\n@@ -110,9 +117,6 @@ export const generateObjectCard = async ({\n});\n_previewImage(cardImg, width, height);\nreturn cardImg;\n- /* } catch (err) {\n- console.warn(err);\n- } */\n};\nexport const generateCard = async ({\n@@ -143,8 +147,16 @@ export const generateCard = async ({\nconst el = svg;\n// name\n+ {\nconst nameEl = el.querySelector('#name');\nnameEl.innerHTML = name;\n+ }\n+\n+ // illustrator name\n+ {\n+ const illustratorNameEl = el.querySelector('#illustrator-name');\n+ illustratorNameEl.innerHTML = minterUsername;\n+ }\n// type icon\nfor (let i = 0; i < types.length; i++) {\n@@ -169,11 +181,19 @@ export const generateCard = async ({\nstatEl.innerHTML = escape(spec.stats[statName] + '');\n});\n- /* {\n- const imageEl = el.querySelector('#Image image');\n- imageEl.setAttribute('xlink:href', objectImage);\n+ // main image\n+ {\n+ const mainImageEl = el.querySelector('#main-image');\n+ mainImageEl.setAttribute('xlink:href', objectImage);\n}\n+\n+ // illustrator image\n{\n+ const illustartorImageEl = el.querySelector('#illustrator-image');\n+ illustartorImageEl.setAttribute('xlink:href', minterAvatarPreview);\n+ }\n+\n+ /* {\nconst lines = description.split('\\n');\nconst descriptionHeaderTextEl = el.querySelector('#description-header-text');\ndescriptionHeaderTextEl.innerHTML = lines[0];\n",
        "chatgpt_cot": "Fix issue with extra double quotes in imgUrl and imgBackUrl in writeCard function."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2872,7 +2872,7 @@ router.get('/redraft/:id', async (req, res) => {\nif (!srcDraft) {\nreq.flash('danger', 'This deck is not able to be redrafted.');\n- res.redirect(`/cube/deck/${req.params.id}`);\n+ return res.redirect(`/cube/deck/${req.params.id}`);\n}\nconst draft = new Draft();\n",
        "org_msg": "redraft hotfix",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "Fix redirection issue in cube_routes.js for redraft route. Changed res.redirect to return res.redirect to properly handle redirection when srcDraft is not found."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -663,7 +663,7 @@ router.get('/blog/:id/rss', function(req, res) {\nUser.findById(cube.owner, function(err, user) {\nBlog.find({\ncube: cube._id\n- }).sort('date').exec(function(err, blogs) {\n+ }).sort('-date').exec(function(err, blogs) {\nif (!user) {\nuser = {\nusername: 'unknown'\n@@ -676,10 +676,24 @@ router.get('/blog/:id/rss', function(req, res) {\nsite_url: 'https://cubecobra.com',\n});\n+\n+\nblogs.forEach((blog) => {\n+ let content = blog.html ? blog.html : blog.content;\n+\n+ if (blog.changelist) {\n+ const changeSetElement = `<div class=\"change-set\">${blog.changelist}</div>`;\n+ if (content) {\n+ content = content + changeSetElement;\n+ } else {\n+ content = changeSetElement;\n+ }\n+\n+ }\n+\nfeed.item({\ntitle: blog.title,\n- description: blog.html ? blog.html : blog.content,\n+ description: content,\nguid: blog.id,\ndate: blog.date\n});\n",
        "org_msg": "reverse date order; append changelist",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Refactor blog sorting and content generation in cube_routes.js\n- Change blog sorting to descending order\n- Add changelist to blog content if available"
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -911,8 +911,8 @@ router.get('/analysis/:id', async (req, res) => {\n});\nreturn cards;\n};\n- cube.cards = addDetails(cube.cards);\n- cube.maybe = addDetails(cube.maybe);\n+ cube.cards = addDetails(cube.cards || []);\n+ cube.maybe = addDetails(cube.maybe || []);\nconst priceDictQ = GetPrices([...pids]);\nconst eloDictQ = getElo([...cardNames], true);\n",
        "org_msg": "Fix issue where empty maybeboard",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Refactor cube_routes.js to handle null values in addDetails function for cube.cards and cube.maybe arrays. Fix potential null pointer exceptions."
    },
    {
        "org_diff": "diff --git a/src/components/CubeOverviewModal.js b/src/components/CubeOverviewModal.js import React, { Component } from 'react';\n+import PropTypes from 'prop-types';\n+import CubePropType from 'proptypes/CubePropType';\nimport {\nModal,\n@@ -364,5 +366,11 @@ class CubeOverviewModal extends Component {\n);\n}\n}\n+CubeOverviewModal.propTypes = {\n+ cube: CubePropType.isRequired,\n+ onError: PropTypes.func.isRequired,\n+ onCubeUpdate: PropTypes.func.isRequired,\n+};\n+CubeOverviewModal.defaultProps = {};\nexport default CubeOverviewModal;\n",
        "org_msg": "Add: Add PropTypes to CubeOverviewModal",
        "sim_msg": "Adjust stop modal UI based on review comments\nas per: https://github.com/ooni/probe-desktop/pull/156\\#issuecomment-651208424",
        "sim_diff": "diff --git a/renderer/components/home/StopTestModal.js b/renderer/components/home/StopTestModal.js import React from 'react'\nimport PropTypes from 'prop-types'\n-import { Flex, Box, Container, Text, Heading } from 'ooni-components'\n+import { Flex, Box, Container, Text, Heading, Button, Modal } from 'ooni-components'\nimport { FormattedMessage } from 'react-intl'\n+import styled from 'styled-components'\n-import { Modal, YesButton, NoButton } from '../Modal'\n+const StyledModal = styled(Modal)`\n+ border-radius: 8px;\n+ box-shadow: 4px 4px 10px black;\n+`\nconst StopTestModal = ({ show = true, onConfirm = () => {} , onCancel = () => {} }) => {\nreturn (\n- <Modal show={show}>\n+ <StyledModal bg='white' show={show} color='black' closeButton='right' onHideClick={onCancel}>\n<Container p={3}>\n<Flex flexDirection='column'>\n<Text textAlign='center'>\n- <Heading h={5}>\n+ <Heading h={4}>\n<FormattedMessage id='Modal.InterruptTest.Title' />\n</Heading>\n</Text>\n- <Box my={2}>\n+ <Box my={2} px={5}>\n<Text>\n<FormattedMessage id='Modal.InterruptTest.Paragraph' />\n</Text>\n</Box>\n</Flex>\n</Container>\n- <Flex>\n- <YesButton width={1/2} onClick={onConfirm}>\n- <FormattedMessage id='Modal.OK' />\n- </YesButton>\n- <NoButton width={1/2} onClick={onCancel}>\n- <FormattedMessage id='Modal.Cancel' />\n- </NoButton>\n+ <Flex justifyContent='flex-end' my={3}>\n+ <Button mx={3} width={1/3} inverted onClick={onCancel}>\n+ <Text fontWeight='bold'><FormattedMessage id='Modal.Cancel' /></Text>\n+ </Button>\n+ <Button mx={3} width={1/3} onClick={onConfirm}>\n+ <Text fontWeight='bold'><FormattedMessage id='Modal.OK' /></Text>\n+ </Button>\n</Flex>\n- </Modal>\n+ </StyledModal>\n)\n}\n",
        "chatgpt_cot": "Add PropTypes and CubePropType to CubeOverviewModal for type checking and validation. Set default props for CubeOverviewModal."
    },
    {
        "org_diff": "diff --git a/serverjs/util.js b/serverjs/util.js @@ -85,7 +85,7 @@ function binaryInsert(value, array, startVal, endVal) {\n}\n}\n-function addCardToCube(cube, card_details, idOverride) {\n+function addCardToCube(cube, card_details, idOverride, addedTmspOverride) {\ncube.cards.push({\ntags: ['New'],\nstatus: \"Not Owned\",\n@@ -93,7 +93,7 @@ function addCardToCube(cube, card_details, idOverride) {\ncmc: card_details.cmc,\ncardID: idOverride === undefined ? card_details._id : idOverride,\ntype_line: card_details.type,\n- addedTmsp: new Date(),\n+ addedTmsp: addedTmspOverride === undefined ? new Date() : addedTmspOverride,\nimgUrl: undefined\n});\n}\n",
        "org_msg": "add override for date added for unit testing in addCardToCube",
        "sim_msg": "Serve additional card data",
        "sim_diff": "diff --git a/server/services/CardService.js b/server/services/CardService.js @@ -25,7 +25,7 @@ class CardService {\n_.each(result, card => {\nif(options && options.shortForm) {\n- cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'unicity', 'influence_cost', 'pack_cards');\n+ cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'element', 'unicity', 'influence_cost', 'influence_pool', 'pack_cards');\n} else {\ncards[card.id] = card;\n}\n",
        "chatgpt_cot": "Add new parameter to addCardToCube function to allow for override of added timestamp, fixing issue with default timestamp generation."
    },
    {
        "org_diff": "diff --git a/src/analytics/Cloud.js b/src/analytics/Cloud.js -import React, { useContext, useRef } from 'react';\n+import React, { useContext, useMemo, useRef } from 'react';\nimport { TagCloud } from 'react-tagcloud';\n-import { UncontrolledTooltip } from 'reactstrap';\n+import { Input, InputGroup, InputGroupAddon, InputGroupText, UncontrolledTooltip } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport AsfanDropdown from 'components/AsfanDropdown';\nimport ThemeContext from 'contexts/ThemeContext';\nimport { isTouchDevice } from 'utils/Util';\n+import useQueryParam from 'hooks/useQueryParam';\nconst trigger = isTouchDevice() ? 'click' : 'hover';\nconst TagCloudTag = ({ tag, size, color }) => {\nconst spanRef = useRef();\n- console.log(tag);\nreturn (\n<div className=\"tag-cloud-tag mr-2\" style={{ verticalAlign: 'middle', display: 'inline-block' }}>\n<span style={{ color, fontSize: `${size}px` }} className=\"tag-cloud-tag\" ref={spanRef}>\n@@ -42,6 +42,9 @@ const COLOR_OPTIONS = {\nconst Cloud = ({ cards, cube, setAsfans, defaultFormatId }) => {\nconst theme = useContext(ThemeContext);\n+ const [exclude, setExclude] = useQueryParam('exclude', '');\n+ const excludeList = useMemo(() => (exclude ?? '').split(',').map((ex) => ex.trim()), [exclude]);\n+\nconst tags = {};\ncards.forEach((card) =>\ncard.tags.forEach((tag) => {\n@@ -55,7 +58,9 @@ const Cloud = ({ cards, cube, setAsfans, defaultFormatId }) => {\n}\n}),\n);\n- const words = Object.entries(tags).map(([value, count]) => ({ value, count }));\n+ const words = Object.entries(tags)\n+ .filter(([tag]) => !excludeList.includes(tag))\n+ .map(([value, count]) => ({ value, count }));\nconst tagRenderer = (tag, size, color) => (\n<TagCloudTag tag={tag} size={size} color={color} key={tag.key || tag.value} />\n@@ -68,6 +73,12 @@ const Cloud = ({ cards, cube, setAsfans, defaultFormatId }) => {\nTags in your cube with random colors weighted by the expected number of cards with that tag a player will open\non average.\n</p>\n+ <InputGroup>\n+ <InputGroupAddon addonType=\"prepend\">\n+ <InputGroupText>Comma separated Tags to exclude</InputGroupText>\n+ </InputGroupAddon>\n+ <Input placeholder=\"Excluded Tags\" onChange={(e) => setExclude(e.target.value)} value={exclude} />\n+ </InputGroup>\n<AsfanDropdown cube={cube} defaultFormatId={defaultFormatId} setAsfans={setAsfans} />\n<TagCloud minSize={10} maxSize={80} colorOptions={COLOR_OPTIONS[theme]} tags={words} renderer={tagRenderer} />\n</>\n",
        "org_msg": "Add a way to exclude tags from the Tag Cloud.",
        "sim_msg": "fix: remove unused ref",
        "sim_diff": "diff --git a/components/system/components/Tag.js b/components/system/components/Tag.js @@ -265,8 +265,6 @@ export const Tag = ({ tags, onChange, style, placeholder }) => {\nconst [value, setValue] = React.useState(\"\");\nconst [open, setOpen] = React.useState(false);\n- const inputEl = React.useRef();\n-\nconst removeTag = (tag) => {\nconst newTags = [...tags];\nconst tagIndex = tags.indexOf(tag);\n@@ -298,7 +296,6 @@ export const Tag = ({ tags, onChange, style, placeholder }) => {\n<div css={STYLES_TAG_CONTAINER} style={{ ...style }}>\n<div css={STYLES_INPUT_CONTAINER}>\n<input\n- ref={inputEl}\ntype=\"text\"\ncss={STYLES_INPUT}\nplaceholder={placeholder}\n",
        "chatgpt_cot": "Add useMemo and useQueryParam hooks, exclude functionality, and input field to Cloud component."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -129,6 +129,9 @@ function convertExtraCard(card) {\nlet newcard = {};\nnewcard._id = card.id + '2';\nnewcard.set = card.set;\n+ newcard.promo = card.promo;\n+ newcard.digital = card.digital;\n+ newcard.border_color = card.border_color;\nnewcard.full_name = name + ' [' + card.set + '-' + card.collector_number + ']';\nnewcard.name = name;\nnewcard.name_lower = name.toLowerCase();\n",
        "org_msg": "Update database for transform cards as well.",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "Add new fields to card object in updatecards.js"
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -513,7 +513,7 @@ router.get('/blog/:id', function(req, res) {\nrouter.get('/blog/:id/:page', async (req, res) => {\ntry {\nvar cube_id = req.params.id;\n- cube = await Cube.findOne(build_id_query(cube_id));\n+ const cube = await Cube.findOne(build_id_query(cube_id));\nif (!cube) {\nreq.flash('danger', 'Cube not found');\n@@ -588,24 +588,23 @@ router.get('/blog/:id/:page', async (req, res) => {\nloginCallback: '/cube/blog/' + req.params.id,\n});\n} catch (err) {\n- return res.status(500).send(err);\n+ util.handleRouteError(res, err, '/cube/overview/' + req.params.id);\n}\n});\n-router.get('/rss/:id', function(req, res) {\n+router.get('/rss/:id', async (req, res) => {\n+ try {\nvar split = req.params.id.split(';');\nvar cube_id = split[0];\n- Cube.findOne(build_id_query(cube_id), function(err, cube) {\n- if (!cube) {\n- req.flash('danger', 'Cube not found');\n- res.redirect('/404/');\n- } else {\n- User.findById(cube.owner, function(err, user) {\n- Blog.find({\n+ const cube = await Cube.findOne(build_id_query(cube_id));\n+ const user = await User.findById(cube.owner);\n+ const blogs = await log\n+ .find({\ncube: cube._id,\n})\n.sort('-date')\n- .exec(function(err, blogs) {\n+ .exec();\n+\nif (!user) {\nuser = {\nusername: 'unknown',\n@@ -639,11 +638,10 @@ router.get('/rss/:id', function(req, res) {\n});\nres.set('Content-Type', 'text/xml');\nres.status(200).send(feed.xml());\n- });\n- });\n+ } catch (err) {\n+ util.handleRouteError(res, err, '/404/');\n}\n});\n-});\nrouter.get('/compare/:id_a/to/:id_b', function(req, res) {\nconst id_a = req.params.id_a;\n",
        "org_msg": "Revised RSS and blog page",
        "sim_msg": "[server] Use most recent navState in preloadedState for importable error report download",
        "sim_diff": "diff --git a/server/src/fetchers/report-fetchers.js b/server/src/fetchers/report-fetchers.js // @flow\nimport type { Viewer } from '../session/viewer';\n-import type {\n- FetchErrorReportInfosResponse,\n- FetchErrorReportInfosRequest,\n- ReduxToolsImport,\n+import {\n+ type FetchErrorReportInfosResponse,\n+ type FetchErrorReportInfosRequest,\n+ type ReduxToolsImport,\n+ reportTypes,\n} from 'lib/types/report-types';\nimport { ServerError } from 'lib/utils/errors';\n@@ -72,7 +73,7 @@ async function fetchReduxToolsImport(\nconst query = SQL`\nSELECT user, report, creation_time\nFROM reports\n- WHERE id = ${id}\n+ WHERE id = ${id} AND type = ${reportTypes.ERROR}\n`;\nconst [result] = await dbQuery(query);\nif (result.length === 0) {\n@@ -83,6 +84,10 @@ async function fetchReduxToolsImport(\nconst _persist = row.report.preloadedState._persist\n? row.report.preloadedState._persist\n: {};\n+ const navState =\n+ row.report.currentState && row.report.currentState.navState\n+ ? row.report.currentState.navState\n+ : undefined;\nreturn {\npreloadedState: {\n...row.report.preloadedState,\n@@ -91,6 +96,7 @@ async function fetchReduxToolsImport(\n// Setting this to false disables redux-persist\nrehydrated: false,\n},\n+ navState,\nfrozen: true,\n},\npayload: row.report.actions,\n",
        "chatgpt_cot": "Refactor code to use const for cube variable, and update error handling for /rss/:id route to use async/await and handleRouteError for error handling."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -55,6 +55,8 @@ winston.configure({\n],\n});\n+console.log(`Logging to ${errorFile.name} and ${combinedFile.name}`);\n+\nif (secrets.loggly) {\nwinston.add(\nnew Loggly({\n@@ -64,10 +66,9 @@ if (secrets.loggly) {\njson: true,\n}),\n);\n+ console.log(`Logging to Loggly @ https://${secrets.loggly.subdomain}.loggly.com.`);\n}\n-console.log(`Logging to ${errorFile.name} and ${combinedFile.name}`);\n-\n// Connect db\nmongoose.connect(mongosecrets.connectionString, {\nuseCreateIndex: true,\n",
        "org_msg": "Add console message noting loggly.",
        "sim_msg": "profile reboot fix",
        "sim_diff": "diff --git a/config/engine_config.js b/config/engine_config.js @@ -16,6 +16,7 @@ var Config = require('./config').Config;\nvar log = require('../log');\nvar logger = log.logger('config');\nvar profiles = require('../profiles');\n+var process = require('process');\n// The EngineConfig object keeps track of engine-specific settings\nEngineConfig = function() {\n@@ -72,7 +73,6 @@ EngineConfig.prototype.update = function(data, callback) {\ncallback(err);\n} else {\nconsole.log('shutting down');\n- console.log(process.exit());\nprocess.exit(1);\n}\n});\n",
        "chatgpt_cot": "Add logging for error and combined files, and log to Loggly if secrets.loggly is available. Fix duplicate logging statement. Connect to the database."
    },
    {
        "org_diff": "diff --git a/routes/comment_routes.js b/routes/comment_routes.js @@ -141,11 +141,13 @@ router.post(\n});\n}\n+ console.log(newComment.owner);\n+\ncomment.owner = newComment.owner;\ncomment.ownerName = newComment.ownerName;\ncomment.image = newComment.owner\n- ? 'https://img.scryfall.com/cards/art_crop/front/0/c/0c082aa8-bf7f-47f2-baf8-43ad253fd7d7.jpg?1562826021'\n- : req.user.image;\n+ ? req.user.image\n+ : 'https://img.scryfall.com/cards/art_crop/front/0/c/0c082aa8-bf7f-47f2-baf8-43ad253fd7d7.jpg?1562826021';\ncomment.artist = newComment.owner ? 'Allan Pollack' : req.user.artist;\ncomment.updated = true;\ncomment.content = sanitize(newComment.content.substring(0, 500));\n",
        "org_msg": "Fix edit or delete comment profile pic",
        "sim_msg": "Remove /transfer route",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -8,7 +8,6 @@ import Settings from './app/AppSettings';\nimport Page from './feed/Page';\nimport User from './user/User';\n-import Transfer from './wallet/Transfer';\nimport Tags from './tags/Tags';\nimport Donors from './statics/Donors';\nimport Post from './post/Post';\n@@ -29,13 +28,6 @@ export default (\n<Route path=\"/team\" component={Team} />\n<Route path=\"/tags\" component={Tags} />\n<Route path=\"/donors\" component={Donors} />\n- <Route\n- path=\"/transfer\"\n- render={() =>\n- (<RequireLogin>\n- <Transfer />\n- </RequireLogin>)}\n- />\n<Route\npath=\"/bookmarks\"\nrender={() =>\n",
        "chatgpt_cot": "Refactor comment owner image assignment for clarity and consistency in comment_routes file. Fix conditional expression and update artist information."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -22,6 +22,7 @@ const carddb = require('./serverjs/cards.js');\nconst errorFile = tmp.fileSync({ prefix: `node-error-${process.pid}-`, postfix: '.log', discardDescriptor: true });\nconst combinedFile = tmp.fileSync({ prefix: `node-combined-${process.pid}-`, postfix: '.log', discardDescriptor: true });\n+console.log(`Logging to ${errorFile.name} and ${combinedFile.name}`);\nconst logger = winston.createLogger({\nlevel: 'info',\n@@ -46,7 +47,11 @@ if (process.env.NODE_ENV !== 'production') {\ncarddb.initializeCardDb();\n// Connect db\n-mongoose.connect(mongosecrets.connectionString);\n+mongoose.connect(mongosecrets.connectionString, {\n+ useCreateIndex: true,\n+ useNewUrlParser: true,\n+ useUnifiedTopology: true,\n+});\nconst db = mongoose.connection;\ndb.once('open', () => {\nlogger.info('Connected to Mongo.');\n",
        "org_msg": "Kill mongo warnings.",
        "sim_msg": "Reject amend commits mid merge/rebase/cherry-pick",
        "sim_diff": "diff --git a/node/lib/cmd/commit.js b/node/lib/cmd/commit.js @@ -136,6 +136,7 @@ const doAmend = co.wrap(function *(args) {\nconst Commit = require(\"../util/commit\");\nconst GitUtil = require(\"../util/git_util\");\nconst Hook = require(\"../util/hook\");\n+ const SequencerStateUtil = require(\"../util/sequencer_state_util\");\nconst UserError = require(\"../util/user_error\");\nconst usingPaths = 0 !== args.file.length;\n@@ -148,6 +149,13 @@ const doAmend = co.wrap(function *(args) {\nconst repo = yield GitUtil.getCurrentRepo();\nconst cwd = process.cwd();\n+ const seq = yield SequencerStateUtil.readSequencerState(repo.path());\n+ if (seq) {\n+ const ty = seq.type.toLowerCase();\n+ const msg = \"You are in the middle of a \" + ty + \" -- cannot amend.\";\n+ throw new UserError(msg);\n+ }\n+\nyield Commit.doAmendCommand(repo,\ncwd,\nmessage,\n",
        "chatgpt_cot": "Add logging for error and combined files, and update mongoose connection options to fix connection issues."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -447,8 +447,8 @@ router.get('/overview/:id', async (req, res) => {\nlet totalPriceOwned = 0;\nlet totalPricePurchase = 0;\nfor (const card of cube.cards) {\n- if (!['Not Owned', 'Proxied'].includes(card.status)) {\n- if (card.finish === 'Foil' && card.details.prices.usd_foil) {\n+ if (!['Not Owned', 'Proxied'].includes(card.status) && card.details.prices) {\n+ if (card.finish === 'Foil') {\ntotalPriceOwned += card.details.prices.usd_foil || card.details.prices.usd || 0;\n} else {\ntotalPriceOwned += card.details.prices.usd || card.details.prices.usd_foil || 0;\n",
        "org_msg": "Fix overview crash",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Refactor card status check and price calculation in cube routes for better clarity and accuracy."
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -439,48 +439,43 @@ router.get('/view/:id', async function(req, res) {\n}\n});\n-router.get('/decks/:id', async function(req, res) {\n+router.get('/decks/:userid', function(req, res) {\n+ res.redirect('/user/decks/'+req.params.userid+'/0')\n+})\n+\n+router.get('/decks/:userid/:page', async function(req, res) {\ntry{\n- var split = req.params.id.split(';');\n- var userid = split[0];\n- const user = await User.findById(userid);\n- const decks = await Deck.find({owner: userid}).sort('-date').exec();\n+ const userid = req.params.userid;\n+ const page = req.params.page;\n+ const pagesize = 30;\n+\n+ const userq = User.findById(userid).exec();\n+ const decksq = Deck.find({owner: userid}).sort({'date':-1}).skip(pagesize*page).limit(30).exec();\n+ const numDecksq = await Deck.countDocuments({owner: userid}).exec();\n+\n+ const [user, decks, numDecks] = await Promise.all([userq, decksq, numDecksq]);\n+\nif (!user) {\nreq.flash('danger', 'User not found');\nreturn res.status(404).render('misc/404', {});\n}\n- var pages = null;\n- var pagesize = 30;\n- if (decks.length > 0) {\n- if (decks.length > pagesize) {\n- pages = [];\n- var page = parseInt(split[1]);\n- if (!page) {\n- page = 0;\n- }\n- for (i = 0; i < decks.length / pagesize; i++) {\n+\n+ const pages = [];\n+ for (i = 0; i < numDecks / pagesize; i++) {\nif (page == i) {\npages.push({\n- url: '/user/decks/' + userid + ';' + i,\n+ url: '/user/decks/' + userid + '/' + i,\ncontent: (i + 1),\nactive: true\n});\n} else {\npages.push({\n- url: '/user/decks/' + userid + ';' + i,\n+ url: '/user/decks/' + userid + '/' + i,\ncontent: (i + 1),\n});\n}\n}\n- deck_page = [];\n- for (i = 0; i < pagesize; i++) {\n- if (decks[i + page * pagesize]) {\n- deck_page.push(decks[i + page * pagesize]);\n- }\n- }\n- decks = deck_page;\n- }\n- }\n+\nreturn res.render('user/user_decks', {\nuser_limited: {\nusername: user.username,\n",
        "org_msg": "Revised user decks route",
        "sim_msg": "Update for 404 page new title breaking redirects",
        "sim_diff": "diff --git a/DeletedUsersHelper.user.js b/DeletedUsersHelper.user.js // @description Additional capability and improvements to display/handle deleted users\n// @homepage https://github.com/samliew/SO-mod-userscripts\n// @author @samliew\n-// @version 1.19.6\n+// @version 1.20\n//\n// @include https://*stackoverflow.com/*\n// @include https://*serverfault.com/*\n$.get(`https://${location.hostname}/users/${uid}`)\n.done(function(data) {\n-\n- // If deletion record not found, do nothing\n- if(data.includes('Could not find a user or deletion record')) {\n- reject();\n- return;\n- }\n-\nconst page = $(data);\nconst pageTitle = $('title', data).text();\ngetDeletedUsername(this.dataset.uid)\n.then(function(v) {\nuserlink.after(`<div class=\"orig-username\" title=\"display name before deletion\">${v}</div>`);\n- })\n- .catch(function() { });\n+ });\nreturn false;\n});\nif(/\\d+/.test(location.pathname) === false) return;\n+ const is404 = document.title.toLowerCase().includes('page not found');\nconst uid = Number(location.pathname.match(/\\d+/)[0]);\nconst userUrl = `/users/${uid}`;\n// 404 on user page or mod page with an ID in the URL\nif((document.body.classList.contains('user-page') || document.body.classList.contains('mod-page')) &&\n- !isNaN(uid) && document.title.indexOf('Page Not Found') === 0) {\n+ !isNaN(uid) && is404) {\n// Redirect to user profile page if not already on it\nif(location.pathname !== userUrl) location = userUrl;\n}\n// 404 on short user link page /u/{uid}\n- if(/\\/u\\/\\d+/.test(location.pathname) && document.title.indexOf('Page Not Found') === 0) {\n+ if(/\\/u\\/\\d+/.test(location.pathname) && is404) {\n// Redirect to user profile page\nif(location.pathname !== userUrl) location = userUrl;\n}\n}\n- // If on user profile page and not 404\n+ // If on user profile page\nif(location.pathname.indexOf(userUrl) >= 0) {\n// Is on deleted user's page\n",
        "chatgpt_cot": "Refactor user decks route for pagination and clarity. Adjust route to include user id and page number, optimize query for better performance."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -444,7 +444,7 @@ router.get('/overview/:id', async (req, res) => {\nlet totalPriceOwned = 0;\nlet totalPricePurchase = 0;\nfor (const card of cube.cards) {\n- if (card.status !== 'Not Owned') {\n+ if (!['Not Owned', 'Proxied'].includes(card.status)) {\nlet priceOwned = 0;\nif (card.finish === 'Foil') {\npriceOwned = priceDict[card.details.tcgplayer_id + '_foil'] || 0;\n",
        "org_msg": "Don't include proxies in buy price.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Refactor card status condition in cube_routes.js\nThe code diff modifies the condition for card status, adding 'Proxied' as an exception. This refactors the logic for calculating total price."
    },
    {
        "org_diff": "diff --git a/src/pages/DashboardPage.js b/src/pages/DashboardPage.js @@ -26,7 +26,7 @@ const DashboardPage = ({ posts, cubes, decks, canEdit, userId }) => (\n) : (\n<p className=\"m-2\">\nYou don't have any cubes.{' '}\n- <Button tag=\"a\" data-toggle=\"modal\" data-target=\"#cubeModal\">\n+ <Button tag=\"button\" data-toggle=\"modal\" data-target=\"#cubeModal\" color=\"success\">\nAdd a new cube?\n</Button>\n</p>\n",
        "org_msg": "fixed style for add new cube button",
        "sim_msg": "Update Section Row with align items prop",
        "sim_diff": "diff --git a/src/components/dashboard/Dashboard.js b/src/components/dashboard/Dashboard.js @@ -180,7 +180,7 @@ const Dashboard = props => {\n</Section.Stack>\n</Section.Row>\n)}\n- <Section.Row style={styles.buttonsRow}>\n+ <Section.Row style={styles.buttonsRow} alignItems=\"stretch\">\n<PushButton\nrouteName={'Send'}\nscreenProps={screenProps}\n@@ -226,7 +226,6 @@ const Dashboard = props => {\nconst styles = StyleSheet.create({\nbuttonsRow: {\n- alignItems: 'stretch',\nmarginVertical: normalize(8)\n},\nleftButton: {\n",
        "chatgpt_cot": "Update cube modal button to have a success color and change tag to button for better user experience on DashboardPage."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -17,7 +17,7 @@ const router = express.Router();\n/* Minimum number of picks for data to show up in Top Cards list. */\nconst MIN_PICKS = 100;\n/* Maximum results to return on a vague filter string. */\n-const MAX_RESULTS = 1000;\n+const MAX_RESULTS = 500;\n/* Gets k sorted minimum elements of arr. */\n/* Modifies arr. */\n@@ -69,19 +69,31 @@ async function topCards(filter) {\nreturn nonPromo || possible[0];\n});\n- const ratingsQ = CardRating.find({\n+ const ratingsQ = CardRating.find(\n+ filter.length === 0\n+ ? {}\n+ : {\nname: {\n$in: names,\n},\n- });\n+ },\n+ )\n+ .sort('-elo')\n+ .limit(MAX_RESULTS)\n+ .lean();\nconst cardDataQ = Card.find(\n- {\n+ filter.length === 0\n+ ? {}\n+ : {\ncardName: {\n$in: names.map((name) => name.toLowerCase()),\n},\n},\n'cardName cubes',\n- );\n+ )\n+ .sort('-cubes')\n+ .limit(4 * MAX_RESULTS)\n+ .lean();\nconst [ratings, cardData] = await Promise.all([ratingsQ, cardDataQ]);\n",
        "org_msg": "Heuristics to optimize Top Cards.",
        "sim_msg": "refactor: change route to /cart/checkout",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"cart\", \"/cart\", \"cart\")\n- .add(\"checkout\", \"/checkout\", \"checkout\")\n+ .add(\"checkout\", \"/cart/checkout\", \"checkout\")\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:slugOrId\", \"product\")\n.add(\"product\", \"/product/:slugOrId/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n",
        "chatgpt_cot": "\"Update MAX_RESULTS to 500, add filter condition to ratings and cardData queries to limit results, and modify sort and limit methods.\""
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -721,8 +721,8 @@ function getLabels(sort) {\n}\nelse if (sort == 'Types-Multicolor')\n{\n- return ['Creature','Instant','Sorcery','Enchantment','Artifact','Planeswalker','Conspiracy','Scheme','Vanguard','Phenomenon','Contraption','Plane','Land','Azorius','Dimir','Rakdos','Gruul','Selesnya','Orzhov',\n- 'Izzet','Golgari','Boros','Simic','Bant','Esper','Grixis','Jund','Naya','Abzan','Jeskai','Sultai','Mardu','Temur','Non-White','Non-Blue','Non-Black','Non-Red','Non-Green','Five Color'];\n+ return ['Creature','Instant','Sorcery','Enchantment','Artifact','Planeswalker','Conspiracy','Scheme','Vanguard','Phenomenon','Contraption','Plane','Land','Azorius','Dimir','Rakdos','Gruul','Selesnya','Orzhov','Golgari','Simic','Izzet','Boros',\n+ 'Bant','Esper','Grixis','Jund','Naya','Abzan','Jeskai','Sultai','Mardu','Temur','Non-White','Non-Blue','Non-Black','Non-Red','Non-Green','Five Color'];\n}\nelse if (sort=='Legality')\n{\n",
        "org_msg": "Reorderd Guilds",
        "sim_msg": "add setup functions",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -133,6 +133,21 @@ class Player extends Spectator {\nreturn cardsToReturn;\n}\n+ attachStronghold(){\n+ this.moveCard(this.stronghold, 'stronghold province');\n+ }\n+\n+ fillProvinces(){\n+ var provinces = ['province 1', 'province 2', 'province 3', 'province 4'];\n+ _.each(provinces, province => {\n+ if(_.find(this.getSourceList(province), card => { return card.isDynasty })) {\n+ //Noop\n+ } else {\n+ this.moveCard(this.dynastyDeck.first(), province);\n+ }\n+ });\n+ }\n+\nanyCardsInPlay(predicate) {\nreturn this.allCards.any(card => card.location === 'play area' && predicate(card));\n}\n@@ -402,10 +417,6 @@ class Player extends Spectator {\n});\n}\n- isCharacterDead(card) {\n- return card.getType() === 'character' && card.isUnique() && this.isCardNameInList(this.deadPile, card);\n- }\n-\nplayCard(card) {\nif(!card) {\nreturn false;\n@@ -433,15 +444,7 @@ class Player extends Spectator {\ncanPutIntoPlay(card) {\nvar owner = card.owner;\n- return (\n- (!this.isCharacterDead(card) || this.canResurrect(card)) &&\n- (\n- owner === this ||\n- !this.getDuplicateInPlay(card) &&\n- !owner.getDuplicateInPlay(card) &&\n- (!owner.isCharacterDead(card) || owner.canResurrect(card))\n- )\n- );\n+ return true;\n}\ncanResurrect(card) {\n",
        "chatgpt_cot": "Refactor getLabels function to fix sorting issue. Modified the return array to maintain the correct order of card types."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1084,7 +1084,7 @@ router.post('/importcubetutor/:id', ensureAuth, body('cubeid').toInt(), flashVal\nrouter.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\ntry {\n- const cube = await Cube.findOne(build_id_query(req.params.id));\n+ const cube = await Cube.findOne(build_id_query(req.params.id)).lean();\nif (!cube) {\nreq.flash('danger', 'Cube not found.');\nreturn res.redirect('/404');\n@@ -1115,27 +1115,29 @@ router.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\ncards.push(item.substring(item.indexOf('x') + 1));\n}\n} else {\n- let selected;\n+ let selected = null;\n// does not have set info\nconst normalizedName = cardutil.normalizeName(item);\nconst potentialIds = carddb.getIdsFromName(normalizedName);\nif (potentialIds && potentialIds.length > 0) {\n- // TODO: change this to grab a version that exists in the cube\n- for (let k = 0; k < cube.cards.length; i++) {\n- if (carddb.cardFromId(cube.cards[k].cardID).name_lower === normalizedName) {\n- selected = cube.cards[k];\n- selected.details = carddb.cardFromId(cube.cards[k].cardID);\n- }\n+ const inCube = cube.cards.find((card) => carddb.cardFromId(card.cardID).name_lower === normalizedName);\n+ if (inCube) {\n+ selected = {\n+ ...inCube,\n+ details: carddb.cardFromId(inCube.cardID),\n+ };\n+ } else {\n+ const reasonableId = carddb.getMostReasonable(normalizedName, cube.defaultPrinting)._id;\n+ const selectedId = reasonableId || potentialIds[0];\n+ selected = {\n+ cardID: selectedId,\n+ details: carddb.cardFromId(selectedId),\n}\n- if (!selected) {\n- // TODO: get most reasonable card?\n- selected = { cardID: potentialIds[0] };\n- selected.details = carddb.cardFromId(potentialIds[0]);\n}\n}\nif (selected) {\n// push into correct column.\n- let column = Math.min(7, selected.details.cmc);\n+ let column = Math.min(7, selected.cmc !== undefined ? selected.cmc : selected.details.cmc);\nif (!selected.details.type.toLowerCase().includes('creature')) {\ncolumn += 8;\n}\n@@ -1155,17 +1157,17 @@ router.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\ndeck.newformat = true;\ndeck.name = `${req.user.username}'s decklist upload on ${deck.date.toLocaleString('en-US')}`;\n- if (!cube.decks) {\n- cube.decks = [];\n- }\n- cube.decks.push(deck._id);\n-\n- if (!cube.numDecks) {\n- cube.numDecks = 0;\n- }\n- cube.numDecks += 1;\n-\n- await Promise.all([cube.save(), deck.save()]);\n+ await deck.save();\n+ await Cube.updateOne({\n+ _id: cube._id,\n+ }, {\n+ $inc: {\n+ numDecks: 1,\n+ },\n+ $push: {\n+ decks: deck._id,\n+ },\n+ });\nreturn res.redirect(`/cube/deckbuilder/${deck._id}`);\n} catch (err) {\n",
        "org_msg": "Fix up deck upload code.",
        "sim_msg": "some cards appear in multiple packs, check all for match",
        "sim_diff": "diff --git a/client/DeckEditor.jsx b/client/DeckEditor.jsx @@ -178,7 +178,12 @@ class InnerDeckEditor extends React.Component {\nlet card = _.find(this.props.cards, function(card) {\nif(pack && card.pack_cards.length) {\n- return card.name.toLowerCase() === cardName.toLowerCase() && card.pack_cards[0].pack.id === pack.id;\n+ if(card.name.toLowerCase() === cardName.toLowerCase()) {\n+ return _.find(card.pack_cards, function(packCard) {\n+ return packCard.pack.id === pack.id;\n+ });\n+ }\n+ return false;\n}\nreturn card.name.toLowerCase() === cardName.toLowerCase();\n});\n",
        "chatgpt_cot": "Refactor cube_routes.js to handle decklist upload with lean(), fix selected variable initialization, and optimize deck creation and cube update for better performance."
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -39,8 +39,8 @@ const NumericField = ({ name, humanName, placeholder, valueOp, value, onChange,\n<Input type=\"text\" name={name} placeholder={placeholder} value={value} onChange={onChange} />\n</InputGroup>;\n-const allFields = ['name', 'oracle', 'cmc', 'color', 'colorIdentity', 'mana', 'type', 'tag', 'status', 'price', 'priceFoil', 'power', 'toughness', 'rarity'];\n-const numFields = ['cmc', 'price', 'priceFoil', 'power', 'toughness', 'rarity'];\n+const allFields = ['name', 'oracle', 'cmc', 'color', 'colorIdentity', 'mana', 'type', 'tag', 'status', 'price', 'priceFoil', 'power', 'toughness', 'loyalty', 'rarity'];\n+const numFields = ['cmc', 'price', 'priceFoil', 'power', 'toughness', 'loyalty', 'rarity'];\nconst AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props }) =>\n<Modal isOpen={isOpen} toggle={toggle} size=\"lg\" {...props}>\n@@ -79,12 +79,12 @@ const AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props\n)}\n</Input>\n</InputGroup>\n- <NumericField name=\"price\" humanName=\"Price\" placeholder={'Any decimal number, e.g. \"3.50\"'} />\n- <NumericField name=\"priceFoil\" humanName=\"Foil Price\" placeholder={'Any decimal number, e.g. \"14.00\"'} />\n- <NumericField name=\"power\" humanName=\"Power\" placeholder={'Any value, e.g. \"2\"'} />\n- <NumericField name=\"toughness\" humanName=\"Toughness\" placeholder={'Any value, e.g. \"2\"'} />\n- <NumericField name=\"loyalty\" humanName=\"Loyalty\" placeholder={'Any value, e.g. \"3\"'} />\n- <NumericField name=\"rarity\" humanName=\"Rarity\" placeholder={'Any rarity, e.g. \"common\"'} />\n+ <NumericField name=\"price\" humanName=\"Price\" placeholder={'Any decimal number, e.g. \"3.50\"'} value={values.price} onChange={onChange} />\n+ <NumericField name=\"priceFoil\" humanName=\"Foil Price\" placeholder={'Any decimal number, e.g. \"14.00\"'} value={values.priceFoil} onChange={onChange} />\n+ <NumericField name=\"power\" humanName=\"Power\" placeholder={'Any value, e.g. \"2\"'} value={values.power} onChange={onChange} />\n+ <NumericField name=\"toughness\" humanName=\"Toughness\" placeholder={'Any value, e.g. \"2\"'} value={values.toughness} onChange={onChange} />\n+ <NumericField name=\"loyalty\" humanName=\"Loyalty\" placeholder={'Any value, e.g. \"3\"'} value={values.loyalty} onChange={onChange} />\n+ <NumericField name=\"rarity\" humanName=\"Rarity\" placeholder={'Any rarity, e.g. \"common\"'} value={values.rarity} onChange={onChange} />\n</ModalBody>\n<ModalFooter>\n<Button color=\"danger\" aria-label=\"Close\" onClick={toggle}>Cancel</Button>\n",
        "org_msg": "Fix uncontrolled fields.",
        "sim_msg": "No walletAddress at other tiers",
        "sim_diff": "diff --git a/src/components/Common/CrowdsaleBlock.js b/src/components/Common/CrowdsaleBlock.js @@ -46,12 +46,18 @@ export class CrowdsaleBlock extends React.Component {\ntitle={CROWDSALE_SETUP_NAME}\nvalue={crowdsale[num].tier}\nonChange={(e) => onChange(e, 'crowdsale', num, 'tier')}/>\n- <InputField\n+ {/*<InputField\nside='right'\ntype='text'\ntitle={WALLET_ADDRESS}\nvalue={crowdsale[num].walletAddress}\n- onChange={(e) => onChange(e, 'crowdsale', num, 'walletAddress')}/>\n+ onChange={(e) => onChange(e, 'crowdsale', num, 'walletAddress')}/>*/}\n+ <InputField\n+ side='right'\n+ type='number'\n+ title={RATE}\n+ value={pricingStrategy[num].rate}\n+ onChange={(e) => onChange(e, 'pricingStrategy', num, 'rate')}/>\n<InputField\nside='left'\ntype='datetime-local'\n@@ -69,17 +75,11 @@ export class CrowdsaleBlock extends React.Component {\n<InputField\nside='left'\ntype='number'\n- title={RATE}\n- value={pricingStrategy[num].rate}\n- onChange={(e) => onChange(e, 'pricingStrategy', num, 'rate')}/>\n- <InputField\n- side='right'\n- type='number'\ntitle={SUPPLY}\nvalue={crowdsale[num].supply}\nonChange={(e) => onChange(e, 'crowdsale', num, 'supply')}/>\n<RadioInputField\n- side='left'\n+ side='right'\ntitle={ALLOWMODIFYING}\nitems={[\"on\", \"off\"]}\nvals={[\"on\", \"off\"]}\n",
        "chatgpt_cot": "Change the value of numeric fields to the value from the state."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeDeckPage.js b/src/pages/CubeDeckPage.js @@ -11,15 +11,21 @@ import {\nNavLink,\nRow,\nLabel,\n- Input\n+ Input,\n+ ListGroup,\n+ ListGroupItem\n} from 'reactstrap';\nimport CustomImageToggler from 'components/CustomImageToggler';\nimport { DisplayContextProvider } from 'components/DisplayContext';\nimport DynamicFlash from 'components/DynamicFlash';\n+import { getCardColorClass } from 'components/TagContext';\n+import withAutocard from 'components/WithAutocard';\nimport CubeLayout from 'layouts/CubeLayout';\nimport DeckCard from 'components/DeckCard';\n+const AutocardItem = withAutocard(ListGroupItem);\n+\nconst CubeDeckPage = ({\ncube,\ndrafter,\n@@ -43,6 +49,8 @@ const CubeDeckPage = ({\n[isOpen],\n);\n+ console.log(deck.seats);\n+\nreturn (\n<CubeLayout cube={cube} cubeID={deck.cube} activeLink=\"playtest\">\n<DisplayContextProvider>\n@@ -81,6 +89,32 @@ const CubeDeckPage = ({\n<DeckCard seat={deck.seats[seatIndex]} comments={deck.comments} drafter={drafter} deckid={deck._id}/>\n</Col>\n</Row>\n+ <Row className=\"row-low-padding\">\n+ {deck.seats.map((seat, botIndex) => (\n+ seat.pickorder &&\n+ <Col\n+ key={/* eslint-disable-line react/no-array-index-key */ botIndex}\n+ xs={6}\n+ sm={3}\n+ className=\"col-md-1-4285 col-low-padding\"\n+ >\n+ <ListGroup className=\"list-outline\">\n+ <ListGroupItem className=\"list-group-heading\">{seat.username ? seat.username : seat.name}</ListGroupItem>\n+ {seat.pickorder.map((card, cardIndex) => (\n+ <AutocardItem\n+ key={/* eslint-disable-line react/no-array-index-key */ cardIndex}\n+ tag=\"a\"\n+ card={{ details: card }}\n+ className={`card-list-item d-flex flex-row ${getCardColorClass({ details: card })}`}\n+ href={card._id ? `/tool/card/${card._id}` : null}\n+ >\n+ {card.name}\n+ </AutocardItem>\n+ ))}\n+ </ListGroup>\n+ </Col>\n+ ))}\n+ </Row>\n</DisplayContextProvider>\n</CubeLayout>\n);\n",
        "org_msg": "Add back pickorder",
        "sim_msg": "added numberoflines to eventcard",
        "sim_diff": "diff --git a/src/components/EventCard.js b/src/components/EventCard.js @@ -58,7 +58,7 @@ const EventCard = ({\n{timeDisplay}\n</Text>\n<View style={styles.eventNameContainer}>\n- <Text type=\"h3\" style={styles.eventName}>\n+ <Text type=\"h3\" style={styles.eventName} numberOfLines={2}>\n{name}\n</Text>\n</View>\n",
        "chatgpt_cot": "Add AutocardItem component to display card details in CubeDeckPage, improving card visualization for each seat in the deck."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.js b/__tests__/serverjs/cubefn.js @@ -79,6 +79,34 @@ test(\"cardsAreEquivalent returns false for two nonequivalent cards\", () => {\nexpect(result).toBe(false);\n});\n+test(\"generate_short_id\", () => {\n+ expect(true).toBe(false);\n+});\n+\n+test(\"getBasics\", () => {\n+ expect(true).toBe(false);\n+});\n+\n+test(\"selectionContainsCard\", () => {\n+ expect(true).toBe(false);\n+});\n+\n+test(\"setCubeType\", () => {\n+ expect(true).toBe(false);\n+});\n+\n+test(\"sanitize\", () => {\n+ expect(true).toBe(false);\n+});\n+\n+test(\"addAutocard\", () => {\n+ expect(true).toBe(false);\n+});\n+\n+test(\"generatePack\", () => {\n+ expect(true).toBe(false);\n+});\n+\ntest(\"intToLegality\", () => {\nexpect(cubefn.intToLegality(0)).toBe(\"Vintage\");\nexpect(cubefn.intToLegality(1)).toBe(\"Legacy\");\n",
        "org_msg": "beautify\nadd stubs for unwritten tests",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add multiple new test functions for cubefn.js to cover additional functionality and ensure proper testing coverage."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -785,15 +785,18 @@ test(\"addAutocard\", () => {});\ntest(\"selectionContainsCard\", () => {});\ntest(\"generatePack generates a valid pack of cards\", () => {\n- expect.assertions(1);\n- const seed = new Date();\n+ expect.assertions(16);\n+ const seed = 1569704729;\nvar exampleCube = JSON.parse(JSON.stringify(cubefixture.exampleCube));\n- var expected = {};\nCube.findOne.yields(null, exampleCube);\nvar callback = sinon.stub();\nvar promise = carddb.initializeCardDb(fixturesPath, true);\nreturn promise.then(function() {\ncubefn.generatePack('', carddb, seed, callback);\n- sinon.assert.calledWith(callback, expected)\n+ var argument = callback.getCall(0).args[1];\n+ argument.pack.forEach(function(card) {\n+ expect(card).toEqual(examplePack.pack[argument.pack.indexOf(card)]);\n+ });\n+ expect(argument.seed).toBe(seed);\n});\n});\n\\ No newline at end of file\n",
        "org_msg": "check contents of sample pack",
        "sim_msg": "Added one more test with random string.",
        "sim_diff": "diff --git a/test/utils.test.js b/test/utils.test.js @@ -280,6 +280,10 @@ describe('#Utils', () => {\nexpect(utils.getErrorPcc(null)).to.be.a('null');\n});\n+ it('should not break on any other string', () => {\n+ expect(utils.getErrorPcc('123')).to.equal(null);\n+ });\n+\nit('should work with correct data', () => {\nexpect(utils.getErrorPcc('NO AGREEMENT EXISTS FOR AGENCY - 38KP')).to.equal('38KP');\n});\n",
        "chatgpt_cot": "\"Update generatePack test to include additional assertions and improve seed initialization for cubefn.test.js\""
    },
    {
        "org_diff": "diff --git a/nearley/cardFilters.ne b/nearley/cardFilters.ne @@ -170,4 +170,11 @@ notCondition -> \"not\"i isOpValue {% ([, valuePred]) => negated(genericCondition(\nisOpValue -> \":\" isValue {% ([, category]) => (fieldValue) => CARD_CATEGORY_DETECTORS[category](fieldValue) %}\n-isValue -> (\"gold\"i | \"twobrid\"i | \"hybrid\"i | \"phyrexian\"i | \"promo\"i | \"digital\"i | \"reasonable\"i | \"dfc\"i | \"mdfc\"i | \"meld\"i | \"transform\"i | \"split\"i | \"flip\"i | \"leveler\"i | \"commander\"i | \"spell\"i | \"permanent\"i | \"historic\"i | \"vanilla\"i | \"bikeland\"i | \"cycleland\"i | \"bicycleland\"i | \"bounceland\"i | \"karoo\"i | \"canopyland\"i | \"canland\"i | \"checkland\"i | \"dual\"i | \"fastland\"i | \"filterland\"i | \"gainland\"i | \"painland\"i | \"scryland\"i | \"shadowland\"i | \"shockland\"i | \"storageland\"i | \"creatureland\"i | \"manland\"i | \"triland\"i | \"tangoland\"i | \"battleland\"i | \"modal\"i) {% ([[category]]) => category.toLowerCase() %}\n+isValue -> (\n+ \"gold\"i | \"twobrid\"i | \"hybrid\"i | \"phyrexian\"i | \"promo\"i | \"digital\"i | \"reasonable\"i | \"dfc\"i | \"mdfc\"i\n+ | \"meld\"i | \"transform\"i | \"split\"i | \"flip\"i | \"leveler\"i | \"commander\"i | \"spell\"i | \"permanent\"i | \"historic\"i\n+ | \"vanilla\"i | \"modal\"i\n+ | \"bikeland\"i | \"cycleland\"i | \"bicycleland\"i | \"bounceland\"i | \"karoo\"i | \"canopyland\"i | \"canland\"i\n+ | \"checkland\"i | \"dual\"i | \"fastland\"i | \"filterland\"i | \"gainland\"i | \"painland\"i | \"scryland\"i | \"shadowland\"i\n+ | \"shockland\"i | \"storageland\"i | \"creatureland\"i | \"manland\"i | \"triland\"i | \"tangoland\"i | \"battleland\"i\n+) {% ([[category]]) => category.toLowerCase() %}\n",
        "org_msg": "refactored nearley",
        "sim_msg": "update tracker networks subview to use the new urls structure",
        "sim_diff": "diff --git a/shared/js/ui/templates/tracker-networks.es6.js b/shared/js/ui/templates/tracker-networks.es6.js @@ -22,7 +22,7 @@ module.exports = function () {\njs-tracker-networks-details\">\n<ol class=\"default-list site-info__trackers__company-list\">\n${renderTrackerDetails(\n- this.model.companyListMap,\n+ this.model,\nthis.model.DOMAIN_MAPPINGS\n)}\n</ol>\n@@ -42,7 +42,8 @@ function renderHero (site) {\n})}`\n}\n-function renderTrackerDetails (companyListMap, DOMAIN_MAPPINGS) {\n+function renderTrackerDetails (model, DOMAIN_MAPPINGS) {\n+ const companyListMap = model.companyListMap || {}\nif (companyListMap.length === 0) {\nreturn bel`<li class=\"is-empty\">None</li>`\n}\n@@ -50,7 +51,7 @@ function renderTrackerDetails (companyListMap, DOMAIN_MAPPINGS) {\nreturn companyListMap.map((c, i) => {\nif (c.name && c.name === 'unknown') {\nc.name = '(Tracker network unknown)'\n- } else if (c.name && c.isFirstParty) {\n+ } else if (c.name && model.hasUnblockedTrackers(c)) {\nc.name += ' associated domains (not blocked)'\n}\nreturn bel`<li>\n@@ -61,7 +62,7 @@ function renderTrackerDetails (companyListMap, DOMAIN_MAPPINGS) {\n</div>\n<h1 class=\"site-info__domain block\">${c.name}</h1>\n<ol class=\"default-list site-info__trackers__company-list__url-list\">\n- ${c.urls.map((url) => {\n+ ${Object.keys(c.urls).map((url) => {\nlet category = ''\nif (DOMAIN_MAPPINGS[url.toLowerCase()]) {\ncategory = DOMAIN_MAPPINGS[url.toLowerCase()].t\n",
        "chatgpt_cot": "Add new categories to isValue function to handle different card types and fix compilation issue in cardFilters file."
    },
    {
        "org_diff": "diff --git a/src/cardpage.js b/src/cardpage.js @@ -70,9 +70,8 @@ class CardPage extends Component {\n</Col>\n<Col className=\"breakdown\" xs=\"12\" sm=\"8\">\n<p>\n- Played in &nbsp;\n- {Math.round(data.total[1] * 1000.0) / 10}%<span className=\"percent\">{data.total[0]}</span>\n- &nbsp;Cubes total.\n+ Played in {Math.round(data.total[1] * 1000.0) / 10}%<span className=\"percent\">{data.total[0]}</span>{' '}\n+ Cubes total.\n</p>\n<Row>\n<Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"6\">\n",
        "org_msg": "1083 clean up nbsp",
        "sim_msg": "Card render debugging",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -137,30 +137,39 @@ export const generateCard = async ({\nsvg.setAttribute('height', cardHeight);\nsvg.innerHTML = cardSvgSource;\n+ // window.svg = svg;\n+\n{\nconst el = svg;\n- const titleTextEl = el.querySelector('#title-text');\n- titleTextEl.innerHTML = name;\n+ // name\n+ const nameEl = el.querySelector('#name');\n+ nameEl.innerHTML = name;\n+\n+ // type icon\nfor (let i = 0; i < types.length; i++) {\nconst type = types[i];\nconst typeEl = el.querySelector('#type-' + type);\ntypeEl.style.display = type === spec.stats.type ? 'block' : 'none';\n}\n+\n+ // stat values\n[\n+ 'level',\n'hp',\n'mp',\n- 'attack',\n- 'defense',\n- 'speed',\n- 'luck',\n+ 'atk',\n+ 'def',\n+ 'mag',\n+ 'spr',\n+ 'dex',\n+ 'lck',\n].forEach(statName => {\n- const statEl = el.querySelector('#' + statName);\n- const texts = statEl.querySelectorAll('text');\n- const textEl = texts[texts.length - 1];\n- textEl.innerHTML = escape(spec.stats[statName] + '');\n+ const statEl = el.querySelector('#' + statName + '-value');\n+ statEl.innerHTML = escape(spec.stats[statName] + '');\n});\n- {\n+\n+ /* {\nconst imageEl = el.querySelector('#Image image');\nimageEl.setAttribute('xlink:href', objectImage);\n}\n@@ -190,7 +199,7 @@ export const generateCard = async ({\ng.id = 'background-' + id;\nconst p = g.nextElementSibling;\np.style = `fill:url(#${g.id});`;\n- }\n+ } */\n}\nconst image = await new Promise((accept, reject) => {\n",
        "chatgpt_cot": "Update formatting for percentage display in CardPage component."
    },
    {
        "org_diff": "diff --git a/README.md b/README.md @@ -74,13 +74,13 @@ Nodemon will restart the application anytime there is a change to a source file.\nTo run the test suite, run `npm run test`.\n-If you make changes to `updatecards.js` or other code that will require remaking the fixture files in `fixtures/` you can use the helper: `node update_fixtures.js` after getting the lastest card info using `node force_update.js`. This will retain the same cards in the fixtures but with updated card details and fixture files.\n+If you make changes to `updatecards.js` or other code that will require remaking the fixture files in `fixtures/` you can use the helper: `node update_fixtures.js` after getting the lastest card info using `node --max-old-space-size=4096 force_update.js`. This will retain the same cards in the fixtures but with updated card details and fixture files.\n### Updating Card Definitions\nThe card definitions are cached locally for quick access. This definition is pulled from scryfall every 24 hours normally, but you can force an update with the command:\n```\n-node force_update.js\n+node --max-old-space-size=4096 force_update.js\n```\n### Adding Analytics\n",
        "org_msg": "Add heap size to README.",
        "sim_msg": "Update readme for specific test usage",
        "sim_diff": "diff --git a/docs/README.md b/docs/README.md @@ -228,10 +228,10 @@ The most updated and useful are :\nSimply run: `npm test`\n### Testing specific version\n-Run `npm test -- -g <version>`, where `<version>` is a minecraft version like `1.12`, `1.15.2`...\n+Run `npm mocha_test -- -g <version>`, where `<version>` is a minecraft version like `1.12`, `1.15.2`...\n### Testing specific test\n-Run `npm test -- -g <test_name>`, where `<test_name>` is a name of the test like `bed`, `useChests`, `rayTrace`...\n+Run `npm mocha_test -- -g <test_name>`, where `<test_name>` is a name of the test like `bed`, `useChests`, `rayTrace`...\n## License\n",
        "chatgpt_cot": "Update node command to increase memory allocation for force_update.js in README.md."
    },
    {
        "org_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -59,6 +59,7 @@ if there is no issue for a given feature request or bug, it was discovered\neither minutes ago or not at all.\nwhen there's an important update related to a bug, for example you noticed\na new replication case, add a comment to the issue indicating that\n+assigning to issues - commenting - who owns this? time limit without progress?\n## How we use GitHub pull requests\n",
        "org_msg": "note on issue ownership",
        "sim_msg": "[chore] Test git hook",
        "sim_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -4,6 +4,7 @@ First of all, thank you for your interest in the library. We'd love to accept yo\nWe have templates for two types of issues: a Feature Request and a Bug. If you want to submit a bug please be patient and fill all required fields. This will help us to define the problem.\n+\nTry to follow this advice to fill a great issue:\n- Check that issue tracker does not contain issues similar to your.\n",
        "chatgpt_cot": "\"Add guidelines for assigning issues and commenting on GitHub pull requests\""
    },
    {
        "org_diff": "diff --git a/src/pages/UserSocialPage.js b/src/pages/UserSocialPage.js @@ -33,7 +33,7 @@ const UserSocialPage = ({ followedCubes, followedUsers, followers }) => (\n<CardHeader>\n<h5 className=\"mb-0\">Followed Users</h5>\n</CardHeader>\n- {followedCubes.length > 0 ? (\n+ {followedUsers.length > 0 ? (\n<CardBody className=\"p-0\">\n<Row noGutters>\n{followedUsers.map((user) => (\n",
        "org_msg": "Fix social page bug.",
        "sim_msg": "Drop option to enable sharing IP address",
        "sim_diff": "diff --git a/renderer/pages/settings.js b/renderer/pages/settings.js @@ -82,6 +82,10 @@ const Settings = () => {\n{/* Privacy */}\n<Section title={<FormattedMessage id='Settings.Privacy.Label' />}>\n+ <BooleanOption\n+ label={<FormattedMessage id='Settings.Sharing.UploadResults' />}\n+ optionKey='sharing.upload_results'\n+ />\n<BooleanOption\nlabel={<FormattedMessage id='Settings.Privacy.CollectAnalytics' />}\noptionKey='advanced.collect_usage_stats'\n@@ -90,18 +94,10 @@ const Settings = () => {\nlabel={<FormattedMessage id='Settings.Privacy.SendCrashReports' />}\noptionKey='advanced.send_crash_reports'\n/>\n- <BooleanOption\n- label={<FormattedMessage id='Settings.Sharing.UploadResults' />}\n- optionKey='sharing.upload_results'\n- />\n<BooleanOption\nlabel={<FormattedMessage id='Settings.Sharing.IncludeNetwork' />}\noptionKey='sharing.include_asn'\n/>\n- <BooleanOption\n- label={<FormattedMessage id='Settings.Sharing.IncludeIP' />}\n- optionKey='sharing.include_ip'\n- />\n</Section>\n<Text my={3}>OONI Probe Desktop v{pkgJson.version}</Text>\n",
        "chatgpt_cot": "\"Update condition to check for followedUsers instead of followedCubes in UserSocialPage.js\""
    },
    {
        "org_diff": "diff --git a/src/components/DraftView.js b/src/components/DraftView.js @@ -24,12 +24,13 @@ export const subtitle = (cards) => {\n(type) => !type.includes('land') && !/^(plane|phenomenon|vanguard|scheme|conspiracy)$/.test(type),\n).length;\nconst numCreatures = allTypes.filter((type) => type.includes('creature')).length;\n+ const numNonCreatures = numNonlands - numCreatures;\nreturn (\n`${numCards} card${numCards === 1 ? '' : 's'}: ` +\n`${numLands} land${numLands === 1 ? '' : 's'}, ` +\n`${numNonlands} nonland: ` +\n- `${numCreatures} creatures, ` +\n- `${numNonlands - numCreatures} noncreatures`\n+ `${numCreatures} creature${numCreatures === 1 ? '' : 's'}, ` +\n+ `${numNonCreatures} noncreature${numNonCreatures === 1 ? '' : 's'}`\n);\n};\n",
        "org_msg": "Handle pluralization on creature counts",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "\"Refactor DraftView.js to calculate and display the number of creatures and non-creatures in the card deck for better readability and accuracy.\""
    },
    {
        "org_diff": "diff --git a/src/components/Markdown.js b/src/components/Markdown.js @@ -148,11 +148,22 @@ const renderCardrow = (node) => {\nreturn <Row className=\"cardRow\">{node.children}</Row>;\n};\n-const Markdown = ({ markdown, limited }) => {\n- const validSymbols = 'wubrgcmtsqepxyz/-0123456789';\n- const markdownStr = markdown?.toString() ?? '';\n+const VALID_SYMBOLS = 'wubrgcmtsqepxyz/-0123456789';\n+\n+const BASE_PLUGINS = [\n+ cardrow,\n+ centering,\n+ breaks,\n+ math,\n+ userlink,\n+ cardlink,\n+ [gfm, { singleTilde: false }],\n+ [symbols, { allowed: VALID_SYMBOLS }],\n+];\n+\n+const ALL_PLUGINS = [...BASE_PLUGINS, slug, headings];\n- const renderers = {\n+const RENDERERS = {\n// overridden defaults\nlink: renderLink,\nlinkReference: renderLink,\n@@ -173,23 +184,11 @@ const Markdown = ({ markdown, limited }) => {\ncardrow: renderCardrow,\n};\n- const plugins = [\n- cardrow,\n- centering,\n- breaks,\n- math,\n- userlink,\n- cardlink,\n- [gfm, { singleTilde: false }],\n- [symbols, { allowed: validSymbols }],\n- ];\n-\n- if (!limited) {\n- plugins.push(slug, headings);\n- }\n+const Markdown = ({ markdown, limited }) => {\n+ const markdownStr = markdown?.toString() ?? '';\nreturn (\n- <ReactMarkdown className=\"markdown\" plugins={plugins} renderers={renderers}>\n+ <ReactMarkdown className=\"markdown\" plugins={limited ? BASE_PLUGINS : ALL_PLUGINS} renderers={RENDERERS}>\n{markdownStr}\n</ReactMarkdown>\n);\n",
        "org_msg": "moved constant definitions outside the function",
        "sim_msg": "capture http links",
        "sim_diff": "diff --git a/components/system/components/Markdown.js b/components/system/components/Markdown.js @@ -11,7 +11,8 @@ export const Markdown = ({ md, options }) => {\n{\nunified()\n.use(parse)\n- .use(linkifyRegex(/[@#](\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g))\n+ .use(linkifyRegex(/[@#](\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g)) // @user #tag\n+ .use(linkifyRegex(/^(https?):\\/\\/[^\\s$.?#].[^\\s]*$/gm)) // http(s) links\n.use(remark2react, options)\n.processSync(md).result\n}\n",
        "chatgpt_cot": "Refactor Markdown component, extract constants for plugins, renderers, and symbols. Improve code readability and maintainability."
    },
    {
        "org_diff": "diff --git a/src/cube_playtest.js b/src/cube_playtest.js @@ -28,7 +28,7 @@ const CustomDraftCard = ({ format, index, cubeID, canEdit, deleteFormat, ...prop\n</CardTitleH5>\n</CardHeader>\n<CardBody>\n- <div className=\"description-area\">{format.html}</div>\n+ <div className=\"description-area\" dangerouslySetInnerHTML={{__html: format.html}}/>\n<LabelRow htmlFor={`seats-${index}`} label=\"Total Seats\" className=\"mb-0\">\n<Input type=\"select\" name=\"seats\" id={`seats-${index}`} defaultValue=\"8\">\n{rangeOptions(4, 11)}\n",
        "org_msg": "Fixes Custom Format Description\nFixes:",
        "sim_msg": "Fix UserCard propTypes",
        "sim_diff": "diff --git a/src/components/UserCard.js b/src/components/UserCard.js @@ -5,27 +5,22 @@ import FollowButton from '../widgets/FollowButton';\nimport Avatar from '../components/Avatar';\nimport './UserCard.less';\n-const UserCard = ({ username, alt }) =>\n- (<div className=\"UserCard\">\n+const UserCard = ({ username, alt }) => (\n+ <div className=\"UserCard\">\n<div className=\"UserCard__left\">\n<Link to={`/@${username}`}>\n<Avatar username={username} size={40} />\n</Link>\n- <Link to={`/@${username}`}>\n- {username}\n- </Link>\n- {alt &&\n- <span className=\"UserCard__alt\">\n- {alt}\n- </span>\n- }\n+ <Link to={`/@${username}`}>{username}</Link>\n+ {alt && <span className=\"UserCard__alt\">{alt}</span>}\n</div>\n<FollowButton username={username} />\n- </div>);\n+ </div>\n+);\nUserCard.propTypes = {\nusername: PropTypes.string.isRequired,\n- alt: PropTypes.oneOf(PropTypes.string, PropTypes.bool),\n+ alt: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n};\nUserCard.defaultProps = {\n",
        "chatgpt_cot": "Update format.html to use dangerouslySetInnerHTML in CustomDraftCard component to render HTML content securely and prevent XSS vulnerabilities."
    },
    {
        "org_diff": "diff --git a/serverjs/prices.js b/serverjs/prices.js @@ -11,7 +11,7 @@ async function GetToken() {\n//TODO: check if token is expired, if so, fetch a new one\nreturn token.access_token;\n} else {\n- winston.info(Date.now().toString(), 'Fetching fresh TCGPlayer token.');\n+ winston.info('Fetching fresh TCGPlayer token.');\nconst body = new url.URLSearchParams({\ngrant_type: 'client_credentials',\n@@ -26,7 +26,7 @@ async function GetToken() {\ntry {\ntoken = await response.json();\ntoken.expires = Tomorrow();\n- winston.info(token.expires.toString(), 'token expiration');\n+ winston.info(`${token.expires} token expiration`);\nreturn token.access_token;\n} catch (e) {\nreturn;\n",
        "org_msg": "Fix prices logging.",
        "sim_msg": "fix: coincap api",
        "sim_diff": "diff --git a/src/main/token/price-service.js b/src/main/token/price-service.js @@ -21,27 +21,51 @@ export class PriceService extends EventEmitter {\n}\nasync loadPriceData() {\nlog.info('fetching price data');\n- const response = await fetch('https://coincap.io/front');\n- const data = await response.json();\n+ const response = await fetch('https://api.coincap.io/v2/assets?limit=500');\n+ const json = await response.json();\n+ if (!json) {\n+ log.error('Unable to fetch price data');\n+ return;\n+ }\n+ const data = json.data;\nif (!data.length) {\n+ log.error('Unable to fetch price data');\n+ return;\n+ }\n+\n+ // KEY is mandatory, if doesn't get fetch in global list\n+ // it needs to get fetched individually\n+ if (!data.find(row => row.symbol === 'KEY')) {\n+ const responseKey = await fetch('https://api.coincap.io/v2/assets/key');\n+ const jsonKey = await responseKey.json();\n+ if (!jsonKey) {\n+ log.error('Unable to fetch KEY price data');\nreturn;\n}\n+ const dataKey = jsonKey.data;\n+ if (!dataKey.length) {\n+ log.error('Unable to fetch KEY price data');\n+ return;\n+ }\n+ data.push(dataKey[0]);\n+ }\n+\n// These should be the first two rows returned,\n// but we'll use \"find\" in case the order changes\n- const btcPriceUsd = +data.find(row => row.short === 'BTC').price;\n- const ethPriceUsd = +data.find(row => row.short === 'ETH').price;\n+ const btcPriceUsd = +data.find(row => row.symbol === 'BTC').priceUsd;\n+ const ethPriceUsd = +data.find(row => row.symbol === 'ETH').priceUsd;\n// TODO: We should filter out non-ERC-20/Ethereum\n// coins at some point, but that's low priority\nconst dataToInsert = data.map(row => ({\n- name: row.long,\n- symbol: row.short,\n+ name: row.name,\n+ symbol: row.symbol,\nsource: 'https://coincap.io',\n- priceUSD: +row.price,\n- priceBTC: +row.price / btcPriceUsd,\n- priceETH: +row.price / ethPriceUsd\n+ priceUSD: +row.priceUsd,\n+ priceBTC: +row.priceUsd / btcPriceUsd,\n+ priceETH: +row.priceUsd / ethPriceUsd\n}));\nthis.existing = (await TokenPrice.findAll()).reduce(\n",
        "chatgpt_cot": "Refactor logging in GetToken function in prices.js\nThe modification simplifies the logging message for fetching a new TCGPlayer token and improves readability."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -9,9 +9,11 @@ function get_cube_id(cube) {\n}\nfunction build_id_query(id) {\n- if (!id || id.match(/^[0-9a-fA-F]{24}$/)) return {\n+ if (!id || id.match(/^[0-9a-fA-F]{24}$/)) {\n+ return {\n_id: id\n};\n+ }\nreturn {\n$or: [{\nshortID: id.toLowerCase(),\n",
        "org_msg": "use curlybraces around single-line statement",
        "sim_msg": "perf: resolve body",
        "sim_diff": "diff --git a/lib/util/data-server.js b/lib/util/data-server.js @@ -110,22 +110,7 @@ function getList(ids) {\nreturn [];\n}\nreturn ids.map(function(id, i) {\n- var curData = reqData[id];\n- if (curData) {\n- var req = curData.req;\n- var res = curData.res;\n- if (Buffer.isBuffer(req.body)) {\n- req.body = util.decodeBuffer(req.body);\n- }\n- if (Buffer.isBuffer(res.body)) {\n- if (res.isImage) {\n- res.body = getBase64Data(res) + res.body.toString('base64');\n- } else {\n- res.body = util.decodeBuffer(res.body);\n- }\n- }\n- }\n- return curData;\n+ return reqData[id];\n});\n}\n@@ -295,6 +280,18 @@ module.exports = function init(_proxy) {\nvar newIds = (clearNetwork || startTime == -1) ? [] : getIds(startTime, count, options.lastRowId);\nvar setData = function(item) {\nif (item) {\n+ var req = item.req;\n+ var res = item.res;\n+ if (Buffer.isBuffer(req.body)) {\n+ req.body = util.decodeBuffer(req.body);\n+ }\n+ if (Buffer.isBuffer(res.body)) {\n+ if (res.isImage) {\n+ res.body = getBase64Data(res) + res.body.toString('base64');\n+ } else {\n+ res.body = util.decodeBuffer(res.body);\n+ }\n+ }\nif (config.secureFilter) {\ntry {\nitem = config.secureFilter(item, clientIp, filter) || item;\n",
        "chatgpt_cot": "Add condition to return _id if id matches regex, otherwise return $or with shortID in build_id_query in cubefn."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1193,6 +1193,7 @@ router.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\ndeck.cubename = cube.name;\ndeck.cube = cube._id;\ndeck.cubeOwner = cube.owner;\n+ deck.owner = req.user._id;\ndeck.seats = [\n{\nuserid: req.user._id,\n@@ -1669,6 +1670,7 @@ router.post('/startsealed/:id', body('packs').toInt({ min: 1, max: 16 }), body('\ndeck.comments = [];\ndeck.cubename = cube.name;\ndeck.seats = [];\n+ deck.owner = user._id;\ndeck.seats.push({\nuserid: user._id,\n@@ -2800,6 +2802,7 @@ router.post('/submitdeck/:id', body('skipDeckbuilder').toBoolean(), async (req,\ndeck.draft = draft._id;\ndeck.cubename = cube.name;\ndeck.seats = [];\n+ deck.owner = deck.seats[0].userid;\nfor (const seat of draft.seats) {\ndeck.seats.push({\n@@ -2968,6 +2971,7 @@ router.get('/rebuild/:id/:index', ensureAuth, async (req, res) => {\ndeck.comments = [];\ndeck.draft = base.draft;\ndeck.seats = [];\n+ deck.owner = req.user._id;\ndeck.seats.push({\nuserid: req.user._id,\nusername: `${req.user.username}: ${userColors}`,\n",
        "org_msg": "populate deck owner correctly",
        "sim_msg": "add job id to start board for task",
        "sim_diff": "diff --git a/core/api-server/api/rest-api/routes/v1/boards.js b/core/api-server/api/rest-api/routes/v1/boards.js @@ -62,8 +62,8 @@ const routes = (options) => {\n});\nrouter.all('/tensor/start/:taskId?', methods(['POST']), logger(), async (req, res, next) => {\nconst { taskId } = req.params;\n- const { nodeName, pipelineName } = req.body;\n- await boards.startTensorboard({ taskId, nodeName, pipelineName }, 'task');\n+ const { nodeName, pipelineName, jobId } = req.body;\n+ await boards.startTensorboard({ taskId, jobId, nodeName, pipelineName }, 'task');\nres.json({ message: 'OK' });\nnext();\n});\n",
        "chatgpt_cot": "Add owner to deck in various routes to set the owner of the deck to the user who is interacting with it."
    },
    {
        "org_diff": "diff --git a/public/js/draft.js b/public/js/draft.js @@ -88,6 +88,9 @@ function botRating(botColors, card) {\nconst overlap = botColors.some(c => colors.includes(c));\nconst isLand = card.type_line.indexOf('Land') > -1;\nconst isFetch = fetchLands.includes(card.details.name);\n+\n+ // Prioritize on-color or overlapping fetches.\n+ // Then overlapping lands, then overlapping spells.\nif (subset || (isFetch && overlap)) {\nrating -= 0.4;\n} else if (isLand && overlap) {\n@@ -99,12 +102,10 @@ function botRating(botColors, card) {\n}\nfunction botPicks() {\n- //make bots take a pick out of active activepacks\n+ // make bots take one pick out of active packs\nfor (botIndex = 1; botIndex < draft.packs.length; botIndex++) {\nconst pack = draft.packs[botIndex][0];\nconst botColors = draft.bots[botIndex - 1];\n- //botColors has 2 colors, let's try to take a card with one of those colors or colorless, otherwise take a random card\n- //try to take card with exactly our two colors\nconst ratedPicks = [];\nconst unratedPicks = [];\nfor (let cardIndex = 0; cardIndex < pack.length; cardIndex++) {\n",
        "org_msg": "Add appropriate comments.",
        "sim_msg": "fix gap by changing magic number",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -130,7 +130,7 @@ list.drawList = function() {\nlist.fit_list_height = function() {\nvar paper_list_avail_height = null;\n- const PAPER_LIST_CORRECTION = 10;\n+ const PAPER_LIST_CORRECTION = -5;\nif (!config.render_bubbles) {\nvar parent_height = getRealHeight($(\"#\" + config.tag));\nvar available_height = 0;\n",
        "chatgpt_cot": "Refactor botPicks function to make bots take one pick out of active packs, and prioritize on-color or overlapping fetches in botRating."
    },
    {
        "org_diff": "diff --git a/src/util/Filter.js b/src/util/Filter.js @@ -194,6 +194,13 @@ const colorMap = new Map([\n['temur', 'rug']\n]);\n+const rarityMap = new Map([\n+ ['c', 'common'],\n+ ['u', 'uncommon'],\n+ ['r', 'rare'],\n+ ['m', 'mythic']\n+]);\n+\n//change arguments into their verifiable counteraprts, i.e. 'azorius' becomes 'uw'\nfunction simplifyArg(arg, category) {\nlet res = '';\n@@ -210,6 +217,14 @@ function simplifyArg(arg, category) {\ncase 'mana':\nres = parseManaCost(arg)\nbreak;\n+ case 'rarity':\n+ let argLower = arg.toLowerCase()\n+ if (rarityMap.has(argLower)) {\n+ res = rarityMap.get(argLower);\n+ } else {\n+ res = arg;\n+ }\n+ break;\ndefault:\nres = arg;\nbreak;\n",
        "org_msg": "Add a simplifyArg map for rarity for",
        "sim_msg": "Make fancy scatter properly select points",
        "sim_diff": "diff --git a/src/traces/scattergl/convert.js b/src/traces/scattergl/convert.js @@ -586,7 +586,7 @@ proto.updateFancy = function(options) {\nfor(j = 0; j < 4; ++j) {\nvar color = colors[4 * index + j];\n- if (sel && sel[index] && j === 3) {\n+ if (sel && !sel[index] && j === 3) {\ncolor *= DESELECTDIM\n}\nthis.scatter.options.colors[4 * i + j] = color;\n",
        "chatgpt_cot": "Add rarityMap for card rarity translation in simplifyArg function in Filter.js. Fixes issue with translating card rarity arguments."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -120,6 +120,9 @@ async function downloadDefaultCards(basePath = 'private', defaultSourcePath = nu\n}\n}\n+ if (!defaultUrl) throw new Error('URL for Default Cards not found in /bulk-data response');\n+ if (!allUrl) throw new Error('URL for All Cards not found in /bulk-data response');\n+\nreturn Promise.all([\ndownloadFile(defaultUrl, defaultSourcePath || path.resolve(basePath, 'cards.json')),\ndownloadFile(allUrl, allSourcePath || path.resolve(basePath, 'all-cards.json')),\n",
        "org_msg": "added null URL error check",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "Add error handling for missing URLs in /bulk-data response in updatecards.js."
    },
    {
        "org_diff": "diff --git a/__tests__/src/components/CubeListPage.test.js b/__tests__/src/components/CubeListPage.test.js @@ -3,16 +3,21 @@ import { FetchMock } from '@react-mock/fetch';\nimport { render, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\n-import exampleCardsFull from '../../../fixtures/examplecardsdetails';\n-import exampleCube from '../../../fixtures/examplecube';\nimport CubeListPage from 'pages/CubeListPage';\nimport { treeCache } from 'components/AutocompleteInput';\nimport { act } from 'react-dom/test-utils';\nimport { fromEntries } from 'utils/Util';\n+import exampleCube from '../../../fixtures/examplecube';\n+import exampleCardsFull from '../../../fixtures/examplecardsdetails';\nconst cube = {\n...exampleCube,\ncards: exampleCardsFull,\n+ maybe: exampleCardsFull,\n+ default_sorts: ['Category', 'Types-Multicolor'],\n+ owner: '1',\n+ tag_colors: [],\n+ _id: '1',\n};\nconst element = () => (\n@@ -44,14 +49,13 @@ const element = () => (\n>\n<CubeListPage\ncube={cube}\n- cubeID=\"1\"\n- canEdit\n- maybe={exampleCardsFull}\ndefaultView=\"table\"\n+ defaultPrimarySort=\"\"\n+ defaultSecondarySort=\"\"\ndefaultFilterText=\"\"\ndefaultTagColors={[]}\n- defaultShowTagColors={true}\n- defaultSorts={['Color Category', 'Types-Multicolor']}\n+ defaultShowTagColors\n+ user={null}\n/>\n;\n</FetchMock>\n",
        "org_msg": "Update CubeListPage.test.js",
        "sim_msg": "add mock default return value in mybooks test",
        "sim_diff": "diff --git a/assets/src/components/mybooks/MyBooks.test.jsx b/assets/src/components/mybooks/MyBooks.test.jsx @@ -7,8 +7,10 @@ import { someBookWithACopyFromMe } from '../../../test/booksHelper';\njest.mock('../../services/BookService');\n+\ndescribe('My books', () => {\nconst createComponent = (props = {}) => shallow(<MyBooks {...props} />);\n+ getMyBooks.mockReturnValue({ results: [] });\nit('renders without crashing', () => {\nconst myBooks = createComponent();\n",
        "chatgpt_cot": "\"Add new properties to CubeListPage and update imports in CubeListPage.test.js\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -326,7 +326,6 @@ test(\"getBasics returns the expected set of basic lands\", () => {\ncarddb.nameToId = initialNameToId;\n});\n-test(\"selectionContainsCard\", () => {});\ntest(\"setCubeType correctly sets the type and card_count of its input cube\", () => {\nexpect.assertions(4);\n@@ -343,8 +342,9 @@ test(\"setCubeType correctly sets the type and card_count of its input cube\", ()\ntest(\"sanitize\", () => {});\ntest(\"addAutocard\", () => {});\n+test(\"selectionContainsCard\", () => {});\n-test(\"generatePack\", () => {\n+test(\"generatePack generates a valid pack of cards\", () => {\nexpect.assertions(1);\nconst seed = new Date();\nvar exampleCube = JSON.parse(JSON.stringify(cubefixture.exampleCube));\n",
        "org_msg": "better test name",
        "sim_msg": "test(graphql): date and object fields",
        "sim_diff": "diff --git a/gridsome/__tests__/schema.spec.js b/gridsome/__tests__/schema.spec.js @@ -370,6 +370,73 @@ test('infer file fields', () => {\nexpect(types.file2.type).toEqual(fileType.type)\n})\n+test('should get values from object fields', async () => {\n+ const contentType = api.store.addContentType({\n+ typeName: 'TestPost'\n+ })\n+\n+ contentType.addNode({\n+ id: '1',\n+ fields: {\n+ myObject: {\n+ value: 'test1',\n+ otherObject: {\n+ value: 'test2'\n+ }\n+ }\n+ }\n+ })\n+\n+ const { data } = await createSchemaAndExecute(`{\n+ testPost (id: \"1\") {\n+ myObject {\n+ value\n+ otherObject {\n+ value\n+ }\n+ }\n+ }\n+ }`)\n+\n+ expect(data.testPost.myObject.value).toEqual('test1')\n+ expect(data.testPost.myObject.otherObject.value).toEqual('test2')\n+})\n+\n+test('should format dates from schema', async () => {\n+ const contentType = api.store.addContentType({\n+ typeName: 'TestPostDate'\n+ })\n+\n+ contentType.addNode({\n+ id: '1',\n+ date: '2018-10-10',\n+ fields: {\n+ customDate: '2018-10-10',\n+ dateObject: {\n+ date: '2018-10-10'\n+ }\n+ }\n+ })\n+\n+ const { data } = await createSchemaAndExecute(`{\n+ testPostDate (id: \"1\") {\n+ date\n+ customDate\n+ date2: date(format: \"YYYY-MM-DD\")\n+ date3: customDate(format: \"DD/MM/YYYY\")\n+ dateObject {\n+ date(format: \"DD/MM/YYYY\")\n+ }\n+ }\n+ }`)\n+\n+ expect(data.testPostDate.date).toEqual('2018-10-10T00:00:00+02:00')\n+ expect(data.testPostDate.customDate).toEqual('2018-10-10T00:00:00+02:00')\n+ expect(data.testPostDate.date2).toEqual('2018-10-10')\n+ expect(data.testPostDate.date3).toEqual('10/10/2018')\n+ expect(data.testPostDate.dateObject.date).toEqual('10/10/2018')\n+})\n+\ntest('transformer extends node type', async () => {\nconst contentType = api.store.addContentType({\ntypeName: 'TestPost'\n",
        "chatgpt_cot": "Add test for generatePack method in cubefn.test.js, ensuring valid pack generation. Refactor selectionContainsCard test for improved functionality."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1443,7 +1443,7 @@ function startCustomDraft(req, res, params, cube) {\nvar tag = format[j][k][Math.floor(Math.random() * format[j][k].length)];\nvar index = draftutil.indexOfTag(cardpool, tag);\n//slice out the first card with the index, or error out\n- if (index != -1) {\n+ if (index != -1 && cardpool.length > 0) {\ndraft.packs[i][j][k] = cardpool.splice(index, 1)[0];\n} else {\nfail = true;\n",
        "org_msg": "Fixed issue with not enough cards",
        "sim_msg": "More card generator debugging",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -31,14 +31,22 @@ const _waitForAllCardFonts = () => Promise.all([\nconsole.warn(err);\n});\n-const _getCanvasBlob = canvas => new Promise(function(resolve, reject) {\n+const _getCanvasBlob = canvas => new Promise((resolve, reject) => {\ncanvas.toBlob(blob => {\nresolve(blob);\n});\n});\n-const _getCanvasUrl = async canvas => {\n+const _getBlobDataUrl = async blob => new Promise((resolve, reject) => {\n+ const fileReader = new FileReader();\n+ fileReader.onload = () => {\n+ resolve(fileReader.result);\n+ };\n+ fileReader.onerror = reject;\n+ fileReader.readAsDataURL(blob);\n+});\n+const _getCanvasDataUrl = async canvas => {\nconst blob = await _getCanvasBlob(canvas);\n- const url = URL.createObjectURL(blob);\n+ const url = await _getBlobDataUrl(blob);\nreturn url;\n};\n@@ -80,12 +88,12 @@ export const generateObjectCard = async ({\nlet objectImage = await screenshotObjectApp({\napp,\n});\n- objectImage = await _getCanvasUrl(objectImage);\n+ objectImage = await _getCanvasDataUrl(objectImage);\nlet minterAvatarPreview = await screenshotAvatarUrl({\nstart_url: `./avatars/4205786437846038737.vrm`,\n});\n- minterAvatarPreview = await _getCanvasUrl(minterAvatarPreview);\n+ minterAvatarPreview = await _getCanvasDataUrl(minterAvatarPreview);\n// _previewImage(minterAvatarPreview, width, height);\nconst minterUsername = 'Scillia';\n@@ -98,7 +106,6 @@ export const generateObjectCard = async ({\nminterUsername,\nminterAvatarPreview,\n});\n- // try {\nconst cardImg = await generateCard({\nstats,\nwidth,\n@@ -110,9 +117,6 @@ export const generateObjectCard = async ({\n});\n_previewImage(cardImg, width, height);\nreturn cardImg;\n- /* } catch (err) {\n- console.warn(err);\n- } */\n};\nexport const generateCard = async ({\n@@ -143,8 +147,16 @@ export const generateCard = async ({\nconst el = svg;\n// name\n+ {\nconst nameEl = el.querySelector('#name');\nnameEl.innerHTML = name;\n+ }\n+\n+ // illustrator name\n+ {\n+ const illustratorNameEl = el.querySelector('#illustrator-name');\n+ illustratorNameEl.innerHTML = minterUsername;\n+ }\n// type icon\nfor (let i = 0; i < types.length; i++) {\n@@ -169,11 +181,19 @@ export const generateCard = async ({\nstatEl.innerHTML = escape(spec.stats[statName] + '');\n});\n- /* {\n- const imageEl = el.querySelector('#Image image');\n- imageEl.setAttribute('xlink:href', objectImage);\n+ // main image\n+ {\n+ const mainImageEl = el.querySelector('#main-image');\n+ mainImageEl.setAttribute('xlink:href', objectImage);\n}\n+\n+ // illustrator image\n{\n+ const illustartorImageEl = el.querySelector('#illustrator-image');\n+ illustartorImageEl.setAttribute('xlink:href', minterAvatarPreview);\n+ }\n+\n+ /* {\nconst lines = description.split('\\n');\nconst descriptionHeaderTextEl = el.querySelector('#description-header-text');\ndescriptionHeaderTextEl.innerHTML = lines[0];\n",
        "chatgpt_cot": "\"Ensure cardpool is not empty before slicing in startCustomDraft to prevent error\""
    },
    {
        "org_diff": "diff --git a/src/components/GeneratedTokensAnalysis.js b/src/components/GeneratedTokensAnalysis.js import React from 'react';\n-\n+import { Row, Col } from 'reactstrap';\nconst GeneratedTokensAnalysis = ( GeneratedTokensCounts) => (\n<div>\n<h4>GeneratedTokensAnalysis</h4>\n- {console.log(GeneratedTokensCounts)}\n- <div>\n+ <div className='row'>\n{GeneratedTokensCounts.GeneratedTokensCounts.map(token =>\n- <div style={{width: 150, margin:10}}>\n- <img src={token[0].image_small}></img>\n+ <Col xs={12} sm={6} md={4} lg={2}>\n+ <div class=\"card\">\n+ <img src={token[0].image_small} className='card-img-top'></img>\n+ <div class=\"card-body\">\n+ <p class=\"card-text\">\n{token[1].map( sourceCard =>\n<div>\n+ <a>\n{sourceCard.name}\n+ </a><br></br>\n</div>\n)}\n+ </p>\n</div>\n-\n+ </div>\n+ </Col>\n)}\n</div>\n</div>\n",
        "org_msg": "All tokens are displayed in a row now with generating cards below.",
        "sim_msg": "Use constant values for CUSTOM field",
        "sim_diff": "diff --git a/src/components/stepThree/GasPriceInput.js b/src/components/stepThree/GasPriceInput.js import React, { Component } from 'react'\n-import { InputField2 } from '../Common/InputField2'\n+import { GAS_PRICE } from '../../utils/constants'\nclass GasPriceInput extends Component {\nconstructor(props) {\n@@ -26,7 +26,7 @@ class GasPriceInput extends Component {\n})\ninput.onChange(Object.assign({}, {\n- id: 'CUSTOM',\n+ id: GAS_PRICE.CUSTOM.ID,\ngasPrice: this.state.customGasPrice\n}))\n}\n@@ -39,8 +39,8 @@ class GasPriceInput extends Component {\n})\ninput.onChange(Object.assign({}, {\n- id: 'CUSTOM',\n- gasPrice: value\n+ id: GAS_PRICE.CUSTOM.ID,\n+ price: value\n}))\n}\n",
        "chatgpt_cot": "\"Refactor GeneratedTokensAnalysis to use reactstrap Row and Col for better layout and organization of generated tokens display.\""
    },
    {
        "org_diff": "diff --git a/views/index.pug b/views/index.pug @@ -105,10 +105,10 @@ block content\n.card-footer\na#draftMore(data-toggle=\"collapse\" href=\"#draftCollapse\" onclick=\"toggleDraft()\") View More...\nbr\n+ if devblog\n.card\n.card-header\nh4.card-title Devblog\n- if devblog.title\nh5.card-title=devblog.title\nh6.card-subtitle.mb-2.text-muted=devblog.date_formatted\n.card-body\n",
        "org_msg": "Fixed issue with empty devblog",
        "sim_msg": "Swapped 3.3.7, 4.0.0-beta posistions, added info panel",
        "sim_diff": "diff --git a/views/index.pug b/views/index.pug @@ -2,11 +2,11 @@ extends layout\nblock content\nh2.text-center=title\n- h3.text-center='v' + config.bootstrap4[0].version\n+ h3.text-center='v' + config.bootstrap[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].stylesheet\n- - var sri = config.bootstrap4[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].stylesheet\n+ - var sri = config.bootstrap[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -20,9 +20,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].javascript\n- - var sri = config.bootstrap4[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].javascript\n+ - var sri = config.bootstrap[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n@@ -35,12 +35,21 @@ block content\nspan.help-block Click to copy\ninclude _partials/jscode.pug\n+ hr\n+ .panel.panel-info\n+ .panel-heading\n+ h3.panel-title Info\n+ .panel-body\n+ | Bootstrap 4 is currently in Beta release and should be treated as such. For details check out\n+ a(href='https://blog.getbootstrap.com/2017/08/10/bootstrap-4-beta/', target='_blank', rel='noopener').\n+ the Bootstrap 4 Beta announcement\n+ | .\n- h3.text-center='v' + config.bootstrap[0].version\n+ h3.text-center='v' + config.bootstrap4[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].stylesheet\n- - var sri = config.bootstrap[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].stylesheet\n+ - var sri = config.bootstrap4[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -54,9 +63,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].javascript\n- - var sri = config.bootstrap[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].javascript\n+ - var sri = config.bootstrap4[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n",
        "chatgpt_cot": "\"Add conditional rendering for devblog in index.pug\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -55,11 +55,7 @@ winston.configure({\n});\nif (process.env.NODE_ENV !== 'production') {\n- winston.add(\n- new winston.transports.Console({\n- format: winston.format.simple(),\n- }),\n- );\n+ winston.add(new winston.transports.Console());\n}\nif (secrets.loggly) {\n@@ -102,7 +98,7 @@ const store = new MongoDBStore(\n},\n(err) => {\nif (err) {\n- winston.error('store failed to connect to mongoDB', err);\n+ winston.error('Store failed to connect to mongoDB.', { error: err });\n}\n},\n);\n",
        "org_msg": "Fix debug console formatting.",
        "sim_msg": "fix: add redirection for /contact\nref:",
        "sim_diff": "diff --git a/packages/manager/apps/web/client/app/app.module.js b/packages/manager/apps/web/client/app/app.module.js @@ -319,6 +319,7 @@ export default (containerEl, environment) => {\n.constant('URLS_REDIRECTED_TO_DEDICATED', [\nnew RegExp('/useraccount/.*'),\nnew RegExp('/billing/.*'),\n+ new RegExp('/contact/.*'),\n])\n.config(\n/* @ngInject */ (ovhFeatureFlippingProvider) => {\n",
        "chatgpt_cot": "\"Refactor winston configuration and error message for MongoDBStore connection in app.js\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -46,6 +46,21 @@ const store = new MongoDBStore(\n},\n);\n+// request timeout middleware\n+app.use((req, res, next) => {\n+ req.setTimeout(60 * 1000, () => {\n+ const err = new Error('Request Timeout');\n+ err.status = 408;\n+ next(err);\n+ });\n+ res.setTimeout(60 * 1000, () => {\n+ const err = new Error('Service Unavailable');\n+ err.status = 503;\n+ next(err);\n+ });\n+ next();\n+})\n+\n// upload file middleware\napp.use(fileUpload());\n",
        "org_msg": "Add 60s timeout to all requests.",
        "sim_msg": "p0: patches horrible bug",
        "sim_diff": "diff --git a/server.js b/server.js @@ -42,6 +42,10 @@ app.prepare().then(async () => {\nserver.all(\"/api/:a\", async (r, s) => handler(r, s, r.url));\nserver.all(\"/api/:a/:b\", async (r, s) => handler(r, s, r.url));\n+ server.get(\"/\", async (req, res) => {\n+ return app.render(req, res, \"/\", {});\n+ });\n+\nserver.get(\"/_\", async (req, res) => {\nconst isBucketsAvailable = await Utilities.checkTextile();\n",
        "chatgpt_cot": "\"Add request timeout middleware to handle request and response timeout, and improve error handling for timeout and service unavailable.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1234,6 +1234,31 @@ router.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\nsideboard: [],\n},\n];\n+ let index = 0;\n+ const populatedCards = [];\n+ for (const stack of deck.seats[0].deck) {\n+ for (const card of stack) {\n+ card.index = index;\n+ populatedCards.push(card);\n+ index += 1;\n+ }\n+ }\n+ const draft = new Draft();\n+ draft.initial_state = [[populatedCards]];\n+ const response = await fetch(`${process.env.FLASKROOT}/embeddings/`, {\n+ method: 'post',\n+ headers: { 'Content-Type': 'application/json' },\n+ body: JSON.stringify({\n+ cards: populatedCards.map((card) => carddb.cardFromId(card.cardID).name_lower),\n+ }),\n+ });\n+ if (response.ok) {\n+ draft.synergies = await response.json();\n+ } else {\n+ draft.synergies = null;\n+ }\n+ await draft.save();\n+ deck.draft = draft._id;\nawait deck.save();\nawait Cube.updateOne(\n@@ -1705,6 +1730,31 @@ router.post('/startsealed/:id', body('packs').toInt({ min: 1, max: 16 }), body('\ndeck: pool,\nsideboard: [],\n});\n+ let index = 0;\n+ const populatedCards = [];\n+ for (const stack of deck.seats[0].deck) {\n+ for (const card of stack) {\n+ card.index = index;\n+ populatedCards.push(card);\n+ index += 1;\n+ }\n+ }\n+ const draft = new Draft();\n+ draft.initial_state = [[populatedCards]];\n+ const response = await fetch(`${process.env.FLASKROOT}/embeddings/`, {\n+ method: 'post',\n+ headers: { 'Content-Type': 'application/json' },\n+ body: JSON.stringify({\n+ cards: populatedCards.map((card) => carddb.cardFromId(card.cardID).name_lower),\n+ }),\n+ });\n+ if (response.ok) {\n+ draft.synergies = await response.json();\n+ } else {\n+ draft.synergies = null;\n+ }\n+ await draft.save();\n+ deck.draft = draft._id;\nawait deck.save();\n",
        "org_msg": "Fix sealed and uploading decklists.",
        "sim_msg": "Invalidate cache after creating draft post.",
        "sim_diff": "diff --git a/assets/js/modules/idea-hub/datastore/draft-ideas.js b/assets/js/modules/idea-hub/datastore/draft-ideas.js @@ -31,8 +31,12 @@ import { createFetchStore } from '../../../googlesitekit/data/create-fetch-store\nconst fetchCreateIdeaDraftPostStore = createFetchStore( {\nbaseName: 'createIdeaDraftPost',\n- controlCallback: ( { idea } ) => {\n- return API.set( 'modules', 'idea-hub', 'create-idea-draft-post', { idea } );\n+ controlCallback: async ( { idea } ) => {\n+ const result = await API.set( 'modules', 'idea-hub', 'create-idea-draft-post', { idea } );\n+\n+ API.invalidateCache( 'modules', 'idea-hub', 'draft-post-ideas' );\n+\n+ return result;\n},\nreducerCallback: ( state, ideaDraftPost ) => {\nreturn {\n",
        "chatgpt_cot": "Add functionality to populate cards and create draft object, and fetch card embeddings for cube draft and sealed deck."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -65,6 +65,7 @@ app.set('view engine', 'pug');\n// Set Public Folder\napp.use(express.static(path.join(__dirname, 'public')));\n+app.use('/js', express.static(path.join(__dirname, 'dist')));\nlet session_options = {\nsecret: secrets.session,\n",
        "org_msg": "Add Express directive to serve webpack output.",
        "sim_msg": "load statics from assets on development",
        "sim_diff": "diff --git a/app.js b/app.js @@ -32,10 +32,16 @@ app.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n+if (process.env.NODE_ENV === 'production') {\napp.use(express.static(path.join(__dirname, 'public'), {\nmaxAge: OneWeek,\n- index: process.env.NODE_ENV !== 'production' ? '../templates/development_index.html' : 'index.html',\n+ index: 'index.html',\n}));\n+} else {\n+ app.use(express.static(path.join(__dirname, 'assets'), {\n+ index: '../templates/development_index.html',\n+ }));\n+}\napp.use(express.static(path.join(__dirname, 'node_modules')));\napp.use(cors());\n",
        "chatgpt_cot": "Add serving static files from '/dist' directory under '/js' route to enhance application functionality and structure."
    },
    {
        "org_diff": "diff --git a/src/components/ListView.js b/src/components/ListView.js @@ -48,7 +48,7 @@ class ListViewRaw extends Component {\nconst currentIds = this.props.cards.map(card => card.cardID);\nconst newIds = currentIds.filter(id => !knownIds.has(id));\nif (newIds.length > 0) {\n- fetch('/cube/api/getversions', {\n+ csrfFetch('/cube/api/getversions', {\nmethod: 'POST',\nbody: JSON.stringify(newIds),\nheaders: {\n",
        "org_msg": "Fix another CSRF issue.",
        "sim_msg": "Default ListView#isCorrectItemView to just true\nIt's already looking up by guid, so no need to compare content for equality.",
        "sim_diff": "diff --git a/source/views/collections/ListView.js b/source/views/collections/ListView.js @@ -133,8 +133,8 @@ const ListView = Class({\n// -----------------------------------------------------------------------\n- isCorrectItemView ( view, item ) {\n- return view.get( 'content' ) === item;\n+ isCorrectItemView (/* view, item */) {\n+ return true;\n},\ncreateItemView ( content, index, list, isAdded ) {\n",
        "chatgpt_cot": "\"Add CSRF protection to ListView fetch call\""
    },
    {
        "org_diff": "diff --git a/src/pages/SamplePackPage.js b/src/pages/SamplePackPage.js @@ -36,7 +36,7 @@ const SamplePackPage = ({ cube_id, seed, pack }) => {\n<CardGrid\ncardList={pack}\nTag={CardImage}\n- colProps={{ className: 'col-md-2-4', sm: '3', xs: '4' }}\n+ colProps={{ className: 'col-md-2-4 col-lg-2-4 col-xl-2-4', sm: '3', xs: '4' }}\ncardProps={{ autocard: true }}\nclassName=\"sample\"\n/>\n",
        "org_msg": "Fix sample pack grid dimensions",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "\"Update colProps in SamplePackPage to include col-lg-2-4 and col-xl-2-4 for responsiveness.\""
    },
    {
        "org_diff": "diff --git a/serverjs/analytics.js b/serverjs/analytics.js @@ -493,7 +493,7 @@ var methods = {\nvar mentionedTokens = [];\n- cards.forEach(function(card, index) {\n+ for (const card of cards) {\ncard.details = carddb.cardFromId(card.cardID);\nif (card.details.tokens) {\n",
        "org_msg": "Update serverjs/analytics.js",
        "sim_msg": "add: rollbar logging for etoro",
        "sim_diff": "diff --git a/src/lib/analytics/analytics.js b/src/lib/analytics/analytics.js @@ -46,7 +46,7 @@ export const initAnalytics = async (goodWallet: GoodWallet, userStorage: UserSto\ncaptureUncaught: true,\ncaptureUnhandledRejections: true,\npayload: {\n- environment: Config.env,\n+ environment: Config.env + Config.network,\nperson: {\nid: emailOrId,\nidentifier,\n",
        "chatgpt_cot": "Refactor forEach loop to for...of loop in analytics.js\n1. Changing the method of iterating over cards array from forEach to for...of loop.\n2. The file \"analytics.js\" likely handles data analysis and the modification improves code readability and performance.\n3. The purpose of the modification is to improve code readability and potentially performance by using for...of loop."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -716,8 +716,8 @@ export function cardGetLabels(card, sort) {\n}\nif (sort === 'Legality') {\nreturn Object.entries(card.details.legalities)\n- .filter(([k, v]) => ['legal', 'banned'].includes(v))\n- .map(([k, v]) => k);\n+ .filter(([k, v]) => ['legal', 'banned'].includes(v)) // eslint-disable-line no-unused-vars\n+ .map(([k, v]) => k); // eslint-disable-line no-unused-vars\n}\nif (sort === 'Power') {\nif (card.details.power) {\n@@ -875,7 +875,7 @@ export function sortDeep(cards, ...sorts) {\nexport function countGroup(group) {\nif (Array.isArray(group[0])) {\n- const counts = group.map(([label, group2]) => countGroup(group2));\n+ const counts = group.map(([label, group2]) => countGroup(group2)); // eslint-disable-line no-unused-vars\nreturn counts.reduce((a, b) => a + b, 0);\n}\nreturn group.length;\n",
        "org_msg": "Ignore remaining style issues using eslint-disable-line comments",
        "sim_msg": "Don't integer-ize strings in O.sortByProperties\nThis has caused us an unexpected bug, and everywhere else in our code base we\ndo not auto-convert strings to integers without explicit request.",
        "sim_diff": "diff --git a/source/core/sortByProperties.js b/source/core/sortByProperties.js @@ -9,9 +9,8 @@ import { i18n } from '../localisation/LocaleController';\nCreates a comparison function which takes two objects and returns -1/0/1 to\nindicate whether the first object is before or after the other. Comparison\nis made by considering each of the properties in the array in turn on the\n- two objects until the objects have non-equal values for a property. If the\n- property values are integer like strings, they will first be converted to\n- numbers for comparison. Other strings will be compared case-insensitively.\n+ two objects until the objects have non-equal values for a property. Strings\n+ will be compared case-insensitively.\nParameters:\nproperties - {String[]} The properties to sort the objects by, in\n@@ -22,7 +21,6 @@ import { i18n } from '../localisation/LocaleController';\n{Function} This function may be passed to the Array#sort method to\nsort the array of objects by the properties specified.\n*/\n-const isNumber = /^\\d+$/;\nexport default function sortByProperties ( properties ) {\nif ( !( properties instanceof Array ) ) {\nproperties = [ properties ];\n@@ -33,8 +31,8 @@ export default function sortByProperties ( properties ) {\nconst hasGet = !!a.get;\nfor ( let i = 0; i < l; i += 1 ) {\nconst prop = properties[i];\n- let aVal = hasGet ? a.get( prop ) : a[ prop ];\n- let bVal = hasGet ? b.get( prop ) : b[ prop ];\n+ const aVal = hasGet ? a.get( prop ) : a[ prop ];\n+ const bVal = hasGet ? b.get( prop ) : b[ prop ];\nconst type = typeof aVal;\n// Must be the same type\n@@ -43,13 +41,8 @@ export default function sortByProperties ( properties ) {\nreturn aVal ? -1 : 1;\n}\nif ( type === 'string' ) {\n- if ( isNumber.test( aVal ) && isNumber.test( bVal ) ) {\n- aVal = +aVal;\n- bVal = +bVal;\n- } else {\nreturn i18n.compare( aVal, bVal );\n}\n- }\nif ( aVal < bVal ) {\nreturn -1;\n}\n",
        "chatgpt_cot": "Add eslint-disable-line for no-unused-vars in Sort.js to resolve compilation issue and improve code readability in cardGetLabels and countGroup functions."
    },
    {
        "org_diff": "diff --git a/src/components/AspectRatioBox.js b/src/components/AspectRatioBox.js @@ -3,7 +3,7 @@ import React from 'react';\nconst AspectRatioBox = ({ ratio, className, ...props }) => (\n<div className=\"position-relative w-100\" style={{ paddingTop: `${(100 / ratio).toFixed(5)}%` }}>\n<div\n- className={'position-absolute' + (className ? '' : ` ${className}`)}\n+ className={'position-absolute overflow-hidden' + (className ? '' : ` ${className}`)}\nstyle={{ left: 0, top: 0, right: 0, bottom: 0 }}\n{...props}\n/>\n",
        "org_msg": "Fix image overflow in cube preview.",
        "sim_msg": "allow nested widget previews to update",
        "sim_diff": "diff --git a/src/components/Widgets/PreviewHOC.js b/src/components/Widgets/PreviewHOC.js @@ -2,7 +2,11 @@ import React from 'react';\nclass PreviewHOC extends React.Component {\nshouldComponentUpdate(nextProps) {\n- return nextProps.value !== this.props.value;\n+ // Only re-render on value change, but always re-render objects and lists.\n+ // Their child widgets will each also be wrapped with this component, and\n+ // will only be updated on value change.\n+ const isWidgetContainer = ['object', 'list'].includes(nextProps.field.get('widget'));\n+ return isWidgetContainer || this.props.value !== nextProps.value;\n}\nrender() {\n",
        "chatgpt_cot": "Add overflow-hidden class to AspectRatioBox for better styling and layout."
    },
    {
        "org_diff": "diff --git a/src/components/DraftView.js b/src/components/DraftView.js @@ -21,7 +21,9 @@ export const subtitle = (cards) => {\nconst numCards = cards.length;\nconst allTypes = cards.map((card) => (card.type_line || card.details.type).toLowerCase());\nconst numLands = allTypes.filter((type) => type.includes('land')).length;\n- const numNonlands = numCards - numLands;\n+ const numNonlands = allTypes.filter(\n+ (type) => !type.includes('land') && !/^(plane|phenomenon|vanguard|scheme|conspiracy)$/.test(type),\n+ ).length;\nreturn (\n`${numCards} card${numCards === 1 ? '' : 's'}, ` +\n`${numLands} land${numLands === 1 ? '' : 's'}, ` +\n",
        "org_msg": "Exclude schemes, etc. from nonland count.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Refactor numNonlands calculation in DraftView.js for better filtering of card types. Improve accuracy and readability of card count display."
    },
    {
        "org_diff": "diff --git a/src/components/ChangelistContext.js b/src/components/ChangelistContext.js @@ -15,6 +15,8 @@ export const ChangelistContextProvider = ({ cubeID, setOpenCollapse, initialChan\nuseEffect(() => {\nif (Query.get('updated', false) === 'true') {\nQuery.del('updated');\n+ setChanges([]);\n+ return;\n}\nif (typeof cubeID === 'undefined') {\n",
        "org_msg": "Fix stored changes on update.",
        "sim_msg": "Delete metadata by key of deleted value (previously harcoded)",
        "sim_diff": "diff --git a/src/components/Widgets/ListControl.js b/src/components/Widgets/ListControl.js @@ -102,7 +102,7 @@ export default class ListControl extends Component {\nreturn (e) => {\ne.preventDefault();\nconst { value, metadata, onChange, forID } = this.props;\n- const parsedMetadata = { [forID]: metadata.remove(metadata.keySeq().get(0)) };\n+ const parsedMetadata = { [forID]: metadata.removeIn(value.get(index).valueSeq()) };\nonChange(value.remove(index), parsedMetadata);\n};\n}\n",
        "chatgpt_cot": "Fix issue with resetting changes array when query parameter 'updated' is true in ChangelistContextProvider component."
    },
    {
        "org_diff": "diff --git a/src/components/TagContext.js b/src/components/TagContext.js @@ -132,7 +132,7 @@ export const getCardColorClass = card => {\nexport const getCardTagColorClass = (tagColors, card) => {\nconst tagColor = tagColors.find(({ tag }) => card.tags.includes(tag));\n- if (tagColor) {\n+ if (tagColor && tagColor.color) {\nreturn `tag-color tag-${tagColor.color}`;\n} else {\nreturn getCardColorClass(card);\n",
        "org_msg": "Fix card name display bug.",
        "sim_msg": "removed hyphens from tags",
        "sim_diff": "diff --git a/components/system/components/Tag.js b/components/system/components/Tag.js @@ -475,7 +475,7 @@ export const Tag = ({\nconst _handleChange = (e) => setValue(e.target.value.toLowerCase());\nconst _handleKeyPress = (e) => {\n- let regex = /[a-z0-9\\s-]/i;\n+ let regex = /[a-z0-9\\s]/i;\nif (e.key === \"Enter\" && value.length) {\n_handleAdd(value);\n",
        "chatgpt_cot": "Refactor getCardTagColorClass to handle tagColor color property."
    },
    {
        "org_diff": "diff --git a/webpack.dev.js b/webpack.dev.js @@ -12,7 +12,7 @@ module.exports = merge(common, {\npublicPath: '/js/',\nproxy: [{\ncontext: ['!/js/*.bundle.js', '**'],\n- target: 'http://localhost:4999',\n+ target: 'http://localhost:5000',\n}],\n},\noptimization: {\n",
        "org_msg": "revert debug value",
        "sim_msg": "Enable Hot Module Replacement",
        "sim_diff": "diff --git a/webpack.dev.js b/webpack.dev.js @@ -14,6 +14,7 @@ module.exports = (argv) => merge(require('./webpack.common.js')(argv), {\npath.join(__dirname, '/dist'),\n],\nwatchContentBase: true,\n+ hot: true,\ncompress: true,\nport: 9000,\nopen: true,\n",
        "chatgpt_cot": "\"Update proxy target to resolve connection issue with localhost:5000 in webpack.dev.js\""
    },
    {
        "org_diff": "diff --git a/public/js/sortfilter.js b/public/js/sortfilter.js @@ -44,7 +44,8 @@ function price_bucket_label(index) {\n}\n}\n-function cmcToNumber(cmc) {\n+function cmcToNumber(card) {\n+ const cmc = card.hasOwnProperty('cmc') ? card.cmc : card.details.cmc;\nif (isNaN(cmc)) {\nreturn cmc.indexOf('.') > -1 ? parseFloat(cmc) : parseInt(cmc);\n} else {\n@@ -95,13 +96,13 @@ function cardIsLabel(card, label, sort) {\n}\n} else if (sort == 'CMC') {\n// Sort by CMC, but collapse all >= 8 into '8+' category.\n- const cmc = Math.round(cmcToNumber(card.cmc || card.details.cmc));\n+ const cmc = Math.round(cmcToNumber(card));\nif (cmc >= 8) {\nreturn label == '8+';\n}\nreturn cmc == label;\n} else if (sort == 'CMC2') {\n- const cmc = Math.round(cmcToNumber(card.cmc || card.details.cmc));\n+ const cmc = Math.round(cmcToNumber(card));\nif (cmc >= 7) {\nreturn label == '7+';\n} else if (cmc <= 1) {\n@@ -110,7 +111,7 @@ function cardIsLabel(card, label, sort) {\nreturn cmc == label;\n} else if (sort == 'CMC-Full') {\n// Round to half-integer.\n- return Math.round(cmcToNumber(card.cmc || card.details.cmc) * 2) / 2 == label;\n+ return Math.round(cmcToNumber(card) * 2) / 2 == label;\n} else if (sort == 'Supertype' || sort == 'Type') {\nif (card.type_line.includes('Contraption')) {\nreturn label == 'Contraption';\n",
        "org_msg": "Fix CMC 0 sorting.",
        "sim_msg": "generalize Axes.makeLabelFns to support pads about ticks at angles\n... just like in the ternary case, but could potentially be\nused in elsewhere.",
        "sim_diff": "diff --git a/src/plots/cartesian/axes.js b/src/plots/cartesian/axes.js @@ -2409,38 +2409,47 @@ axes.makeTickPath = function(ax, shift, sgn) {\n'M' + (shift + pad * sgn) + ',0h' + (len * sgn);\n};\n-// labelStandoff, labelShift ???\n-\n-axes.makeLabelFns = function(ax, shift) {\n+axes.makeLabelFns = function(ax, shift, angle) {\nvar axLetter = ax._id.charAt(0);\nvar pad = (ax.linewidth || 1) / 2;\nvar labelStandoff = ax.ticks === 'outside' ? ax.ticklen : 0;\n+ var labelShift = 0;\n+\n+ if(angle && ax.ticks === 'outside') {\n+ var rad = Lib.deg2rad(angle);\n+ labelStandoff = ax.ticklen * Math.cos(rad) + 1;\n+ labelShift = ax.ticklen * Math.sin(rad);\n+ }\n+\nif(ax.showticklabels && (ax.ticks === 'outside' || ax.showline)) {\nlabelStandoff += 0.2 * ax.tickfont.size;\n}\nvar out = {};\n+ var x0, y0, ff, flipIt;\nif(axLetter === 'x') {\n- var flipX = (ax.side === 'bottom') ? 1 : -1;\n- var y0 = shift + (labelStandoff + pad) * flipX;\n- var xf = ax.side === 'bottom' ? 1 : -0.2;\n+ flipIt = ax.side === 'bottom' ? 1 : -1;\n+ x0 = labelShift * flipIt;\n+ y0 = shift + (labelStandoff + pad) * flipIt;\n+ ff = ax.side === 'bottom' ? 1 : -0.2;\n- out.labelXFn = function(d) { return d.dx; };\n- out.labelYFn = function(d) { return d.dy + y0 + d.fontSize * xf; };\n+ out.labelXFn = function(d) { return d.dx + x0; };\n+ out.labelYFn = function(d) { return d.dy + y0 + d.fontSize * ff; };\nout.labelAnchorFn = function(a) {\nif(!isNumeric(a) || a === 0 || a === 180) {\nreturn 'middle';\n}\n- return (a * flipX < 0) ? 'end' : 'start';\n+ return (a * flipIt < 0) ? 'end' : 'start';\n};\n} else {\n- var flipY = (ax.side === 'right') ? 1 : -1;\n- var x0 = labelStandoff + pad;\n- var yf = Math.abs(ax.tickangle) === 90 ? 0.5 : 0;\n+ flipIt = ax.side === 'right' ? 1 : -1;\n+ x0 = labelStandoff + pad;\n+ y0 = -labelShift * flipIt;\n+ ff = Math.abs(ax.tickangle) === 90 ? 0.5 : 0;\n- out.labelXFn = function(d) { return d.dx + shift + (x0 + d.fontSize * yf) * flipY; };\n- out.labelYFn = function(d) { return d.dy + d.fontSize * MID_SHIFT; };\n+ out.labelXFn = function(d) { return d.dx + shift + (x0 + d.fontSize * ff) * flipIt; };\n+ out.labelYFn = function(d) { return d.dy + y0 + d.fontSize * MID_SHIFT; };\nout.labelAnchorFn = function(a) {\nif(isNumeric(a) && Math.abs(a) === 90) {\nreturn 'middle';\n",
        "chatgpt_cot": "\"Fix compilation issue due to method name change in sortfilter.js\""
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -112,7 +112,6 @@ router.post('/lostpasswordreset', function(req, res) {\nmin: 8,\nmax: 24\n});\n- req.checkBody('password', 'Password must only contain alphanumeric characters, and only the following special characters: ! @ # $ % ^ &*').matches(/^[0-9a-zA-Z]*$/, \"i\");\nlet errors = req.validationErrors();\nif (errors) {\n@@ -557,7 +556,6 @@ router.post('/resetpassword', ensureAuth, function(req, res, next) {\nmin: 8,\nmax: 24\n});\n- req.checkBody('password2', 'Password must only contain alphanumeric characters, and only the following special characters: ! @ # $ % ^ &*').matches(/^[0-9a-zA-Z]*$/, \"i\");\nlet errors = req.validationErrors();\n",
        "org_msg": "remove old password checks",
        "sim_msg": "fix(web): trimming password on login for consistency",
        "sim_diff": "diff --git a/src/webroutes/authentication/verifyPassword.js b/src/webroutes/authentication/verifyPassword.js @@ -28,7 +28,7 @@ module.exports = async function AuthVerify(ctx) {\nrenderData.message = 'Wrong Password!';\nreturn ctx.utils.render('login', renderData);\n}\n- if (!VerifyPasswordHash(ctx.request.body.password, admin.password_hash)) {\n+ if (!VerifyPasswordHash(ctx.request.body.password.trim(), admin.password_hash)) {\nlogWarn(`Wrong password for from: ${ctx.ip}`);\nrenderData.message = 'Wrong Password!';\nreturn ctx.utils.render('login', renderData);\n",
        "chatgpt_cot": "Remove duplicate password validation code and consolidate it into a single function for 'lostpasswordreset' and 'resetpassword' routes in users_routes.js."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1802,7 +1802,7 @@ router.post('/edit/:id', ensureAuth, function(req, res) {\nres.redirect('/cube/list/' + req.params.id);\n} else {\nvar edits = req.body.body.split(';');\n- var fail_remove = [];\n+ var removes = [];\nvar changelog = '';\nfor (let edit of edits) {\nif (edit.charAt(0) == '+') {\n@@ -1819,9 +1819,10 @@ router.post('/edit/:id', ensureAuth, function(req, res) {\nconst indexOut = parseInt(edit.substring(1));\nif (isNaN(indexOut) || indexOut < 0 || indexOut >= cube.cards.length) {\nreq.flash('danger', 'Bad request format.');\n- res.redirect('/cube/list/' + req.params.id);\n+ return res.redirect('/cube/list/' + req.params.id);\n}\n- const [card] = cube.cards.splice(indexOut, 1);\n+ removes.push(indexOut);\n+ const card = cube.cards[indexOut];\nchangelog += removeCardHtml(carddb.cardFromId(card.cardID));\n} else if (edit.charAt(0) == '/') {\nconst [indexOutStr, idIn] = edit.substring(1).split('>');\n@@ -1830,22 +1831,27 @@ router.post('/edit/:id', ensureAuth, function(req, res) {\nconsole.log('Card not found: ' + edit, req);\n} else {\nutil.addCardToCube(cube, detailsIn);\n- changelog += addCardHtml(detailsIn);\n}\nconst indexOut = parseInt(indexOutStr);\nif (isNaN(indexOut) || indexOut < 0 || indexOut >= cube.cards.length) {\nreq.flash('danger', 'Bad request format.');\n- res.redirect('/cube/list/' + req.params.id);\n+ return res.redirect('/cube/list/' + req.params.id);\n}\n- const [cardOut] = cube.cards.splice(indexOut, 1);\n+ removes.push(indexOut);\n+ const cardOut = cube.cards[indexOut];\nchangelog += replaceCardHtml(carddb.cardFromId(cardOut.cardID), detailsIn);\n} else {\nreq.flash('danger', 'Bad request format.');\n- res.redirect('/cube/list/' + req.params.id);\n+ return res.redirect('/cube/list/' + req.params.id);\n}\n}\n+ removes.sort();\n+ for(let i = removes.length -1 ; i >= 0; i--) {\n+ cube.cards.splice(removes[i],1);\n+ }\n+\nvar blogpost = new Blog();\nblogpost.title = req.body.title;\nif (req.body.blog.length > 0) {\n",
        "org_msg": "Fixed issues with editing cube lists",
        "sim_msg": "refactor: handle request errors",
        "sim_diff": "diff --git a/lib/https/h2.js b/lib/https/h2.js @@ -27,7 +27,7 @@ function getSocket(options, callback) {\nNPNProtocols: SUPPORTED_PROTOS\n}, function(err, socket) {\nif (err) {\n- return callback();\n+ return callback(false, null, err);\n}\nvar proto = socket.alpnProtocol || socket.npnProtocol;\ncallback(proto === 'h2', socket);\n@@ -124,7 +124,7 @@ exports.request = function(req, res, callback) {\npendingList[name] = [[req, res, callback]];\n}\n}\n- getSocket(client ? null : options, function(isH2, socket) {\n+ getSocket(client ? null : options, function(isH2, socket, err) {\nclient = client || (isH2 && getClient(req, socket, name));\nvar pendingItem = pendingList[name];\ndelete pendingList[name];\n@@ -138,7 +138,7 @@ exports.request = function(req, res, callback) {\nrequestH2(client, req, res);\n}\n} else {\n- notH2.set(name, 1);\n+ !err && notH2.set(name, 1);\nif (pendingItem) {\npendingItem.forEach(function(list) {\nlist[2](socket);\n",
        "chatgpt_cot": "Refactor cube_routes.js for more clarity and efficiency. Use \"removes\" array instead of \"fail_remove\". Improve card removal logic. Add sorting for removals."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2207,18 +2207,10 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\n}\n}\n- const newMaybe = [...cube.maybe];\n- const newCards = [];\n- for (const add of adds) {\n- newCards.push(util.newCard(add, [], cube.defaultStatus));\n- const maybeIndex = cube.maybe.findIndex((card) => card.cardID === add._id);\n- if (maybeIndex !== -1) {\n- newMaybe.splice(maybeIndex, 1);\n- }\n- }\n- // Remove all invalid cards.\n- cube.cards = [...cube.cards.filter((card, index) => card.cardID && !removes.has(index)), ...newCards];\n- cube.maybe = newMaybe;\n+ // Filter out removed and invalid cards, and add new cards.\n+ const newCards = adds.map((add) => util.newCard(add, [], cube.defaultStatus));\n+ cube.cards = cube.cards.filter((card, index) => card.cardID && !removes.has(index)).concat(newCards);\n+ cube.maybe = cube.maybe.filter((maybeCard) => !adds.some((addedCard) => addedCard._id === maybeCard.cardID));\nconst blogpost = new Blog();\nblogpost.title = req.body.title;\n",
        "org_msg": "Fix bug with moving multiple cards from maybeboard to cube not always removing every card from maybeboard.",
        "sim_msg": "Fix readme profile display",
        "sim_diff": "diff --git a/src/templates/readme-profile.js b/src/templates/readme-profile.js @@ -5,6 +5,7 @@ import Layout from '../components/Layouts/Layout'\nimport { rhythm, scale } from '../utils/typography'\nimport Toc from '../components/Toc'\nimport { If } from '../components/utils'\n+import DeveloperCard from '../components/DeveloperCard'\nconst BlogContent = React.memo(({ html }) => {\n@@ -13,13 +14,12 @@ const BlogContent = React.memo(({ html }) => {\nfunction BlogPost(props) {\nconst post = props.data.markdownRemark\n- const siteTitle = props.data.site.siteMetadata.title\n- const { previous, next } = props.pageContext\n-\n+ const card = props.data.contributor\nreturn (\n<Layout>\n<div className=\"blog-main-container\">\n<main className=\"blog-mid-container blog-post-content\">\n+ <div className=\"developer-card-container\"><DeveloperCard {...card} /></div>\n<BlogContent html={post.html} />\n<hr\nstyle={{\n@@ -35,13 +35,32 @@ function BlogPost(props) {\nexport default BlogPost\nexport const pageQuery = graphql`\n- query($slug: String!) {\n+ query($slug: String!, $githubUserId: String!) {\nsite {\nsiteMetadata {\ntitle\nauthor\n}\n}\n+ contributor(githubUserId: {eq: $githubUserId}) {\n+ id\n+ countryCode\n+ repositoryCount\n+ contributionYears\n+ country\n+ firstContribution\n+ followersCount\n+ githubUserId\n+ issuesCount\n+ linkedin\n+ website\n+ name\n+ pullRequestsCount\n+ repoContributedCount\n+ thisYearContribution\n+ twitter\n+ avatarUrl\n+ }\nmarkdownRemark(fields: { slug: { eq: $slug } }) {\nid\nhtml\n",
        "chatgpt_cot": "Refactor card handling in cube_routes.js\n- Removed unnecessary loop and array creation\n- Simplified card filtering and addition for improved performance"
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -606,7 +606,7 @@ function convertCard(card, isExtra) {\neur: card.prices.eur ? parseFloat(card.prices.eur, 10) : null,\ntix: card.prices.tix ? parseFloat(card.prices.tix, 10) : null,\n};\n- newcard.elo = catalog.elodict[name];\n+ newcard.elo = catalog.elodict[name] ? catalog.elodict[name] : 1200;\nnewcard.embedding = catalog.embeddingdict[name];\nnewcard.digital = card.digital;\nnewcard.isToken = card.layout === 'token';\n",
        "org_msg": "card objects have default elo",
        "sim_msg": "Card render debugging",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -137,30 +137,39 @@ export const generateCard = async ({\nsvg.setAttribute('height', cardHeight);\nsvg.innerHTML = cardSvgSource;\n+ // window.svg = svg;\n+\n{\nconst el = svg;\n- const titleTextEl = el.querySelector('#title-text');\n- titleTextEl.innerHTML = name;\n+ // name\n+ const nameEl = el.querySelector('#name');\n+ nameEl.innerHTML = name;\n+\n+ // type icon\nfor (let i = 0; i < types.length; i++) {\nconst type = types[i];\nconst typeEl = el.querySelector('#type-' + type);\ntypeEl.style.display = type === spec.stats.type ? 'block' : 'none';\n}\n+\n+ // stat values\n[\n+ 'level',\n'hp',\n'mp',\n- 'attack',\n- 'defense',\n- 'speed',\n- 'luck',\n+ 'atk',\n+ 'def',\n+ 'mag',\n+ 'spr',\n+ 'dex',\n+ 'lck',\n].forEach(statName => {\n- const statEl = el.querySelector('#' + statName);\n- const texts = statEl.querySelectorAll('text');\n- const textEl = texts[texts.length - 1];\n- textEl.innerHTML = escape(spec.stats[statName] + '');\n+ const statEl = el.querySelector('#' + statName + '-value');\n+ statEl.innerHTML = escape(spec.stats[statName] + '');\n});\n- {\n+\n+ /* {\nconst imageEl = el.querySelector('#Image image');\nimageEl.setAttribute('xlink:href', objectImage);\n}\n@@ -190,7 +199,7 @@ export const generateCard = async ({\ng.id = 'background-' + id;\nconst p = g.nextElementSibling;\np.style = `fill:url(#${g.id});`;\n- }\n+ } */\n}\nconst image = await new Promise((accept, reject) => {\n",
        "chatgpt_cot": "Update elo value in convertCard function to handle cases where catalog.elodict[name] is null."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1762,7 +1762,7 @@ router.post('/edit/:id',ensureAuth, function(req,res,next)\n});\nvar blogpost = new Blog();\n- blogpost.title='Automatic Post - Bulk Upload';\n+ blogpost.title=req.body.title;\nif(req.body.blog.length > 0)\n{\nblogpost.html=req.body.blog;\n",
        "org_msg": "Fixed issue with blog titles",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Update cube_routes.js to dynamically set blogpost title from request body, fixing issue with hardcoded title assignment in edit route.\""
    },
    {
        "org_diff": "diff --git a/public/js/deleteconfirm.js b/public/js/deleteconfirm.js $(\"#confirmation\").keyup(function() {\nif ($(this).val().toLowerCase() == 'delete') {\n- $(\"#delete\").removeAttr('disabled');\n+ $(\".delete-cube\").removeAttr('disabled');\n} else {\n- $(\"#delete\").attr('disabled', 'disabled')\n+ $(\".delete-cube\").attr('disabled', 'disabled')\n}\n})\n\\ No newline at end of file\n",
        "org_msg": "Fixed delete button not working",
        "sim_msg": "Clean up connect button url",
        "sim_diff": "diff --git a/planet.js b/planet.js @@ -957,7 +957,7 @@ document.getElementById('connectButton').addEventListener('click', async (e) =>\nif (response.ok) {\nconst json = await response.json();\n// console.log(json);\n- location.search = `?w=${json.id}`;\n+ location.search = `?u=${json.id}.worlds.webaverse.com`;\n}\n}\n});\n\\ No newline at end of file\n",
        "chatgpt_cot": "\"Update deleteconfirm.js to use class selector for delete button and handle case sensitivity for delete confirmation input.\""
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -266,9 +266,9 @@ router.get('/dashboard/decks/:page', async (req, res) => {\n});\nrouter.get('/landing', async (req, res) => {\n- const cubeq = Cube.countDocuments().exec();\n- const deckq = Deck.countDocuments().exec();\n- const userq = User.countDocuments().exec();\n+ const cubeq = Cube.estimatedDocumentCount().exec();\n+ const deckq = Deck.estimatedDocumentCount().exec();\n+ const userq = User.estimatedDocumentCount().exec();\nconst [cube, deck, user] = await Promise.all([cubeq, deckq, userq]);\n",
        "org_msg": "Use faster queries on landing page\nThe prod front page takes 8 sec to load.  phulin discovered this new method that is faster than countDocuments if you don't need precision.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Update document count methods to use estimatedDocumentCount() for better performance. Fixes potential performance bottleneck in /landing route."
    },
    {
        "org_diff": "diff --git a/src/utils/draftbots.js b/src/utils/draftbots.js @@ -86,7 +86,7 @@ export const fetchLands = {\n};\n// What is the raw power level of this card?\n-// Scale is roughly 2-6, linear.\n+// Scale is roughly 0-1, linear. Black Lotus should be ~1.\nexport const getRating = (combination, card) => {\nreturn (card?.rating ?? 1200) / 1200 - 1;\n};\n@@ -100,6 +100,9 @@ const SIMILARITY_MULTIPLIER = 1 / (1 - SIMILARITY_CLIP);\nconst scaleSimilarity = (value) => SIMILARITY_MULTIPLIER * Math.max(0, value - SIMILARITY_CLIP);\n+// Scale to get similarity range to approximately [0, 1]\n+const SYNERGY_SCALE = 4.2;\n+\n// How much do the cards we've already picked in this combo synergize with each other?\n// Scale is roughly 0-1.\nexport const getInternalSynergy = (combination, picked, synergies) => {\n@@ -113,7 +116,7 @@ export const getInternalSynergy = (combination, picked, synergies) => {\nfor (let i = 1; i < pickedInCombo.length; i++) {\nfor (let j = 0; j < i; j++) {\nconst similarityValue = similarity(synergies[pickedInCombo[i].index], synergies[pickedInCombo[j].index]);\n- internalSynergy += -Math.log(1 - scaleSimilarity(similarityValue)) / 4;\n+ internalSynergy += -Math.log(1 - scaleSimilarity(similarityValue)) / SYNERGY_SCALE;\n}\n}\n}\n@@ -137,7 +140,7 @@ export const getPickSynergy = (combination, card, picked, synergies) => {\n// Maximum synergy is generally around .997 which corresponds to ~1.\nif (index !== card.index) {\nconst similarityValue = similarity(synergies[index], synergies[card.index]);\n- synergy += -Math.log(1 - scaleSimilarity(similarityValue)) / 4;\n+ synergy += -Math.log(1 - scaleSimilarity(similarityValue)) / SYNERGY_SCALE;\n}\n}\n}\n",
        "org_msg": "More tweaks to score computation.",
        "sim_msg": "Rewrite procgen.js",
        "sim_diff": "diff --git a/procgen/procgen.js b/procgen/procgen.js -import alea from './alea.js';\n-import colorScheme from './color-scheme.js';\n+import {\n+ makeRng,\n+ createMisc,\n+} from './misc-gen.js';\n+import {\n+ numBlocks,\n+ voxelSize,\n+ placeNames,\n+ MapBlock,\n+ createMapChunk,\n+} from './map-gen.js';\n-const types = [\n- 'fire',\n- 'grass',\n- 'water',\n- 'electric',\n- 'fighting',\n- 'psychic',\n- 'colorless',\n- 'dark',\n- 'metal',\n- 'fairy',\n- 'bug',\n- 'rock',\n- 'flying',\n- 'ground',\n- 'ice',\n- 'poison',\n- 'ghost',\n- 'dragon',\n-];\n-const rarities = [\n- 'common',\n- 'uncommon',\n- 'rare',\n- 'epic',\n- 'legendary',\n-];\n-const rarityFactors = [80, 18, 1.8, 0.18, 0.02].map(n => n / 100);\n-\n-function makeRandom(rng, n) {\n- const raw = new Float32Array(n);\n- for (let i = 0; i < raw.length; i++) {\n- raw[i] = rng();\n- }\n- return raw;\n-}\n-const makeColors = rng => colorScheme\n- .from_hue(rng() * 360)\n- .scheme('triade')\n- .variation('default')\n- .colors()\n- .map(c => '#' + c);\n-function procgen(seed = '', count = 1) {\n- const result = Array(count);\n- const rng = alea(seed);\n- for (let i = 0; i < count; i++) {\n- const colors = makeColors(rng);\n- const color = colors[0];\n- const color2 = colors[4];\n- const color3 = colors[8];\n- const art = {\n- colors,\n- color,\n- color2,\n- color3,\n- details: makeRandom(rng, 32),\n- };\n- const stats = {\n- type: types[Math.floor(rng() * types.length)],\n- rarity: (() => {\n- const f = rng();\n- let totalFactor = 0;\n- for (let i = 0; i < rarityFactors.length; i++) {\n- totalFactor += rarityFactors[i];\n- if (f <= totalFactor) {\n- return rarities[i];\n- }\n- }\n- return rarities[rarities.length-1];\n- })(),\n- level: Math.floor(rng() * 100),\n- hp: Math.floor(rng() * 0xFF),\n- mp: Math.floor(rng() * 0xFF),\n- attack: Math.floor(rng() * 0xFF),\n- defense: Math.floor(rng() * 0xFF),\n- magic: Math.floor(rng() * 0xFF),\n- magicDefense: Math.floor(rng() * 0xFF),\n- speed: Math.floor(rng() * 0xFF),\n- accuracy: Math.floor(rng() * 0xFF),\n- evasion: Math.floor(rng() * 0xFF),\n- luck: Math.floor(rng() * 0xFF),\n- details: makeRandom(rng, 32),\n- };\n- result[i] = {\n- art,\n- stats,\n- };\n- }\n- return result;\n-}\n-export default procgen;\nexport {\n- types,\n- rarities,\n+ makeRng,\n+ createMisc,\n+ numBlocks,\n+ voxelSize,\n+ placeNames,\n+ MapBlock,\n+ createMapChunk,\n};\n\\ No newline at end of file\n",
        "chatgpt_cot": "Update card rating scale and synergy calculations to improve accuracy and consistency in draftbots.js. Adjusted scale and added new function."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -790,7 +790,7 @@ export function sortDeep(cards, ...sorts) {\nreturn [...cards].sort(alphaCompare);\n}\nconst [first, ...rest] = sorts;\n- const result = sortGroupsOrdered(cards, first);\n+ const result = sortGroupsOrdered(cards, first ?? 'Unsorted');\nfor (const labelGroup of result) {\nif (rest.length > 0) {\nlabelGroup[1] = sortDeep(labelGroup[1], ...rest);\n",
        "org_msg": "added default to sortDeep",
        "sim_msg": "set inital sort type",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -124,6 +124,7 @@ list.drawList = function() {\n}\n}\n} else {\n+ $('#curr-sort-type').text(config.localization[config.language][config.sort_options[0]])\nfor(var i=0; i<numberOfOptions; i++) {\naddSortOptionDropdownEntry(config.sort_options[i])\n}\n@@ -163,7 +164,7 @@ list.fit_list_height = function() {\nlet addSortOptionDropdownEntry = function(sort_option) {\nlet entry = sortDropdownEntryTemplate({\nsort_by_string: config.localization[config.language].sort_by_label,\n- sorter_label: config.localization[config.language][sort_option]\n+ sorter_label: config.localization[config.language][sort_option],\n})\nvar newEntry = $(entry).appendTo('#sort-menu-entries')\nnewEntry.on(\"click\", () => {\n",
        "chatgpt_cot": "\"Fix default sorting label in Sort.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube/download.js b/routes/cube/download.js @@ -9,7 +9,8 @@ const filterutil = require('../../dist/filtering/FilterCards.js');\nconst carddb = require('../../serverjs/cards.js');\nconst util = require('../../serverjs/util.js');\n-const { buildIdQuery, writeCard, CSV_HEADER, exportToMtgo } = require('../../serverjs/cubefn.js');\n+const { buildIdQuery, CSV_HEADER, exportToMtgo } = require('../../serverjs/cubefn.js');\n+const { writeCard } = require('./helper.js')\n// Bring in models\nconst Cube = require('../../models/cube');\n",
        "org_msg": "Fix writeCard import",
        "sim_msg": "Part of issue:\nThe filter to remove object mds with no parts is removed as we will move this to a different worker thread.",
        "sim_diff": "diff --git a/src/server/object_services/map_builder.js b/src/server/object_services/map_builder.js @@ -6,7 +6,6 @@ const assert = require('assert');\nconst P = require('../../util/promise');\nconst dbg = require('../../util/debug_module')(__filename);\n-const config = require('../../../config');\n// const config = require('../../../config.js');\n// const mapper = require('./mapper');\nconst MDStore = require('./md_store').MDStore;\n@@ -171,8 +170,7 @@ class MapBuilder {\n// Deleting objects with no parts here as the delete_parts_by_chunks need to finish before\n// any attempt is made to delete the objects.\nif (this.evict) {\n- const objects_to_gc = _.uniq(loaded_chunks_db.flatMap(chunk => chunk.objects))\n- .filter(obj => Date.now() - obj.create_time.getTime() > config.NAMESPACE_CACHING.MIN_OBJECT_AGE_FOR_GC);\n+ const objects_to_gc = _.uniq(loaded_chunks_db.flatMap(chunk => chunk.objects));\nif (objects_to_gc.length) {\ndbg.log1('MapBuilder.delete_objects_if_no_parts:', objects_to_gc);\nawait Promise.all(objects_to_gc.map(map_deleter.delete_object_if_no_parts));\n",
        "chatgpt_cot": "Refactor cube download route to separate writeCard function, improving code organization and maintainability."
    },
    {
        "org_diff": "diff --git a/src/components/CardModal.js b/src/components/CardModal.js @@ -18,7 +18,7 @@ const ColorCheck = ({ color, short, value, onChange }) => (\n);\nconst CardModal = ({ card, versions, toggle, disabled, values, onChange, ...props }) => (\n- <Modal size=\"lg\" labelledby=\"cardModalHeader\" {...props}>\n+ <Modal size=\"lg\" labelledby=\"cardModalHeader\" toggle={toggle} {...props}>\n<ModalHeader id=\"cardModalHeader\" toggle={toggle}>\n{card.details.name}\n</ModalHeader>\n",
        "org_msg": "Toggle card modal by clicking outside.",
        "sim_msg": "merge row and touchable style;",
        "sim_diff": "diff --git a/src/components/EventCard.js b/src/components/EventCard.js @@ -59,10 +59,7 @@ class EventCard extends React.PureComponent<Props> {\nreturn (\n<View style={styles.container}>\n<View style={styles.eventCard}>\n- <Touchable\n- style={[styles.touchable, styles.row]}\n- onPress={() => onPress(id)}\n- >\n+ <Touchable style={styles.touchable} onPress={() => onPress(id)}>\n<ImageBackground\nstyle={styles.imageContainer}\nsource={image}\n@@ -131,15 +128,13 @@ const styles = StyleSheet.create({\nborderRadius: 5\n},\ntouchable: {\n- flexGrow: 1\n+ flexGrow: 1,\n+ flex: 0,\n+ flexDirection: \"row\"\n},\nimageContainer: {\nwidth: 114\n},\n- row: {\n- flex: 0,\n- flexDirection: \"row\"\n- },\neventPriceContainer: {\nminHeight: 23,\nbackgroundColor: lightNavyBlueColor,\n",
        "chatgpt_cot": "\"Fix toggle prop in CardModal component to enable modal closing\""
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -139,6 +139,10 @@ class FilterCollapse extends Component {\nupdateFilters(overrideFilter) {\nconst filterInput = typeof overrideFilter === 'undefined' ? this.state.filterInput : overrideFilter;\n+ if (filterInput === '') {\n+ this.props.setFilter([]);\n+ return;\n+ }\nconst tokens = [];\nconst valid = Filter.tokenizeInput(filterInput, tokens);\nif (!valid || !Filter.verifyTokens(tokens)) return;\n",
        "org_msg": "Clear filter on empty input.",
        "sim_msg": "Fix categories filter button width",
        "sim_diff": "diff --git a/src/components/FilterHeaderCategories.js b/src/components/FilterHeaderCategories.js @@ -67,8 +67,7 @@ const FilterHeaderCategories = ({ selectedCategories, onFilterPress }: Props) =>\nconst styles = StyleSheet.create({\ncontentInterest: {\nalignItems: \"center\",\n- flexDirection: \"row\",\n- justifyContent: \"space-between\"\n+ flexDirection: \"row\"\n},\nfilterTitle: {\ncolor: filterShowMeTextColor,\n@@ -93,7 +92,7 @@ const styles = StyleSheet.create({\ntop: 0\n},\ninterestButton: {\n- flex: 1,\n+ width: 145,\nheight: 40,\nbackgroundColor: interestButtonBgColor,\nborderRadius: 4,\n",
        "chatgpt_cot": "\"Add conditional check in updateFilters method to set filter to empty array if filterInput is empty.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3547,7 +3547,7 @@ router.post('/resize/:id/:size', async (req, res) => {\nconst response = await fetch(\n`${process.env.FLASKROOT}/?cube_name=${req.params.id}&num_recs=${Math.max(\n0,\n- req.params.size - cube.cards.length(),\n+ req.params.size - cube.cards.length,\n)}&root=${encodeURIComponent(process.env.HOST)}`,\n);\nif (!response.ok) {\n@@ -3616,7 +3616,7 @@ router.post('/resize/:id/:size', async (req, res) => {\nif (err) {\nreturn util.handleRouteError(req, res, 'Error parsing filter.', `/cube/list/${req.params.id}`);\n}\n- list = list.filter(filter).slice(0, Math.abs(newSize - cube.cards.length));\n+ list = (filter ? list.filter(filter) : list).slice(0, Math.abs(newSize - cube.cards.length));\nlet changelog = '';\nif (newSize > cube.cards.length) {\n",
        "org_msg": "Fix cube resize",
        "sim_msg": "Disable specific eslint checks",
        "sim_diff": "diff --git a/client/deck-validator.js b/client/deck-validator.js @@ -24,7 +24,7 @@ function getStronghold(deck) {\nreturn stronghold;\n}\n-function isCardInReleasedPack(packs, card) {\n+function isCardInReleasedPack(packs, card) { // eslint-disable-line no-use-before-define\nlet pack = _.find(packs, pack => {\nreturn card.pack_code === pack.code;\n});\n@@ -45,7 +45,7 @@ function isCardInReleasedPack(packs, card) {\nreturn releaseDate <= now;\n}\n-module.exports = function validateDeckOld(deck, packs) {\n+module.exports = function validateDeckOld(deck, packs) { // eslint-disable-line no-use-before-define\nvar provinceCount = getDeckCount(deck.provinceCards);\nvar conflictCount = getDeckCount(deck.conflictCards);\nvar dynastyCount = getDeckCount(deck.dynastyCards);\n@@ -235,7 +235,7 @@ module.exports = function validateDeckOld(deck, packs) {\nreturn { status: status, provinceCount: provinceCount, conflictCount: conflictCount, dynastyCount: dynastyCount, extendedStatus: extendedStatus, isValid: isValid };\n};\n-module.exports = function validateDeck(deck, packs) {\n+module.exports = function validateDeck(deck, packs) { // eslint-disable-line no-use-before-define\nlet provinceCount = getDeckCount(deck.provinceCards);\nlet conflictCount = getDeckCount(deck.conflictCards);\nlet dynastyCount = getDeckCount(deck.dynastyCards);\n@@ -346,6 +346,5 @@ module.exports = function validateDeck(deck, packs) {\n}\n}\n- console.log({ status: status, provinceCount: provinceCount, conflictCount: conflictCount, dynastyCount: dynastyCount, extendedStatus: extendedStatus, isValid: isValid });\nreturn { status: status, provinceCount: provinceCount, conflictCount: conflictCount, dynastyCount: dynastyCount, extendedStatus: extendedStatus, isValid: isValid };\n};\n",
        "chatgpt_cot": "Fix filter logic in cube resize route to handle cases where filter is not present, preventing errors and ensuring correct list size."
    },
    {
        "org_diff": "diff --git a/nearley/values.ne b/nearley/values.ne @@ -72,29 +72,36 @@ colorIdentityOpValue -> anyOperator colorCombinationValue {% ([op, value]) => {\n| (\"=\" | \":\") \"m\"i {% ([op]) => { normalizeCombination(fieldValue).length > 1; } %}\n| (\"!=\" | \"<>\") \"m\"i {% ([op]) => { normalizeCombination(fieldValue).length < 2; } %}\n+# At each step it wraps the previous in another array layer\n+# so we have to unwrap them as we step back up.\ncomb1[A] -> null {% () => [] %}\n- | $A {% (comb) => comb %}\n+ | $A {% ([comb]) => comb %}\ncomb2[A, B] -> null {% () => [] %}\n- | $A comb1[$B] {% ([a, rest]) => [a, ...rest] %}\n- | $B comb1[$A] {% ([b, rest]) => [b, ...rest] %}\n+ | ( $A comb1[$B]\n+ | $B comb1[$A]\n+ ) {% ([[[a], rest]]) => [a, ...rest.map(([c]) => c)] %}\ncomb3[A, B, C] -> null {% () => [] %}\n- | $A comb2[$B, $C] {% ([a, rest]) => [a, ...rest] %}\n- | $B comb2[$A, $C] {% ([b, rest]) => [b, ...rest] %}\n- | $C comb2[$B, $C] {% ([c, rest]) => [c, ...rest] %}\n+ | ( $A comb2[$B, $C]\n+ | $B comb2[$A, $C]\n+ | $C comb2[$B, $C]\n+ ) {% ([[[a], rest]]) => [a, ...rest.map(([c]) => c)] %}\ncomb4[A, B, C, D] -> null {% () => [] %}\n- | $A comb3[$B, $C, $D] {% ([a, rest]) => [a, ...rest] %}\n- | $B comb3[$A, $C, $D] {% ([b, rest]) => [b, ...rest] %}\n- | $C comb3[$A, $B, $D] {% ([c, rest]) => [c, ...rest] %}\n- | $D comb3[$A, $B, $C] {% ([d, rest]) => [d, ...rest] %}\n-\n-comb5NonEmpty[A, B, C, D, E] -> $A comb4[$B, $C, $D, $E] {% ([a, rest]) => [a, ...rest] %}\n- | $B comb4[$A, $C, $D, $E] {% ([a, rest]) => [a, ...rest] %}\n- | $C comb4[$A, $B, $D, $E] {% ([a, rest]) => [a, ...rest] %}\n- | $D comb4[$A, $B, $C, $E] {% ([a, rest]) => [a, ...rest] %}\n- | $E comb4[$A, $B, $C, $D] {% ([a, rest]) => [a, ...rest] %}\n+ | ( $A comb3[$B, $C, $D]\n+ | $B comb3[$A, $C, $D]\n+ | $C comb3[$A, $B, $D]\n+ | $D comb3[$A, $B, $C]\n+ ) {% ([[[a], rest]]) => [a, ...rest.map(([c]) => c)] %}\n+\n+comb5NonEmpty[A, B, C, D, E] -> (\n+ $A comb4[$B, $C, $D, $E]\n+ | $B comb4[$A, $C, $D, $E]\n+ | $C comb4[$A, $B, $D, $E]\n+ | $D comb4[$A, $B, $C, $E]\n+ | $E comb4[$A, $B, $C, $D]\n+) {% ([[[a], rest]]) => [a, ...rest.map(([c]) => c)] %}\ncolorCombinationValue ->\n(\"c\"i | \"brown\"i | \"colorless\"i) {% () => [] %}\n@@ -103,7 +110,7 @@ colorCombinationValue ->\n| \"black\"i {% () => ['b'] %}\n| \"red\"i {% () => ['r'] %}\n| \"green\"i {% () => ['g'] %}\n- | \"azorious\"i {% () => ['w', 'u'] %}\n+ | (\"azorious\"i | \"azorius\") {% () => ['w', 'u'] %}\n| \"dimir\"i {% () => ['u', 'b'] %}\n| \"rakdos\"i {% () => ['b', 'r'] %}\n| (\"gruul\"i | \"grul\"i) {% () => ['r', 'g'] %}\n@@ -124,7 +131,7 @@ colorCombinationValue ->\n| \"jeskai\"i {% () => ['w', 'u', 'r'] %}\n| \"sultai\"i {% () => ['u', 'b', 'g'] %}\n| (\"rainbow\"i | \"fivecolor\"i) {% () => ['w', 'u', 'b', 'r', 'g'] %}\n- | comb5NonEmpty[\"w\"i, \"u\"i, \"b\"i, \"r\"i, \"g\"i] {% ([[comb]]) => comb %}\n+ | comb5NonEmpty[\"w\"i, \"u\"i, \"b\"i, \"r\"i, \"g\"i] {% ([comb]) => comb %}\n@builtin \"string.ne\"\n",
        "org_msg": "Fix parsing colors.",
        "sim_msg": "ToCaseInsensitiveRegex improvements",
        "sim_diff": "diff --git a/src/core/operations/ToCaseInsensitiveRegex.mjs b/src/core/operations/ToCaseInsensitiveRegex.mjs @@ -32,7 +32,56 @@ class ToCaseInsensitiveRegex extends Operation {\n* @returns {string}\n*/\nrun(input, args) {\n- return input.replace(/[a-z]/ig, m => `[${m.toLowerCase()}${m.toUpperCase()}]`);\n+ /**\n+ * Simulates look behind behaviour since javascript doesn't support it.\n+ *\n+ * @param {string} input\n+ * @returns {string}\n+ */\n+ function preProcess(input) {\n+ let result = \"\";\n+ for (let i = 0; i < input.length; i++) {\n+ const temp = input.charAt(i);\n+ if (temp.match(/[a-zA-Z]/g) && (input.charAt(i-1) !== \"-\") && (input.charAt(i+1) !== \"-\"))\n+ result += \"[\" + temp.toLowerCase() + temp.toUpperCase() + \"]\";\n+ else\n+ result += temp;\n+ }\n+ return result;\n+ }\n+\n+ input = preProcess(input);\n+\n+ // Example: [a-z] -> [a-zA-Z]\n+ input = input.replace(/[a-z]-[a-z]/g, m => `${m}${m[0].toUpperCase()}-${m[2].toUpperCase()}`);\n+\n+ // Example: [a-z] -> [a-zA-Z]\n+ input = input.replace(/[A-Z]-[A-Z]/g, m => `${m}${m[0].toLowerCase()}-${m[2].toLowerCase()}`);\n+\n+ // Example: [H-d] -> [A-DH-dh-z]\n+ input = input.replace(/[A-Z]-[a-z]/g, m => `A-${m[2].toUpperCase()}${m}${m[0].toLowerCase()}-z`);\n+\n+ // Example: [!-D] -> [!-Da-d]\n+ input = input.replace(/[ -@]-[A-Z]/g, m => `${m}a-${m[2].toLowerCase()}`);\n+\n+ // Example: [%-^] -> [%-^a-z]\n+ input = input.replace(/[ -@]-[[-`]/g, m => `${m}a-z`);\n+\n+ // Example: [K-`] -> [K-`k-z]\n+ input = input.replace(/[A-Z]-[[-`]/g, m => `${m}${m[0].toLowerCase()}-z`);\n+\n+ // Example: [[-}] -> [[-}A-Z]\n+ input = input.replace(/[[-`]-[{-~]/g, m => `${m}A-Z`);\n+\n+ // Example: [b-}] -> [b-}B-Z]\n+ input = input.replace(/[a-z]-[{-~]/g, m => `${m}${m[0].toUpperCase()}-Z`);\n+\n+ // Example: [<-j] -> [<-z]\n+ input = input.replace(/[ -@]-[a-z]/g, m => `${m[0]}-z`);\n+\n+ // Example: [^-j] -> [A-J^-j]\n+ input = input.replace(/[[-`]-[a-z]/g, m => `A-${m[2].toUpperCase()}${m}`);\n+ return input;\n}\n}\n",
        "chatgpt_cot": "\"Refactor array layer unwrapping for better readability and maintainability, and fix minor syntax issues for color combination values.\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -192,9 +192,7 @@ function addTokens(card) {\ntokenPower = tokenPowerAndToughness.split('/')[0];\ntokenToughness = tokenPowerAndToughness.split('/')[1];\n}\n- }\n- else if (ability.includes(\"power and toughness are each equal\"))\n- {\n+ } else if (ability.includes(\"power and toughness are each equal\")) {\ntokenPower = '*';\ntokenToughness = '*';\n}\n@@ -295,8 +293,7 @@ function addTokens(card) {\n}\n}\n- if (mentionedTokens.length > 0)\n- {\n+ if (mentionedTokens.length > 0) {\n_catalog.dict[card.id].tokens = mentionedTokens;\n}\n}\n",
        "org_msg": "beautify too",
        "sim_msg": "swagger customizer file added only for non-reactive jwt apps",
        "sim_diff": "diff --git a/generators/server/files.js b/generators/server/files.js @@ -151,16 +151,6 @@ const serverFiles = {\npath: DOCKER_DIR,\ntemplates: ['swagger-editor.yml']\n},\n- {\n- condition: generator => generator.authenticationType === 'jwt',\n- path: SERVER_MAIN_SRC_DIR,\n- templates: [\n- {\n- file: 'package/config/apidoc/SwaggerSecurityCustomizer.java',\n- renameTo: generator => `${generator.javaDir}config/apidoc/SwaggerSecurityCustomizer.java`\n- }\n- ]\n- },\n{\ncondition: generator => generator.authenticationType === 'oauth2' && generator.applicationType !== 'microservice',\npath: DOCKER_DIR,\n@@ -387,6 +377,10 @@ const serverFiles = {\n{\nfile: 'package/security/jwt/JWTConfigurer.java',\nrenameTo: generator => `${generator.javaDir}security/jwt/JWTConfigurer.java`\n+ },\n+ {\n+ file: 'package/config/apidoc/SwaggerSecurityCustomizer.java',\n+ renameTo: generator => `${generator.javaDir}config/apidoc/SwaggerSecurityCustomizer.java`\n}\n]\n},\n",
        "chatgpt_cot": "\"Refactor addTokens function for readability and consistency, and update card tokens based on mentionedTokens length.\""
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -173,40 +173,24 @@ const findBestValue2d = (weights, packNum, pickNum, initialState) => {\n// value the more colors, this gets offset by having more cards.\nconst COLOR_SCALING_FACTOR = [1, 1, 0.6, 0.3, 0.1, 0.07];\nconst COLORS_WEIGHTS = [\n- [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n- [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n- [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n+ [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5],\n+ [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n+ [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 2.5],\n];\nconst VALUE_WEIGHTS = [\n+ [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n- [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n- [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n+ [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5],\n];\nconst INTERNAL_SYNERGY_WEIGHTS = [\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n- [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n- [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n+ [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n+ [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n];\nconst SYNERGY_WEIGHTS = [\n- [1 / 12, 1 / 6, 1 / 4, 1 / 3, 5 / 12, 1 / 2, 7 / 12, 2 / 3, 3 / 4, 5 / 6, 11 / 12, 1, 13 / 12, 7 / 6, 5 / 4],\n- [4 / 3, 17 / 12, 3 / 2, 19 / 12, 5 / 3, 7 / 4, 11 / 6, 23 / 12, 2, 25 / 12, 13 / 6, 9 / 4, 7 / 3, 29 / 12, 5 / 2],\n- [\n- 31 / 12,\n- 8 / 3,\n- 11 / 4,\n- 17 / 6,\n- 35 / 12,\n- 3,\n- 37 / 12,\n- 19 / 6,\n- 39 / 12,\n- 10 / 3,\n- 41 / 12,\n- 7 / 2,\n- 43 / 12,\n- 11 / 3,\n- 15 / 4,\n- ],\n+ [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4],\n+ [1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0],\n+ [3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 0],\n];\nconst OPENNESS_WEIGHTS = [\n[2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.7, 2.6, 2.4, 2.3, 2.2, 2.1],\n@@ -214,9 +198,9 @@ const OPENNESS_WEIGHTS = [\n[2.5, 2.4, 2.3, 2.2, 2.1, 2, 1.8, 1.6, 1.4, 1.2, 1, 0.8, 0.6, 0.4, 0],\n];\nconst OVERALL_COUNT_WEIGHTS = [\n- [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n- [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n+ [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n+ [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n];\nconst botRatingAndCombination = (card, picked, seen, overallPool, synergies, initialState, inPack = 1, packNum = 1) => {\n",
        "org_msg": "Tweak weights for draft bots.",
        "sim_msg": "Improve get season function",
        "sim_diff": "diff --git a/components/frise.js b/components/frise.js import {useEffect, useState} from 'react'\nconst getSeasonColors = () => {\n- const currentDate = new Date()\n- const month = currentDate.getMonth() + 1\n+ const now = new Date()\n+ const year = now.getFullYear()\n- const winter = [1, 2, 3]\n- const spring = [4, 5, 6]\n- const summer = [7, 8, 9]\n+ const winter = new Date(`${year}-12-23`)\n+ const spring = new Date(`${year}-03-20`)\n+ const summer = new Date(`${year}-06-20`)\n+ const fall = new Date(`${year}-09-23`)\nconst winterColors = ['#008DFF', '#8BF7DC', '#638BFC', '#ABD7FC', '#3FDEFF', '#05BDC2', '#B3FFF3', '#74BFFC', '#77F9FF', '#43B5F3', '#C4F6D8', '#9FF9E1', '#D3ECEA', '#76ADC3', '#BBD6E9', '#74BFFC']\nconst springColors = ['#87D6A6', '#93F78B', '#027A00', '#FCABD8', '#F9D8FF', '#23BE65', '#F5B3FF', '#60B7B6', '#64A46A', '#3C634B', '#D29EC7', '#D8ADFF', '#BBF99F', '#C0E9BB', '#60B7B6', '#C71EA3']\nconst summerColors = ['#88FF00', '#10705C', '#D4FC63', '#5AA342', '#D6FF3F', '#10705C', '#2E9E00', '#D8FFA8', '#A9BA96', '#7CC376', '#9E9D00', '#85F343', '#24EC64', '#2C884C', '#7CC376', '#C3E94F']\nconst fallColors = []\n- if (winter.includes(month)) {\n- return winterColors\n- }\n-\n- if (spring.includes(month)) {\n+ if (now >= spring && now < summer) {\nreturn springColors\n}\n- if (summer.includes(month)) {\n+ if (now >= summer && now < fall) {\nreturn summerColors\n}\n+ if (now >= winter && now < spring) {\n+ return winterColors\n+ }\n+\nreturn fallColors\n}\n",
        "chatgpt_cot": "\"Optimize color and value weights for card picking algorithm to improve bot performance and synergy calculation in Draft.js file.\""
    },
    {
        "org_diff": "diff --git a/src/components/BlogContextMenu.js b/src/components/BlogContextMenu.js @@ -39,6 +39,18 @@ class BlogContextMenu extends React.Component {\nclickDelete(post) {\n$('#deleteModal').modal('show');\n+ var clickDeleteBlog = function(e) {\n+ if (event.keyCode === 13) {\n+ $('.delete-blog').click();\n+ }\n+ };\n+\n+ $(window).on('keyup', clickDeleteBlog)\n+\n+ $('#deleteModal').on('hidden.bs.modal', function() {\n+ $(window).off('keyup', clickDeleteBlog)\n+ });\n+\n$('.delete-blog')\n.off()\n.on('click', function(e) {\n@@ -56,6 +68,7 @@ class BlogContextMenu extends React.Component {\n}\nrender() {\n+\nreturn (\n<Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\n<DropdownToggle tag=\"a\" className=\"nav-link clickable\">\n",
        "org_msg": "Add Blog Post Confirm Delete via Enter keystroke",
        "sim_msg": "Fix loading new posts",
        "sim_diff": "diff --git a/src/post/postSingle/PostSingle.js b/src/post/postSingle/PostSingle.js @@ -73,11 +73,8 @@ export default class PostSingle extends Component {\n// };\ncomponentWillMount() {\n- const { content } = this.props;\n- if (!content) {\nthis.props.getContent();\n}\n- }\n// componentDidMount() {\n// const { modal } = this.props;\n// if (modal) {\n",
        "chatgpt_cot": "Add functionality to delete blog post using keyboard, fix modal close issue, and improve user experience in BlogContextMenu."
    },
    {
        "org_diff": "diff --git a/.eslintignore b/.eslintignore +src/components/AgeText.js\n+src/components/AspectRatioBox.js\n+src/components/AutocardListGroup.js\n+src/components/AutocardListItem.js\n+src/components/AutocompleteInput.js\n+src/components/BlogContextMenu.js\n+src/components/BlogPost.js\n+src/components/BlogpostEditor.js\n+src/components/ButtonLink.js\n+src/components/CSRFForm.js\n+src/components/CardImage.js\n+src/components/CardModal.js\n+src/components/CardModalContext.js\n+src/components/CardModalForm.js\n+src/components/CardStack.js\n+src/components/Changelist.js\n+src/components/ChangelistContext.js\n+src/components/ClientOnly.js\n+src/components/ColorCheck.js\n+src/components/Comment.js\n+src/components/CommentContextMenu.js\n+src/components/CommentEntry.js\n+src/components/CommentsSection.js\n+src/components/CompareView.js\n+src/components/ContentEditable.js\n+src/components/CountTableRow.js\n+src/components/CubeCompareNavbar.js\n+src/components/CubeContext.js\n+src/components/CubeListNavbar.js\n+src/components/CubeOverviewModal.js\n+src/components/CubePreview.js\n+src/components/CurveAnalysis.js\n+src/components/CurveView.js\n+src/components/CustomDraftFormatModal.js\n+src/components/CustomImageToggler.js\n+src/components/DeckPreview.js\n+src/components/DeckStacks.js\n+src/components/DeckbuilderNavbar.js\n+src/components/DisplayContext.js\n+src/components/DndProvider.js\n+src/components/DraggableCard.js\n+src/components/DynamicFlash.js\n+src/components/EditCollapse.js\n+src/components/ErrorBoundary.js\n+src/components/FilterCollapse.js\n+src/components/FoilCardImage.js\n+src/components/FoilOverlay.js\n+src/components/GroupModal.js\n+src/components/GroupModalContext.js\n+src/components/ImageFallback.js\n+src/components/ListView.js\n+src/components/LoadingButton.js\n+src/components/MassBuyButton.js\n+src/components/Maybeboard.js\n+src/components/MaybeboardContext.js\n+src/components/MulticoloredAnalysis.js\n+src/components/Notification.js\n+src/components/PagedList.js\n+src/components/PagedTable.js\n+src/components/Paginate.js\n+src/components/SortCollapse.js\n+src/components/SortContext.js\n+src/components/SortableTable.js\n+src/components/SpoilerImage.js\n+src/components/TableView.js\n+src/components/TagColorsModal.js\n+src/components/TagContext.js\n+src/components/TagInput.js\n+src/components/TextBadge.js\n+src/components/TextEntry.js\n+src/components/TokenAnalysis.js\n+src/components/Tooltip.js\n+src/components/TypeAnalysis.js\n+src/components/VisualSpoiler.js\n+src/components/WithAutocard.js\n+src/components/WithLoading.js\n+src/components/WithModal.js\nsrc/utils/draftutil.js\nsrc/utils/Filter.js\nsrc/utils/Sort.js\n",
        "org_msg": "Add all components to eslintignore for now.",
        "sim_msg": "[INTERNAL] VisualTests: now working\nUncommented test that were broken",
        "sim_diff": "diff --git a/src/sap.m/test/sap/m/visual/visual.suite.js b/src/sap.m/test/sap/m/visual/visual.suite.js @@ -6,12 +6,12 @@ module.exports = [\n\"App.spec.js\",\n\"AppWithBackground.spec.js\",\n\"Breadcrumbs.spec.js\",\n- // \"Carousel.spec.js\",\n+ \"Carousel.spec.js\",\n\"CheckBox.spec.js\",\n\"ComboBox.spec.js\",\n\"ContextMenuSupportIntegration.spec.js\",\n- // \"Dialog.spec.js\",\n- // \"IconTabBar.spec.js\",\n+ \"Dialog.spec.js\",\n+ \"IconTabBar.spec.js\",\n\"Image.spec.js\",\n\"Label.spec.js\",\n\"LightBox.spec.js\",\n@@ -34,21 +34,21 @@ module.exports = [\n\"PlanningCalendar.spec.js\",\n\"Popover.spec.js\",\n\"ProgressIndicator.spec.js\",\n- // \"QuickView.spec.js\",\n+ \"QuickView.spec.js\",\n\"QuickViewCard.spec.js\",\n\"RadioButton.spec.js\",\n- // \"RadioButtonGroup.spec.js\",\n+ \"RadioButtonGroup.spec.js\",\n\"RatingIndicator.spec.js\",\n\"ResponsivePopover.spec.js\",\n\"Select.spec.js\",\n\"SelectDialog.spec.js\",\n\"SemanticPage.spec.js\",\n- // \"SplitApp.spec.js\",\n+ \"SplitApp.spec.js\",\n\"StepInput.spec.js\",\n\"Switch.spec.js\",\n\"Toolbar.spec.js\",\n\"TableSelectDialog.spec.js\",\n- // \"Text.spec.js\",\n+ \"Text.spec.js\",\n\"TimePicker.spec.js\",\n\"Token.spec.js\",\n\"Tokenizer.spec.js\",\n",
        "chatgpt_cot": "Add new components and utils to the project."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js +var sinon = require(\"sinon\");\nconst cubefn = require(\"../../serverjs/cubefn\");\nconst carddb = require(\"../../serverjs/cards\");\nconst cubefixture = require(\"../../fixtures/examplecube\");\n@@ -163,9 +164,14 @@ const exampleBasics = {\n}\n};\n-beforeEach(() => {});\n+beforeEach(() => {\n+ sinon.stub(Cube, \"findOne\");\n+});\n-afterEach(() => {});\n+afterEach(() => {\n+ Cube.findOne.restore();\n+ carddb.unloadCardDb();\n+});\ntest(\"get_cube_id returns urlAlias when defined\", () => {\nconst testCube = {\n@@ -337,4 +343,17 @@ test(\"setCubeType correctly sets the type and card_count of its input cube\", ()\ntest(\"sanitize\", () => {});\ntest(\"addAutocard\", () => {});\n-test(\"generatePack\", () => {});\n\\ No newline at end of file\n+\n+test(\"generatePack\", () => {\n+ expect.assertions(1);\n+ const seed = new Date();\n+ var exampleCube = JSON.parse(JSON.stringify(cubefixture.exampleCube));\n+ var expected = {};\n+ Cube.findOne.yields(null, exampleCube);\n+ var callback = sinon.stub();\n+ var promise = carddb.initializeCardDb(fixturesPath, true);\n+ return promise.then(function() {\n+ cubefn.generatePack('', carddb, seed, callback);\n+ sinon.assert.calledWith(callback, expected)\n+ });\n+});\n\\ No newline at end of file\n",
        "org_msg": "set up generatePack test with incorrect data",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Add sinon stubs and restore in beforeEach and afterEach, add test for generatePack function in cubefn.test.js."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -204,13 +204,7 @@ router.post('/format/add/:id', ensureAuth, async (req, res) => {\nlet format = draftutil.parseDraftFormat(req.body.format);\ndraftutil.checkFormat(format, draftcards);\n- await Cube.updateOne(\n- {\n- _id: cube._id,\n- },\n- cube,\n- );\n-\n+ await cube.save();\nreq.flash('success', message);\n} catch (err) {\nconsole.error(err);\n",
        "org_msg": "Update cube saving to latest style in save custom draft route",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Refactor cube update method to use save instead of updateOne for better consistency and readability in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/src/components/CommentsSection.js b/src/components/CommentsSection.js @@ -13,9 +13,7 @@ constructor(props)\nrender() {\nvar comments = this.props.comments;\n- return (\n- <>\n- {comments.length > 0 &&\n+ return (comments.length > 0 &&\n<>\n<h6 className=\"comment-button mb-2 text-muted clickable\" onClick={this.props.toggle}>{this.props.expanded ? 'Hide' : 'View'} Replies ({comments.length})</h6>\n<Collapse isOpen={this.props.expanded}>\n@@ -32,8 +30,6 @@ render() {\n</PagedList>\n</Collapse>\n</>\n- }\n- </>\n);\n}\n}\n",
        "org_msg": "Removed redudant empty tags",
        "sim_msg": "Fix comments issue when post is loaded without any comments.",
        "sim_diff": "diff --git a/src/comments/Comments.js b/src/comments/Comments.js @@ -62,12 +62,20 @@ export default class Comments extends Component {\nrender() {\nconst { post, comments, show } = this.props;\nconst postId = post.id;\n+ let fetchedCommentsList = null;\nif (!show) {\nreturn <div />;\n}\n- const fetchedCommentsList = (comments.listByPostId[postId]\n+ if (comments.listByPostId[postId] && comments.listByPostId[postId].list instanceof Array) {\n+ if (comments.listByPostId[postId].list.length) {\n+ fetchedCommentsList = comments.listByPostId[postId].list.map(id => comments.comments[id]);\n+ } else {\n+ fetchedCommentsList = [];\n+ }\n+ }\n+ fetchedCommentsList = (comments.listByPostId[postId]\n&& comments.listByPostId[postId].list.length) ?\ncomments.listByPostId[postId].list.map(id => comments.comments[id]) :\n[];\n@@ -78,11 +86,11 @@ export default class Comments extends Component {\ncommentsChildren = this.getNestedComments(comments, comments.listByPostId[postId].list, {});\n}\n- if (!fetchedCommentsList.length) {\n- return (<Loading />);\n+ if (comments.listByPostId[postId] && comments.listByPostId[postId].isFetching) {\n+ return <Loading />;\n}\n- if (fetchedCommentsList) {\n+ if (fetchedCommentsList instanceof Array) {\nreturn (\n<CommentsList\nparentPost={post}\n@@ -97,8 +105,7 @@ export default class Comments extends Component {\n);\n}\n- return (\n- <div />\n- );\n+ return <div />;\n+ // Todo handle when comment fetch failed.\n}\n}\n",
        "chatgpt_cot": "Refactor CommentsSection.js to simplify conditional rendering and improve readability. Remove unnecessary nested JSX fragments and improve code structure."
    },
    {
        "org_diff": "diff --git a/jobs/draftAnalytics/calculate_pass_percent.js b/jobs/draftAnalytics/calculate_pass_percent.js @@ -120,20 +120,3 @@ console.log(\n.map(([name, value]) => outputLine(name, value, inPackWhenSeenCount[cardToInt[name]], seenCount[cardToInt[name]]))\n.join('\\n'),\n);\n-const sortedNormalizedPickOrder = Object.entries(normalizedPickedOver)\n- .filter(([name]) => seenCount[cardToInt[name]] > 99)\n- .sort(([, position], [, position2]) => position2 - position);\n-console.log('\\nBest Cards');\n-console.log(\n- sortedNormalizedPickOrder\n- .slice(0, 25)\n- .map(([name, value]) => outputLine(name, value, pickedOverCounts[name], passPercents[name]))\n- .join('\\n'),\n-);\n-console.log('\\nWorst Cards:');\n-console.log(\n- sortedNormalizedPickOrder\n- .slice(sortedNormalizedPickOrder.length - 25, sortedNormalizedPickOrder.length)\n- .map(([name, value]) => outputLine(name, value, pickedOverCounts[name], passPercents[name]))\n- .join('\\n'),\n-);\n",
        "org_msg": "Remove some testing output.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Remove unnecessary code for calculating pass percent in draft analytics."
    },
    {
        "org_diff": "diff --git a/src/util/Sort.js b/src/util/Sort.js @@ -574,8 +574,8 @@ export function cardGetLabels(card, sort) {\nreturn typeLine(card)\n.toLowerCase()\n.includes('creature')\n- ? 'Creature'\n- : 'Non-Creature';\n+ ? ['Creature']\n+ : ['Non-Creature'];\n} else if (sort == 'Price') {\nvar price = null;\nif (card.details.price) {\n",
        "org_msg": "Fix CNC sort for curve view.",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Fix cardGetLabels method to return an array instead of a string based on the type of card."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -5,6 +5,7 @@ const mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\nconst passport = require('passport');\n+// eslint-disable-next-line import/no-extraneous-dependencies\nconst http = require('http');\nconst fileUpload = require('express-fileupload');\nconst MongoDBStore = require('connect-mongodb-session')(session);\n",
        "org_msg": "Add eslint fix.",
        "sim_msg": "add version redirect",
        "sim_diff": "diff --git a/app.js b/app.js @@ -8,7 +8,8 @@ const fs = require('fs');\nconst uglify = require('uglify-es');\nconst moment = require('moment');\nconst agent = require('express-useragent');\n-const ver = require_fresh('./js/license.js');\n+const license = require_fresh('./js/license.js');\n+const version = license.VERSION || \"rogue\";\nconst fileCache = {};\nconst code_src = {};\n@@ -57,9 +58,9 @@ function init(mod) {\nmod.add(handleOptions);\nmod.add(fullpath({\n\"/kiri/index.html\" : redir(\"/kiri/\"),\n- \"/kiri\" : redir(\"/kiri/\"),\n- \"/kiri/\" : remap(\"/kiri/index.html\")\n+ \"/kiri\" : redir(\"/kiri/\", 301)\n}));\n+ mod.add(handleVersion);\nmod.add(prepath([\n[ \"/code/\", handleCode ],\n[ \"/wasm/\", handleWasm ]\n@@ -127,7 +128,7 @@ function initModule(mod, file, dir) {\nscript: script,\nmoddir: dir,\nrootdir: mod.dir,\n- version: ver.VERSION\n+ version: version\n},\npkg: {\nagent,\n@@ -367,6 +368,18 @@ function string2obj(s) {\nreturn JSON.parse(s);\n}\n+function handleVersion(req, res, next) {\n+ if (req.app.path === \"/kiri/\" && req.url.indexOf(version) < 0) {\n+ if (req.url.indexOf(\"?\") > 0) {\n+ return http.redirect(res, `${req.url}&ver=${version}`);\n+ } else {\n+ return http.redirect(res, `${req.url}?ver=${version}`);\n+ }\n+ } else {\n+ next();\n+ }\n+}\n+\nfunction handleOptions(req, res, next) {\nif (req.method === 'OPTIONS') {\naddCorsHeaders(req, res);\n@@ -480,7 +493,7 @@ function concatCode(array) {\n// if (file.indexOf(\":\\\\\") > 0) {\n// file = `/${file}`;\n// }\n- code.push(`\"/${file.replace(/\\\\/g,'/')}\",`);\n+ code.push(`\"/${file.replace(/\\\\/g,'/')}?${version}\",`);\n});\ncode.push([\n']; function load_next() {',\n@@ -635,8 +648,8 @@ function fixedmap(prefix, map) {\n}\n// HTTP 307 redirect\n-function redir(path) {\n- return (req, res, next) => http.redirect(res, path);\n+function redir(path, type) {\n+ return (req, res, next) => http.redirect(res, path, type);\n}\n// mangle request path\n@@ -659,16 +672,16 @@ function cookieValue(cookie,key) {\n}\nfunction rewriteHtmlVersion(req, res, next) {\n- if (req.url.indexOf(\".html\") > 0) {\n+ if (req.app.path === \"/kiri/\") {\nlet real_write = res.write;\nlet real_end = res.end;\nres.write = function() {\n- arguments[0] = arguments[0].toString().replace(/{{version}}/g,ver.VERSION);\n+ arguments[0] = arguments[0].toString().replace(/{{version}}/g,version);\nreal_write.apply(res, arguments);\n};\nres.end = function() {\nif (arguments[0]) {\n- arguments[0] = arguments[0].toString().replace(/{{version}}/g,ver.VERSION);\n+ arguments[0] = arguments[0].toString().replace(/{{version}}/g,version);\n}\nreal_end.apply(res, arguments);\n};\n",
        "chatgpt_cot": "Add http import to resolve compilation issue in app.js. The modification is related to handling file uploads and resolves a compilation problem."
    },
    {
        "org_diff": "diff --git a/serverjs/util.js b/serverjs/util.js @@ -113,9 +113,10 @@ function fromEntries(entries) {\n}\nasync function addNotification(user, from, url, text) {\n- if (user._id == from._id) {\n+ if (user.username == from.username) {\nreturn; //we don't need to give notifications to ourselves\n}\n+\nuser.notifications.push({\nuser_from: from._id,\nuser_from_name: from.username,\n",
        "org_msg": "Fixed issue where you could send notifications to yourself",
        "sim_msg": "Try custom_notification.....",
        "sim_diff": "diff --git a/server/src/push/send.js b/server/src/push/send.js @@ -370,16 +370,26 @@ function prepareAndroidNotification(\nunreadCount: number,\ndbID: string,\n): Object {\n- const data = {};\n- if (!badgeOnly) {\n- const notifText = notifTextForMessageInfo(messageInfos, threadInfo);\n- data.notifBody = notifText;\n- }\n- data.badgeCount = unreadCount.toString();\n- data.threadID = threadInfo.id.toString();\n- data.notifID = collapseKey ? collapseKey : dbID;\n+ const notifID = collapseKey ? collapseKey : dbID;\n+ const data = {\n+ badgeCount: unreadCount.toString(),\n+ threadID: threadInfo.id.toString(),\n+ notifID,\n+ };\n+ if (badgeOnly) {\nreturn { data };\n}\n+ return {\n+ custom_notification: JSON.stringify({\n+ body: notifTextForMessageInfo(messageInfos, threadInfo),\n+ id: notifID,\n+ priority: \"high\",\n+ sound: \"default\",\n+ icon: \"notif_icon\",\n+ }),\n+ data,\n+ };\n+}\ntype InvalidToken = {\nuserID: string,\n",
        "chatgpt_cot": "\"Change user comparison from id to username in addNotification function to prevent self-notifications.\""
    },
    {
        "org_diff": "diff --git a/src/cube_analysis.js b/src/cube_analysis.js @@ -56,7 +56,7 @@ class CubeAnalysis extends Component {\n</NavLink>\n);\nreturn (\n- <CubeLayout cube={cube} cubeID={cubeID} canEdit={false}>\n+ <CubeLayout cube={cube} cubeID={cubeID} canEdit={false} activeLink=\"playtest\">\n<DynamicFlash />\n<Row className=\"mt-3\">\n<Col xs=\"12\" lg=\"2\">\n",
        "org_msg": "Fix activeLink.",
        "sim_msg": "Reset board transformations on file load",
        "sim_diff": "diff --git a/src/components/App.js b/src/components/App.js @@ -696,7 +696,8 @@ class App extends Component {\nrepresentedFilename: null,\ngameIndex: 0,\ngameTrees,\n- gameCurrents: gameTrees.map(_ => ({}))\n+ gameCurrents: gameTrees.map(_ => ({})),\n+ boardTransformation: ''\n})\nlet [firstTree, ] = gameTrees\n",
        "chatgpt_cot": "Update CubeAnalysis component to set active link to \"playtest\" in CubeLayout."
    },
    {
        "org_diff": "diff --git a/routes/cube/index.js b/routes/cube/index.js @@ -1777,6 +1777,12 @@ router.delete('/format/remove/:cubeid/:index', ensureAuth, param('index').toInt(\n}\ncube.draft_formats.splice(index, 1);\n+ // update defaultFormat if necessary\n+ if (index === cube.defaultDraftFormat) {\n+ cube.defaultDraftFormat = -1;\n+ } else if (index < cube.defaultDraftFormat) {\n+ cube.defaultDraftFormat -= 1;\n+ }\nawait cube.save();\nreturn res.status(200).send({\n",
        "org_msg": "update defaultFormat on format delete",
        "sim_msg": "Add license declaration text",
        "sim_diff": "diff --git a/src/index.js b/src/index.js @@ -68,10 +68,12 @@ router.post('/logout', checkHeaders(), ctx => {\nrouter.options('/graphql', checkHeaders());\nrouter.post('/graphql', checkHeaders());\n-const indexFn = pug.compileFile(path.join(__dirname, 'jade/index.jade'));\n-const schemaStr = printSchema(schema);\n+const indexBody = pug.renderFile(path.join(__dirname, 'jade/index.jade'), {\n+ schemaStr: printSchema(schema),\n+ license: process.env.LICENSE_URL,\n+});\nrouter.get('/', ctx => {\n- ctx.body = indexFn({ schemaStr });\n+ ctx.body = indexBody;\n});\napp.use(koaStatic(path.join(__dirname, '../static/')));\n",
        "chatgpt_cot": "\"Fix bug in cube index.js file for updating default draft format when removing a format.\""
    },
    {
        "org_diff": "diff --git a/src/components/BlogPost.js b/src/components/BlogPost.js @@ -98,12 +98,12 @@ class BlogPost extends React.Component {\n<div style={{ overflow: 'auto', maxHeight: '50vh' }}>\n{post.changelist && post.html ? (\n<Row className=\"no-gutters\">\n- <Col className=\"col-12 col-l-3 col-md-3 col-sm-12\" style={{ borderRight: '1px solid #DFDFDF' }}>\n+ <Col className=\"col-12 col-l-5 col-md-4 col-sm-12\" style={{ borderRight: '1px solid #DFDFDF' }}>\n<CardBody className=\"py-2\">\n<CardText dangerouslySetInnerHTML={{ __html: post.changelist }} />\n</CardBody>\n</Col>\n- <Col className=\"col-9\">\n+ <Col className=\"col-l-7 col-m-6\">\n<CardBody className=\"py-2\">\n<CardText dangerouslySetInnerHTML={{ __html: post.html }} />\n</CardBody>\n",
        "org_msg": "More room for diff on blog post\nRight now most diff lines (like \"Strandwalker -> Darksteel Sentinel\") wrap onto another line, sometimes two. This adds a little more space.",
        "sim_msg": "Prevent triggering visibility before content is loaded",
        "sim_diff": "diff --git a/src/post/Post.js b/src/post/Post.js @@ -82,7 +82,7 @@ export default class Post extends React.Component {\n</Affix>\n<div className=\"center\" style={{ paddingBottom: '24px' }}>\n{content ? <PostContent content={content} /> : <Loading />}\n- <VisibilitySensor onChange={this.handleCommentsVisibility} />\n+ {content && <VisibilitySensor onChange={this.handleCommentsVisibility} />}\n<div id=\"comments\">\n{content && <Comments show={this.state.commentsVisible} post={content} />}\n</div>\n",
        "chatgpt_cot": "Change the layout of the BlogPost component for better readability and aesthetics."
    },
    {
        "org_diff": "diff --git a/src/cube_analysis.js b/src/cube_analysis.js import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n+import PropTypes from 'prop-types';\nimport { Col, Nav, NavLink, Row } from 'reactstrap';\n@@ -17,14 +18,18 @@ class CubeAnalysis extends Component {\nconstructor(props) {\nsuper(props);\n- this.state = {\n- nav: this.props.defaultNav || 'curve',\n- };\n+ const { defaultNav } = this.props;\n+\n+ this.state = { activeNav: defaultNav };\n+\n+ this.select = this.select.bind(this);\n+ this.handleNav = this.handleNav.bind(this);\n}\ncomponentDidMount() {\n+ const { nav } = this.state;\nthis.setState({\n- nav: Query.get('nav', this.state.nav),\n+ nav: Query.get('nav', nav),\n});\n}\n@@ -34,14 +39,19 @@ class CubeAnalysis extends Component {\n} else {\nQuery.set('nav', nav);\n}\n- this.setState({ nav });\n+ this.setState({ activeNav: nav });\n+ }\n+\n+ handleNav(event) {\n+ event.preventDefault();\n+ this.select(event.target.getAttribute('data-nav'));\n}\nrender() {\nconst { cube, cubeID, curve, typeByColor, multicoloredCounts, tokens } = this.props;\n- const active = this.state.nav;\n+ const { activeNav } = this.state;\nconst navItem = (nav, text) => (\n- <NavLink active={active === nav} onClick={this.select.bind(this, nav)} href=\"#\">\n+ <NavLink active={activeNav === nav} data-nav={nav} onClick={this.handleNav} href=\"#\">\n{text}\n</NavLink>\n);\n@@ -65,7 +75,7 @@ class CubeAnalysis extends Component {\ntype: <TypeAnalysis typeByColor={typeByColor} />,\nmulti: <MulticoloredAnalysis multicoloredCounts={multicoloredCounts} />,\ntokens: <TokenAnalysis tokens={tokens} />,\n- }[active]\n+ }[activeNav]\n}\n</ErrorBoundary>\n</Col>\n@@ -75,8 +85,22 @@ class CubeAnalysis extends Component {\n}\n}\n+CubeAnalysis.propTypes = {\n+ cube: PropTypes.shape({}).isRequired,\n+ cubeID: PropTypes.string.isRequired,\n+ curve: PropTypes.string.isRequired,\n+ typeByColor: PropTypes.shape({}).isRequired,\n+ multicoloredCounts: PropTypes.shape({}).isRequired,\n+ tokens: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({}), PropTypes.arrayOf(PropTypes.shape({}))]))).isRequired,\n+ defaultNav: PropTypes.string,\n+};\n+\n+CubeAnalysis.defaultProps = {\n+ defaultNav: 'curve',\n+};\n+\nconst wrapper = document.getElementById('react-root');\nconst element = <CubeAnalysis {...window.reactProps} />;\nif (wrapper) {\n- ReactDOM.render(element.wrapper);\n+ ReactDOM.render(element, wrapper);\n}\n",
        "org_msg": "Fix cube_analysis.js.",
        "sim_msg": "feat: Desktop navigation update the active tag in routingStore on nav item click",
        "sim_diff": "diff --git a/src/components/NavigationDesktop/NavigationItemDesktop.js b/src/components/NavigationDesktop/NavigationItemDesktop.js import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n+import { inject } from \"mobx-react\";\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Grid from \"@material-ui/core/Grid\";\n@@ -25,6 +26,7 @@ const styles = (theme) => ({\n});\n@withStyles(styles)\n+@inject(\"routingStore\")\nclass NavigationItemDesktop extends Component {\nstatic propTypes = {\nclasses: PropTypes.object,\n@@ -44,11 +46,11 @@ class NavigationItemDesktop extends Component {\n}\nonClick = () => {\n- const { navItem } = this.props;\n-\n+ const { navItem, routingStore } = this.props;\nif (this.hasSubNavItems) {\nthis.setState({ isSubNavOpen: !this.state.isSubNavOpen });\n} else {\n+ routingStore.setTag({ _id: navItem._id, name: navItem.name, slug: navItem.slug });\nRouter.pushRoute(\"tag\", { slug: navItem.slug });\n}\n};\n",
        "chatgpt_cot": "\"Add PropTypes and default props to CubeAnalysis for type safety and set defaultNav to 'curve' for CubeAnalysis component.\""
    },
    {
        "org_diff": "diff --git a/src/components/PagedTable.js b/src/components/PagedTable.js @@ -8,10 +8,9 @@ import { Table } from 'reactstrap';\nconst PagedTable = ({ pageSize, rows, children, ...props }) => {\nconst [page, setPage] = useState(0);\n- const displayRows = rows.slice(page * pageSize, (page + 1) * pageSize);\nconst validPages = [...Array(Math.ceil(rows.length / pageSize)).keys()];\n-\nconst current = Math.min(page, validPages.length - 1);\n+ const displayRows = rows.slice(current * pageSize, (current + 1) * pageSize);\nreturn (\n<>\n",
        "org_msg": "reworked page table to avoid hiding elements",
        "sim_msg": "TableContent name and selectedRowId update",
        "sim_diff": "diff --git a/pages/system/tables.js b/pages/system/tables.js @@ -7,9 +7,16 @@ import ViewSourceLink from '~/components/system/ViewSourceLink';\nexport default class SystemPageTables extends React.Component {\nstate = {\n- table_data: null,\n+ exampleOneOutput: null,\n+ exampleOneProps: null,\n+ exampleTwoOutput: null,\n+ exampleTwoProps: null\n};\n+ _handleChange = e => this.setState(\n+ { [e.target.name]: e.target.value }\n+ );\n+\nrender() {\nreturn (\n<SystemPage title=\"SDS: Tables\" description=\"...\" url=\"https://fps.onrender.com/system/tables\">\n@@ -102,9 +109,9 @@ import { TableContent, TableColumn } from 'slate-react-system';`}\n{ id: 3, a: 'col 4 row 1', b: 'col 4 row 2', c: 'col 4 row 3', d: 'col 4 row 4' },\n],\n}}\n- selectedRowId={this.state.table_data}\n+ selectedRowId={this.state.exampleOneOutput}\nonChange={this._handleChange}\n- name=\"table_data\"\n+ name=\"exampleOneOutput\"\n/>\n<br />\n<br />\n@@ -139,9 +146,9 @@ import { TableContent, TableColumn } from 'slate-react-system';`}\n{ id: 16, a: 'selectedRowId', b: 'number', c: 'null', d: 'ID value of the selected row' },\n],\n}}\n- selectedRowId={this.state.table_data}\n+ selectedRowId={this.state.exampleOneProps}\nonChange={this._handleChange}\n- name=\"table_data\"\n+ name=\"exampleOneProps\"\n/>\n</Group>\n<br />\n@@ -213,9 +220,9 @@ import { TableContent, TableColumn } from 'slate-react-system';`}\n{ id: 3, a: '4', b: '135', c: '1', d: '4', e: 'FOLDER' },\n],\n}}\n- selectedRowId={this.state.exampleOne}\n+ selectedRowId={this.state.exampleTwoOutput}\nonChange={this._handleChange}\n- name=\"exampleOne\"\n+ name=\"exampleTwoOutput\"\n/>\n<br />\n<br />\n@@ -250,9 +257,9 @@ import { TableContent, TableColumn } from 'slate-react-system';`}\n{ id: 17, a: 'FILE_LINK', b: 'string', c: 'String of file link' }\n],\n}}\n- selectedRowId={this.state.table_data}\n+ selectedRowId={this.state.exampleTwoProps}\nonChange={this._handleChange}\n- name=\"table_data\"\n+ name=\"exampleTwoProps\"\n/>\n</Group>\n",
        "chatgpt_cot": "refactor PagedTable component to fix pagination issue and improve code readability. Removed unnecessary variable and improved calculation of displayRows."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -4026,6 +4026,10 @@ const ELO_SPEED = 1000;\nrouter.post(\n'/api/draftpickcard/:id',\nutil.wrapAsyncApi(async (req, res) => {\n+ res.status(200).send({\n+ success: 'true',\n+ });\n+\nconst draftQ = Draft.findById({ _id: req.body.draft_id }).lean();\nconst ratingQ = CardRating.findOne({ name: req.body.pick }).then((rating) => rating || new CardRating());\nconst packQ = CardRating.find({ name: { $in: req.body.pack } });\n@@ -4047,7 +4051,9 @@ router.post(\npassed.push(card);\n}\n}\n- const pick = draft.initial_state[0][req.body.packNum - 1].length - req.body.pack.length;\n+ const pick =\n+ draft.initial_state[0][Math.min(draft.initial_state[0].length - 1, req.body.packNum - 1)].length -\n+ req.body.pack.length;\nfor (const card of picked) {\nif (!card.picks) {\ncard.picks = [];\n@@ -4092,9 +4098,6 @@ router.post(\n}\nawait Promise.all([rating.save(), packRatings.map((r) => r.save())]);\n}\n- return res.status(200).send({\n- success: 'true',\n- });\n}),\n);\n",
        "org_msg": "fix drafpickcard",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "Add success response for draft pick card API, fix calculation of pick index and remove redundant response in cube_routes."
    },
    {
        "org_diff": "diff --git a/src/notifications.js b/src/notifications.js -import React, { Component } from 'react';\n+import React from 'react';\nimport ReactDOM from 'react-dom';\n+import PropTypes from 'prop-types';\n-import { Card, Col, Row, CardHeader, CardBody, CardFooter } from 'reactstrap';\n-import Notification from './components/Notification';\n+import { Card, CardHeader, CardBody } from 'reactstrap';\n-class Notifications extends Component {\n- constructor(props) {\n- super(props);\n- }\n+import Notification from 'components/Notification';\n- render() {\n- const { notifications } = this.props;\n- return (\n+const Notifications = ({ notifications }) => (\n<Card className=\"mx-auto\" style={{ maxWidth: '40rem' }}>\n<CardHeader>\n<h5>Notifications</h5>\n@@ -21,7 +16,7 @@ class Notifications extends Component {\nnotifications\n.slice()\n.reverse()\n- .map((notification) => <Notification key={notification.date} notification={notification} />)\n+ .map((notification) => <Notification key={notification._id} notification={notification} />)\n) : (\n<p className=\"m-2\">\nYou don't have any notifications! Why don't you try sharing your cube on the{' '}\n@@ -31,8 +26,12 @@ class Notifications extends Component {\n</CardBody>\n</Card>\n);\n- }\n-}\n+\n+Notifications.propTypes = {\n+ notifications: PropTypes.arrayOf(PropTypes.shape({\n+ _id: PropTypes.string.isRequired,\n+ })).isRequired,\n+};\nconst notifications = JSON.parse(document.getElementById('notificationData').value);\nconst element = <Notifications notifications={notifications} />;\n",
        "org_msg": "Fix notifications.js.",
        "sim_msg": "Add ctrl/cmd + click check for when notifications linked is clicked",
        "sim_diff": "diff --git a/src/client/components/Navigation/Notifications/Notifications.js b/src/client/components/Navigation/Notifications/Notifications.js @@ -47,6 +47,7 @@ class Notifications extends React.Component {\nthis.notificationsContent = null;\nthis.handleLoadMore = this.handleLoadMore.bind(this);\n+ this.handleNotificationsClick = this.handleNotificationsClick.bind(this);\nthis.onScroll = this.onScroll.bind(this);\n}\n@@ -105,6 +106,13 @@ class Notifications extends React.Component {\n});\n}\n+ handleNotificationsClick(e) {\n+ const openedInNewTab = _.get(e, 'metaKey', false) || _.get(e, 'ctrlKey', false);\n+ if (!openedInNewTab) {\n+ this.props.onNotificationClick();\n+ }\n+ }\n+\nrender() {\nconst {\nnotifications,\n@@ -137,7 +145,7 @@ class Notifications extends React.Component {\nnotification={notification}\ncurrentAuthUsername={currentAuthUsername}\nread={read}\n- onClick={onNotificationClick}\n+ onClick={this.handleNotificationsClick}\n/>\n);\ncase notificationConstants.FOLLOW:\n@@ -146,7 +154,7 @@ class Notifications extends React.Component {\nkey={key}\nnotification={notification}\nread={read}\n- onClick={onNotificationClick}\n+ onClick={this.handleNotificationsClick}\n/>\n);\ncase notificationConstants.MENTION:\n@@ -155,7 +163,7 @@ class Notifications extends React.Component {\nkey={key}\nnotification={notification}\nread={read}\n- onClick={onNotificationClick}\n+ onClick={this.handleNotificationsClick}\n/>\n);\ncase notificationConstants.VOTE:\n@@ -165,7 +173,7 @@ class Notifications extends React.Component {\nnotification={notification}\nread={read}\ncurrentAuthUsername={currentAuthUsername}\n- onClick={onNotificationClick}\n+ onClick={this.handleNotificationsClick}\n/>\n);\ncase notificationConstants.REBLOG:\n@@ -175,7 +183,7 @@ class Notifications extends React.Component {\nnotification={notification}\nread={read}\ncurrentAuthUsername={currentAuthUsername}\n- onClick={onNotificationClick}\n+ onClick={this.handleNotificationsClick}\n/>\n);\ncase notificationConstants.TRANSFER:\n@@ -184,7 +192,7 @@ class Notifications extends React.Component {\nkey={key}\nnotification={notification}\nread={read}\n- onClick={onNotificationClick}\n+ onClick={this.handleNotificationsClick}\n/>\n);\ncase notificationConstants.WITNESS_VOTE:\n@@ -193,7 +201,7 @@ class Notifications extends React.Component {\nkey={key}\nnotification={notification}\nread={read}\n- onClick={onNotificationClick}\n+ onClick={this.handleNotificationsClick}\n/>\n);\ndefault:\n",
        "chatgpt_cot": "Refactor Notifications component, update PropTypes, and optimize imports for better performance and readability."
    },
    {
        "org_diff": "diff --git a/one_shot_scripts/import_ratings.js b/one_shot_scripts/import_ratings.js @@ -7,6 +7,7 @@ const CardRating = require('../models/cardrating.js');\nasync function saveCardRating(cardRating) {\nconst existing = (await CardRating.findOne({ name: cardRating.name })) || new CardRating();\n+ existing.name = cardRating.name;\nexisting.elo = cardRating.elo;\nexisting.picks = cardRating.picks;\nexisting.value = cardRating.value;\n",
        "org_msg": "Correctly save name",
        "sim_msg": "Corrected condition to isParticipating from isAttacking",
        "sim_diff": "diff --git a/server/game/cards/02.5-FHNS/CunningMagistrate.js b/server/game/cards/02.5-FHNS/CunningMagistrate.js @@ -3,7 +3,7 @@ const DrawCard = require('../../drawcard.js');\nclass CunningMagistrate extends DrawCard {\nsetupCardAbilities(ability) {\nthis.persistentEffect({\n- condition: () => this.isAttacking(),\n+ condition: () => this.isParticipating(),\nmatch: card => card.isParticipating() && card.isDishonored && card !== this,\ntargetController: 'any',\neffect: ability.effects.cannotCountForResolution()\n",
        "chatgpt_cot": "Add new property to existing CardRating object in saveCardRating function."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2929,9 +2929,9 @@ router.delete('/deletedeck/:id', ensureAuth, async (req, res) => {\n};\nconst deck = await Deck.findById(req.params.id);\n- const deckOwner = await User.findById(deck.seats[0].userid);\n+ const deckOwner = (await User.findById(deck.seats[0].userid)) || {};\n- if (!deckOwner || !deckOwner._id.equals(req.user._id)) {\n+ if (!deckOwner._id.equals(req.user._id) && !deck.cubeOwner == req.user._id) {\nreq.flash('danger', 'Unauthorized');\nreturn res.redirect('/404');\n}\n@@ -2941,6 +2941,7 @@ router.delete('/deletedeck/:id', ensureAuth, async (req, res) => {\nreq.flash('success', 'Deck Deleted');\nreturn res.send('Success');\n} catch (err) {\n+ console.error(err);\nreturn res.status(500).send({\nsuccess: 'false',\nmessage: 'Error deleting deck.',\n",
        "org_msg": "Fixed a bug where decks drafted by other users can't be deleted by cube owner",
        "sim_msg": "Add missing route back in",
        "sim_diff": "diff --git a/app/router.js b/app/router.js @@ -125,6 +125,9 @@ Router.map(function() {\nthis.route('add', {path: '/add/:cloud_id'});\n});\n+ this.route('new', {path: '/add'}, function() {\n+ this.route('index', {path: '/'});\n+ });\nthis.route('host', {path: '/:host_id', resetNamespace: true}, function() {\nthis.route('containers');\n",
        "chatgpt_cot": "Fix authorization issue in cube_routes.js due to changes in deckOwner and deck.cubeOwner. Add error logging for deck deletion."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2557,7 +2557,7 @@ router.post(\n// give notification to owner\nif (req.body.position.length === 0) {\n// owner is blog deck owner\n- const owner = await User.findById(deck.owner);\n+ const owner = await User.findById(deck.seats[0].userid);\nawait util.addNotification(\nowner,\nuser,\n",
        "org_msg": "Fix deck commenting",
        "sim_msg": "Pass registry to tour callback function.",
        "sim_diff": "diff --git a/assets/js/components/TourTooltips.js b/assets/js/components/TourTooltips.js @@ -37,7 +37,7 @@ import { CORE_USER } from '../googlesitekit/datastore/user/constants';\nimport { trackEvent } from '../util/tracking';\nimport TourTooltip from './TourTooltip';\nimport useViewContext from '../hooks/useViewContext';\n-const { useSelect, useDispatch } = Data;\n+const { useSelect, useDispatch, useRegistry } = Data;\n/** For available options, see: {@link https://github.com/gilbarbara/react-joyride/blob/3e08384415a831b20ce21c8423b6c271ad419fbf/src/styles.js}. */\nexport const joyrideStyles = {\n@@ -92,6 +92,7 @@ export default function TourTooltips( {\nconst runKey = `${ tourID }-run`;\nconst { setValue } = useDispatch( CORE_UI );\nconst { dismissTour } = useDispatch( CORE_USER );\n+ const registry = useRegistry();\nconst viewContext = useViewContext();\n@@ -221,7 +222,7 @@ export default function TourTooltips( {\n}\nif ( callback ) {\n- callback( data );\n+ callback( data, registry );\n}\n};\n",
        "chatgpt_cot": "\"Fix notification bug in cube_routes.js by updating owner identification to use deck seats instead of deck owner.\""
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -173,10 +173,11 @@ function getSortFn(bot) {\n};\n}\n-async function buildDeck(cards) {\n+async function buildDeck(cards, picked) {\nlet nonlands = cards.filter((card) => !card.details.type.toLowerCase().includes('land'));\nconst lands = cards.filter((card) => card.details.type.toLowerCase().includes('land'));\n- const colors = botColors(null, null, cards, null);\n+\n+ const colors = botColors(null, null, picked, null);\nconst sortFn = getSortFn(colors);\nconst inColor = nonlands.filter(considerInCombination(colors));\nconst outOfColor = nonlands.filter((x) => !considerInCombination(colors)(x));\n@@ -305,7 +306,7 @@ async function pick(cardIndex) {\nasync function finish() {\n// build bot decks\n- const decksPromise = draft.seats.map((seat) => buildDeck(seat.pickorder, seat.bot));\n+ const decksPromise = draft.seats.map((seat) => buildDeck(seat.pickorder, seat.picked));\nconst decks = await Promise.all(decksPromise);\nfor (let i = 0; i < draft.seats.length; i++) {\n@@ -313,7 +314,7 @@ async function finish() {\nconst { deck, sideboard, colors } = decks[i];\ndraft.seats[i].drafted = deck;\ndraft.seats[i].sideboard = sideboard;\n- draft.seats[i].name = `Bot ${i === 0 ? draft.seats.length : i}: ${colors.join(', ')}`;\n+ draft.seats[i].name = `Bot ${i === 0 ? draft.seats.length : i}: ${colors.length > 0 ? colors.join(', ') : 'C'}`;\ndraft.seats[i].description = `This deck was drafted by a bot with color preference for ${colors.join('')}.`;\n} else {\nconst picked = fromEntries(COLOR_COMBINATIONS.map((comb) => [comb.join(''), 0]));\n",
        "org_msg": "Small UI Fixes.",
        "sim_msg": "Import from public decks as well",
        "sim_diff": "diff --git a/client/DeckEditor.jsx b/client/DeckEditor.jsx @@ -238,17 +238,26 @@ class InnerDeckEditor extends React.Component {\nimportDeck() {\n$(findDOMNode(this.refs.modal)).modal('hide');\n- let strainUrl = document.getElementById('strainUrl').value;\n+ let importUrl = document.getElementById('importUrl').value;\nlet apiUrl = 'https://api.fiveringsdb.com/';\n- let path = 'strains';\n+ let strainPath = 'strains';\n+ let deckPath = 'decks';\nlet deckResponse = {};\n- let strainId = String(strainUrl).split('/')[4];\n+ let importId = String(importUrl).split('/')[4];\n+ let selector = String(importUrl).split('/')[3];\n+\n+ let path = '';\n+ if(selector === 'decks') {\n+ path = deckPath;\n+ } else if(selector === 'strains') {\n+ path = strainPath;\n+ }\n$.ajax({\ntype: 'GET',\n- url: apiUrl + path + '/' + strainId,\n+ url: apiUrl + path + '/' + importId,\ndataType: 'json',\nasync: false,\nsuccess: function(data) {\n@@ -256,12 +265,26 @@ class InnerDeckEditor extends React.Component {\n}\n});\n+ let deckClan = '';\n+ let deckAlliance = '';\n+ let deckName = '';\n+ let deckList = '';\n+ let cardList = '';\n+\n+\nif(deckResponse.success) {\nlet deckRecord = deckResponse.record;\n- let deckClan = deckRecord.head.clan;\n- let deckName = deckRecord.head.name;\n- let deckList = deckRecord.head.cards;\n- let cardList = '';\n+ if(selector === 'decks') {\n+ deckClan = deckRecord.primary_clan;\n+ deckAlliance = deckRecord.secondary_clan;\n+ deckName = deckRecord.name;\n+ deckList = deckRecord.cards;\n+ } else if(selector === 'strains') {\n+ deckClan = deckRecord.head.primary_clan;\n+ deckAlliance = deckRecord.head.secondary_clan;\n+ deckName = deckRecord.head.name;\n+ deckList = deckRecord.head.cards;\n+ }\nlet deck = this.copyDeck(this.state.deck);\n@@ -272,12 +295,14 @@ class InnerDeckEditor extends React.Component {\ndeck.faction = this.props.factions['crab'];\n}\n+ if(deckAlliance) {\n+ deck.alliance = this.props.factions[deckAlliance];\n+ } else {\n+ deck.alliance = this.props.factions['crab'];\n+ }\n+\n_.each(deckList, (count, card) => {\ncardList += count + ' ' + this.props.cards[card].name + '\\n';\n- let allianceClan = this.props.cards[card].clan;\n- if(allianceClan !== 'neutral' && allianceClan !== deckClan) {\n- deck.alliance = this.props.factions[this.props.cards[card].clan];\n- }\n});\n//Duplicate onCardListChange to get this working correctly\n@@ -361,7 +386,7 @@ class InnerDeckEditor extends React.Component {\n<h4 className='modal-title'>Provide Permalink</h4>\n</div>\n<div className='modal-body'>\n- <Input name='strainUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n+ <Input name='importUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n<div className='col-sm-1'>\n<button className='btn btn-default' onClick={ this.importDeck.bind(this) }>Import</button>\n</div>\n",
        "chatgpt_cot": "Add parameter 'picked' to buildDeck function, update colors calculation, and adjust name generation in finish function for better functionality."
    },
    {
        "org_diff": "diff --git a/README.md b/README.md @@ -65,7 +65,7 @@ node --max-old-space-size=4096 force_update.js\nTo build the analytics database objects, you need to run the script `populate_analytics.js`. You will likely need to add the `max-old-space-size` flag like so:\n```\n-node --max-old-space-size=8192 populate_analytics.js\n+node --max-old-space-size=8192 jobs/populate_analytics.js\n```\nThis will populate the data used for card pages. You will need to do a couple playtest drafts to seed some data for the analytics for this to work correctly.\n",
        "org_msg": "Adjusted README to point to the correct populate_analytics script",
        "sim_msg": "hot fix: add default value for eMsg in analytics.js",
        "sim_diff": "diff --git a/src/lib/analytics/analytics.js b/src/lib/analytics/analytics.js @@ -76,7 +76,7 @@ const initAmplitude = async () => {\namp().init(amplitudeKey, null, null, () => {\nAmplitude = amp()\nresolve()\n- })\n+ }),\n)\n}\n@@ -232,7 +232,7 @@ const identifyWith = (email, identifier = null) => {\nSentry.configureScope(scope =>\nscope.setUser({\nid: identifier,\n- })\n+ }),\n)\n}\n@@ -248,7 +248,7 @@ const identifyWith = (email, identifier = null) => {\nSentry: isSentryEnabled,\nRollbar: isRollbarEnabled,\nAmplitude: isAmplitudeEnabled,\n- }\n+ },\n)\n}\n@@ -269,7 +269,7 @@ export const identifyOnUserSignup = async email => {\nSentry: isSentryEnabled,\nRollbar: isRollbarEnabled,\nAmplitude: isAmplitudeEnabled,\n- }\n+ },\n)\n}\n@@ -366,7 +366,7 @@ const patchLogger = () => {\nlogger.error = (...args) => {\nconst { Unexpected, Network, Human } = ExceptionCategory\n- const [logContext, logMessage, eMsg, errorObj, extra = {}] = args\n+ const [logContext, logMessage, eMsg = '', errorObj, extra = {}] = args\nlet { dialogShown, category = Unexpected } = extra\nlet errorToPassIntoLog = errorObj\nlet categoryToPassIntoLog = category\n@@ -434,7 +434,7 @@ const patchLogger = () => {\ndialogShown,\ncategory: categoryToPassIntoLog,\nlevel: categoryToPassIntoLog === Human ? 'info' : undefined,\n- }\n+ },\n)\nreturn logError(...args)\n",
        "chatgpt_cot": "Update file path for script to build analytics database objects. Fix script path in README to jobs/populate_analytics.js for populating data used for card pages."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -30,6 +30,7 @@ const ReactDOMServer = require('react-dom/server');\nconst RSS = require('rss');\nconst CARD_HEIGHT = 680;\nconst CARD_WIDTH = 488;\n+const CSV_HEADER = 'Name,CMC,Type,Color,Set,Collector Number,Status,Finish,Maybeboard,Image URL,Tags';\nconst router = express.Router();\n// Bring in models\n@@ -1300,6 +1301,7 @@ async function bulkuploadCSV(req, res, cards, cube) {\nfor (let card_raw of cards) {\nlet split = util.CSVtoArray(card_raw);\nlet name = split[0];\n+ let maybeboard = split[8];\nlet card = {\nname: name,\ncmc: split[1],\n@@ -1310,9 +1312,10 @@ async function bulkuploadCSV(req, res, cards, cube) {\ncollector_number: split[5],\nstatus: split[6],\nfinish: split[7],\n- imgUrl: split[8],\n- tags: split[9] && split[9].length > 0 ? split[9].split(',') : [],\n+ imgUrl: split[9],\n+ tags: split[10] && split[10].length > 0 ? split[10].split(',') : [],\n};\n+ console.warn(card);\nlet potentialIds = carddb.allIds(card);\nif (potentialIds && potentialIds.length > 0) {\n@@ -1321,7 +1324,11 @@ async function bulkuploadCSV(req, res, cards, cube) {\nlet nonPromo = potentialIds.find(carddb.notPromoOrDigitalId);\nlet first = potentialIds[0];\ncard.cardID = matchingSet || nonPromo || first;\n+ if (maybeboard == 'true') {\n+ cube.maybe.push(card);\n+ } else {\ncube.cards.push(card);\n+ }\nchangelog += addCardHtml(carddb.cardFromId(card.cardID));\n} else {\nmissing += card.name + '\\n';\n@@ -1382,7 +1389,7 @@ async function bulkuploadCSV(req, res, cards, cube) {\nasync function bulkUpload(req, res, list, cube) {\ncards = list.match(/[^\\r\\n]+/g);\nif (cards) {\n- if (cards[0].trim() == 'Name,CMC,Type,Color,Set,Collector Number,Status,Finish,Image URL,Tags') {\n+ if (cards[0].trim() == CSV_HEADER) {\ncards.splice(0, 1);\nbulkuploadCSV(req, res, cards, cube);\n} else {\n@@ -1523,8 +1530,8 @@ router.get('/download/csv/:id', function(req, res) {\nres.setHeader('Content-disposition', 'attachment; filename=' + cube.name.replace(/\\W/g, '') + '.csv');\nres.setHeader('Content-type', 'text/plain');\nres.charset = 'UTF-8';\n- res.write('Name,CMC,Type,Color,Set,Collector Number,Status,Finish,Image URL,Tags\\r\\n');\n- cube.cards.forEach(function(card, index) {\n+ res.write(CSV_HEADER + '\\r\\n');\n+ let writeCard = function(card, maybe) {\nif (!card.type_line) {\ncard.type_line = carddb.cardFromId(card.cardID).type;\n}\n@@ -1543,6 +1550,7 @@ router.get('/download/csv/:id', function(req, res) {\nres.write('\"' + carddb.cardFromId(card.cardID).collector_number + '\"' + ',');\nres.write(card.status + ',');\nres.write(card.finish + ',');\n+ res.write(maybe + ',');\nres.write('\"' + card.imgUrl + '\",\"');\ncard.tags.forEach(function(tag, t_index) {\nif (t_index != 0) {\n@@ -1551,6 +1559,12 @@ router.get('/download/csv/:id', function(req, res) {\nres.write(tag);\n});\nres.write('\"\\r\\n');\n+ };\n+ cube.cards.forEach(function(card, index) {\n+ return writeCard(card, false);\n+ });\n+ cube.maybe.forEach(function(card, index) {\n+ return writeCard(card, true);\n});\nres.end();\n}\n",
        "org_msg": "Add Maybeboard cards to csv import/export.",
        "sim_msg": "[web] Only retry failed uploads for requested message ID",
        "sim_diff": "diff --git a/web/chat/chat-input-state-container.react.js b/web/chat/chat-input-state-container.react.js @@ -207,7 +207,7 @@ class ChatInputStateContainer extends React.PureComponent<Props, State> {\nconst rawMessageInfo = this.props.messageStoreMessages[localMessageID];\ninvariant(\nrawMessageInfo,\n- `rawMessageInfo ${localMessageID} should exist in sendMultimediaMessage`,\n+ `rawMessageInfo ${localMessageID} should exist`,\n);\ninvariant(\nrawMessageInfo.type === messageTypes.MULTIMEDIA,\n@@ -703,13 +703,14 @@ class ChatInputStateContainer extends React.PureComponent<Props, State> {\nconst uploadIDsToRetry = new Set();\nconst uploadsToRetry = [];\nfor (let pendingUpload of pendingUploads) {\n- if (pendingUpload.serverID) {\n+ const { serverID, messageID, localID, abort } = pendingUpload;\n+ if (serverID || messageID !== localMessageID) {\ncontinue;\n}\n- if (pendingUpload.abort) {\n- pendingUpload.abort();\n+ if (abort) {\n+ abort();\n}\n- uploadIDsToRetry.add(pendingUpload.localID);\n+ uploadIDsToRetry.add(localID);\nuploadsToRetry.push(pendingUpload);\n}\n",
        "chatgpt_cot": "Add CSV_HEADER constant, fix maybeboard CSV parsing, and add maybeboard support to bulkuploadCSV. Fixes #1234."
    },
    {
        "org_diff": "diff --git a/src/components/DraggableCard.js b/src/components/DraggableCard.js import React, { useRef } from 'react';\n-import { DragPreviewImage, useDrag, useDrop } from 'react-dnd';\n+import { useDrag, useDrop } from 'react-dnd';\nimport CardImage from './CardImage';\nimport FoilCardImage from './FoilCardImage';\n-import ImageFallback from './ImageFallback';\nconst DraggableCard = ({ card, location, canDrop, onMoveCard, width, height, className, ...props }) => {\nconst [{ isDragging }, drag, preview] = useDrag({\n@@ -45,12 +44,13 @@ const DraggableCard = ({ card, location, canDrop, onMoveCard, width, height, cla\nreturn (\n<>\n- <CardImage card={card} noAutocard innerRef={imageRef} className=\"off-screen\" />\n+ <CardImage card={card} innerRef={imageRef} className=\"off-screen\" />\n<div ref={drag} className={onMoveCard || props.onClick ? 'clickable' : undefined}>\n<div ref={drop}>\n<FoilCardImage\ncard={card}\ntags={[]}\n+ autocard\nclassName={classes.join(' ')}\ndata-location-type={location.type}\ndata-location-data={JSON.stringify(location.data)}\n",
        "org_msg": "Fix autocard in draft.\nFixes",
        "sim_msg": "Remove Dead pile, rename Draw -> Conflict",
        "sim_diff": "diff --git a/client/GameComponents/PlayerRow.jsx b/client/GameComponents/PlayerRow.jsx @@ -196,16 +196,13 @@ class PlayerRow extends React.Component {\n{hand}\n</div>\n- <CardCollection className='draw' title='Draw' source='draw deck' cards={this.props.drawDeck}\n+ <CardCollection className='draw' title='Conflict' source='conflict draw deck' cards={this.props.conflictDrawDeck}\nonMouseOver={this.props.onMouseOver} onMouseOut={this.props.onMouseOut} onCardClick={this.props.onCardClick}\npopupLocation={this.props.isMe || this.props.spectating ? 'top' : 'bottom'} onDragDrop={this.props.onDragDrop}\nmenu={drawDeckMenu} hiddenTopCard cardCount={this.props.numDrawCards} popupMenu={drawDeckPopupMenu} />\n- <CardCollection className='discard' title='Discard' source='discard pile' cards={this.props.discardPile}\n+ <CardCollection className='discard' title='Conflict Discard' source='conflict discard pile' cards={this.props.conflictDiscardPile}\nonMouseOver={this.props.onMouseOver} onMouseOut={this.props.onMouseOut} onCardClick={this.props.onCardClick}\npopupLocation={this.props.isMe || this.props.spectating ? 'top' : 'bottom'} onDragDrop={this.props.onDragDrop} />\n- <CardCollection className='dead' title='Dead' source='dead pile' cards={this.props.deadPile}\n- onMouseOver={this.props.onMouseOver} onMouseOut={this.props.onMouseOut} onCardClick={this.props.onCardClick}\n- popupLocation={this.props.isMe || this.props.spectating ? 'top' : 'bottom'} onDragDrop={this.props.onDragDrop} orientation='kneeled' />\n{additionalPiles}\n</div>\n</div>\n@@ -216,9 +213,8 @@ class PlayerRow extends React.Component {\nPlayerRow.displayName = 'PlayerRow';\nPlayerRow.propTypes = {\nadditionalPiles: React.PropTypes.object,\n- deadPile: React.PropTypes.array,\n- discardPile: React.PropTypes.array,\n- drawDeck: React.PropTypes.array,\n+ conflictDiscardPile: React.PropTypes.array,\n+ conflictDrawDeck: React.PropTypes.array,\nhand: React.PropTypes.array,\nisMe: React.PropTypes.bool,\nnumDrawCards: React.PropTypes.number,\n@@ -231,7 +227,7 @@ PlayerRow.propTypes = {\nonMouseOver: React.PropTypes.func,\nonShuffleClick: React.PropTypes.func,\nplotDeck: React.PropTypes.array,\n- power: React.PropTypes.number,\n+ honor: React.PropTypes.number,\nshowDrawDeck: React.PropTypes.bool,\nspectating: React.PropTypes.bool\n};\n",
        "chatgpt_cot": "\"Fix: Removed unused import and added autocard attribute to FoilCardImage to improve performance and functionality in DraggableCard.\""
    },
    {
        "org_diff": "diff --git a/src/components/MarkdownRenderer.js b/src/components/MarkdownRenderer.js @@ -2,10 +2,26 @@ import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactMarkdown from 'react-markdown';\n+import Latex from 'react-latex'\n+\n+import math from 'remark-math';\n+\n+function renderMath(node) {\n+ return (<Latex trusted={false} displayMode>{`$$ ${node.value} $$`}</Latex>);\n+}\n+\n+function renderInlineMath(node) {\n+ return (<Latex trusted={false}>{`$ ${node.value} $`}</Latex>);\n+}\nconst Markdown = ({ markdown, limited}) => {\n+ const renderers = {\n+ math: renderMath,\n+ inlineMath: renderInlineMath,\n+ };\n+\nconst markdownStr = markdown?.toString() ?? '';\n- return (<ReactMarkdown children={markdownStr} />);\n+ return (<ReactMarkdown children={markdownStr} plugins={[math]} renderers={renderers}/>);\n}\nMarkdown.propTypes = {\n",
        "org_msg": "added latex math support",
        "sim_msg": "migrate from Raw serializer to fromJSON/toJSON",
        "sim_diff": "diff --git a/src/components/Widgets/Markdown/MarkdownControl/VisualEditor/index.js b/src/components/Widgets/Markdown/MarkdownControl/VisualEditor/index.js import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { get, isEmpty, debounce } from 'lodash';\n-import { Editor as Slate, Raw, Block, Text } from 'slate';\n+import { Editor as Slate, State, Document, Block, Text } from 'slate';\nimport { slateToMarkdown, markdownToSlate, htmlToSlate } from '../../serializers';\nimport registry from '../../../../../lib/registry';\nimport Toolbar from '../Toolbar/Toolbar';\n@@ -19,7 +19,8 @@ export default class Editor extends Component {\nconst emptyRawDoc = { nodes: [emptyBlock] };\nconst rawDoc = this.props.value && markdownToSlate(this.props.value);\nconst rawDocHasNodes = !isEmpty(get(rawDoc, 'nodes'))\n- const editorState = Raw.deserialize(rawDocHasNodes ? rawDoc : emptyRawDoc, { terse: true });\n+ const document = Document.fromJSON(rawDocHasNodes ? rawDoc : emptyRawDoc, { terse: true });\n+ const editorState = State.create({ document });\nthis.state = {\neditorState,\nschema: {\n@@ -40,7 +41,7 @@ export default class Editor extends Component {\nreturn;\n}\nconst ast = htmlToSlate(data.html);\n- const { document: doc } = Raw.deserialize(ast, { terse: true });\n+ const doc = Document.fromJSON(ast, { terse: true });\nreturn change.insertFragment(doc);\n}\n",
        "chatgpt_cot": "Add Latex rendering for math equations in MarkdownRenderer to support math display and inline math rendering, improving functionality and user experience."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -332,7 +332,7 @@ router.post(\n}\nconst { user } = req;\n- cube.users_following = cube.users_following.filter((id) => !cube._id.equals(id));\n+ cube.users_following = cube.users_following.filter((id) => !req.user._id.equals(id));\nuser.followed_cubes = user.followed_cubes.filter((id) => id !== req.params.id);\nawait Promise.all([user.save(), cube.save()]);\n@@ -414,7 +414,6 @@ router.get('/overview/:id', async (req, res) => {\n}\n}\n- const ownerQ = User.findById(cube.owner).lean();\nconst blogsQ = Blog.find({\ncube: cube._id,\n})\n@@ -427,7 +426,7 @@ router.get('/overview/:id', async (req, res) => {\n'_id username image artist users_following',\n).lean();\nconst priceDictQ = GetPrices([...pids]);\n- const [owner, blogs, followers, priceDict] = await Promise.all([ownerQ, blogsQ, followersQ, priceDictQ]);\n+ const [blogs, followers, priceDict] = await Promise.all([blogsQ, followersQ, priceDictQ]);\nlet totalPriceOwned = 0;\nlet totalPricePurchase = 0;\n@@ -482,10 +481,10 @@ router.get('/overview/:id', async (req, res) => {\ncubeID,\nloggedIn: !!req.user,\ncanEdit: req.user ? req.user._id.equals(cube.owner) : false,\n- owner: owner ? owner.username : 'unknown',\n- ownerID: owner ? owner._id : null,\n+ owner: cube.owner_name || 'unknown',\n+ ownerID: cube.owner || null,\npost: blogs ? blogs[0] : null,\n- followed: owner && owner.followed_cubes ? owner.followed_cubes.includes(cube.id) : false,\n+ followed: req.user && cube.users_following ? cube.users_following.includes(req.user.id) : false,\nfollowers,\neditorvalue: cube.raw_desc,\npriceOwned: !cube.privatePrices ? totalPriceOwned : null,\n",
        "org_msg": "Fix follow button.",
        "sim_msg": "feat(getSocial): remove following and followers",
        "sim_diff": "diff --git a/pages/api/users/get-social.js b/pages/api/users/get-social.js import * as Data from \"~/node_common/data\";\n-import * as Serializers from \"~/node_common/serializers\";\nexport default async (req, res) => {\n- let id = req.body.data.id;\n+ let { id } = req.body.data;\nif (!id) {\nreturn res.status(404).send({ decorator: \"SERVER_USER_SOCIAL_NO_USER_ID\", error: true });\n}\n@@ -21,38 +20,8 @@ export default async (req, res) => {\n.send({ decorator: \"SERVER_USER_SOCIAL_SUBSCRIPTIONS_NOT_FOUND\", error: true });\n}\n- const following = await Data.getFollowingByUserId({ ownerId: id });\n-\n- if (!following) {\n- return res\n- .status(404)\n- .send({ decorator: \"SERVER_USER_SOCIAL_FOLLOWING_NOT_FOUND\", error: true });\n- }\n-\n- if (following.error) {\n- return res\n- .status(500)\n- .send({ decorator: \"SERVER_USER_SOCIAL_FOLLOWING_NOT_FOUND\", error: true });\n- }\n-\n- const followers = await Data.getFollowersByUserId({ userId: id });\n-\n- if (!followers) {\n- return res\n- .status(404)\n- .send({ decorator: \"SERVER_USER_SOCIAL_FOLLOWERS_NOT_FOUND\", error: true });\n- }\n-\n- if (followers.error) {\n- return res\n- .status(500)\n- .send({ decorator: \"SERVER_USER_SOCIAL_FOLLOWERS_NOT_FOUND\", error: true });\n- }\n-\nreturn res.status(200).send({\ndecorator: \"SERVER_USER_SOCIAL\",\n- following,\n- followers,\nsubscriptions,\n});\n};\n",
        "chatgpt_cot": "\"Refactor cube_routes.js to update owner and followed properties, and remove unnecessary owner query. Fixes owner and followed cube display issues.\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -55,6 +55,20 @@ function addCardToCatalog(card, isExtra) {\nutil.binaryInsert(normaliedFullName, full_names);\n}\n+function writeJSONFile(filepath, data) {\n+ return new Promise((resolve, reject) => {\n+ fs.writeFile(filepath, data, 'utf8', function(err) {\n+ if (err) {\n+ console.log(\"An error occured while writing \" + filepath);\n+ console.log(err);\n+ reject(err);\n+ } else {\n+ resolve(contents);\n+ }\n+ });\n+ });\n+}\n+\nfunction saveAllCards(arr) {\nvar normalizedName, normalizedFullName;\narr.forEach(function(card, index) {\n@@ -63,47 +77,14 @@ function saveAllCards(arr) {\n}\naddCardToCatalog(convertCard(card));\n});\n- fs.writeFile('private/names.json', JSON.stringify(names), 'utf8', function(err) {\n- if (err) {\n- console.log(\"An error occured while writing names.json\");\n- console.log(err);\n- }\n+ writeJSONFile('private/names.json', JSON.stringify(names)).then(function() {\nvar cardtree = util.turnToTree(names);\n-\n- fs.writeFile('private/cardtree.json', JSON.stringify(cardtree), 'utf8', function(err) {\n- if (err) {\n- console.log(\"An error occured while writing cardtree.json\");\n- console.log(err);\n- }\n- fs.writeFile('private/carddict.json', JSON.stringify(dict), 'utf8', function(err) {\n- if (err) {\n- console.log(\"An error occured while writing carddict.json\");\n- console.log(err);\n- }\n- fs.writeFile('private/nameToId.json', JSON.stringify(nameToId), 'utf8', function(err) {\n- if (err) {\n- console.log(\"An error occured while writing nameToId.json\");\n- console.log(err);\n- }\n-\n- fs.writeFile('private/full_names.json', JSON.stringify(util.turnToTree(full_names)), 'utf8', function(err) {\n- if (err) {\n- console.log(\"An error occured while writing full_names.json\");\n- console.log(err);\n- }\n-\n- fs.writeFile('private/imagedict.json', JSON.stringify(imagedict), 'utf8', function(err) {\n- if (err) {\n- console.log(\"An error occured while writing imagedict.json\");\n- console.log(err);\n- }\n-\n- fs.writeFile('private/cardimages.json', JSON.stringify(cardimages), 'utf8', function(err) {\n- if (err) {\n- console.log(\"An error occured while writing cardimages.json\");\n- console.log(err);\n- }\n-\n+ writeJSONFile('private/cardtree.json', JSON.stringify(cardtree)).then(function() {\n+ writeJSONFile('private/carddict.json', JSON.stringify(dict)).then(function() {\n+ writeJSONFile('private/nameToId.json', JSON.stringify(nameToId)).then(function() {\n+ writeJSONFile('private/full_names.json', JSON.stringify(util.turnToTree(full_names))).then(function() {\n+ writeJSONFile('private/imagedict.json', JSON.stringify(imagedict)).then(function() {\n+ writeJSONFile('private/cardimages.json', JSON.stringify(cardimages)).then(function() {\nconsole.log(\"All JSON files saved.\");\n});\n});\n",
        "org_msg": "deduplicate file writes with a promise-returning function",
        "sim_msg": "Write JSON to specific path also",
        "sim_diff": "diff --git a/selenium-test/ratings.js b/selenium-test/ratings.js @@ -84,10 +84,11 @@ function _buildHtmlDoc(htmlTable) {\nfunction _writeToFile (jsonText, opts) {\nconst filename = new Date().toJSON();\nconst jsonData = JSON.parse(jsonText);\n+ const path = opts.output.replace(/\\/$/, '');\n// JSON File Output\n- fs.writeFileSync(`${filename}.json`, jsonText);\n- log(chalk.yellow('JSON Data written to file: ') + chalk.yellow.bold(`${filename}.json`));\n+ fs.writeFileSync(`${path}/${filename}.json`, jsonText);\n+ log(chalk.yellow('JSON Data written to file: ') + chalk.yellow.bold(`${path}/${filename}.json`));\n// Cleanup data for HTML table\nObject.keys(jsonData).forEach(function (key) {\n@@ -117,8 +118,6 @@ function _writeToFile (jsonText, opts) {\n// HTML File Output\nconst htmlTable = tabular.html(jsonData, {classes: {table: \"dataTable display\"} });\nconst htmlDoc = _buildHtmlDoc(htmlTable);\n-\n- const path = opts.output.replace(/\\/$/, '');\nfs.writeFileSync(`${path}/${filename}.html`, htmlDoc);\nlog(chalk.yellow('HTML Table written to file: ') + chalk.yellow.bold(`${path}/${filename}.html`));\n}\n",
        "chatgpt_cot": "Add writeJSONFile function and replace fs.writeFile with writeJSONFile for saving multiple JSON files."
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"scripts\": {\n\"beautify\": \"js-beautify -r *.js {config,models,routes,serverjs,views,public/js,__tests__}/**/*.js\",\n\"lint\": \"beautify-lint *.js {config,models,routes,serverjs,views,public/js,__tests__}/**/*.js\",\n- \"build\": \"node_modules/.bin/webpack --mode production --config webpack.prod.js\",\n+ \"build\": \"webpack --mode production --config webpack.prod.js && rollup -c\",\n\"start\": \"nodemon --ignore src --ignore public & webpack-dev-server --config webpack.dev.js & rollup -c --watch\",\n\"test\": \"jest --silent --detectOpenHandles\"\n},\n",
        "org_msg": "Update build script to do rollup as well.",
        "sim_msg": "Prefix with npm run",
        "sim_diff": "diff --git a/package.json b/package.json \"scripts\": {\n\"build\": \"npm run build:production && npm run build:static\",\n\"build:production\": \"webpack --mode=production\",\n- \"build:test\": \"build:production -- --include-tests\",\n+ \"build:test\": \"npm run build:production -- --include-tests\",\n\"build:dev\": \"webpack --mode=development --debug --devtool cheap-source-map --output-pathinfo && npm run build:static\",\n\"build:static\": \"gulp svg imagemin\",\n\"dev\": \"npm run build:dev && npm run build:static\",\n",
        "chatgpt_cot": "Update build script to include rollup and remove unnecessary node_modules path for webpack."
    },
    {
        "org_diff": "diff --git a/nearley/cardFilters.ne b/nearley/cardFilters.ne @@ -166,4 +166,4 @@ notCondition -> \"not\"i isOpValue {% ([, valuePred]) => negated(genericCondition(\nisOpValue -> \":\" isValue {% ([, category]) => (fieldValue) => CARD_CATEGORY_DETECTORS[category](fieldValue) %}\n-isValue -> (\"gold\"i | \"twobrid\"i | \"hybrid\"i | \"phyrexian\"i | \"promo\"i | \"digital\"i | \"reasonable\"i | \"dfc\"i | \"mdfc\"i | \"meld\"i | \"transform\"i | \"split\"i | \"flip\"i | \"leveler\"i | \"commander\"i | \"spell\"i | \"permanent\"i | \"historic\"i | \"vanilla\"i | \"bikeland\"i | \"cycleland\"i | \"bicycleland\"i | \"bounceland\"i | \"karoo\"i | \"canopyland\"i | \"canland\"i | \"checkland\"i | \"dual\"i | \"fastland\"i | \"filterland\"i | \"gainland\"i | \"painland\"i | \"scryland\"i | \"shadowland\"i | \"shockland\"i | \"storageland\"i | \"creatureland\"i | \"triland\"i | \"tangoland\"i | \"battleland\"i) {% ([[category]]) => category.toLowerCase() %}\n+isValue -> (\"gold\"i | \"twobrid\"i | \"hybrid\"i | \"phyrexian\"i | \"promo\"i | \"digital\"i | \"reasonable\"i | \"dfc\"i | \"mdfc\"i | \"meld\"i | \"transform\"i | \"split\"i | \"flip\"i | \"leveler\"i | \"commander\"i | \"spell\"i | \"permanent\"i | \"historic\"i | \"vanilla\"i | \"bikeland\"i | \"cycleland\"i | \"bicycleland\"i | \"bounceland\"i | \"karoo\"i | \"canopyland\"i | \"canland\"i | \"checkland\"i | \"dual\"i | \"fastland\"i | \"filterland\"i | \"gainland\"i | \"painland\"i | \"scryland\"i | \"shadowland\"i | \"shockland\"i | \"storageland\"i | \"creatureland\"i | \"triland\"i | \"tangoland\"i | \"battleland\"i | \"modal\"i) {% ([[category]]) => category.toLowerCase() %}\n",
        "org_msg": "add is:modal filter",
        "sim_msg": "update tracker networks subview to use the new urls structure",
        "sim_diff": "diff --git a/shared/js/ui/templates/tracker-networks.es6.js b/shared/js/ui/templates/tracker-networks.es6.js @@ -22,7 +22,7 @@ module.exports = function () {\njs-tracker-networks-details\">\n<ol class=\"default-list site-info__trackers__company-list\">\n${renderTrackerDetails(\n- this.model.companyListMap,\n+ this.model,\nthis.model.DOMAIN_MAPPINGS\n)}\n</ol>\n@@ -42,7 +42,8 @@ function renderHero (site) {\n})}`\n}\n-function renderTrackerDetails (companyListMap, DOMAIN_MAPPINGS) {\n+function renderTrackerDetails (model, DOMAIN_MAPPINGS) {\n+ const companyListMap = model.companyListMap || {}\nif (companyListMap.length === 0) {\nreturn bel`<li class=\"is-empty\">None</li>`\n}\n@@ -50,7 +51,7 @@ function renderTrackerDetails (companyListMap, DOMAIN_MAPPINGS) {\nreturn companyListMap.map((c, i) => {\nif (c.name && c.name === 'unknown') {\nc.name = '(Tracker network unknown)'\n- } else if (c.name && c.isFirstParty) {\n+ } else if (c.name && model.hasUnblockedTrackers(c)) {\nc.name += ' associated domains (not blocked)'\n}\nreturn bel`<li>\n@@ -61,7 +62,7 @@ function renderTrackerDetails (companyListMap, DOMAIN_MAPPINGS) {\n</div>\n<h1 class=\"site-info__domain block\">${c.name}</h1>\n<ol class=\"default-list site-info__trackers__company-list__url-list\">\n- ${c.urls.map((url) => {\n+ ${Object.keys(c.urls).map((url) => {\nlet category = ''\nif (DOMAIN_MAPPINGS[url.toLowerCase()]) {\ncategory = DOMAIN_MAPPINGS[url.toLowerCase()].t\n",
        "chatgpt_cot": "Add new category \"modal\" to isValue function in cardFilters.ne for additional card category detection capability."
    },
    {
        "org_diff": "diff --git a/src/pages/UserViewPage.js b/src/pages/UserViewPage.js import React from 'react';\nimport PropTypes from 'prop-types';\n-import { Card, CardBody, CardHeader, Col, Row } from 'reactstrap';\n+import { Button, Card, CardBody, CardFooter, CardHeader, Col, Row } from 'reactstrap';\nimport CubePreview from 'components/CubePreview';\nimport UserLayout from 'layouts/UserLayout';\n@@ -38,6 +38,11 @@ const UserViewPage = ({ user, followers, following, canEdit, cubes }) => (\n</Col>\n</Row>\n</CardBody>\n+ {canEdit && (\n+ <CardFooter>\n+ <Button color=\"success\" href=\"/user/account\">Update</Button>\n+ </CardFooter>\n+ )}\n</Card>\n<Row>\n{cubes.map((cube) => (\n",
        "org_msg": "Add back Update button.",
        "sim_msg": "Use FollowButton in UserCard",
        "sim_diff": "diff --git a/src/components/UserCard.js b/src/components/UserCard.js import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n-import Follow from '../components/Button/Follow';\n+import FollowButton from '../widgets/FollowButton';\nimport Avatar from '../components/Avatar';\nimport './UserCard.less';\n@@ -15,7 +15,7 @@ const UserCard = ({ username }) =>\n{username}\n</Link>\n</div>\n- <Follow />\n+ <FollowButton username={username} />\n</div>);\nUserCard.propTypes = {\n",
        "chatgpt_cot": "Add update button for user account if canEdit, in UserViewPage."
    },
    {
        "org_diff": "diff --git a/src/analytics/HyperGeom.js b/src/analytics/HyperGeom.js @@ -2,7 +2,18 @@ import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ChartComponent from 'react-chartjs-2';\n-import { Col, Row, Table, InputGroup, InputGroupAddon, InputGroupText, CustomInput, Input, Button } from 'reactstrap';\n+import {\n+ Col,\n+ Row,\n+ Table,\n+ InputGroup,\n+ InputGroupAddon,\n+ InputGroupText,\n+ CustomInput,\n+ Input,\n+ Button,\n+ Form,\n+} from 'reactstrap';\nimport calculate from 'utils/CalculateHyperGeom';\n@@ -66,7 +77,8 @@ const HyperGeom = () => {\nsetData([]);\n};\n- const submit = () => {\n+ const submit = (event) => {\n+ event.preventDefault();\ntry {\nconst { equalTo, lessThan, lessThanEqual, greaterThan, greaterThanEqual } = calculate(\npopulationSize,\n@@ -220,6 +232,7 @@ const HyperGeom = () => {\n.\n</p>\n<>\n+ <Form onSubmit={submit}>\n<TextField\nname=\"1\"\nhumanName=\"Population size\"\n@@ -248,9 +261,10 @@ const HyperGeom = () => {\nvalue={sampleSuccesses}\nonChange={(event) => setSampleSuccesses(event.target.value, 10)}\n/>\n- <Button className=\"mb-3\" color=\"success\" block onClick={submit}>\n+ <Button className=\"mb-3\" color=\"success\" block>\nCalculate\n</Button>\n+ </Form>\n<TextDisplay humanName={`Hypergeometric Probability: P(X = ${sampleSuccesses})`} value={et} />\n<TextDisplay humanName={`Cumulative Probability: P(X < ${sampleSuccesses})`} value={lt} />\n<TextDisplay humanName={`Cumulative Probability: P(X <= ${sampleSuccesses})`} value={lte} />\n",
        "org_msg": "allow pressing enter key to submit the hypergeom form",
        "sim_msg": "Add a button to add new objectives",
        "sim_diff": "diff --git a/src/components/views/Objectives/core.js b/src/components/views/Objectives/core.js import React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { graphql, withApollo } from \"react-apollo\";\n-import { Container, Row, Col, Input, FormGroup } from \"reactstrap\";\n+import { Container, Row, Col, Input, FormGroup, Button } from \"reactstrap\";\nimport \"./style.css\";\nconst OBJECTIVE_SUB = gql`\n@@ -68,6 +68,37 @@ class Objectives extends Component {\n});\n}\n}\n+ addObjective = () => {\n+ const title = window.prompt(\"What is the title of the objective?\");\n+ if (!title) return;\n+ const description = window.prompt(\n+ \"What is the description of the objective? (May be blank)\"\n+ );\n+ const mutation = gql`\n+ mutation CreateObjective(\n+ $simulatorId: ID!\n+ $title: String!\n+ $description: String\n+ ) {\n+ addObjective(\n+ objective: {\n+ title: $title\n+ description: $description\n+ simulatorId: $simulatorId\n+ }\n+ )\n+ }\n+ `;\n+ const variables = {\n+ simulatorId: this.props.simulator.id,\n+ title,\n+ description\n+ };\n+ this.props.client.mutate({\n+ mutation,\n+ variables\n+ });\n+ };\ncomponentWillUnmount() {\nthis.subscription && this.subscription();\n}\n@@ -78,6 +109,9 @@ class Objectives extends Component {\n<Container className=\"objective-core\">\n<Row>\n<Col sm={12}>\n+ <Button color=\"success\" size=\"sm\" block onClick={this.addObjective}>\n+ Add New Objective\n+ </Button>\n{objective\n.concat()\n.reverse()\n",
        "chatgpt_cot": "\"Add form to HyperGeom, update submit function, and prevent default event to calculate hypergeometric probability.\""
    },
    {
        "org_diff": "diff --git a/one_shot_scripts/import_ratings.js b/one_shot_scripts/import_ratings.js @@ -15,16 +15,12 @@ async function saveCardRating(cardRating) {\nexisting.picks = cardRating.picks;\nexisting.value = cardRating.value;\nawait existing.save();\n+ return existing;\n}\n-async function saveRatings(defaultPath = null) {\n- await new Promise((resolve) =>\n- fs\n- .createReadStream(defaultPath)\n- .pipe(JSONStream.parse('*'))\n- .pipe(es.mapSync(saveCardRating))\n- .on('close', resolve),\n- );\n+async function saveRatings(defaultPath) {\n+ const ratings = JSON.parse(fs.readFileSync(defaultPath));\n+ return Promise.all(ratings.map(saveCardRating));\n}\n(async () => {\n",
        "org_msg": "Fix ratings script.",
        "sim_msg": "Simplify ProfileSelect.",
        "sim_diff": "diff --git a/assets/js/modules/analytics/components/common/ProfileSelect.js b/assets/js/modules/analytics/components/common/ProfileSelect.js @@ -34,33 +34,14 @@ import { trackEvent } from '../../../../util';\nconst { useSelect, useDispatch } = Data;\nexport default function ProfileSelect() {\n+ const accountID = useSelect( ( select ) => select( STORE_NAME ).getAccountID() );\n+ const propertyID = useSelect( ( select ) => select( STORE_NAME ).getPropertyID() );\nconst profileID = useSelect( ( select ) => select( STORE_NAME ).getProfileID() );\n- const hasResolvedAccounts = useSelect( ( select ) => select( STORE_NAME ).hasFinishedResolution( 'getAccounts' ) );\n-\n- const {\n- accountID,\n- propertyID,\n- profiles,\n- isResolvingProperties,\n- isResolvingProfiles,\n- } = useSelect( ( select ) => {\n- const data = {\n- accountID: select( STORE_NAME ).getAccountID(),\n- propertyID: select( STORE_NAME ).getPropertyID(),\n- profiles: [],\n- isResolvingProperties: false,\n- isResolvingProfiles: false,\n- };\n-\n- if ( data.accountID ) {\n- data.isResolvingProperties = select( STORE_NAME ).isResolving( 'getProperties', [ data.accountID ] );\n- if ( data.propertyID ) {\n- data.profiles = select( STORE_NAME ).getProfiles( data.accountID, data.propertyID );\n- data.isResolvingProfiles = select( STORE_NAME ).isResolving( 'getProfiles', [ data.accountID, data.propertyID ] );\n- }\n- }\n-\n- return data;\n+ const profiles = useSelect( ( select ) => select( STORE_NAME ).getProfiles( accountID, propertyID ) );\n+ const isLoading = useSelect( ( select ) => {\n+ return ! select( STORE_NAME ).hasFinishedResolution( 'getAccounts' ) ||\n+ select( STORE_NAME ).isResolving( 'getProperties', [ accountID ] ) ||\n+ select( STORE_NAME ).isResolving( 'getProfiles', [ accountID, propertyID ] );\n} );\nconst { setProfileID } = useDispatch( STORE_NAME );\n@@ -72,7 +53,7 @@ export default function ProfileSelect() {\n}\n}, [ profileID, setProfileID ] );\n- if ( ! hasResolvedAccounts || isResolvingProperties || isResolvingProfiles ) {\n+ if ( isLoading ) {\nreturn <ProgressBar small />;\n}\n",
        "chatgpt_cot": "Refactored saveRatings function to use synchronous file read and Promise.all for saving ratings. Fixes issue with asynchronous file processing."
    },
    {
        "org_diff": "diff --git a/src/components/ButtonLink.js b/src/components/ButtonLink.js import React from 'react';\n-import { Button } from 'reactstrap';\n-\n-const ButtonLink = ({ children, outline, color, block, ...props }) => {\n- let c = color ? color : 'primary';\n+const ButtonLink = ({ children, outline, color = 'primary', block, ...props }) => {\nlet type = outline ? `btn-outline-${color}` : `btn-${color}`;\nreturn (\n- <a class={`btn ${type} ${block ? 'btn-block' : ''}`} {...props} role=\"button\">\n+ <a className={`btn ${type} ${block ? 'btn-block' : ''}`} {...props} role=\"button\">\n{children}\n</a>\n);\n",
        "org_msg": "fixed wrong prop name and unused import and variable in ButtonLink",
        "sim_msg": "Fix ButtonLink bug, add regex",
        "sim_diff": "diff --git a/components/button-link.js b/components/button-link.js @@ -2,13 +2,23 @@ import React from 'react'\nimport PropTypes from 'prop-types'\nimport Link from 'next/link'\n+const regex = /^http?/\n+\nconst ButtonLink = ({size, color, href, isOutlined, children, ...props}) => {\nreturn (\n+ <>\n+ {regex.test(href) ? (\n+ <a href={href} className={`button${isOutlined ? '-outline' : ''} ${size} ${color}`} {...props}>\n+ {children}\n+ </a>\n+ ) : (\n<Link href={href}>\n<a className={`button${isOutlined ? '-outline' : ''} ${size} ${color}`} {...props}>\n{children}\n</a>\n</Link>\n+ )}\n+ </>\n)\n}\n",
        "chatgpt_cot": "\"Refactor ButtonLink component to use className instead of class attribute and set default value for color prop\""
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -32,11 +32,14 @@ async function matchingCards(filter) {\nfilterUses(filter, 'price_foil')\n) {\nconst oracleIds = cards.map(({ oracle_id }) => oracle_id); // eslint-disable-line camelcase\n- const historyObjects = await CardHistory.find({ oracleId: { $in: oracleIds } }, 'current').lean();\n+ const historyObjects = await CardHistory.find(\n+ { oracleId: { $in: oracleIds } },\n+ 'oracleId current.rating current.elo current.picks current.cubes current.prices',\n+ ).lean();\nconst historyDict = new Map(historyObjects.map((h) => [h.oracleId, h]));\ncards = cards.map((card) => {\nconst history = historyDict.get(card.oracle_id);\n- const priceData = history ? history.current.find(({ version }) => version === card._id) : null;\n+ const priceData = history ? history.current.prices.find(({ version }) => version === card._id) : null;\nreturn {\n...card,\nrating: history ? history.current.rating : null,\n",
        "org_msg": "Fix filtering by price.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "\"Add additional fields to CardHistory.find method to include more data in historyObjects and update priceData to access current prices for each card.\""
    },
    {
        "org_diff": "diff --git a/src/components/TagColorsModal.js b/src/components/TagColorsModal.js @@ -110,7 +110,7 @@ class TagColorsModalRaw extends Component {\nconst unknownTagColors = unknownTags.map(tag => ({ tag, color: null }));\nconst orderedTags = [...tagColors, ...unknownTagColors];\n- const rows = orderedTags.map(({ tag, color }) => {\n+ const editableRows = orderedTags.map(({ tag, color }) => {\nconst tagClass = `tag-item ${getTagColorClass(tagColors, tag)}`;\nreturn {\nelement: <TagColorRow tag={tag} tagClass={tagClass} value={color} onChange={this.handleChangeColor} />,\n@@ -118,30 +118,35 @@ class TagColorsModalRaw extends Component {\n};\n});\n+ const staticRows = orderedTags.map(({ tag, color }) => {\n+ const tagClass = `mr-2 tag-item ${getTagColorClass(tagColors, tag)}`;\n+ return (\n+ <span key={tag.text} className={tagClass}>{tag}</span>\n+ );\n+ });\n+\nreturn (\n<Modal isOpen={isOpen} toggle={toggle}>\n<ModalHeader toggle={toggle}>\n{canEdit ? 'Set Tag Colors' : 'Tag Colors'}\n</ModalHeader>\n<ModalBody>\n- {!canEdit ? '' :\n- <>\n- <Form inline>\n+ <Form inline className=\"mb-2\">\n<Label>\n<Input type=\"checkbox\" checked={showTagColors} onChange={this.handleChangeShowTagColors} />\nShow Tag Colors in Card List\n</Label>\n</Form>\n- <p><em>(Drag the tags below into a priority order to use for cards that have more than one tag)</em></p>\n- </>\n+ {!canEdit ? '' :\n+ <em>(Drag the tags below into a priority order to use for cards that have more than one tag)</em>\n}\n- {canEdit ?\n+ {!canEdit ? staticRows :\n<Row className=\"tag-color-container\">\n<Col>\n- <SortableList onSortEnd={this.handleSortEnd} items={rows} />\n+ <SortableList onSortEnd={this.handleSortEnd} items={editableRows} />\n</Col>\n</Row>\n- : rows.map(({ element }) => element)}\n+ }\n</ModalBody>\n<ModalFooter>\n<Button color=\"success\" className=\"ml-auto\" onClick={this.handleSubmit}>\n",
        "org_msg": "Tweak non-editable styling.",
        "sim_msg": "fix: use proper key for React array map",
        "sim_diff": "diff --git a/src/components/TagGrid/TagGrid.js b/src/components/TagGrid/TagGrid.js @@ -52,9 +52,9 @@ export default class TagGrid extends Component {\n<Typography className={classes.title} variant=\"title\">{\"Tags\"}</Typography>\n<Grid container spacing={theme.spacing.unit}>\n{tags.map(({ node: tag }, index) => (\n- <Grid item>\n+ <Grid item key={tag.slug}>\n<Link route={`/tag/${tag.slug}`}>\n- <Chip className={classes.chip} key={index} label={tag.name} />\n+ <Chip className={classes.chip} label={tag.name} />\n</Link>\n</Grid>\n))}\n",
        "chatgpt_cot": "\"Add editableRows to TagColorsModalRaw, solve compilation issue, and improve user experience with drag and drop feature.\""
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -139,7 +139,7 @@ class CubeListNavbar extends Component {\n<NavLink href=\"#\" data-target=\"compare\" onClick={this.handleOpenCollapse}>Compare</NavLink>\n</NavItem>\n{!canEdit ? '' :\n- <NavItem className=\"d-none d-lg-block\">\n+ <NavItem className={cubeView === 'list' ? undefined : 'd-none d-lg-block'}>\n<NavLink href=\"#\" onClick={this.handleMassEdit}>\n{cubeView === 'list' ? 'Edit Selected' : 'Mass Edit'}\n</NavLink>\n",
        "org_msg": "Show Edit Selected button always in List View.",
        "sim_msg": "remove uneeded string style",
        "sim_diff": "diff --git a/src/components/NavigationDesktop/NavigationItemDesktop.js b/src/components/NavigationDesktop/NavigationItemDesktop.js @@ -120,7 +120,7 @@ class NavigationItemDesktop extends Component {\n<Grid item key={index}>\n<MenuList disablePadding>\n<MenuItem>\n- <Link onClick={this.onClose} href={`${this.linkPath(item)}`} linkItem={item}>\n+ <Link onClick={this.onClose} href={this.linkPath(item)} linkItem={item}>\n<ListItemText primary={item.navigationItem.data.content[0].value} />\n</Link>\n</MenuItem>\n",
        "chatgpt_cot": "\"Update CubeListNavbar component to conditionally show 'Edit Selected' or 'Mass Edit' based on cubeView and canEdit status.\""
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js +const serialize = require('serialize-javascript');\nconst express = require('express');\nconst router = express.Router();\n@@ -188,7 +189,7 @@ router.get('/dashboard', async (req, res) => {\nNODE_ENV === 'production'\n? await ReactDOMServer.renderToString(React.createElement(DashboardPage, reactProps))\n: undefined,\n- reactProps,\n+ reactProps: serialize(reactProps),\nloginCallback: '/',\n});\n} catch (err) {\n",
        "org_msg": "Fix reactProps on dashboard.",
        "sim_msg": "routes/index.js linting complete",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js var fs = require(\"fs\");\nvar path = require(\"path\");\nvar log = require(\"../log\").logger(\"routes\");\n-var restify = require(\"restify\");\n-var util = require(\"../util\");\n-var authentication = require(\"../authentication\");\nvar config = require(\"../config\");\nvar getStaticServeFunction = require(\"../static\");\n@@ -12,13 +9,13 @@ module.exports = function (server) {\nvar routeDir = __dirname;\nvar files = fs.readdirSync(routeDir);\nfiles.forEach(function (file) {\n- filePath = path.resolve(\"./\", routeDir, file);\n+ var filePath = path.resolve(\"./\", routeDir, file);\nif (\npath.extname(filePath) == \".js\" &&\npath.basename(filePath) != \"index.js\"\n) {\ntry {\n- routes = require(filePath);\n+ var routes = require(filePath);\nif (typeof routes == \"function\") {\nroutes(server);\nlog.debug(' Loaded routes from \"' + filePath + '\"');\n",
        "chatgpt_cot": "Serialize reactProps in /dashboard route to prevent XSS vulnerability. Fixes issue with rendering DashboardPage in production environment."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2448,7 +2448,7 @@ router.post(\nmax: 100,\n}),\nbody('name', 'Cube name may not use profanity.').custom((value) => !util.hasProfanity(value)),\n- body('urlAlias', 'Custom URL must contain only alphanumeric characters or underscores.').matches(/[A-Za-z0-9]*/),\n+ body('urlAlias', 'Custom URL must contain only alphanumeric characters or underscores.').matches(/^[A-Za-z0-9]*$/),\nbody('urlAlias', `Custom URL may not be longer than 100 characters.`).isLength({\nmax: 100,\n}),\n@@ -3492,7 +3492,7 @@ router.get(\nrouter.post(\n'/api/getversions',\nbody([], 'Body must be an array.').isArray(),\n- body('*', 'Each ID must be a valid UUID.').matches(/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/),\n+ body('*', 'Each ID must be a valid UUID.').matches(/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/),\njsonValidationErrors,\nutil.wrapAsyncApi(async (req, res) => {\nconst allDetails = req.body.map((cardID) => carddb.cardFromId(cardID));\n",
        "org_msg": "fixed regex validation",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Fix custom URL validation regex, and ID validation regex to ensure only alphanumeric characters and valid UUIDs are allowed."
    },
    {
        "org_diff": "diff --git a/src/utils/draftbots.js b/src/utils/draftbots.js @@ -194,7 +194,7 @@ export const getColor = (combination, picked) => {\nconst getCoordPairs = (pack, pick, initialState) => [\n[pack - 1, initialState[0].length],\n- [pick - 1, initialState[0][pack - 1].length],\n+ [pick - 1, initialState[0][Math.min(Math.max(pack - 1, 0), initialState[0].length - 1)].length],\n];\nexport const getRatingWeight = (pack, pick, initialState) => {\n",
        "org_msg": "Add clamp for pack number.",
        "sim_msg": "Use settings-layout on Drafts page",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -8,7 +8,6 @@ import { reload } from '../../auth/authActions';\nimport { getDraftPosts, getPendingDrafts, getIsReloading } from '../../reducers';\nimport Affix from '../../components/Utils/Affix';\nimport LeftSidebar from '../../app/Sidebar/LeftSidebar';\n-import RightSidebar from '../../app/Sidebar/RightSidebar';\nimport DraftRow from './DraftRow';\n@connect(\n@@ -44,17 +43,12 @@ class Drafts extends React.Component {\nreturn (\n<div className=\"shifted\">\n- <div className=\"feed-layout container\">\n+ <div className=\"settings-layout container\">\n<Affix className=\"leftContainer\" stickPosition={77}>\n<div className=\"left\">\n<LeftSidebar />\n</div>\n</Affix>\n- <Affix className=\"rightContainer\" stickPosition={77}>\n- <div className=\"right\">\n- <RightSidebar />\n- </div>\n- </Affix>\n<div className=\"center\">\n<h1>\n<FormattedMessage id=\"drafts\" defaultMessage=\"Drafts\" />\n",
        "chatgpt_cot": "\"Fix out of range error in getCoordPairs method by adding min and max functions to limit index within array boundaries\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -46,7 +46,7 @@ const generateMeta = require('../serverjs/meta.js');\nconst CARD_HEIGHT = 680;\nconst CARD_WIDTH = 488;\n-const CSV_HEADER = 'Name,CMC,Type,Color,Set,Collector Number,Status,Finish,Maybeboard,Image URL,Tags';\n+const CSV_HEADER = 'Name,CMC,Type,Color,Set,Collector Number,Status,Finish,Maybeboard,Image URL,Tags, Notes';\nconst router = express.Router();\n// Bring in models\n",
        "org_msg": "Add Notes field to CSV header",
        "sim_msg": "feat: add product route for a shop",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,6 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"product\", \"/product/:slug\", \"product\")\n+ .add(\"product\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Update CSV_HEADER in cube_routes.js to include Notes field for better data organization."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -79,7 +79,7 @@ test(\"cardsAreEquivalent returns false for two nonequivalent cards\", () => {\nexpect(result).toBe(false);\n});\n-test(\"intToLegality\", () => {\n+test(\"intToLegality returns the expected values\", () => {\nexpect(cubefn.intToLegality(0)).toBe(\"Vintage\");\nexpect(cubefn.intToLegality(1)).toBe(\"Legacy\");\nexpect(cubefn.intToLegality(2)).toBe(\"Modern\");\n@@ -87,10 +87,17 @@ test(\"intToLegality\", () => {\nexpect(cubefn.intToLegality(4)).toBe(undefined);\n});\n-test(\"legalityToInt\", () => {\n+test(\"legalityToInt returns the expected values\", () => {\nexpect(cubefn.legalityToInt(\"Vintage\")).toBe(0);\nexpect(cubefn.legalityToInt(\"Legacy\")).toBe(1);\nexpect(cubefn.legalityToInt(\"Modern\")).toBe(2);\nexpect(cubefn.legalityToInt(\"Standard\")).toBe(3);\nexpect(cubefn.legalityToInt(\"not a format\")).toBe(undefined);\n});\n+\n+test(\"generate_short_id\", () => {});\n+test(\"selectionContainsCard\", () => {});\n+test(\"setCubeType\", () => {});\n+test(\"sanitize\", () => {});\n+test(\"addAutocard\", () => {});\n+test(\"generatePack\", () => {});\n\\ No newline at end of file\n",
        "org_msg": "stub remaining cubefn tests",
        "sim_msg": "Catch warnings logged during registry test",
        "sim_diff": "diff --git a/tests/mocha/registry_test.js b/tests/mocha/registry_test.js goog.module('Blockly.test.registry');\n-const {sharedTestSetup, sharedTestTeardown} = goog.require('Blockly.test.helpers');\n-\n+const {assertWarnings, sharedTestSetup, sharedTestTeardown} = goog.require('Blockly.test.helpers');\nsuite('Registry', function() {\n@@ -99,11 +98,15 @@ suite('Registry', function() {\nsuite('Does not have', function() {\ntest('Type', function() {\n+ assertWarnings(() => {\nchai.assert.isNull(Blockly.registry.getClass('bad_type', 'test_name'));\n+ }, /Unable to find/);\n});\ntest('Name', function() {\n+ assertWarnings(() => {\nchai.assert.isNull(Blockly.registry.getClass('test', 'bad_name'));\n+ }, /Unable to find/);\n});\ntest('Throw if missing', function() {\n@@ -135,11 +138,16 @@ suite('Registry', function() {\nsuite('Does not have', function() {\ntest('Type', function() {\n+ assertWarnings(() => {\nchai.assert.isNull(Blockly.registry.getObject('bad_type', 'test_name'));\n+ }, /Unable to find/);\n});\ntest('Name', function() {\n+\n+ assertWarnings(() => {\nchai.assert.isNull(Blockly.registry.getObject('test', 'bad_name'));\n+ }, /Unable to find/);\n});\ntest('Throw if missing', function() {\n@@ -175,7 +183,9 @@ suite('Registry', function() {\n});\ntest('Does not have', function() {\n+ assertWarnings(() => {\nchai.assert.isNull(Blockly.registry.getAllItems('bad_type'));\n+ }, /Unable to find/);\n});\ntest('Throw if missing', function() {\n",
        "chatgpt_cot": "Add new test functions for cube functionality in cubefn.test.js. This includes functions for generating short IDs, checking card selection, setting cube types, sanitizing input, adding autocards, and generating packs."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -122,6 +122,14 @@ const ALL_CMCS = Array.from(Array(33).keys())\n.map((x) => (x / 2).toString())\n.concat(['1000000']);\n+const allDevotions = (cube, color) => {\n+ const counts = new Set();\n+ for (const card in cube) {\n+ counts.add(cardDevotion(card, color));\n+ }\n+ return [...counts].sort((a, b) => b - a);\n+};\n+\nfunction getLabelsRaw(cube, sort) {\nif (sort == 'Color Category') {\nreturn ['White', 'Blue', 'Black', 'Red', 'Green', 'Hybrid', 'Multicolored', 'Colorless', 'Lands'];\n@@ -205,16 +213,6 @@ function getLabelsRaw(cube, sort) {\n}\n});\nreturn artists.sort();\n- } else if (sort === 'Devotion to White') {\n- return Array.from(Array(9).keys()).map((d) => d.toString());\n- } else if (sort === 'Devotion to Blue') {\n- return Array.from(Array(9).keys()).map((d) => d.toString());\n- } else if (sort === 'Devotion to Black') {\n- return Array.from(Array(9).keys()).map((d) => d.toString());\n- } else if (sort === 'Devotion to Red') {\n- return Array.from(Array(9).keys()).map((d) => d.toString());\n- } else if (sort === 'Devotion to Green') {\n- return Array.from(Array(9).keys()).map((d) => d.toString());\n} else if (sort == 'Rarity') {\nreturn ['Common', 'Uncommon', 'Rare', 'Mythic', 'Special'];\n} else if (sort == 'Unsorted') {\n@@ -361,6 +359,15 @@ function getLabelsRaw(cube, sort) {\nlabels.push('No Price Available');\nreturn labels;\n} else if (sort === 'Devotion to White') {\n+ return allDevotions(cube, 'W');\n+ } else if (sort === 'Devotion to Blue') {\n+ return allDevotions(cube, 'U');\n+ } else if (sort === 'Devotion to Black') {\n+ return allDevotions(cube, 'B');\n+ } else if (sort === 'Devotion to Red') {\n+ return allDevotions(cube, 'R');\n+ } else if (sort === 'Devotion to Green') {\n+ return allDevotions(cube, 'G');\n} else if (sort == 'Unsorted') {\nreturn ['All'];\n} else if (sort == 'Elo') {\n",
        "org_msg": "Fix small error in devotion labels.",
        "sim_msg": "Apply user specified palette cateogies and remaining core ones",
        "sim_diff": "diff --git a/packages/node_modules/@node-red/editor-client/src/js/ui/palette.js b/packages/node_modules/@node-red/editor-client/src/js/ui/palette.js @@ -553,20 +553,26 @@ RED.palette = (function() {\nsidebarControls.stop(false,true);\nsidebarControls.hide();\n})\n-\n- var categoryList = coreCategories;\n+ var userCategories = [];\nif (RED.settings.paletteCategories) {\n- categoryList = RED.settings.paletteCategories;\n+ userCategories = RED.settings.paletteCategories;\n} else if (RED.settings.theme('palette.categories')) {\n- categoryList = RED.settings.theme('palette.categories');\n+ userCategories = RED.settings.theme('palette.categories');\n}\n- if (!Array.isArray(categoryList)) {\n- categoryList = coreCategories\n+ if (!Array.isArray(userCategories)) {\n+ userCategories = [];\n}\n- categoryList.forEach(function(category){\n+\n+ var addedCategories = {};\n+ userCategories.forEach(function(category){\n+ addedCategories[category] = true;\ncreateCategoryContainer(category, escapeCategory(category), \"palette.label.\"+escapeCategory(category));\n});\n-\n+ coreCategories.forEach(function(category){\n+ if (!addedCategories[category]) {\n+ createCategoryContainer(category, escapeCategory(category), \"palette.label.\"+escapeCategory(category));\n+ }\n+ });\nvar paletteFooterButtons = $('<span class=\"button-group\"></span>').appendTo(\"#red-ui-palette .red-ui-component-footer\");\nvar paletteCollapseAll = $('<button type=\"button\" class=\"red-ui-footer-button\"><i class=\"fa fa-angle-double-up\"></i></button>').appendTo(paletteFooterButtons);\n",
        "chatgpt_cot": "\"Add allDevotions method to solve compilation issue in Sort.js\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/util.js b/__tests__/serverjs/util.js @@ -153,3 +153,36 @@ test(\"CSVtoArray returns an array of the correct length when commas are included\nconst result = util.CSVtoArray(testCSV);\nexpect(result.length).toBe(3);\n});\n+\n+test(\"generate_edit_token does not generate the same token on sequential calls\", () => {\n+ const firstResult = util.generate_edit_token();\n+ const secondResult = util.generate_edit_token();\n+ expect(firstResult).not.toBe(secondResult);\n+});\n+\n+test(\"to_base_36 returns the base36 representation of its input\", () => {\n+ const testInput = 69;\n+ const expected = testInput.toString(36);\n+ const result = util.to_base_36(testInput);\n+ expect(result).toBe(expected);\n+});\n+\n+test(\"from_base_36 returns the base10 int representation of its input\", () => {\n+ const testInt = 69;\n+ const testInput = testInt.toString(36);\n+ const expected = parseInt(testInput, 36);\n+ const result = util.from_base_36(testInput);\n+ expect(result).toBe(expected);\n+});\n+\n+test(\"has_profanity returns true for strings containing profanity\", () => {\n+ const testString = \"the quick brown fox jumped over the lazy ass dog\";\n+ const result = util.has_profanity(testString);\n+ expect(result).toBe(true);\n+});\n+\n+test(\"has_profanity returns false for strings not containing profanity\", () => {\n+ const testString = \"the quick brown fox jumped over the lazy dog\";\n+ const result = util.has_profanity(testString);\n+ expect(result).toBe(false);\n+});\n\\ No newline at end of file\n",
        "org_msg": "add tests for smaller util functions",
        "sim_msg": "add test for cr lf in input and enhance odd quotes tests",
        "sim_diff": "diff --git a/test/nodes/core/parsers/70-CSV_spec.js b/test/nodes/core/parsers/70-CSV_spec.js @@ -232,7 +232,7 @@ describe('CSV node', function() {\n});\n});\n- it('should recover from an odd number of quotes in the input', function(done) {\n+ it('should handle cr and lf in the input', function(done) {\nvar flow = [ { id:\"n1\", type:\"csv\", temp:\"a,b,c,d,e,f,g\", wires:[[\"n2\"]] },\n{id:\"n2\", type:\"helper\"} ];\nhelper.load(csvNode, flow, function() {\n@@ -240,13 +240,63 @@ describe('CSV node', function() {\nvar n2 = helper.getNode(\"n2\");\nn2.on(\"input\", function(msg) {\n//console.log(msg);\n- msg.should.have.property('payload', { a: \"with,an\", b: \"odd,number\", c: \"ofquotes\" });\n- //msg.should.have.property('payload', { a: 1, b: -2, c: '+3', d: 4, e: -5, f: 'ab\"cd', g: 'with,a,comma' });\n+ msg.should.have.property('payload', { a: \"with a\\nnew line\", b: \"and a\\rcarriage return\", c: \"and why\\r\\nnot both\"});\n+ check_parts(msg, 0, 1);\n+ done();\n+ });\n+ var testString = '\"with a'+String.fromCharCode(10)+'new line\",\"and a'+String.fromCharCode(13)+'carriage return\",\"and why\\r\\nnot both\"'+String.fromCharCode(10);\n+ n1.emit(\"input\", {payload:testString});\n+ });\n+ });\n+\n+ it('should recover from an odd number of quotes in the input', function(done) {\n+ var flow = [ { id:\"n1\", type:\"csv\", temp:\"a,b,c,d,e,f,g\", wires:[[\"n2\"]] },\n+ {id:\"n2\", type:\"helper\"} ];\n+ helper.load(csvNode, flow, function() {\n+ var n1 = helper.getNode(\"n1\");\n+ var n2 = helper.getNode(\"n2\");\n+ var c = 0;\n+ n2.on(\"input\", function(msg) {\n+ if (c == 0) {\n+ c = 1;\n+ msg.should.have.property('payload', { a: \"with,an\", b: \"odd,number\", c: \"ofquotes\\n\" });\n+ check_parts(msg, 0, 1);\n+ }\n+ else {\n+ msg.should.have.property('payload', { a: \"this is\", b: \"a normal\", c: \"line\" });\ncheck_parts(msg, 0, 1);\ndone();\n+ }\n});\nvar testString = '\"with,a\"n,odd\",\"num\"ber\",\"of\"qu\"ot\"es\"'+String.fromCharCode(10);\nn1.emit(\"input\", {payload:testString});\n+ n1.emit(\"input\", {payload:'\"this is\",\"a normal\",\"line\"'});\n+ });\n+ });\n+\n+ it('should recover from an odd number of quotes in the input (2)', function(done) {\n+ var flow = [ { id:\"n1\", type:\"csv\", temp:\"a,b,c,d,e,f,g\", wires:[[\"n2\"]] },\n+ {id:\"n2\", type:\"helper\"} ];\n+ helper.load(csvNode, flow, function() {\n+ var n1 = helper.getNode(\"n1\");\n+ var n2 = helper.getNode(\"n2\");\n+ var c = 0;\n+ n2.on(\"input\", function(msg) {\n+ //console.log(msg)\n+ if (c == 0) {\n+ c = 1;\n+ msg.should.have.property('payload', { a: \"with,an\", b: \"odd,number\", c: \"ofquotes\\nthis is,a normal,line\" });\n+ check_parts(msg, 0, 1);\n+ }\n+ else {\n+ msg.should.have.property('payload', { a: \"this is\", b: \"another\", c: \"line\" });\n+ check_parts(msg, 0, 1);\n+ done();\n+ }\n+ });\n+ var testString = '\"with,a\"n,odd\",\"num\"ber\",\"of\"qu\"ot\"es\"'+String.fromCharCode(10)+'\"this is\",\"a normal\",\"line\"'+String.fromCharCode(10);\n+ n1.emit(\"input\", {payload:testString});\n+ n1.emit(\"input\", {payload:'\"this is\",\"another\",\"line\"'});\n});\n});\n",
        "chatgpt_cot": "Add unit tests for util.js functions including generate_edit_token, to_base_36, from_base_36, and has_profanity to ensure correct functionality."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeDeckPage.js b/src/pages/CubeDeckPage.js @@ -109,15 +109,16 @@ const CubeDeckPage = ({ cube, deck, canEdit, userid, draft, defaultSeat, default\n<NavLink href={`/cube/deckbuilder/${deck._id}`}>Edit</NavLink>\n</NavItem>\n)}\n- <NavItem>\n- <NavLink href={`/cube/redraft/${deck._id}`}>Redraft</NavLink>\n- </NavItem>\n- <NavItem>\n- <NavLink href={`/cube/redraftbots/${deck._id}`}>Redraft Bots Only</NavLink>\n- </NavItem>\n- <NavItem className=\"mr-auto\">\n- <NavLink href={`/cube/rebuild/${deck._id}/${seatIndex}`}>Clone and Rebuild</NavLink>\n- </NavItem>\n+ <UncontrolledDropdown nav inNavbar>\n+ <DropdownToggle nav caret>\n+ Rebuild/Redraft\n+ </DropdownToggle>\n+ <DropdownMenu right>\n+ <DropdownItem href={`/cube/redraft/${deck._id}`}>Redraft</DropdownItem>\n+ <DropdownItem href={`/cube/redraftbots/${deck._id}`}>Have Bots Redraft</DropdownItem>\n+ <DropdownItem href={`/cube/rebuild/${deck._id}/${seatIndex}`}>Clone and Rebuild</DropdownItem>\n+ </DropdownMenu>\n+ </UncontrolledDropdown>\n<CustomImageToggler />\n<UncontrolledDropdown nav inNavbar>\n<DropdownToggle nav caret>\n",
        "org_msg": "Move redraft/rebuild into menu.",
        "sim_msg": "Vertical menu example in Gallery",
        "sim_diff": "diff --git a/gallery/routes/general/menu/states.tsx b/gallery/routes/general/menu/states.tsx -import {cx, Section, FlexRow, Menu, Submenu, TextField, Checkbox, DateField, MenuItem} from 'cx/widgets';\n+import {cx, Section, FlexRow, Menu, Submenu, TextField, Checkbox, DateField, MenuItem, Calendar} from 'cx/widgets';\nimport {bind, expr} from 'cx/ui';\nexport default <cx>\n- <FlexRow wrap spacing=\"large\" target=\"desktop\">\n+ <FlexRow wrap spacing=\"large\" target=\"tablet\" align=\"start\">\n+\n+ <Section mod=\"well\" title=\"Vertical\" hLevel={4}>\n+ <Menu>\n+ <Submenu>\n+ File\n+ <Menu putInto=\"dropdown\">\n+ <a href=\"#\">Link</a>\n+ <hr/>\n+ <TextField value={bind(\"text\" )} mod=\"menu\"/>\n+ <Checkbox value={bind(\"checked\")} mod=\"menu\">Checkbox</Checkbox>\n+ <Submenu arrow>\n+ Submenu 1\n+ <Menu putInto=\"dropdown\">\n+ <a href=\"#\">Sub-Item 1</a>\n+ <a href=\"#\">Sub-Item 2</a>\n+ </Menu>\n+ </Submenu>\n+ <Submenu arrow>\n+ Submenu 2\n+ <Menu putInto=\"dropdown\">\n+ <a href=\"#\">Item 1</a>\n+ <a href=\"#\">Item 2</a>\n+ </Menu>\n+ </Submenu>\n+ <DateField value={bind(\"date\")} mod=\"menu\" />\n+ <MenuItem class=\"test\" style=\"color:red;\" autoClose>\n+ <a href=\"#\">Item Level CSS</a>\n+ </MenuItem>\n+ </Menu>\n+ </Submenu>\n+ <Submenu>\n+ Edit\n+ <Menu putInto=\"dropdown\">\n+ <a href=\"#\">Item 1</a>\n+ <a href=\"#\">Item 2</a>\n+ <a href=\"#\">Item 3</a>\n+ <a href=\"#\">Item 4</a>\n+ <a href=\"#\">Item 5</a>\n+ </Menu>\n+ </Submenu>\n+ <Submenu>\n+ View\n+ <Menu putInto=\"dropdown\">\n+ <a href=\"#\">Item 1</a>\n+ <a href=\"#\">Item 2</a>\n+ <a href=\"#\">Item 3</a>\n+ <a href=\"#\">Item 4</a>\n+ <a href=\"#\">Item 5</a>\n+ </Menu>\n+ </Submenu>\n+ </Menu>\n+ </Section>\n+\n<Section mod=\"well\" title=\"Horizontal\" hLevel={4}>\n<Menu horizontal>\n<Submenu>\n@@ -74,6 +127,12 @@ export default <cx>\n</Submenu>\n</Menu>\n</Submenu>\n+ <Submenu arrow>\n+ Calendar\n+ <Calendar putInto=\"dropdown\" value={bind(\"date\")} />\n+\n+\n+ </Submenu>\n</Menu>\n</Section>\n</FlexRow>\n",
        "chatgpt_cot": "Refactor deck options to dropdown menu for better user experience in CubeDeckPage."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -24,7 +24,6 @@ const PAGE_SIZE = 96;\nasync function matchingCards(filter) {\nlet cards = carddb.allCards().filter((card) => !card.digital && !card.isToken);\n- if (filter) {\n// In the first pass, cards don't have rating or picks, and so match all those filters.\n// In the second pass, we add that information.\nif (filterUses(filter, 'rating') || filterUses(filter, 'picks') || filterUses(filter, 'cubes')) {\n@@ -44,7 +43,6 @@ async function matchingCards(filter) {\n};\n});\n}\n- }\nreturn filterCardsDetails(cards, filter);\n}\n",
        "org_msg": "removed unnecessary filter check",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "\"Remove unnecessary if statement in matchingCards function to improve code readability and efficiency.\""
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -58,6 +58,13 @@ function removeAdjacentDuplicates(arr) {\nreturn arr.filter((x, i) => i === 0 || x !== arr[i - 1]);\n}\n+function defaultSort(x, y) {\n+ if (!/^\\d+$/.test(x) || !/^\\d+$/.test(y)) {\n+ return x < y ? -1 : 1;\n+ }\n+ return parseInt(x, 10) < parseInt(y, 10) ? -1 : 1;\n+}\n+\nexport function GetColorIdentity(colors) {\nif (colors.length === 0) {\nreturn 'Colorless';\n@@ -255,7 +262,7 @@ function getLabelsRaw(cube, sort) {\nreturn tags.sort();\n}\nif (sort === 'Date Added') {\n- const dates = cube.map((card) => card.addedTmsp).sort();\n+ const dates = cube.map((card) => card.addedTmsp).sort((a, b) => a - b);\nconst days = dates.map((date) => ISODateToYYYYMMDD(date));\nreturn removeAdjacentDuplicates(days);\n}\n@@ -368,24 +375,7 @@ function getLabelsRaw(cube, sort) {\n}\n}\n}\n- return items.sort((x, y) => {\n- if (!/^\\d+$/.test(x) || !/^\\d+$/.test(y)) {\n- if (x > y) {\n- return 1;\n- }\n- if (y > x) {\n- return -1;\n- }\n- return 1;\n- }\n- if (parseInt(x, 10) > parseInt(y, 10)) {\n- return 1;\n- }\n- if (parseInt(y, 10) > parseInt(x, 10)) {\n- return -1;\n- }\n- return 1;\n- });\n+ return items.sort(defaultSort);\n}\nif (sort === 'Toughness') {\nconst items = [];\n@@ -396,24 +386,7 @@ function getLabelsRaw(cube, sort) {\n}\n}\n}\n- return items.sort((x, y) => {\n- if (!/^\\d+$/.test(x) || !/^\\d+$/.test(y)) {\n- if (x > y) {\n- return 1;\n- }\n- if (y > x) {\n- return -1;\n- }\n- return 1;\n- }\n- if (parseInt(x, 10) > parseInt(y, 10)) {\n- return 1;\n- }\n- if (parseInt(y, 10) > parseInt(x, 10)) {\n- return -1;\n- }\n- return 1;\n- });\n+ return items.sort(defaultSort);\n}\nif (sort === 'Loyalty') {\nconst items = [];\n@@ -424,24 +397,7 @@ function getLabelsRaw(cube, sort) {\n}\n}\n}\n- return items.sort((x, y) => {\n- if (!/^\\d+$/.test(x) || !/^\\d+$/.test(y)) {\n- if (x > y) {\n- return 1;\n- }\n- if (y > x) {\n- return -1;\n- }\n- return 1;\n- }\n- if (parseInt(x, 10) > parseInt(y, 10)) {\n- return 1;\n- }\n- if (parseInt(y, 10) > parseInt(x, 10)) {\n- return -1;\n- }\n- return 1;\n- });\n+ return items.sort(defaultSort);\n}\nif (sort === 'Manacost Type') {\nreturn ['Gold', 'Hybrid', 'Phyrexian'];\n@@ -500,15 +456,7 @@ function getLabelsRaw(cube, sort) {\n}\n}\n}\n- elos = elos.sort((x, y) => {\n- if (x - y > 0) {\n- return 1;\n- }\n- if (y - x > 0) {\n- return -1;\n- }\n- return 1;\n- });\n+ elos = elos.sort((x, y) => (x < y ? -1 : 1));\nconst buckets = elos.map(getEloBucket);\nconst res = [];\nfor (const bucket of buckets) {\n",
        "org_msg": "fixed sort by date, cleaned up sort function",
        "sim_msg": "[INTERNAL] sap.m.table.columnmenu.QuickSort: Fix QUnit test",
        "sim_diff": "diff --git a/src/sap.m/test/sap/m/qunit/table/columnmenu/QuickSort.qunit.js b/src/sap.m/test/sap/m/qunit/table/columnmenu/QuickSort.qunit.js @@ -50,9 +50,9 @@ sap.ui.define([\nQUnit.test(\"Label\", function(assert) {\nvar oBundle = oCore.getLibraryResourceBundle(\"sap.m\");\n- var sLabel = oBundle.getText(\"table.COLUMNMENU_QUICK_SORT\");\n+ var sLabel = oBundle.getText(\"table.COLUMNMENU_QUICK_SORT\", \"A\");\nvar aItems = this.oQuickSort.getItems();\n- assert.equal(aItems[0]._getLabel(aItems.length), sLabel, \"QuickSort label is correct.\");\n+ assert.equal(aItems[0]._getLabel(aItems.length), sLabel, \"QuickSort label of single item is correct.\");\nvar oItem = new QuickSortItem({\nkey: \"propertyB\",\n@@ -62,9 +62,9 @@ sap.ui.define([\nthis.oQuickSort.addItem(oItem);\naItems = this.oQuickSort.getItems();\nsLabel = oBundle.getText(\"table.COLUMNMENU_QUICK_SORT\", \"A\");\n- assert.equal(aItems[0]._getLabel(aItems.length), sLabel, \"QuickSort label has been updated.\");\n+ assert.equal(aItems[0]._getLabel(aItems.length), sLabel, \"QuickSort label of first of two items is correct.\");\nsLabel = oBundle.getText(\"table.COLUMNMENU_QUICK_SORT\", \"B\");\n- assert.equal(aItems[1]._getLabel(aItems.length), sLabel, \"QuickSort label is correct.\");\n+ assert.equal(aItems[1]._getLabel(aItems.length), sLabel, \"QuickSort label of second of two items correct.\");\n});\nQUnit.test(\"Content\", function(assert) {\n",
        "chatgpt_cot": "Add defaultSort to handle sorting of non-numeric values, improving code readability and maintainability and solving compilation issues with the Sort.js file."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/util.js b/__tests__/serverjs/util.js @@ -67,3 +67,29 @@ test(\"binaryInsert does not fail when input array is unsorted\", () => {\nutil.binaryInsert(testValue, testArray);\nexpect(testArray.length).toBe(initialLength + 1);\n});\n+\n+test(\"addCardToCube adds a well-formed object\", () => {\n+ var testCube = {\n+ \"cards\": []\n+ };\n+ var initialLength = testCube.cards.length;\n+ const testCard = {\n+ color_identity: \"W\",\n+ cmc: 1,\n+ _id: \"abcdef\",\n+ type: \"creature\"\n+ };\n+ const addedTmsp = new Date();\n+ util.addCardToCube(testCube, testCard, undefined, addedTmsp);\n+ expect(testCube.cards.length).toBe(initialLength + 1);\n+ const result = testCube.cards[0];\n+ expect(result.tags.length).toBe(1);\n+ expect(result.tags[0]).toBe(\"New\");\n+ expect(result.status).toBe(\"Not Owned\");\n+ expect(result.colors).toBe(testCard.color_identity);\n+ expect(result.cmc).toBe(testCard.cmc);\n+ expect(result.cardID).toBe(testCard._id);\n+ expect(result.type_line).toBe(testCard.type);\n+ expect(result.addedTmsp).toBe(addedTmsp);\n+ expect(result.imgUrl).toBe(undefined);\n+});\n\\ No newline at end of file\n",
        "org_msg": "add test for addCardToCube fields",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add test for adding a well-formed object to a cube in util.js. Test ensures correct object properties are set upon addition."
    },
    {
        "org_diff": "diff --git a/serverjs/util.js b/serverjs/util.js @@ -93,7 +93,7 @@ function binaryInsert(value, array, startVal, endVal) {\nfunction addCardToCube(cube, card_details, tags) {\ncube.cards.push({\n- tags: Array.isArray(tags) ? tags : ['New'],\n+ tags: Array.isArray(tags) ? tags : [],\nstatus: 'Not Owned',\ncolors: card_details.color_identity,\ncmc: card_details.cmc,\n",
        "org_msg": "Remove New on added cards.",
        "sim_msg": "reduce ambiguity",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -27,18 +27,18 @@ class Deck {\n//conflict\nthis.eachRepeatedCard(this.data.conflictDrawCards, cardData => {\nif(['conflict'].includes(cardData.deck)) {\n- var drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'conflict deck';\n- result.conflictDrawCards.push(drawCard);\n+ var conflictCard = this.createCard(DrawCard, player, cardData);\n+ conflictCard.location = 'conflict deck';\n+ result.conflictDrawCards.push(conflictCard);\n}\n});\n//dynasty\nthis.eachRepeatedCard(this.data.dynastyDrawCards, cardData => {\nif(['dynasty'].includes(cardData.deck)) {\n- var drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'dynasty deck';\n- result.dynastyDrawCards.push(drawCard);\n+ var dynastyCard = this.createCard(DrawCard, player, cardData);\n+ dynastyCard.location = 'dynasty deck';\n+ result.dynastyDrawCards.push(dynastyCard);\n}\n});\n",
        "chatgpt_cot": "\"Modify addCardToCube to default to an empty array for tags when not provided.\""
    },
    {
        "org_diff": "diff --git a/views/cube/cube_list.pug b/views/cube/cube_list.pug @@ -128,7 +128,7 @@ block cube_toolbar\n.input-group.mb-3\n.input-group-prepend\nlabel.input-group-text(for='filterInput') Search\n- input.form-control#filterInput(type='text', placeholder='Use Scryfall Search Syntax')\n+ input.form-control#filterInput(type='text', placeholder='Type Filters Here or Use Advanced Search below')\n.input-group-append\nbutton#filterButton.btn.btn-success(type='button') Filter\nh5 Filters\n",
        "org_msg": "Remove Brand names from help text",
        "sim_msg": "Prevents clipping of filter tooltip\nAppends filter tooltip to body",
        "sim_diff": "diff --git a/src/filters/filter-fields.html b/src/filters/filter-fields.html <div class=\"filter-pf filter-fields\">\n<div class=\"input-group form-group\">\n<div uib-dropdown class=\"input-group-btn\">\n- <button uib-dropdown-toggle type=\"button\" class=\"btn btn-default filter-fields\" uib-tooltip=\"Filter by\" tooltip-placement=\"top\">\n+ <button uib-dropdown-toggle type=\"button\" class=\"btn btn-default filter-fields\"\n+ uib-tooltip=\"Filter by\" tooltip-placement=\"top\" tooltip-append-to-body=\"true\">\n{{currentField.title}}\n<span class=\"caret\"></span>\n</button>\n",
        "chatgpt_cot": "Update placeholder text in cube_list.pug for better user understanding and experience."
    },
    {
        "org_diff": "diff --git a/src/contexts/CubeContext.js b/src/contexts/CubeContext.js @@ -5,7 +5,6 @@ const CubeContext = React.createContext({\ncube: {},\ncanEdit: false,\ncubeID: null,\n- cubeAlias: null,\nhasCustomImages: false,\nupdateCubeCard: () => {},\nupdateCubeCards: () => {},\n@@ -37,11 +36,13 @@ export const CubeContextProvider = ({ initialCube, canEdit, ...props }) => {\n});\n}, []);\n+ const cubeID = cube._id;\n+\nconst hasCustomImages = cube.cards.some(\n(card) => (card.imgUrl && card.imgUrl.length > 0) || (card.imgBackUrl && card.imgBackUrl.length > 0),\n);\n- const value = { cube, canEdit, hasCustomImages, setCube, updateCubeCard, updateCubeCards };\n+ const value = { cube, canEdit, cubeID, hasCustomImages, setCube, updateCubeCard, updateCubeCards };\nreturn <CubeContext.Provider value={value} {...props} />;\n};\n",
        "org_msg": "Re-add cubeID",
        "sim_msg": "Make implementationDetails a required context",
        "sim_diff": "diff --git a/src/components/Context/index.js b/src/components/Context/index.js @@ -36,10 +36,9 @@ const createContext = ({ config, logger }) => {\nweb,\ndevice,\nenvironment,\n- placeContext,\n- implementationDetails\n+ placeContext\n},\n- [timestamp]\n+ [timestamp, implementationDetails]\n);\n};\n@@ -47,13 +46,7 @@ createContext.namespace = \"Context\";\ncreateContext.abbreviation = \"CO\";\ncreateContext.configValidators = {\ncontext: {\n- defaultValue: [\n- \"web\",\n- \"device\",\n- \"environment\",\n- \"placeContext\",\n- \"implementationDetails\"\n- ]\n+ defaultValue: [\"web\", \"device\", \"environment\", \"placeContext\"]\n}\n};\n",
        "chatgpt_cot": "\"Add cubeID to CubeContext and remove cubeAlias, fixing context value inconsistency and improving cube management functionality.\""
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -31,7 +31,11 @@ cube.forEach(function(card, index) {\n$('#compareButton').click(function(e) {\nconst id_a = $('#cubeID').val();\n- const id_b = $('#compareInput').val();\n+ let id_b = $('#compareInput').val();\n+ if (id_b.includes('/')) {\n+ let parts = id_b.split('/');\n+ id_b = parts[parts.length - 1];\n+ }\nif (id_b) window.location.href = '/cube/compare/' + id_a + '/to/' + id_b;\n});\n",
        "org_msg": "allow full cube url to go into compare input",
        "sim_msg": "Bugfix initial height offset",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -2170,13 +2170,13 @@ planet.addEventListener('load', async e => {\nchunkMesh.updateMatrixWorld();\n- const p = new THREE.Vector3().applyMatrix4(new THREE.Matrix4().getInverse(chunkMesh.matrixWorld));\n- const ncx = Math.floor(p.x/SUBPARCEL_SIZE);\n- const ncy = Math.floor(p.y/SUBPARCEL_SIZE);\n- const ncz = Math.floor(p.z/SUBPARCEL_SIZE);\n+ const p = new THREE.Vector3(0, 0, 0).applyMatrix4(new THREE.Matrix4().getInverse(chunkMesh.matrixWorld));\n+ const ncx = Math.floor(p.x/SUBPARCEL_SIZE)*SUBPARCEL_SIZE;\n+ const ncy = Math.floor(p.y/SUBPARCEL_SIZE)*SUBPARCEL_SIZE;\n+ const ncz = Math.floor(p.z/SUBPARCEL_SIZE)*SUBPARCEL_SIZE;\nconst height = await chunkWorker.requestGetHeight(chunkMesh.seedNum, ncx, ncy + SUBPARCEL_SIZE, ncz, baseHeight, freqs, octaves, scales, uvs, amps, PARCEL_SIZE);\n- worldContainer.position.y = PARCEL_SIZE/2 - height;\n+ worldContainer.position.y = PARCEL_SIZE/2 - height - _getAvatarHeight();\n/* {\nlet geometry = new CapsuleGeometry(0.5, 1, 16)\n",
        "chatgpt_cot": "Refactor compareButton click event in editcube.js to handle cube IDs with slashes. Fixes issue with retrieving correct ID for comparison."
    },
    {
        "org_diff": "diff --git a/views/landing.pug b/views/landing.pug @@ -5,29 +5,29 @@ block content\n.card.mt-3.p-3(style=\"background: #F8FCF4\")\nimg.centered-max400.card-img.mb-4(src='/content/banner-light.png' alt='...')\nh5.mb-4.text-center Build, playtest, and share your Magic the Gathering cube!\n- .row.centered-max800\n+ .row.centered-max800.py-2\n.col-lg-3.col-md-3.col-sm-6.col-xs-12\n- .card.my-1\n- .card-body\n+ .card.my-1(style=\"background: #FDFFFC\")\n+ .card-body.text-center\n| Completely free to sign up and use!\n.col-lg-3.col-md-3.col-sm-6.col-xs-12\n- .card.my-1\n- .card-body\n+ .card.my-1(style=\"background: #FDFFFC\")\n+ .card-body.text-center\n| Powered by Scryfall, cards available as they are spoiled.\n.col-lg-3.col-md-3.col-sm-6.col-xs-12\n- .card.my-1\n- .card-body\n+ .card.my-1(style=\"background: #FDFFFC\")\n+ .card-body.text-center\n| Easy to upload, import, or paste your list.\n.col-lg-3.col-md-3.col-sm-6.col-xs-12\n- .card.my-1\n- .card-body\n+ .card.my-1(style=\"background: #FDFFFC\")\n+ .card-body.text-center\n| Open source, updates released every two weeks!\np.mt-3.text-center First time here?\na.w-100.centered-max400.btn.btn-outline-success(href='/user/register', role='button') Create Account\n- a.w-100.mt-1.centered-max400.btn.btn-outline-success(href='/explore', role='button') Explore Cubes\n+ a.w-100.mt-2.centered-max400.btn.btn-outline-success(href='/explore', role='button') Explore Cubes\np.mt-3.text-center New to cubing?\n- a.w-100.mt-1.centered-max400.btn.btn-outline-success(href='https://www.youtube.com/watch?v=TiwPcD1ZjEY', role='button') What is MTG Cube?\n- a.w-100.mt-1.centered-max400.btn.btn-outline-success(href='https://magic.wizards.com/en/articles/archive/how-build/building-your-first-cube-2016-05-19', role='button') Building Your First Cube\n+ a.w-100.centered-max400.btn.btn-outline-success(href='https://www.youtube.com/watch?v=TiwPcD1ZjEY', role='button') What is MTG Cube?\n+ a.w-100.mt-2.centered-max400.btn.btn-outline-success(href='https://magic.wizards.com/en/articles/archive/how-build/building-your-first-cube-2016-05-19', role='button') Building Your First Cube\nhr.my-4\np.text-center View the project on\na(href=\"https://github.com/dekkerglen/CubeCobra\") Github.\n",
        "org_msg": "Tweaked landing",
        "sim_msg": "[INTERNAL] sap.f.Card: No layout demo is updated and working with latest header",
        "sim_diff": "diff --git a/src/sap.f/test/sap/f/cardsdemo/view/NoLayout.view.xml b/src/sap.f/test/sap/f/cardsdemo/view/NoLayout.view.xml </Panel>\n<Panel>\n- <w:Card id=\"card14\" manifest=\"{manifests>/noLayout/card14}\" width=\"300px\" height=\"200px\"/>\n- <w:Card id=\"somedfault\" manifest=\"{manifests>/noLayout/card1}\" width=\"80px\" height=\"80px\"/>\n- <w:Card id=\"default1x1\" manifest=\"{manifests>/noLayout/card2}\" width=\"80px\" height=\"80px\"/>\n- <w:Card id=\"default2x1\" manifest=\"{manifests>/noLayout/card3}\" width=\"300px\" height=\"200px\"/>\n- <w:Card id=\"default4x1\" manifest=\"{manifests>/noLayout/card4}\" width=\"300px\" height=\"200px\"/>\n- <w:Card id=\"listCount\" manifest=\"{manifests>/noLayout/card13}\" width=\"400px\" height=\"400px\"/>\n+ <w:Card id=\"somedfault\" manifest=\"{manifests>/noLayout/card1}\" width=\"300px\"/>\n+ <w:Card id=\"default1x1\" manifest=\"{manifests>/noLayout/card2}\" width=\"300px\"/>\n+ <w:Card id=\"default2x1\" manifest=\"{manifests>/noLayout/card3}\" width=\"300px\"/>\n+ <w:Card id=\"stackedColumn\" manifest=\"{manifests>/noLayout/stackedColumn}\" height=\"500px\" width=\"700px\"/>\n+ <w:Card id=\"default4x1\" manifest=\"{manifests>/noLayout/card4}\" width=\"300px\" />\n<w:Card id=\"default2x2\" manifest=\"{manifests>/noLayout/card5}\" width=\"300px\" height=\"200px\"/>\n- <w:Card id=\"default4x2\" manifest=\"{manifests>/noLayout/card6}\" width=\"320px\" height=\"160px\"/>\n- <w:Card id=\"default4x4\" manifest=\"{manifests>/noLayout/card7}\" width=\"320px\" height=\"320px\"/>\n- <w:Card id=\"default4x4Image\" manifest=\"{manifests>/noLayout/card8}\" width=\"320px\" height=\"320px\"/>\n- <w:Card id=\"default6x4\" manifest=\"{manifests>/noLayout/card9}\" width=\"480px\" height=\"320px\"/>\n- <w:Card id=\"default6x4Busy\" manifest=\"{manifests>/noLayout/card10}\" width=\"480px\" height=\"320px\"/>\n- <w:Card id=\"default2x2Image\" manifest=\"{manifests>/noLayout/card11}\" width=\"160px\" height=\"160px\"/>\n- <w:Card id=\"card6x6withcomponent\" manifest=\"{manifests>/noLayout/card12}\" width=\"480px\" height=\"480px\"/>\n- <w:Card id=\"list\" manifest=\"{manifests>/noLayout/listContent}\" width=\"400px\" height=\"400px\"/>\n- <w:Card id=\"listcard2\" manifest=\"{manifests>/noLayout/listcard2}\" width=\"400px\" height=\"auto\"/>\n+ <w:Card id=\"line\" manifest=\"{manifests>/noLayout/line}\" height=\"500px\" width=\"700px\"/>\n+ <w:Card id=\"default4x2\" manifest=\"{manifests>/noLayout/card6}\" width=\"320px\"/>\n+ <w:Card id=\"default4x4\" manifest=\"{manifests>/noLayout/card7}\" width=\"320px\"/>\n+ <w:Card id=\"stackedBar\" manifest=\"{manifests>/noLayout/stackedBar}\" height=\"500px\" width=\"700px\"/>\n+ <w:Card id=\"donut\" manifest=\"{manifests>/noLayout/donut}\" height=\"500px\" width=\"700px\"/>\n</Panel>\n</content>\n</Page>\n",
        "chatgpt_cot": "\"Update landing page layout for better user experience and readability, adjust button positioning and alignment, and update external links for new user-friendly interface.\""
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -131,10 +131,6 @@ class FilterCollapse extends Component {\nconst tokens = [];\nfor (const name of allFields) {\nif (this.state[name]) {\n- if (name == \"status\")\n- {\n- this.state[name] = \"\\\"\" + this.state[name] + \"\\\"\";\n- }\nconst op = numFields.includes(name) ? (this.state[name + 'Op'] || '=') : ':';\ntokens.push(name + op + this.state[name]);\n}\n",
        "org_msg": "Remove state logic",
        "sim_msg": "Fix categories filter button width",
        "sim_diff": "diff --git a/src/components/FilterHeaderCategories.js b/src/components/FilterHeaderCategories.js @@ -67,8 +67,7 @@ const FilterHeaderCategories = ({ selectedCategories, onFilterPress }: Props) =>\nconst styles = StyleSheet.create({\ncontentInterest: {\nalignItems: \"center\",\n- flexDirection: \"row\",\n- justifyContent: \"space-between\"\n+ flexDirection: \"row\"\n},\nfilterTitle: {\ncolor: filterShowMeTextColor,\n@@ -93,7 +92,7 @@ const styles = StyleSheet.create({\ntop: 0\n},\ninterestButton: {\n- flex: 1,\n+ width: 145,\nheight: 40,\nbackgroundColor: interestButtonBgColor,\nborderRadius: 4,\n",
        "chatgpt_cot": "\"Remove unnecessary code block in FilterCollapse.js\""
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"lint\": \"beautify-lint *.js {config,models,routes,serverjs,views,public/js}/**/*.js\",\n\"build\": \"node_modules/.bin/webpack --mode production --config webpack.prod.js\",\n\"start\": \"nodemon --ignore src --ignore public & node_modules/.bin/webpack-dev-server --config webpack.dev.js\",\n- \"test\": \"jest\"\n+ \"test\": \"jest --silent\"\n},\n\"author\": \"Gwen Dekker\",\n\"license\": \"ISC\",\n",
        "org_msg": "run tests without printing console output",
        "sim_msg": "remove `pretty` script from package.json",
        "sim_diff": "diff --git a/package.json b/package.json \"code-lint\": \"eslint setup lib bin hot buildin \\\"test/*.js\\\" \\\"test/**/webpack.config.js\\\" \\\"examples/**/webpack.config.js\\\" \\\"schemas/**/*.js\\\"\",\n\"type-lint\": \"tsc --pretty\",\n\"fix\": \"yarn code-lint --fix\",\n- \"pretty\": \"prettier --write \\\"**/*.{js,ts}\\\"\",\n\"schema-lint\": \"node --max-old-space-size=4096 node_modules/jest-cli/bin/jest --testMatch \\\"<rootDir>/test/*.lint.js\\\" --no-verbose\",\n\"benchmark\": \"node --max-old-space-size=4096 --trace-deprecation node_modules/jest-cli/bin/jest --testMatch \\\"<rootDir>/test/*.benchmark.js\\\" --runInBand\",\n\"cover\": \"yarn cover:init && yarn cover:all && yarn cover:report\",\n",
        "chatgpt_cot": "Add silent flag to Jest test command in package.json. This modification can suppress unnecessary output during testing for a better user experience."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -167,13 +167,13 @@ app.use(fileUpload());\n// Body parser middleware\napp.use(\nbodyParser.urlencoded({\n- limit: '50mb',\n+ limit: '200mb',\nextended: true,\n}),\n);\napp.use(\nbodyParser.json({\n- limit: '50mb',\n+ limit: '200mb',\nextended: true,\n}),\n);\n",
        "org_msg": "Increase request limit size",
        "sim_msg": "direct all paths to the correct index",
        "sim_diff": "diff --git a/app.js b/app.js @@ -35,12 +35,21 @@ app.use(bodyParser.urlencoded({ extended: false }));\nif (process.env.NODE_ENV === 'production') {\napp.use(express.static(path.join(__dirname, 'public'), {\nmaxAge: OneWeek,\n- index: 'index.html',\n}));\n+\n+ app.get('/*', function (req, res) {\n+ res.sendFile('index.html', {\n+ root: __dirname + '/public/',\n+ });\n+ });\n} else {\n- app.use(express.static(path.join(__dirname, 'assets'), {\n- index: '../templates/development_index.html',\n- }));\n+ app.use(express.static(path.join(__dirname, 'assets')));\n+\n+ app.get('/*', function (req, res) {\n+ res.sendFile('development_index.html', {\n+ root: path.resolve(__dirname + '/templates/'),\n+ });\n+ });\n}\napp.use(express.static(path.join(__dirname, 'node_modules')));\n",
        "chatgpt_cot": "Increase body parser limit to '200mb' for both urlencoded and json requests in app.js."
    },
    {
        "org_diff": "diff --git a/views/cube/cube_deck.pug b/views/cube/cube_deck.pug @@ -15,7 +15,7 @@ block cube_content\ndeck: !{deck || []},\nbotDecks: !{JSON.stringify(bot_decks)},\nbots: !{JSON.stringify(bots)},\n- canEdit: !{user && user.id === deck.owner},\n+ canEdit: !{JSON.stringify(user && user.id === deck.owner)},\n};\ninclude ../react\nscript(src='/js/cube_deck.bundle.js')\n",
        "org_msg": "Fix viewing decks while logged out.\nFixes",
        "sim_msg": "Update bot.js\nchange several logger.info's to logger.debug's",
        "sim_diff": "diff --git a/src/bot.js b/src/bot.js @@ -216,7 +216,7 @@ class Genesis {\nreturn;\n}\nthis.settings.addGuild(guild).then(() => {\n- this.logger.info(`Joined guild ${guild} (${guild.id}`);\n+ this.logger.debug(`Joined guild ${guild} (${guild.id}`);\nguild.defaultChannel.sendMessage(`**${this.client.user.username.toUpperCase()} ready! Type ` +\n`\\`${this.prefix}help\\` for help**`);\n}).catch(this.logger.error);\n@@ -232,7 +232,7 @@ class Genesis {\n}\nthis.settings.deleteGuild(guild)\n.then(() => {\n- this.logger.info(`Guild deleted : ${guild.name} (${guild.id})`);\n+ this.logger.debug(`Guild deleted : ${guild.name} (${guild.id})`);\n})\n.catch(this.logger.error);\n}\n@@ -247,12 +247,12 @@ class Genesis {\n}\nif (channel.type === 'text') {\nthis.settings.addGuildTextChannel(channel).then(() => {\n- this.logger.info(`Text channel ${channel.name} (${channel.id}) created in guild ` +\n+ this.logger.debug(`Text channel ${channel.name} (${channel.id}) created in guild ` +\n`${channel.guild.name} (${channel.guild.id})`);\n}).catch(this.logger.error);\n} else {\nthis.settings.addDMChannel(channel).then(() => {\n- this.logger.info(`DM channel with id ${channel.id} created`);\n+ this.logger.debug(`DM channel with id ${channel.id} created`);\n}).catch(this.logger.error);\n}\n}\n@@ -266,7 +266,7 @@ class Genesis {\nreturn;\n}\nthis.settings.deleteChannel(channel).then(() => {\n- this.logger.info(`Channel with id ${channel.id} deleted`);\n+ this.logger.debug(`Channel with id ${channel.id} deleted`);\n}).catch(this.logger.error);\n}\n}\n",
        "chatgpt_cot": "\"Fix issue with canEdit variable in cube_deck.pug\""
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -110,5 +110,6 @@ data.getCardDetails = getCardDetails;\ndata.normalizedName = card => card.name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").trim();\ndata.allIds = card => data.nameToId[data.normalizedName(card)];\ndata.initializeCardDb = initializeCardDb;\n+data.loadJSONFile = loadJSONFile;\nmodule.exports = data;\n\\ No newline at end of file\n",
        "org_msg": "export loadJSONFile for testing",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "Add method to load JSON file in card module. Fix compilation issue due to missing method."
    },
    {
        "org_diff": "diff --git a/src/components/CardModalForm.js b/src/components/CardModalForm.js @@ -168,7 +168,7 @@ const CardModalForm = ({ children, ...props }) => {\nfinish: newCard.finish,\ncmc: newCard.cmc,\ntype_line: typeLine,\n- imgUrl: newCard.imgUrl,\n+ imgUrl: newCard.imgUrl || '',\nnotes: newCard.notes || '',\ntags: tags.map((tag) => ({ id: tag, text: tag })),\ntagInput: '',\n",
        "org_msg": "Fixed uncontrolled variable card.imgUrl",
        "sim_msg": "added numberoflines to eventcard",
        "sim_diff": "diff --git a/src/components/EventCard.js b/src/components/EventCard.js @@ -58,7 +58,7 @@ const EventCard = ({\n{timeDisplay}\n</Text>\n<View style={styles.eventNameContainer}>\n- <Text type=\"h3\" style={styles.eventName}>\n+ <Text type=\"h3\" style={styles.eventName} numberOfLines={2}>\n{name}\n</Text>\n</View>\n",
        "chatgpt_cot": "\"Fix imgUrl field to handle empty value in CardModalForm\""
    },
    {
        "org_diff": "diff --git a/one_shot_scripts/generate_short_ids.js b/one_shot_scripts/generate_short_ids.js @@ -5,7 +5,6 @@ const {\ngenerate_short_id,\n} = require('../serverjs/cubefn.js');\n-/*\n(async () => {\nmongoose.connect(config.database).then( async (db) => {\nlet cubes = await Cube.find({shortID:null}, [ '_id', 'shortID' ] );\n@@ -19,8 +18,7 @@ const {\nmongoose.disconnect();\n});\n})();\n-*/\n-\n+/*\n(async () => {\nmongoose.connect(config.database).then( async (db) => {\nlet cubes = await Cube.find({}, [ '_id', 'shortID' ] );\n@@ -33,3 +31,4 @@ const {\nmongoose.disconnect();\n});\n})();\n+*/\n",
        "org_msg": "Fix one-shot script for contributors.",
        "sim_msg": "Card generator return object url instead of loaded image",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -254,7 +254,13 @@ export const generateCard = async ({\n}\n}\n- const image = await new Promise((accept, reject) => {\n+ const blob = new Blob([svg.outerHTML], {\n+ type: 'image/svg+xml',\n+ });\n+ const objectUrl = URL.createObjectURL(blob);\n+ return objectUrl;\n+\n+ /* const image = await new Promise((accept, reject) => {\nconst image = document.createElement('img');\nimage.onload = () => {\naccept(image);\n@@ -266,8 +272,7 @@ export const generateCard = async ({\n};\nimage.crossOrigin = 'Anonymous';\n- const outerHTML = svg.outerHTML;\n- const blob = new Blob([outerHTML], {\n+ const blob = new Blob([svg.outerHTML], {\ntype: 'image/svg+xml',\n});\nconst url = URL.createObjectURL(blob);\n@@ -278,5 +283,5 @@ export const generateCard = async ({\n}\n});\n- return image;\n+ return image; */\n};\n\\ No newline at end of file\n",
        "chatgpt_cot": "\"Fix generate_short_ids.js to properly query and update Cube documents\""
    },
    {
        "org_diff": "diff --git a/src/pages/CubeDeckbuilderPage.js b/src/pages/CubeDeckbuilderPage.js @@ -16,7 +16,7 @@ import TextEntry from 'components/TextEntry';\nimport CubeLayout from 'layouts/CubeLayout';\nimport { subtitle } from 'pages/CubeDraftPage';\n-const canDrop = (source, target) => true;\n+const canDrop = () => true;\nconst oppositeLocation = {\n[Location.DECK]: Location.SIDEBOARD,\n@@ -27,12 +27,12 @@ const makeInitialStacks = (playerDeck) => {\nif (playerDeck.length === 2 && Array.isArray(playerDeck[0]) && Array.isArray(playerDeck[0][0])) {\n// Already good.\nreturn playerDeck;\n- } else if (playerDeck.length === 16) {\n+ }\n+ if (playerDeck.length === 16) {\n// Already in stacks. Split into rows.\nreturn [playerDeck.slice(0, 8), playerDeck.slice(8, 16)];\n- } else {\n- return sortDeck(playerDeck);\n}\n+ return sortDeck(playerDeck);\n};\nconst CubeDeckbuilderPage = ({ cube, cubeID, initialDeck, basics }) => {\n@@ -41,9 +41,8 @@ const CubeDeckbuilderPage = ({ cube, cubeID, initialDeck, basics }) => {\nconst initial = initialDeck.playersideboard;\nif (!initial || !Array.isArray(initial) || initial.length === 0) {\nreturn [new Array(8).fill([])];\n- } else {\n- return [initialDeck.playersideboard.slice(0, 8)];\n}\n+ return [initialDeck.playersideboard.slice(0, 8)];\n});\nconst locationMap = {\n@@ -70,7 +69,7 @@ const CubeDeckbuilderPage = ({ cube, cubeID, initialDeck, basics }) => {\nconst handleClickCard = useCallback(\n(event) => {\nevent.preventDefault();\n- /* global */ autocard_hide_card();\n+ /* eslint-disable-line no-undef */ autocard_hide_card();\nconst eventTarget = event.currentTarget;\nconst locationType = eventTarget.getAttribute('data-location-type');\nconst locationData = JSON.parse(eventTarget.getAttribute('data-location-data'));\n@@ -102,7 +101,7 @@ const CubeDeckbuilderPage = ({ cube, cubeID, initialDeck, basics }) => {\nconst currentDeck = { ...initialDeck };\ncurrentDeck.playerdeck = [...deck[0], ...deck[1]];\n- currentDeck.playersideboard = sideboard[0];\n+ [currentDeck.playersideboard] = sideboard;\nconst [name, setName] = useState(initialDeck.name);\nconst [description, setDescription] = useState(initialDeck.description);\n@@ -134,7 +133,7 @@ const CubeDeckbuilderPage = ({ cube, cubeID, initialDeck, basics }) => {\ntype=\"text\"\nvalue={name}\nonChange={(e) => setName(e.target.value)}\n- ></input>\n+ />\n<br />\n<h6>Description</h6>\n@@ -172,8 +171,13 @@ const CubeDeckbuilderPage = ({ cube, cubeID, initialDeck, basics }) => {\n};\nCubeDeckbuilderPage.propTypes = {\n+ basics: PropTypes.objectOf(PropTypes.string).isRequired,\n+ cube: PropTypes.shape({}).isRequired,\n+ cubeID: PropTypes.string.isRequired,\ninitialDeck: PropTypes.shape({\n_id: PropTypes.string.isRequired,\n+ name: PropTypes.string,\n+ description: PropTypes.string,\nplayerdeck: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.object)).isRequired,\nplayersideboard: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.object)).isRequired,\n}).isRequired,\n",
        "org_msg": "Fix up deckbuilder page eslint.",
        "sim_msg": "Import from public decks as well",
        "sim_diff": "diff --git a/client/DeckEditor.jsx b/client/DeckEditor.jsx @@ -238,17 +238,26 @@ class InnerDeckEditor extends React.Component {\nimportDeck() {\n$(findDOMNode(this.refs.modal)).modal('hide');\n- let strainUrl = document.getElementById('strainUrl').value;\n+ let importUrl = document.getElementById('importUrl').value;\nlet apiUrl = 'https://api.fiveringsdb.com/';\n- let path = 'strains';\n+ let strainPath = 'strains';\n+ let deckPath = 'decks';\nlet deckResponse = {};\n- let strainId = String(strainUrl).split('/')[4];\n+ let importId = String(importUrl).split('/')[4];\n+ let selector = String(importUrl).split('/')[3];\n+\n+ let path = '';\n+ if(selector === 'decks') {\n+ path = deckPath;\n+ } else if(selector === 'strains') {\n+ path = strainPath;\n+ }\n$.ajax({\ntype: 'GET',\n- url: apiUrl + path + '/' + strainId,\n+ url: apiUrl + path + '/' + importId,\ndataType: 'json',\nasync: false,\nsuccess: function(data) {\n@@ -256,12 +265,26 @@ class InnerDeckEditor extends React.Component {\n}\n});\n+ let deckClan = '';\n+ let deckAlliance = '';\n+ let deckName = '';\n+ let deckList = '';\n+ let cardList = '';\n+\n+\nif(deckResponse.success) {\nlet deckRecord = deckResponse.record;\n- let deckClan = deckRecord.head.clan;\n- let deckName = deckRecord.head.name;\n- let deckList = deckRecord.head.cards;\n- let cardList = '';\n+ if(selector === 'decks') {\n+ deckClan = deckRecord.primary_clan;\n+ deckAlliance = deckRecord.secondary_clan;\n+ deckName = deckRecord.name;\n+ deckList = deckRecord.cards;\n+ } else if(selector === 'strains') {\n+ deckClan = deckRecord.head.primary_clan;\n+ deckAlliance = deckRecord.head.secondary_clan;\n+ deckName = deckRecord.head.name;\n+ deckList = deckRecord.head.cards;\n+ }\nlet deck = this.copyDeck(this.state.deck);\n@@ -272,12 +295,14 @@ class InnerDeckEditor extends React.Component {\ndeck.faction = this.props.factions['crab'];\n}\n+ if(deckAlliance) {\n+ deck.alliance = this.props.factions[deckAlliance];\n+ } else {\n+ deck.alliance = this.props.factions['crab'];\n+ }\n+\n_.each(deckList, (count, card) => {\ncardList += count + ' ' + this.props.cards[card].name + '\\n';\n- let allianceClan = this.props.cards[card].clan;\n- if(allianceClan !== 'neutral' && allianceClan !== deckClan) {\n- deck.alliance = this.props.factions[this.props.cards[card].clan];\n- }\n});\n//Duplicate onCardListChange to get this working correctly\n@@ -361,7 +386,7 @@ class InnerDeckEditor extends React.Component {\n<h4 className='modal-title'>Provide Permalink</h4>\n</div>\n<div className='modal-body'>\n- <Input name='strainUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n+ <Input name='importUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n<div className='col-sm-1'>\n<button className='btn btn-default' onClick={ this.importDeck.bind(this) }>Import</button>\n</div>\n",
        "chatgpt_cot": "\"Fixes compilation issues in CubeDeckbuilderPage.js by updating sortDeck method and adding prop type validation for basics, cube, and cubeID.\""
    },
    {
        "org_diff": "diff --git a/views/cube/bulk_upload.pug b/views/cube/bulk_upload.pug extends ../layout\nblock content\n+ link(rel='stylesheet' href='/css/autocomplete.css')\n+ link(rel='stylesheet' href='/css/editcube.css')\ninclude ../flash\nbr\nstyle(type='text/css').\n@@ -17,9 +19,9 @@ block content\n.col\n.row\nform(autocomplete='off').form-inline\n- .form-group.mb-2.autocomplete\n- input.form-control#addInput(style='width: 350px', type='text', name='myCountry', placeholder='Card to Add')\n- button.btn.btn-success.mx-sm-1.mb-2#justAddButton(type='button') Add\n+ .mb-2.autocomplete\n+ input.form-control#addInput(style='width: 350px', type='text', placeholder='Card to Add')\n+ button.btn.btn-success.mx-sm-1.mb-2#justAddButton(type='button') Just Add\n.row\nlabel Changelist:\n.row\n",
        "org_msg": "Fixed: css on bulkupload autocomplete",
        "sim_msg": "Swapped 3.3.7, 4.0.0-beta posistions, added info panel",
        "sim_diff": "diff --git a/views/index.pug b/views/index.pug @@ -2,11 +2,11 @@ extends layout\nblock content\nh2.text-center=title\n- h3.text-center='v' + config.bootstrap4[0].version\n+ h3.text-center='v' + config.bootstrap[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].stylesheet\n- - var sri = config.bootstrap4[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].stylesheet\n+ - var sri = config.bootstrap[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -20,9 +20,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].javascript\n- - var sri = config.bootstrap4[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].javascript\n+ - var sri = config.bootstrap[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n@@ -35,12 +35,21 @@ block content\nspan.help-block Click to copy\ninclude _partials/jscode.pug\n+ hr\n+ .panel.panel-info\n+ .panel-heading\n+ h3.panel-title Info\n+ .panel-body\n+ | Bootstrap 4 is currently in Beta release and should be treated as such. For details check out\n+ a(href='https://blog.getbootstrap.com/2017/08/10/bootstrap-4-beta/', target='_blank', rel='noopener').\n+ the Bootstrap 4 Beta announcement\n+ | .\n- h3.text-center='v' + config.bootstrap[0].version\n+ h3.text-center='v' + config.bootstrap4[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].stylesheet\n- - var sri = config.bootstrap[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].stylesheet\n+ - var sri = config.bootstrap4[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -54,9 +63,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].javascript\n- - var sri = config.bootstrap[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].javascript\n+ - var sri = config.bootstrap4[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n",
        "chatgpt_cot": "\"Add autocomplete and edit cube stylesheet links and modify form input and button in bulk upload page\""
    },
    {
        "org_diff": "diff --git a/src/components/GroupModal.js b/src/components/GroupModal.js @@ -201,6 +201,11 @@ class GroupModal extends Component {\nreturn contextChildren;\n}\n+ const accumulator = (total, card) => total + (card.details.price || 0)\n+ const accumulatorFoil = (total, card) => total + (card.details.price_foil || 0)\n+ const totalPrice = cards.length ? cards.reduce(accumulator, 0): 0\n+ const totalPriceFoil = cards.length ? cards.reduce(accumulatorFoil, 0): 0\n+\nconst checkColors = [['White', 'W'], ['Blue', 'U'], ['Black', 'B'], ['Red', 'R'], ['Green', 'G'], ['Colorless', 'C']];\nreturn <>\n{contextChildren}\n@@ -285,6 +290,9 @@ class GroupModal extends Component {\n</Form>\n</Col>\n</Row>\n+ <Row><Col xs='4'><div className=\"card-price\">Total Price: ${totalPrice.toFixed(2)}</div><div className=\"card-price\">\n+ Total Foil Price: ${totalPriceFoil.toFixed(2)}\n+ </div></Col></Row>\n</ModalBody>\n<ModalFooter>\n<Button color=\"danger\" onClick={this.handleRemoveAll}>Remove all from cube</Button>\n",
        "org_msg": "Adds Pricing to Group modals outside scroll area.\nFixes:\nReturns pricing info to group modals.",
        "sim_msg": "add fulfillmentGroup._id as key",
        "sim_diff": "diff --git a/src/components/OrderCard/OrderCard.js b/src/components/OrderCard/OrderCard.js @@ -45,7 +45,7 @@ class OrderCard extends Component {\n<Fragment>\n{fulfillmentGroups.map((fulfillmentGroup, index) => (\n<OrderCardFulfillmentGroup\n- key={`${index}`}\n+ key={`${fulfillmentGroup._id}`}\nfulfillmentGroup={fulfillmentGroup}\ncurrentGroupCount={index + 1}\ntotalGroupsCount={fulfillmentGroups.length}\n",
        "chatgpt_cot": "Add total price and total foil price calculation for cards in GroupModal component. Fix: display correct total prices in GroupModal."
    },
    {
        "org_diff": "diff --git a/serverjs/prices.js b/serverjs/prices.js @@ -22,10 +22,14 @@ async function GetToken() {\nheader: 'application/x-www-form-urlencoded',\nbody: body.toString(),\n}).then(checkStatus);\n+ try {\ntoken = await response.json();\ntoken.expires = Tomorrow();\nconsole.log(token.expires.toString(), 'token expiration');\nreturn token.access_token;\n+ } catch(e) {\n+ return;\n+ }\n}\n}\n@@ -79,7 +83,12 @@ async function GetPricesPromise(card_ids) {\nchunks.push(card_ids.slice(i * chunkSize, (i + 1) * chunkSize));\n}\n- const access_token = await GetToken();\n+ let access_token;\n+ try {\n+ access_token = await GetToken();\n+ } catch (e) {\n+ return price_dict;\n+ }\nconst responses = await Promise.all(\nchunks.map((chunk) =>\nfetch('http://api.tcgplayer.com/v1.32.0/pricing/product/' + chunk.join(','), {\n",
        "org_msg": "catch errors generated by bad tcgplayer token request to prevent thrashing",
        "sim_msg": "Track token supply in ethereum.js",
        "sim_diff": "diff --git a/ethereum.js b/ethereum.js @@ -581,15 +581,20 @@ const discordOauthUrl = `https://discord.com/api/oauth2/authorize?client_id=6841\nconst res = await fetch(url);\nconst j = await res.json();\nconst {image, properties: {filename, hash, ext}} = j;\n+ if (!tokens.some(token => token.hash === hash)) {\n+ const balance = await contracts['main'].NFT.methods.balanceOfHash(address, hash).call();\n+ const totalSupply = await contracts['main'].NFT.methods.totalSupplyOfHash(hash).call();\ntokens.push({\nid,\nimage,\nfilename,\nhash,\next,\n+ balance,\n+ totalSupply,\n});\n}\n- // console.log('got main chain token ids', tokens);\n+ }\nfor (const token of tokens) {\nconst el = document.createElement('div');\nel.classList.add('token');\n@@ -597,7 +602,7 @@ const discordOauthUrl = `https://discord.com/api/oauth2/authorize?client_id=6841\n<img src=\"${token.image}\">\n<div class=wrap>\n<a href=\"https://storage.exokit.org/${token.hash.slice(2)}\" class=filename>${escape(token.filename)}</a>\n- <div class=hash>${token.hash}</div>\n+ <div class=hash>${token.id}. ${token.hash} (${token.balance}/${token.totalSupply})</div>\n<div class=ext>${escape(token.ext || '')}</div>\n</div>\n`;\n@@ -656,15 +661,20 @@ const discordOauthUrl = `https://discord.com/api/oauth2/authorize?client_id=6841\nconst res = await fetch(url);\nconst j = await res.json();\nconst {image, properties: {filename, hash, ext}} = j;\n+ if (!tokens.some(token => token.hash === hash)) {\n+ const balance = await contracts['sidechain'].NFT.methods.balanceOfHash(sidechainAddress, hash).call();\n+ const totalSupply = await contracts['sidechain'].NFT.methods.totalSupplyOfHash(hash).call();\ntokens.push({\nid,\nimage,\nfilename,\nhash,\next,\n+ balance,\n+ totalSupply,\n});\n}\n- // console.log('got sidechain token ids', tokens);\n+ }\nfor (const token of tokens) {\nconst el = document.createElement('div');\nel.classList.add('token');\n@@ -672,12 +682,12 @@ const discordOauthUrl = `https://discord.com/api/oauth2/authorize?client_id=6841\n<img src=\"${token.image}\">\n<div class=wrap>\n<a href=\"https://storage.exokit.org/${token.hash.slice(2)}\" class=filename>${escape(token.filename)}</a>\n- <div class=hash>${token.hash}</div>\n+ <div class=hash>${token.id}. ${token.hash} (${token.balance}/${token.totalSupply})</div>\n<div class=ext>${escape(token.ext || '')}</div>\n</div>\n`;\nel.addEventListener('click', e => {\n- sidechainNftIdInput.value = token.id;\n+ ethNftIdInput.value = token.id;\n});\nsidechainTokensEl.appendChild(el);\n}\n",
        "chatgpt_cot": "Add try-catch block for error handling in GetToken function, and handle error in GetPricesPromise function."
    },
    {
        "org_diff": "diff --git a/src/cube_blog.js b/src/cube_blog.js @@ -30,11 +30,7 @@ class CubeBlog extends Component {\nconst posts = JSON.parse(document.getElementById('blogData').value);\nconst pages = JSON.parse(document.getElementById('blogPages').value);\nconst loggedIn = document.getElementById('userid') != null;\n-var userid = '';\n-if(loggedIn)\n-{\n- userid = document.getElementById('userid').value;\n-}\n+const userid = loggedIn ? document.getElementById('userid').value : '';\nconst canEdit = document.getElementById('canEdit').value === 'true';\nconst wrapper = document.getElementById('react-root');\nconst element = <CubeBlog posts={posts} pages={pages} canEdit={canEdit} loggedIn={loggedIn} userid={userid} />;\n",
        "org_msg": "Switched userid to use ternary",
        "sim_msg": "Fix loading user feed",
        "sim_diff": "diff --git a/src/user/UserProfile.js b/src/user/UserProfile.js @@ -56,6 +56,16 @@ export default class UserProfile extends React.Component {\n});\n}\n+ componentWillReceiveProps(nextProps) {\n+ if (nextProps.match.url !== this.props.match.url) {\n+ this.props.getFeedContent({\n+ sortBy: 'blog',\n+ category: nextProps.match.params.name,\n+ limit: nextProps.limit,\n+ });\n+ }\n+ }\n+\nrender() {\nconst { authenticated, authenticatedUser, feed, posts, limit } = this.props;\nconst username = this.props.match.params.name;\n",
        "chatgpt_cot": "\"Refactor CubeBlog class to simplify userid assignment and improve readability\""
    },
    {
        "org_diff": "diff --git a/jobs/populate_analytics.js b/jobs/populate_analytics.js require('dotenv').config();\nconst mongoose = require('mongoose');\n-const fetch = require('node-fetch');\nconst { GetPrices } = require('../serverjs/prices');\nconst carddb = require('../serverjs/cards.js');\n@@ -19,9 +18,8 @@ const basics = ['mountain', 'forest', 'plains', 'island', 'swamp'];\nconst d = new Date();\nconst currentDate = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;\n-const embeddings = {};\n-\nconst cardUses = {};\n+\nconst cardSizeUses = {\nsize180: {},\nsize360: {},\n@@ -180,7 +178,7 @@ async function processCard(card) {\nconst { name, oracle_id } = card;\nconst pricesQ = GetPrices(tcgplayerIds);\n- const ratingQ = CardRating.findOne({ cardName: name });\n+ const ratingQ = CardRating.findOne({ name });\nconst [prices, rating] = await Promise.all([pricesQ, ratingQ]);\n",
        "org_msg": "Fix rating fetch",
        "sim_msg": "Update GA4 `getReport` to use the new `isValidOrdersGA4` validator function.",
        "sim_diff": "diff --git a/assets/js/modules/analytics-4/datastore/report.js b/assets/js/modules/analytics-4/datastore/report.js @@ -32,7 +32,7 @@ import { MODULES_ANALYTICS_4 } from './constants';\nimport { stringifyObject } from '../../../util';\nimport {\nisValidDateRange,\n- isValidOrders,\n+ isValidOrdersGA4,\n} from '../../../util/report-validation';\nimport {\nnormalizeReportOptions,\n@@ -101,7 +101,7 @@ const fetchGetReportStore = createFetchStore( {\nif ( orderby ) {\ninvariant(\n- isValidOrders( orderby ),\n+ isValidOrdersGA4( orderby ),\n'orderby for an Analytics 4 report must be an object where each object should have either a \"metric\" or \"dimension\" property, and an optional \"desc\" property.'\n);\n}\n",
        "chatgpt_cot": "Refactor card rating query to use 'name' instead of 'cardName' for consistency and clarity in populate_analytics.js."
    },
    {
        "org_diff": "diff --git a/src/components/Paginate.js b/src/components/Paginate.js @@ -5,7 +5,12 @@ import { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\nconst RealPage = ({ index, active, urlF, onClick }) => (\n<PaginationItem active={active === index}>\n- <PaginationLink tag=\"a\" href={urlF(index)} data-index={onClick ? index : undefined} onClick={() => onClick(index)}>\n+ <PaginationLink\n+ data-index={onClick ? index : undefined}\n+ onClick={() => onClick(index)}\n+ // the button tag needs to have a set type to not accidentally submit forms\n+ {...(urlF ? { tag: 'a', href: urlF(index) } : { tag: 'button', type: 'button' })}\n+ >\n{index + 1}\n</PaginationLink>\n</PaginationItem>\n@@ -19,7 +24,7 @@ RealPage.propTypes = {\n};\nRealPage.defaultProps = {\n- urlF: () => '#',\n+ urlF: undefined,\nonClick: () => {},\n};\n@@ -83,21 +88,19 @@ const Paginate = ({ count, active, urlF, onClick }) => {\n<Pagination aria-label=\"Table page\" className=\"mt-3\">\n<PaginationItem disabled={active === 0}>\n<PaginationLink\n- tag=\"a\"\nprevious\n- href={urlF(active - 1)}\ndata-index={onClick ? active - 1 : undefined}\nonClick={() => onClick(active - 1)}\n+ {...(urlF ? { tag: 'a', href: urlF(active - 1) } : { tag: 'button', type: 'button' })}\n/>\n</PaginationItem>\n{count < 8 ? smallPagination : bigPagination}\n<PaginationItem disabled={active === count - 1}>\n<PaginationLink\n- tag=\"a\"\nnext\n- href={urlF(active + 1)}\ndata-index={onClick ? active + 1 : undefined}\nonClick={() => onClick(active + 1)}\n+ {...(urlF ? { tag: 'a', href: urlF(active + 1) } : { tag: 'button', type: 'button' })}\n/>\n</PaginationItem>\n</Pagination>\n@@ -112,7 +115,7 @@ Paginate.propTypes = {\n};\nPaginate.defaultProps = {\n- urlF: () => '#',\n+ urlF: undefined,\nonClick: () => {},\n};\n",
        "org_msg": "render pagination without URL link as buttons",
        "sim_msg": "Remove props for Pagination component and query data store.",
        "sim_diff": "diff --git a/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/Pagination.js b/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/Pagination.js @@ -25,47 +25,52 @@ import { Icon, chevronLeft, chevronRight } from '@wordpress/icons';\n/**\n* WordPress dependencies\n*/\n-import { _x, sprintf } from '@wordpress/i18n';\n+// import { _x, sprintf } from '@wordpress/i18n';\n/**\n* Internal dependencies\n*/\nimport Button from '../../../../../components/Button';\n-import { IDEA_HUB_IDEAS_PER_PAGE } from '../../../datastore/constants';\n+// import { IDEA_HUB_IDEAS_PER_PAGE } from '../../../datastore/constants';\n+import { CORE_UI } from '../../../../../googlesitekit/datastore/ui/constants';\n+import Data from 'googlesitekit-data';\n+\n+const { useSelect } = Data;\n+\n+const Pagination = ( { tab } ) => {\n+ const page =\n+ useSelect( ( select ) =>\n+ select( CORE_UI ).getValue( `idea-hub-page-${ tab }` )\n+ ) || 1;\n-const Pagination = ( {\n- total,\n- page,\n- ideasPerPage,\n- handlePrev,\n- handleNext,\n-} ) => {\nreturn (\n<div className=\"googlesitekit-idea-hub__pagination\">\n<span className=\"googlesitekit-idea-hub__pagination--legend\">\n- { sprintf(\n- /* translators: 1: from, 2: to, 3: total items */\n- _x(\n- '%1$s - %2$s of %3$s',\n- '{from} - {to} of {total}',\n- 'google-site-kit'\n- ),\n- page === 1 ? page : ( page - 1 ) * ideasPerPage + 1,\n- total < page * ideasPerPage ? total : page * ideasPerPage,\n- total\n- ) }\n+ {\n+ // sprintf(\n+ // /* translators: 1: from, 2: to, 3: total items */\n+ // _x(\n+ // '%1$s - %2$s of %3$s',\n+ // '{from} - {to} of {total}',\n+ // 'google-site-kit'\n+ // ),\n+ // page === 1 ? page : ( page - 1 ) * ideasPerPage + 1,\n+ // total < page * ideasPerPage ? total : page * ideasPerPage,\n+ // total\n+ // )\n+ }\n</span>\n<div className=\"googlesitekit-idea-hub__pagination--buttons\">\n<Button\nicon={ <Icon icon={ chevronLeft } /> }\n- onClick={ handlePrev }\n+ // onClick={ handlePrev }\ndisabled={ page === 1 }\n/>\n<Button\nicon={ <Icon icon={ chevronRight } /> }\n- onClick={ handleNext }\n- disabled={ page * ideasPerPage > total }\n+ // onClick={ handleNext }\n+ // disabled={ page * ideasPerPage > total }\n/>\n</div>\n</div>\n@@ -73,17 +78,11 @@ const Pagination = ( {\n};\nPagination.propTypes = {\n- total: PropTypes.number.isRequired,\n- page: PropTypes.number.isRequired,\n- ideasPerPage: PropTypes.number,\n- handlePrev: PropTypes.func,\n- handleNext: PropTypes.func,\n+ tab: PropTypes.string,\n};\nPagination.defaultProps = {\n- ideasPerPage: IDEA_HUB_IDEAS_PER_PAGE,\n- handlePrev: () => {},\n- handleNext: () => {},\n+ tab: 'new-ideas',\n};\nexport default Pagination;\n",
        "chatgpt_cot": "Refactor Paginate component to handle button type correctly and improve code readability. Fix default urlF value and update PaginationLink tags for consistency."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -210,11 +210,11 @@ router.post('/format/add/:id', ensureAuth, async (req, res) => {\nmessage = 'Custom format successfully edited.';\n}\n// check pack formats are sane\n- const draftcards = cube.cards.map((card) => Object.assign(card, { details: carddb.cardFromId(card.cardID) }));\n+ let draftcards = cube.cards.map((card) => Object.assign(card, { details: carddb.cardFromId(card.cardID) }));\nif (draftcards.length === 0) {\nthrow new Error('Could not create draft: no cards');\n}\n- populateCardDetails([draftcards], carddb);\n+ [draftcards] = populateCardDetails([draftcards], carddb);\n// test format for errors\nconst format = draftutil.parseDraftFormat(req.body.format);\ndraftutil.checkFormat(format, draftcards);\n@@ -1103,8 +1103,9 @@ async function bulkUpload(req, res, list, cube) {\nif (cards) {\nif (cards[0].trim() === CSV_HEADER) {\ncards.splice(0, 1);\n- const { newCards, newMaybe, missing: missingCSV } = CSVtoCards(cards, carddb);\n- missing = missingCSV;\n+ let newCards = [];\n+ let newMaybe = [];\n+ ({ newCards, newMaybe, missing } = CSVtoCards(cards, carddb));\nnewCards.forEach((card) => {\nchangelog += addCardHtml(carddb.cardFromId(card.cardID));\n});\n@@ -1233,10 +1234,14 @@ router.post('/bulkreplacefile/:id', ensureAuth, async (req, res) => {\nif (cards) {\nif (cards[0].trim() === CSV_HEADER) {\ncards.splice(0, 1);\n- const { newCards, newMaybe, missing: missingCSV } = CSVtoCards(cards, carddb);\n- missing = missingCSV;\n- await populateCardDetails([cube.cards, newCards, newMaybe], carddb, { GetPrices });\n- const { onlyA, onlyB } = await compareCubes(cube.cards, newCards);\n+ let newCards = [];\n+ let newMaybe = [];\n+ ({ newCards, newMaybe, missing } = CSVtoCards(cards, carddb));\n+ let cardDetails = [];\n+ [cardDetails, newCards, newMaybe] = await populateCardDetails([cube.cards, newCards, newMaybe], carddb, {\n+ GetPrices,\n+ });\n+ const { onlyA, onlyB } = await compareCubes(cardDetails, newCards);\nfor (const card of onlyA) {\nchangelog += removeCardHtml(carddb.cardFromId(card.cardID));\n}\n@@ -1245,7 +1250,7 @@ router.post('/bulkreplacefile/:id', ensureAuth, async (req, res) => {\n}\ncube.cards = newCards;\ncube.maybe = newMaybe;\n- added.concat(onlyA, onlyB);\n+ added.push(...onlyB);\n}\n}\nreturn generateBlogpost(req, res, cube, changelog, added, missing, carddb);\n",
        "org_msg": "Fix bugs around populateCardDetails.",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "\"Fix bug in cube_routes.js, populateCardDetails should be destructured and assigned to newCards, newMaybe, missing in bulkUpload and bulkreplacefile.\""
    },
    {
        "org_diff": "diff --git a/src/pages/BlogPostPage.js b/src/pages/BlogPostPage.js @@ -12,7 +12,14 @@ const BlogPostPage = ({ post, user, loginCallback }) => (\n<MainLayout loginCallback={loginCallback} user={user}>\n<Advertisement />\n<DynamicFlash />\n- <BlogPost key={post._id} post={post} canEdit={false} noScroll userid={user ? user.id : null} loggedIn={user !== null} />\n+ <BlogPost\n+ key={post._id}\n+ post={post}\n+ canEdit={false}\n+ noScroll\n+ userid={user ? user.id : null}\n+ loggedIn={user !== null}\n+ />\n</MainLayout>\n);\n",
        "org_msg": "fixup! [styling] - Remove scrolling on direct blog posts",
        "sim_msg": "early exit if content is not available",
        "sim_diff": "diff --git a/src/post/PostSingle.js b/src/post/PostSingle.js @@ -12,7 +12,7 @@ import * as bookmarkActions from '../bookmarks/bookmarksActions';\n@connect(\n({ posts, app, reblog, auth, bookmarks }) => ({\n- content: posts[app.lastPostId] ? posts[app.lastPostId] : {},\n+ content: posts[app.lastPostId] ? posts[app.lastPostId] : null,\nisPostModalOpen: app.isPostModalOpen,\nlastPostId: app.lastPostId,\nsidebarIsVisible: app.sidebarIsVisible,\n@@ -53,6 +53,11 @@ export default class PostSingle extends React.Component {\nrender() {\nconst { modal, isPostModalOpen, sidebarIsVisible, content, reblog, reblogList, auth } = this.props;\n+\n+ if (!content) {\n+ return null;\n+ }\n+\nconst isPostLiked =\nauth.isAuthenticated &&\ncontent.active_votes &&\n",
        "chatgpt_cot": "Refactor BlogPost component in BlogPostPage.js for improved readability and maintainability."
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -59,6 +59,7 @@ html(lang='en')\na#navbarDropdownMenuLink.nav-link.dropdown-toggle(href='#', role='button', data-toggle='dropdown', aria-haspopup='true', aria-expanded='false')\n| About\n.dropdown-menu.dropdown-menu-right(aria-labelledby='navbarDropdownMenuLink')\n+ a.dropdown-item(href='https://www.inkedgaming.com/collections/artists/gwen-dekker?rfsn=4250904.d3f372&utm_source=refersion&utm_medium=affiliate&utm_campaign=4250904.d3f372' target='_blank') Merchandise\na.dropdown-item(href='/contact') Contact\na.dropdown-item(href='/dev/blog') Dev Blog\na.dropdown-item(href='/ourstory') Our Story\n",
        "org_msg": "add merch link",
        "sim_msg": "Fixing up for html validation",
        "sim_diff": "diff --git a/views/_partials/header.pug b/views/_partials/header.pug li(class=(title === 'Bootstrap Legacy' ? 'active' : ''))\na(href='/legacy/' + themeQs) Legacy\nli.dropdown\n- a#nav-dropdown.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-haspopup='true', aria-expanded='false') 4 Beta\n+ a.nav-dropdown.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-haspopup='true', aria-expanded='false') 4 Beta\n|\nspan.caret\n- ul.dropdown-menu.dropdown-menu-right(aria-labelledby='nav-dropdown')\n+ ul.dropdown-menu.dropdown-menu-right\nli\na(href='/beta/',\ndata-ga-category='Navigation',\nli(class=(title === 'Integrations' ? 'active' : ''))\na(href='/integrations/' + themeQs) Integrations\nli.dropdown\n- a#nav-dropdown.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-haspopup='true', aria-expanded='false') Resources\n+ a.nav-dropdown.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-haspopup='true', aria-expanded='false') Resources\n|\nspan.caret\n- ul.dropdown-menu.dropdown-menu-right(aria-labelledby='nav-dropdown')\n+ ul.dropdown-menu.dropdown-menu-right\nli\na(href='https://github.com/MaxCDN/bootstrap-cdn',\ndata-ga-category='Navigation',\n",
        "chatgpt_cot": "Add merchandise link to dropdown menu in layout view."
    },
    {
        "org_diff": "diff --git a/src/components/BlogContextMenu.js b/src/components/BlogContextMenu.js @@ -7,26 +7,23 @@ import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Collapse, Modal,\nclass BlogDeleteModal extends React.Component {\nconstructor(props) {\nsuper(props);\n- this.open = this.open.bind(this);\n+ this.state = {\n+ isOpen: Boolean(props.isOpen),\n+ }\n+\nthis.close = this.close.bind(this);\nthis.confirm = this.confirm.bind(this);\nthis.keyPress = this.keyPress.bind(this);\n- if (this.props.menu.state.deleteModalIsOpen) {\n+ if (this.state.isOpen) {\ndocument.addEventListener(\"keyup\", this.keyPress);\n}\n}\n- open() {\n- this.props.menu.setState({\n- deleteModalIsOpen: true,\n- });\n- }\n-\nclose() {\ndocument.removeEventListener(\"keyup\", this.keyPress);\n- this.props.menu.setState({\n- deleteModalIsOpen: false,\n+ this.setState({\n+ isOpen: false,\n});\n}\n@@ -50,12 +47,9 @@ class BlogDeleteModal extends React.Component {\n}\nrender() {\n- const isOpen = this.props.menu.state.deleteModalIsOpen;\n+ const {isOpen} = this.state;\nreturn (\n<>\n- <span onClick={this.open}>\n- Delete\n- </span>\n<Modal isOpen={isOpen} toggle={this.close}>\n<ModalHeader toggle={this.close}>Confirm Delete</ModalHeader>\n<ModalBody>\n@@ -79,6 +73,7 @@ class BlogContextMenu extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.toggle = this.toggle.bind(this);\n+ this.openDeleteModal = this.openDeleteModal.bind(this);\nthis.state = {\ndropdownOpen: false,\ncollapseOpen: false,\n@@ -93,6 +88,12 @@ class BlogContextMenu extends React.Component {\nupdateBlog();\n}\n+ openDeleteModal(){\n+ this.setState({\n+ deleteModalIsOpen: true,\n+ });\n+ }\n+\nclickEdit(post) {\ncsrfFetch('/cube/blogsrc/' + post._id, {\nmethod: 'GET',\n@@ -119,8 +120,10 @@ class BlogContextMenu extends React.Component {\n</DropdownToggle>\n<DropdownMenu right>\n<DropdownItem onClick={() => this.clickEdit(this.props.post)}>Edit</DropdownItem>\n- <DropdownItem>\n- <BlogDeleteModal postID={this.props.post._id} menu={this}></BlogDeleteModal>\n+ <DropdownItem onClick={this.openDeleteModal}>\n+ Delete\n+ <BlogDeleteModal postID={this.props.post._id} isOpen={this.state.deleteModalIsOpen}>\n+ </BlogDeleteModal>\n</DropdownItem>\n</DropdownMenu>\n</Dropdown>\n",
        "org_msg": "Restructure the code a bit",
        "sim_msg": "Hooks on user-management-delete-dialog component",
        "sim_diff": "diff --git a/generators/client/templates/react/src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx.ejs b/generators/client/templates/react/src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx.ejs See the License for the specific language governing permissions and\nlimitations under the License.\n-%>\n-import React from 'react';\n+import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n-import { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\n+import { Translate } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n-import { IUser } from 'app/shared/model/user.model';\nimport { getUser, deleteUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\nexport interface IUserManagementDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n-export class UserManagementDeleteDialog extends React.Component<IUserManagementDeleteDialogProps> {\n- componentDidMount() {\n- this.props.getUser(this.props.match.params.login);\n- }\n+export const UserManagementDeleteDialog = (props: IUserManagementDeleteDialogProps) => {\n+ useEffect(() => {\n+ props.getUser(props.match.params.login);\n+ }, []);\n- confirmDelete = event => {\n- this.props.deleteUser(this.props.user.login);\n- this.handleClose(event);\n- }\n+ const confirmDelete = event => {\n+ props.deleteUser(props.user.login);\n+ handleClose(event);\n+ };\n- handleClose = event => {\n+ const handleClose = event => {\nevent.stopPropagation();\n- this.props.history.goBack();\n- }\n+ props.history.goBack();\n+ };\n+\n+ const { user } = props;\n- render() {\n- const { user } = this.props;\nreturn (\n- <Modal isOpen toggle={this.handleClose}>\n- <ModalHeader toggle={this.handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n+ <Modal isOpen toggle={handleClose}>\n+ <ModalHeader toggle={handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n<ModalBody>\n<Translate contentKey=\"userManagement.delete.question\" interpolate={{ login: user.login }}>Are you sure you want to delete this User?</Translate>\n</ModalBody>\n<ModalFooter>\n- <Button color=\"secondary\" onClick={this.handleClose}>\n+ <Button color=\"secondary\" onClick={handleClose}>\n<FontAwesomeIcon icon=\"ban\"/>&nbsp;\n<Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n</Button>\n- <Button color=\"danger\" onClick={this.confirmDelete}>\n+ <Button color=\"danger\" onClick={confirmDelete}>\n<FontAwesomeIcon icon=\"trash\" />&nbsp;\n<Translate contentKey=\"entity.action.delete\">Delete</Translate>\n</Button>\n</ModalFooter>\n</Modal>\n);\n- }\n-}\n+};\nconst mapStateToProps = (storeState: IRootState) => ({\nuser: storeState.userManagement.user\n",
        "chatgpt_cot": "Refactor BlogContextMenu to manage deleteModal state internally. Add openDeleteModal method to handle opening delete modal. Fix delete modal logic."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -545,6 +545,7 @@ function convertCard(card, isExtra) {\nnewcard.type = convertType(card, isExtra);\nnewcard.full_art = card.full_art;\nnewcard.language = card.lang;\n+ newcard.mtgo_id = card.mtgo_id;\nif (card.tcgplayer_id) {\nnewcard.tcgplayer_id = card.tcgplayer_id;\n",
        "org_msg": "add back mtgo id",
        "sim_msg": "set card type bool",
        "sim_diff": "diff --git a/server/game/drawcard.js b/server/game/drawcard.js @@ -24,6 +24,8 @@ class DrawCard extends BaseCard {\nthis.contributesToFavor = true;\nthis.bowed = false;\nthis.inConflict = false;\n+ this.isConflict = false;\n+ this.isDynasty = false;\nthis.readysDuringReadying = true;\nthis.challengeOptions = {\ndoesNotBowAs: {\n@@ -32,6 +34,12 @@ class DrawCard extends BaseCard {\n}\n};\nthis.stealthLimit = 1;\n+\n+ if(cardData.deck === 'conflict') {\n+ this.isConflict = true;\n+ } else if(cardData.deck === 'dynasty') {\n+ this.isDynasty = true;\n+ }\n}\nisLimited() {\n",
        "chatgpt_cot": "\"Add mtgo_id field to card object in convertCard function\""
    },
    {
        "org_diff": "diff --git a/one_shot_scripts/import_ratings.js b/one_shot_scripts/import_ratings.js const es = require('event-stream');\nconst fs = require('fs');\nconst JSONStream = require('JSONStream');\n+const mongoose = require('mongoose');\nconst CardRating = require('../models/cardrating.js');\n+const mongosecrets = require('../../cubecobrasecrets/mongodb');\n+\nasync function saveCardRating(cardRating) {\nconst existing = (await CardRating.findOne({ name: cardRating.name })) || new CardRating();\nexisting.name = cardRating.name;\n@@ -24,4 +27,11 @@ async function saveRatings(defaultPath = null) {\n);\n}\n+(async () => {\n+ mongoose.connect(mongosecrets.connectionString).then(async () => {\nsaveRatings(process.argv[2]);\n+ mongoose.disconnect();\n+ console.log('done');\n+ process.exit();\n+ });\n+})();\n",
        "org_msg": "Actually connect to mongodb.",
        "sim_msg": "More cards generator cleanup",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -4,8 +4,6 @@ import {screenshotObjectApp} from './object-screenshotter.js';\nimport {screenshotAvatarUrl} from './avatar-screenshotter.js';\nimport {generateGlyph} from './glyph-generator.js';\n-// const baseUrl = import.meta.url.replace(/(\\/)[^\\/\\\\]*$/, '$1');\n-// const cardsSvgUrl = `${baseUrl}cards.svg`;\nconst cardsSvgUrl = `./images/cards-01.svg`;\nconst _loadSvg = async () => {\n",
        "chatgpt_cot": "\"Add mongoose connection and disconnection in saveRatings function to import card ratings from MongoDB\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -8,6 +8,7 @@ const passport = require('passport');\nconst http = require('http');\nconst fileUpload = require('express-fileupload');\nconst MongoDBStore = require('connect-mongodb-session')(session);\n+var schedule = require('node-schedule');\nconst secrets = require('../cubecobrasecrets/secrets');\nconst mongosecrets = require('../cubecobrasecrets/mongodb');\n@@ -141,6 +142,11 @@ app.use((req, res) => {\nres.status(404).render('misc/404', {});\n});\n+schedule.scheduleJob('0 0 * * *', function(){\n+ console.log(\"Starting midnight cardbase update...\");\n+ updatedb.updateCardbase();\n+});\n+\n// Start server\nhttp.createServer(app).listen(5000, 'localhost', () => {\nconsole.log('server started on port 5000...');\n",
        "org_msg": "Added back card update schedule",
        "sim_msg": "add version redirect",
        "sim_diff": "diff --git a/app.js b/app.js @@ -8,7 +8,8 @@ const fs = require('fs');\nconst uglify = require('uglify-es');\nconst moment = require('moment');\nconst agent = require('express-useragent');\n-const ver = require_fresh('./js/license.js');\n+const license = require_fresh('./js/license.js');\n+const version = license.VERSION || \"rogue\";\nconst fileCache = {};\nconst code_src = {};\n@@ -57,9 +58,9 @@ function init(mod) {\nmod.add(handleOptions);\nmod.add(fullpath({\n\"/kiri/index.html\" : redir(\"/kiri/\"),\n- \"/kiri\" : redir(\"/kiri/\"),\n- \"/kiri/\" : remap(\"/kiri/index.html\")\n+ \"/kiri\" : redir(\"/kiri/\", 301)\n}));\n+ mod.add(handleVersion);\nmod.add(prepath([\n[ \"/code/\", handleCode ],\n[ \"/wasm/\", handleWasm ]\n@@ -127,7 +128,7 @@ function initModule(mod, file, dir) {\nscript: script,\nmoddir: dir,\nrootdir: mod.dir,\n- version: ver.VERSION\n+ version: version\n},\npkg: {\nagent,\n@@ -367,6 +368,18 @@ function string2obj(s) {\nreturn JSON.parse(s);\n}\n+function handleVersion(req, res, next) {\n+ if (req.app.path === \"/kiri/\" && req.url.indexOf(version) < 0) {\n+ if (req.url.indexOf(\"?\") > 0) {\n+ return http.redirect(res, `${req.url}&ver=${version}`);\n+ } else {\n+ return http.redirect(res, `${req.url}?ver=${version}`);\n+ }\n+ } else {\n+ next();\n+ }\n+}\n+\nfunction handleOptions(req, res, next) {\nif (req.method === 'OPTIONS') {\naddCorsHeaders(req, res);\n@@ -480,7 +493,7 @@ function concatCode(array) {\n// if (file.indexOf(\":\\\\\") > 0) {\n// file = `/${file}`;\n// }\n- code.push(`\"/${file.replace(/\\\\/g,'/')}\",`);\n+ code.push(`\"/${file.replace(/\\\\/g,'/')}?${version}\",`);\n});\ncode.push([\n']; function load_next() {',\n@@ -635,8 +648,8 @@ function fixedmap(prefix, map) {\n}\n// HTTP 307 redirect\n-function redir(path) {\n- return (req, res, next) => http.redirect(res, path);\n+function redir(path, type) {\n+ return (req, res, next) => http.redirect(res, path, type);\n}\n// mangle request path\n@@ -659,16 +672,16 @@ function cookieValue(cookie,key) {\n}\nfunction rewriteHtmlVersion(req, res, next) {\n- if (req.url.indexOf(\".html\") > 0) {\n+ if (req.app.path === \"/kiri/\") {\nlet real_write = res.write;\nlet real_end = res.end;\nres.write = function() {\n- arguments[0] = arguments[0].toString().replace(/{{version}}/g,ver.VERSION);\n+ arguments[0] = arguments[0].toString().replace(/{{version}}/g,version);\nreal_write.apply(res, arguments);\n};\nres.end = function() {\nif (arguments[0]) {\n- arguments[0] = arguments[0].toString().replace(/{{version}}/g,ver.VERSION);\n+ arguments[0] = arguments[0].toString().replace(/{{version}}/g,version);\n}\nreal_end.apply(res, arguments);\n};\n",
        "chatgpt_cot": "Add scheduled job to update cardbase at midnight. Fix compilation issue due to missing schedule module."
    },
    {
        "org_diff": "diff --git a/views/user/user_view.pug b/views/user/user_view.pug @@ -30,8 +30,8 @@ block content\nif cube.type\na #{cube.card_count} Card #{cube.type} Cube\nbr\n- a(href='/cube/overview/'+get_cube_id(cube))\n+ a(href='/cube/overview/'+cube._id)\nimg.card-img-top(src=cube.image_uri style='width: 100%;height: auto;')\nem.text-right(style='padding: 2px;') Art by: #{cube.image_artist}\n- a.btn.btn-success(href='/cube/overview/'+get_cube_id(cube)) View\n+ a.btn.btn-success(href='/cube/overview/'+cube._id) View\nbr\n",
        "org_msg": "Let user view have cube ids in links",
        "sim_msg": "Added new function for starting a new answer",
        "sim_diff": "diff --git a/OurUmbraco.Site/Views/Partials/Forum/Thread.cshtml b/OurUmbraco.Site/Views/Partials/Forum/Thread.cshtml @@ -131,9 +131,11 @@ else\nif (id !== @Model.Id) {\nreturn;\n}\n- $('#writing-notification').html('Someone is Typing').fadeIn(100, function() {\n- $(this).delay(1000).fadeOut();\n- });;\n+ var notify = new PNotify({\n+ title: 'Someone starts to answer',\n+ text: 'Be patient, solution is coming soon',\n+ type: 'info'\n+ });\n};\nforum.client.returnLatestComment = function(data) {\n@@ -211,7 +213,7 @@ else\n// Start the connection.\n$.connection.hub.start().done(function () {\n- $('#wmd-input').keyup(function () {\n+ $('.forum-reply').click(function () {\nforum.server.someoneIsTyping(@Model.Id);\n});\n});\n",
        "chatgpt_cot": "\"Update user view to fix button link and use cube _id directly instead of calling get_cube_id(cube).\""
    },
    {
        "org_diff": "diff --git a/src/components/DeckPreview.js b/src/components/DeckPreview.js -import React, { useCallback, useState } from 'react';\n+import React, { useCallback, useMemo, useState } from 'react';\nimport TimeAgo from 'react-timeago';\nimport PropTypes from 'prop-types';\nimport DeckPropType from 'proptypes/DeckPropType';\n@@ -6,19 +6,32 @@ import DeckPropType from 'proptypes/DeckPropType';\nimport useKeyHandlers from 'hooks/UseKeyHandlers';\nimport DeckDeleteModal from 'components/DeckDeleteModal';\n+/** 2020-11-17 struesdell:\n+ * Pulled constants out of component render so that they are defined only once\n+ */\n+const MAX_LENGTH = 35;\n+const DEFAULT_DECK_NAME = 'Untitled Deck';\n+\n+/** 2020-11-17 struesdell:\n+ * Pulled string truncation logic out of component render and made it more\n+ * abstract and reusable. Consider refactoring into shared utilities.\n+ */\n+const truncateToLength = (len, s) => (!s ? '' : s.length > len ? `${s.slice(0, len - 3)}...` : s);\n+\nconst DeckPreview = ({ deck, canEdit, nextURL }) => {\n- const maxLength = 35;\nconst { date } = deck;\nconst [deleteModalOpen, setDeleteModalOpen] = useState(false);\n- let { name } = deck.seats[0];\n-\n- if (!name) {\n- name = 'Untitled Deck';\n- }\n- if (name.length > maxLength) {\n- name = `${name.slice(0, maxLength - 3)}...`;\n- }\n+ /** 2020-11-17 struesdell:\n+ * Refactored name derivation to take advantage of react.useMemo\n+ */\n+ let [fullName, name] = useMemo(\n+ () =>\n+ deck && deck.seats && deck.seats[0].name\n+ ? [deck.seats[0].name, truncateToLength(MAX_LENGTH, deck.seats[0].name)]\n+ : [DEFAULT_DECK_NAME, DEFAULT_DECK_NAME],\n+ [deck],\n+ );\nconst handleClick = useKeyHandlers(\nuseCallback(() => {\n@@ -65,7 +78,10 @@ const DeckPreview = ({ deck, canEdit, nextURL }) => {\n</>\n)}\n<h6 className=\"mb-0 text-muted\">\n- <a href={`/cube/deck/${deck._id}`}>{name}</a> by{' '}\n+ <a href={`/cube/deck/${deck._id}`} title={fullName}>\n+ {name}\n+ </a>{' '}\n+ by{' '}\n{deck.seats[0].userid ? (\n<a href={`/user/view/${deck.seats[0].userid}`}>{deck.seats[0].username}</a>\n) : (\n",
        "org_msg": "Add: Added `title` attribute to Deck name links\nThis change allows users to hover their mouse over a deck name and see the full\nname text even when the name would otherwise be truncated.",
        "sim_msg": "Import from public decks as well",
        "sim_diff": "diff --git a/client/DeckEditor.jsx b/client/DeckEditor.jsx @@ -238,17 +238,26 @@ class InnerDeckEditor extends React.Component {\nimportDeck() {\n$(findDOMNode(this.refs.modal)).modal('hide');\n- let strainUrl = document.getElementById('strainUrl').value;\n+ let importUrl = document.getElementById('importUrl').value;\nlet apiUrl = 'https://api.fiveringsdb.com/';\n- let path = 'strains';\n+ let strainPath = 'strains';\n+ let deckPath = 'decks';\nlet deckResponse = {};\n- let strainId = String(strainUrl).split('/')[4];\n+ let importId = String(importUrl).split('/')[4];\n+ let selector = String(importUrl).split('/')[3];\n+\n+ let path = '';\n+ if(selector === 'decks') {\n+ path = deckPath;\n+ } else if(selector === 'strains') {\n+ path = strainPath;\n+ }\n$.ajax({\ntype: 'GET',\n- url: apiUrl + path + '/' + strainId,\n+ url: apiUrl + path + '/' + importId,\ndataType: 'json',\nasync: false,\nsuccess: function(data) {\n@@ -256,12 +265,26 @@ class InnerDeckEditor extends React.Component {\n}\n});\n+ let deckClan = '';\n+ let deckAlliance = '';\n+ let deckName = '';\n+ let deckList = '';\n+ let cardList = '';\n+\n+\nif(deckResponse.success) {\nlet deckRecord = deckResponse.record;\n- let deckClan = deckRecord.head.clan;\n- let deckName = deckRecord.head.name;\n- let deckList = deckRecord.head.cards;\n- let cardList = '';\n+ if(selector === 'decks') {\n+ deckClan = deckRecord.primary_clan;\n+ deckAlliance = deckRecord.secondary_clan;\n+ deckName = deckRecord.name;\n+ deckList = deckRecord.cards;\n+ } else if(selector === 'strains') {\n+ deckClan = deckRecord.head.primary_clan;\n+ deckAlliance = deckRecord.head.secondary_clan;\n+ deckName = deckRecord.head.name;\n+ deckList = deckRecord.head.cards;\n+ }\nlet deck = this.copyDeck(this.state.deck);\n@@ -272,12 +295,14 @@ class InnerDeckEditor extends React.Component {\ndeck.faction = this.props.factions['crab'];\n}\n+ if(deckAlliance) {\n+ deck.alliance = this.props.factions[deckAlliance];\n+ } else {\n+ deck.alliance = this.props.factions['crab'];\n+ }\n+\n_.each(deckList, (count, card) => {\ncardList += count + ' ' + this.props.cards[card].name + '\\n';\n- let allianceClan = this.props.cards[card].clan;\n- if(allianceClan !== 'neutral' && allianceClan !== deckClan) {\n- deck.alliance = this.props.factions[this.props.cards[card].clan];\n- }\n});\n//Duplicate onCardListChange to get this working correctly\n@@ -361,7 +386,7 @@ class InnerDeckEditor extends React.Component {\n<h4 className='modal-title'>Provide Permalink</h4>\n</div>\n<div className='modal-body'>\n- <Input name='strainUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n+ <Input name='importUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n<div className='col-sm-1'>\n<button className='btn btn-default' onClick={ this.importDeck.bind(this) }>Import</button>\n</div>\n",
        "chatgpt_cot": "\"Refactor name derivation to use react.useMemo and pull constants and string truncation logic out of component render for DeckPreview.js.\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -190,6 +190,8 @@ function convertCard(card) {\nnewcard._id = card.id;\nnewcard.set = card.set;\nnewcard.promo = card.promo;\n+ newcard.digital = card.digital;\n+ newcard.border_color = card.border_color;\nnewcard.full_name = card.name + ' [' + card.set + '-' + card.collector_number + ']';\nnewcard.name = card.name;\nnewcard.name_lower = card.name.toLowerCase();\n",
        "org_msg": "Exclude digital + gold-border cards.\nBy default, import will no longer use digital or gold-bordered cards\nnow.",
        "sim_msg": "Serve additional card data",
        "sim_diff": "diff --git a/server/services/CardService.js b/server/services/CardService.js @@ -25,7 +25,7 @@ class CardService {\n_.each(result, card => {\nif(options && options.shortForm) {\n- cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'unicity', 'influence_cost', 'pack_cards');\n+ cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'element', 'unicity', 'influence_cost', 'influence_pool', 'pack_cards');\n} else {\ncards[card.id] = card;\n}\n",
        "chatgpt_cot": "Add digital and border color properties to converted card."
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -169,7 +169,7 @@ html(lang='en')\n#cubeModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='cubeModalLabel', aria-hidden='true')\n.modal-dialog(role='document')\n.modal-content\n- form(method='POST', action='/cube/add')\n+ form(method='POST', action='/cube/add', onsubmit='createButton.disabled = true; return true;')\ninput(type='hidden', name='_csrf', value=csrfToken)\n.modal-header\nh5#loginModalLabel.modal-title Create New Cube\n@@ -181,7 +181,7 @@ html(lang='en')\ninput.form-control(name='name', type='text')\nbr\n.modal-footer\n- input.btn.btn-success(type='submit',value='Create')\n+ input.btn.btn-success(name='createButton', type='submit', value='Create')\nbutton.btn.btn-secondary(type='button', data-dismiss='modal') Close\nif node_env === 'production'\n",
        "org_msg": "Prevents erroneous multiple cube creation submits\nSimple fix to disable submit after the new cube has been submitted once.",
        "sim_msg": "add project save and new for quick entry",
        "sim_diff": "diff --git a/templates/workflow/add_project_modal.html b/templates/workflow/add_project_modal.html theme: 'bootstrap',\ndropdownParent: $('#addProjectModal'),\n});\n+\n+\n+ // show the modal if project modal is set to true\n+ const url = new URL(window.location.href);\n+ if (url.searchParams.get('project-modal')) {\n+ $('#addProjectModal').modal('show');\n+ }\n});\n- $(() => {\n- $('#submitProject').click(e => {\n+\n+ var saveProject = (buttonId) => {\n+ $(`#${buttonId}`).click(e => {\ne.preventDefault();\nconst formValue = $('#addProjectForm').serializeArray();\n});\nconst data = { ...obj, program: $('#program').val() };\n-\n$.ajax({\nurl: '{% url \"add-level2\" %}',\ntype: 'POST',\n.select('val', '')\n.trigger('change');\n+ const urlWithoutQueryString = window.location.href.split('?')[0];\n+ if (buttonId === 'submitProjectAndNew') {\n+ window.location.replace(`${urlWithoutQueryString}?project-modal=true`);\n+ } else {\nsetTimeout(() => {\n- window.location.reload();\n+ window.location.replace(urlWithoutQueryString);\n}, 2000);\n+ }\n},\nerror: function (xhr, status, error) {\ntoastr.error(error, 'Failed');\n},\n});\n});\n+ }\n+\n+ $(function () {\n+ saveProject('submitProject');\n+ saveProject('submitProjectAndNew');\n});\n</script>\n<!-- Modal -->\n-<div\n- class=\"modal fade\"\n- id=\"addProjectModal\"\n- tabindex=\"-1\"\n- role=\"dialog\"\n- aria-labelledby=\"addProjectModalLabel\"\n->\n+<div class=\"modal fade\" id=\"addProjectModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"addProjectModalLabel\">\n<div class=\"modal-dialog\" role=\"form\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n- <button\n- type=\"button\"\n- class=\"close\"\n- data-dismiss=\"modal\"\n- aria-label=\"Close\"\n- >\n+ <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n<span aria-hidden=\"true\">&times;</span>\n</button>\n<h4 class=\"modal-title\" id=\"addProjectModalLabel\">\n</div>\n<form id=\"addProjectForm\" action=\"\" method=\"POST\">\n- <div class=\"modal-body\">\n{% csrf_token %}\n-\n+ <div class=\"modal-body\">\n<div class=\"form-group\">\n<label for=\"project_name\">{{request.user.activity_user.organization.level_2_label}} Name</label>\n- <input\n- type=\"text\"\n- name=\"project_name\"\n- required=\"\"\n- id=\"id_project_name\"\n- class=\"textinput textInput form-control\"\n- maxlength=\"255\"\n- placeholder=\"{{request.user.activity_user.organization.level_2_label}} Name\"\n- />\n+ <input type=\"text\" name=\"project_name\" required=\"\" id=\"id_project_name\"\n+ class=\"textinput textInput form-control\" maxlength=\"255\"\n+ placeholder=\"{{request.user.activity_user.organization.level_2_label}} Name\" />\n</div>\n<div class=\"form-group\">\n<button type=\"reset\" class=\"btn btn-close\" data-dismiss=\"modal\">\nClose\n</button>\n- <button type=\"submit\" class=\"btn btn-success\" id=\"submitProject\">\n+ <button type=\"button\" class=\"btn btn-outline-success\" id=\"submitProjectAndNew\">\n+ Save &amp; New\n+ </button>\n+\n+ <button type=\"button\" class=\"btn btn-success\" id=\"submitProject\">\nSave\n</button>\n</div>\n",
        "chatgpt_cot": "Add onsubmit event to form in layout.pug to disable createButton and fix CSRF token value. Update createButton name attribute in form."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -166,6 +166,17 @@ router.get('/clone/:id', async (req, res) => {\ncube = setCubeType(cube, carddb);\nawait cube.save();\n+ const newOwnerq = User.findById(req.user);\n+ const sourceOwnerq = User.findById(source.owner);\n+ const [newOwner, sourceOwner] = await Promise.all([newOwnerq, sourceOwnerq]);\n+\n+ await util.addNotification(\n+ sourceOwner,\n+ newOwner,\n+ `/cube/view/${cube._id}`,\n+ `${user.username} made a cube by cloning yours: ${cube.name}`,\n+ );\n+\nreq.flash('success', 'Cube Cloned');\nreturn res.redirect(`/cube/overview/${cube.shortID}`);\n} catch (err) {\n",
        "org_msg": "cube clone notification\nFire a notification when cube is cloned.",
        "sim_msg": "Add missing route back in",
        "sim_diff": "diff --git a/app/router.js b/app/router.js @@ -125,6 +125,9 @@ Router.map(function() {\nthis.route('add', {path: '/add/:cloud_id'});\n});\n+ this.route('new', {path: '/add'}, function() {\n+ this.route('index', {path: '/'});\n+ });\nthis.route('host', {path: '/:host_id', resetNamespace: true}, function() {\nthis.route('containers');\n",
        "chatgpt_cot": "\"Add notifications for cube cloning and fix user variable reference in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -35,7 +35,6 @@ import DisplayContext from './DisplayContext';\nimport EditCollapse from './EditCollapse';\nimport FilterCollapse from './FilterCollapse';\nimport GroupModalContext from './GroupModalContext';\n-import LoadingButton from './LoadingButton';\nimport SortCollapse from './SortCollapse';\nimport TagColorsModal from './TagColorsModal';\nimport withModal from './WithModal';\n@@ -62,9 +61,9 @@ const PasteBulkModal = ({ isOpen, toggle }) => {\n/>\n</ModalBody>\n<ModalFooter>\n- <LoadingButton color=\"success\" type=\"submit\">\n+ <Button color=\"success\" type=\"submit\">\nUpload\n- </LoadingButton>\n+ </Button>\n<Button color=\"secondary\" onclick={toggle}>\nClose\n</Button>\n",
        "org_msg": "Don't use loading button.",
        "sim_msg": "Navbar height adjusting to screen size",
        "sim_diff": "diff --git a/src/components/appNavigation/NavBar.js b/src/components/appNavigation/NavBar.js @@ -7,6 +7,7 @@ import normalize from '../../lib/utils/normalizeText'\nimport { getShadowStyles } from '../../lib/utils/getStyles'\nimport { isMobile } from '../../lib/utils/platform'\nimport { IconButton } from '../common'\n+import { getDesignRelativeHeight } from '../../lib/utils/sizes'\n/**\n* @type\n@@ -66,10 +67,11 @@ const getStylesFromProps = ({ theme }) => ({\ntextAlign: 'center',\ntextTransform: 'uppercase',\ncolor: theme.colors.surface,\n- fontSize: normalize(16),\n+ fontSize: getDesignRelativeHeight(normalize(16)),\nfontWeight: '500',\n},\ntopbarStyles: {\n+ height: getDesignRelativeHeight(55),\nflexGrow: 0,\nflexShrink: 0,\n...getShadowStyles('none', { elevation: 0 }),\n",
        "chatgpt_cot": "Remove LoadingButton and replace it with Button in CubeListNavbar to improve code consistency and user experience."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3244,7 +3244,7 @@ router.get('/deck/:id', async (req, res) => {\nlet draft = null;\nif (deck.draft) {\n- draft = await Draft.findById(deck.draft).lean();\n+ draft = await Draft.findById(deck.draft);\nif (!draft.synergies) {\n// put in synergies for old drafts that don't have em.\nconst cards = draft.initial_state.flat(3);\n",
        "org_msg": "Fix issue where old decks can't be viewed",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "Add missing await keyword for Draft findById method call in deck route to ensure proper retrieval of draft synergies."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.test.js b/__tests__/serverjs/updatecards.test.js @@ -165,7 +165,7 @@ test(\"initializeCatalog clears the updatecards structures\", () => {\nupdatecards.initializeCatalog();\nexpect(Object.keys(updatecards.catalog.dict).length).toBe(0);\nexpect(updatecards.catalog.names.length).toBe(0);\n- expect(updatecards.catalog.nameToId.length).toBe(0);\n+ expect(Object.keys(updatecards.catalog.nameToId).length).toBe(0);\nexpect(updatecards.catalog.full_names.length).toBe(0);\nexpect(Object.keys(updatecards.catalog.imagedict).length).toBe(0);\nexpect(Object.keys(updatecards.catalog.cardimages).length).toBe(0);\n",
        "org_msg": "fix test expectation about initialized structure",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "\"Fix updatecards.test.js to use Object.keys for nameToId\""
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -4,6 +4,7 @@ const bcrypt = require('bcryptjs');\nconst passport = require('passport');\nconst mailer = require('nodemailer');\nconst { body } = require('express-validator');\n+const serialize = require('serialize-javascript');\n// eslint-disable-next-line import/no-unresolved\nconst emailconfig = require('../../cubecobrasecrets/email');\n",
        "org_msg": "Fix serialize-javascript error.",
        "sim_msg": "routes/index.js linting complete",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js var fs = require(\"fs\");\nvar path = require(\"path\");\nvar log = require(\"../log\").logger(\"routes\");\n-var restify = require(\"restify\");\n-var util = require(\"../util\");\n-var authentication = require(\"../authentication\");\nvar config = require(\"../config\");\nvar getStaticServeFunction = require(\"../static\");\n@@ -12,13 +9,13 @@ module.exports = function (server) {\nvar routeDir = __dirname;\nvar files = fs.readdirSync(routeDir);\nfiles.forEach(function (file) {\n- filePath = path.resolve(\"./\", routeDir, file);\n+ var filePath = path.resolve(\"./\", routeDir, file);\nif (\npath.extname(filePath) == \".js\" &&\npath.basename(filePath) != \"index.js\"\n) {\ntry {\n- routes = require(filePath);\n+ var routes = require(filePath);\nif (typeof routes == \"function\") {\nroutes(server);\nlog.debug(' Loaded routes from \"' + filePath + '\"');\n",
        "chatgpt_cot": "Add serialize-javascript library import for serialization, improving data handling in user routes."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -264,11 +264,11 @@ function CSVtoCards(csvString, carddb) {\ncolors: (color || null) && color.split('').filter((c) => [...'WUBRG'].includes(c)),\naddedTmsp: new Date(),\ncollector_number: collectorNumber && collectorNumber.toUpperCase(),\n- status,\n- finish,\n+ status: status || 'Not Owned',\n+ finish: finish || 'Non-foil',\nimgUrl: (imageUrl || null) && imageUrl !== 'undefined' ? imageUrl : null,\ntags: tags && tags.length > 0 ? tags.split(',') : [],\n- notes,\n+ notes: notes || '',\nrarity: rarity || null,\ncolorCategory: colorCategory || null,\n};\n",
        "org_msg": "Add more defaults for CSV upload",
        "sim_msg": "Fix crash on downloading empty table as CSV",
        "sim_diff": "diff --git a/src/utils.js b/src/utils.js @@ -52,6 +52,7 @@ function createCSVDownload(columns, data, options) {\nconst CSVHead = buildHead(columns);\nconst buildBody = data => {\n+ if (!data.length) return '';\nreturn data\n.reduce(\n(soFar, row) =>\n",
        "chatgpt_cot": "\"Add default values for status, finish, and notes in CSVtoCards function to handle missing data and improve data consistency.\""
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"private\": true,\n\"main\": \"app.js\",\n\"scripts\": {\n- \"beautify\": \"js-beautify -r *.js {config,models,routes,serverjs,views,public/js}/**/*.js\",\n- \"lint\": \"beautify-lint *.js {config,models,routes,serverjs,views,public/js}/**/*.js\",\n+ \"beautify\": \"js-beautify -r *.js {config,models,routes,serverjs,views,public/js,__tests__}/**/*.js\",\n+ \"lint\": \"beautify-lint *.js {config,models,routes,serverjs,views,public/js,__tests__}/**/*.js\",\n\"build\": \"node_modules/.bin/webpack --mode production --config webpack.prod.js\",\n\"start\": \"nodemon --ignore src --ignore public & node_modules/.bin/webpack-dev-server --config webpack.dev.js\",\n\"test\": \"jest\"\n",
        "org_msg": "lint test files",
        "sim_msg": "put cmds between \"s so it works on windows",
        "sim_diff": "diff --git a/package.json b/package.json \"scripts\": {\n\"lint\": \"./node_modules/.bin/eslint lib/\",\n\"test\": \"mocha test/ --no-timeouts\",\n- \"testdapp_1\": \"cd test_apps/test_app/ && npm install && ../../bin/embark test\",\n- \"testdapp_2\": \"cd test_apps/contracts_app/ && npm install && ../../bin/embark test\",\n+ \"testdapp_1\": \"cd test_apps/test_app/ && npm install && \\\"../../bin/embark\\\" test\",\n+ \"testdapp_2\": \"cd test_apps/contracts_app/ && npm install && \\\"../../bin/embark\\\" test\",\n\"fulltest\": \"npm run lint && npm run test && npm run testdapp_1 && npm run testdapp_2\"\n},\n\"bin\": {\n",
        "chatgpt_cot": "Update beautify and lint scripts to include __tests__ directory for better code formatting and linting."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -11,9 +11,6 @@ var imagedict = {};\nvar cardimages = {};\n-if (!fs.existsSync('private')) {\n- fs.mkdirSync('private');\n-}\nfunction downloadDefaultCards() {\nvar file = fs.createWriteStream('private/cards.json');\n@@ -33,6 +30,9 @@ function updateCardbase(filepath) {\nif (filepath === undefined) {\nfilepath = 'private/cards.json';\n}\n+ if (!fs.existsSync('private')) {\n+ fs.mkdirSync('private');\n+ }\nreturn module.exports.downloadDefaultCards().then(function() {\nconsole.log(\"Running save\");\nvar contents = fs.readFileSync(filepath);\n",
        "org_msg": "create private dir inside updatecardbase to make it work during repeated independent tests",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "Add check for existence of 'private' directory before creating it to prevent errors in updatecards.js."
    },
    {
        "org_diff": "diff --git a/views/cube/cube_overview.pug b/views/cube/cube_overview.pug @@ -11,7 +11,7 @@ block cube_toolbar\nli.nav-item\na.nav-link(href='#' data-toggle='modal', data-target='#overviewModal') Edit Overview\nli.nav-item\n- a.nav-link(href='#' data-toggle='modal', data-target='#deleteModal') Delete Cube\n+ a.nav-link(href='#' data-toggle='modal', data-target='#deleteCubeModal') Delete Cube\ninclude ../dynamic_flash\nblock cube_content\n@@ -98,7 +98,7 @@ block cube_content\ninput.btn.btn-success(type='submit',value='Save')\nbutton.btn.btn-secondary(type='button', data-dismiss='modal') Close\n- #deleteModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='deleteModalLabel', aria-hidden='true')\n+ #deleteCubeModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='deleteCubeModalLabel', aria-hidden='true')\n.modal-dialog(role='document')\n.modal-content\n.modal-header\n",
        "org_msg": "Fixed overlap of cube and comment delete on overview",
        "sim_msg": "Improves in UI when editing a category",
        "sim_diff": "diff --git a/bl-kernel/admin/views/edit-category.php b/bl-kernel/admin/views/edit-category.php @@ -19,7 +19,7 @@ echo Bootstrap::formOpen(array('id'=>'jsform'));\n'value'=>$categoryMap['key']\n));\n- echo Bootstrap::formInputTextBlock(array(\n+ echo Bootstrap::formInputText(array(\n'name'=>'name',\n'label'=>$L->g('Name'),\n'value'=>$categoryMap['name'],\n@@ -28,7 +28,7 @@ echo Bootstrap::formOpen(array('id'=>'jsform'));\n'tip'=>''\n));\n- echo Bootstrap::formTextareaBlock(array(\n+ echo Bootstrap::formTextarea(array(\n'name'=>'description',\n'label'=>$L->g('Description'),\n'value'=>isset($categoryMap['description'])?$categoryMap['description']:'',\n@@ -38,7 +38,7 @@ echo Bootstrap::formOpen(array('id'=>'jsform'));\n'rows'=>3\n));\n- echo Bootstrap::formInputTextBlock(array(\n+ echo Bootstrap::formInputText(array(\n'name'=>'template',\n'label'=>$L->g('Template'),\n'value'=>isset($categoryMap['template'])?$categoryMap['template']:'',\n@@ -47,21 +47,20 @@ echo Bootstrap::formOpen(array('id'=>'jsform'));\n'tip'=>''\n));\n- echo Bootstrap::formInputGroupText(array(\n+ echo Bootstrap::formInputText(array(\n'name'=>'newKey',\n'label'=>$L->g('Friendly URL'),\n- 'labelInside'=>DOMAIN_CATEGORIES,\n'value'=>$categoryMap['key'],\n'class'=>'',\n'placeholder'=>'',\n- 'tip'=>''\n+ 'tip'=>DOMAIN_CATEGORIES.$categoryMap['key']\n));\necho '\n<div class=\"form-group mt-4\">\n<button type=\"submit\" class=\"btn btn-primary\">'.$L->g('Save').'</button>\n+ <button type=\"button\" class=\"btn btn-danger\" data-toggle=\"modal\" data-target=\"#jsdeleteModal\">'.$L->g('Delete').'</button>\n<a class=\"btn btn-secondary\" href=\"'.HTML_PATH_ADMIN_ROOT.'categories\" role=\"button\">'.$L->g('Cancel').'</a>\n- <button type=\"button\" class=\"btn btn-secondary\" data-toggle=\"modal\" data-target=\"#jsdeleteModal\">'.$L->g('Delete').'</button>\n</div>\n';\n",
        "chatgpt_cot": "Update modal IDs in cube_overview.pug to prevent conflicts and improve clarity for Delete Cube functionality."
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -365,7 +365,7 @@ async function buildQuery(key, value, delim) {\nbreak;\ncase 'category':\nif (prefixes.includes(value)) {\n- query.categoryPrefixes = { $regex: value, $options: 'i' };\n+ query.categoryPrefixes = { $regex: `\\\\b${value}\\\\b`, $options: 'i' };\n} else {\nquery.categoryOverride = { $regex: value, $options: 'i' };\n}\n",
        "org_msg": "Add word boundary",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "Refactor category filter regex in buildQuery function to include word boundaries for exact match. Fix potential filtering issue in root.js."
    },
    {
        "org_diff": "diff --git a/src/util/draftutil.js b/src/util/draftutil.js @@ -59,13 +59,13 @@ function standardDraft(cards, probabilistic = false) {\nthrow new Error('Unable to create draft: not enough cards.');\n}\nreturn function(cardFilters) {\n- // ignore cardFilter, just take any card in cube\n+ // ignore cardFilters, just take any card in cube\nif (cards.length === 0) {\nthrow new Error('Unable to create draft: not enough cards.');\n}\n// remove a random card\ncards = arrayShuffle(cards);\n- return { card: cards.pop(), message: '' };\n+ return { card: cards.pop(), messages: '' };\n};\n}\n@@ -77,7 +77,7 @@ function standDraftAsfan(cards) {\nconst poolWeight = 1 / poolCount;\nreturn (cardFilters) => {\ncards.forEach((card) => (card.asfan += poolWeight));\n- return { card: true, message: '' };\n+ return { card: true, messages: '' };\n};\n}\n@@ -214,12 +214,13 @@ function createPacks(draft, format, seats, nextCardFn) {\nlet pack = [];\nfor (let cardNum = 0; cardNum < format[packNum].length; cardNum++) {\nlet result = nextCardFn(format[packNum][cardNum]);\n- ok = ok && result.ok;\nif (result.messages && result.messages.length > 0) {\nmessages = messages.concat(result.messages);\n}\nif (result.card) {\npack.push(result.card);\n+ } else {\n+ ok = false;\n}\n}\nif (!format.custom) {\n@@ -257,7 +258,6 @@ export function populateDraft(draft, format, cards, bots, seats) {\nlet result = createPacks(draft, format, seats, nextCardFn);\nif (result.messages.length > 0) {\n- // TODO: display messages to user\ndraft.messages = result.messages.join('\\n');\n}\n",
        "org_msg": "Fix standard drafts messages and result values",
        "sim_msg": "Improve drafts page layout",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -26,12 +26,10 @@ let DraftRow = (props) => {\nDraftRow = connect(() => ({}), { deleteDraft })(DraftRow);\nconst DraftList = ({ editor: { draftPosts } }) =>\n- (\n<div className=\"main-panel\">\n<Header />\n- <div className=\"my-3\">\n+ <div className=\"my-3 container container-small\">\n<h1 className=\"text-xs-center\">Drafts</h1>\n- <div className=\"container\">\n{ _.size(draftPosts) === 0 &&\n<h3 className=\"text-xs-center\">\nYou don't have any draft saved.\n@@ -41,8 +39,6 @@ const DraftList = ({ editor: { draftPosts } }) =>\n<DraftRow key={key} data={draft.postData} id={key} />)\n}\n</div>\n- </div>\n- </div>\n- );\n+ </div>;\nexport default connect(state => ({ editor: state.editor }))(DraftList);\n",
        "chatgpt_cot": "Fix messages typo in draftutil.js to resolve compilation issue and improve code readability. Update return object to include \"messages\" property."
    },
    {
        "org_diff": "diff --git a/src/utils/Card.js b/src/utils/Card.js @@ -95,7 +95,7 @@ export const cardRarity = (card) => card.rarity ?? card.details.rarity;\nexport const cardAddedTime = (card) => card.addedTmsp;\n-export const cardImg = (card) => card.imgUrl ?? card.details.image_normal ?? card.details.image_small;\n+export const cardImageUrl = (card) => card.imgUrl ?? card.details.image_normal ?? card.details.image_small;\nexport const cardNotes = (card) => card.notes;\n@@ -178,7 +178,7 @@ export default {\ncardType,\ncardRarity,\ncardAddedTime,\n- cardImg,\n+ cardImageUrl,\ncardNotes,\ncardColorCategory,\ncardCost,\n",
        "org_msg": "Rename cardImg to cardImageUrl",
        "sim_msg": "Card generator dead argument cleanup",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -76,7 +76,7 @@ const _previewImage = (image, width, height) => {\nexport const generateObjectUrlCard = async ({\nstart_url,\nwidth = 300,\n- height = 300,\n+ // height = width,\n}) => {\nconst app = await metaversefile.createAppAsync({\nstart_url,\n@@ -84,13 +84,13 @@ export const generateObjectUrlCard = async ({\nreturn await generateObjectCard({\napp,\nwidth,\n- height,\n+ // height,\n});\n};\nexport const generateObjectCard = async ({\napp,\nwidth = 300,\n- height = 300,\n+ // height = width,\n}) => {\nconst stats = generateStats(app.contentId);\nconst {\n",
        "chatgpt_cot": "\"Refactor cardImg function to cardImageUrl for clarity and consistency with naming conventions.\""
    },
    {
        "org_diff": "diff --git a/src/utils/Filter.js b/src/utils/Filter.js @@ -165,7 +165,7 @@ export function tokenizeInput(filterText, tokens) {\ntoken.arg = simplifyArg(token.arg, token.category);\nif (token.operand && token.category && token.arg) {\n// replace any escaped quotes with normal quotes\n- if (parens) token.arg = token.arg.replace(/\\\\\"/g, '\"');\n+ if (parens && typeof token.arg === 'string') token.arg = token.arg.replace(/\\\\\"/g, '\"');\ntokens.push(token);\nreturn tokenizeInput(filterText, tokens);\n}\n",
        "org_msg": "Fix filter crash.",
        "sim_msg": "fix error position computation",
        "sim_diff": "diff --git a/src/parser.js b/src/parser.js @@ -31,7 +31,8 @@ module.exports = function(input, tokens, positions) {\ntry {\np.feed(tokens);\n} catch(err) {\n- const index = tokens.substring(0, err.offset).match(/\\s(?=(?:[^'\"`]*(['\"`])[^'\"`]*\\1)*[^'\"`]*$)/g).length;\n+ const cleaned = tokens.substring(0, err.offset).replace(/\"[^\"]*\"/g, 'x');\n+ const index = cleaned.match(/ /g).length;\nconst position = positions[index];\nconst message = 'Error parsing input at line ' + position[0] + ', column ' + position[1] + '\\n\\n' + input.split('\\n')[position[0] - 1] + '\\n' + Array(position[1] - 2).join(' ') + '^^^';\nconst e = new Error(message);\n",
        "chatgpt_cot": "Fix issue with escaped quotes in Filter.js by adding a condition to check if token.arg is a string before replacing escaped quotes."
    },
    {
        "org_diff": "diff --git a/src/cube_overview.js b/src/cube_overview.js @@ -167,6 +167,15 @@ class CubeOverview extends Component {\n<Card>\n<CardHeader>\n<h3>{cube.name}</h3>\n+ <Row>\n+ <Col>\n+ <h6 className=\"card-subtitle mb-2\" style={{ marginTop: 10 }}>\n+ <FollowersModalLink href=\"#\" modalProps={{ followers }}>\n+ {numFollowers} {numFollowers === 1 ? 'follower' : 'followers'}\n+ </FollowersModalLink>\n+ </h6>\n+ </Col>\n+ <Col sm={5} style={{ paddingTop: 3 }}>\n<TextBadge name=\"Cube ID\">\n<Tooltip text=\"Click to copy to clipboard\">\n<button\n@@ -183,11 +192,8 @@ class CubeOverview extends Component {\n</button>\n</Tooltip>\n</TextBadge>\n- <h6 className=\"card-subtitle mb-2\" style={{ marginTop: 10 }}>\n- <FollowersModalLink href=\"#\" modalProps={{ followers }}>\n- {numFollowers} {numFollowers === 1 ? 'follower' : 'followers'}\n- </FollowersModalLink>\n- </h6>\n+ </Col>\n+ </Row>\n</CardHeader>\n<div className=\"position-relative\">\n<img className=\"card-img-top w-100\" alt={cube.image_name} src={cube.image_uri} />\n",
        "org_msg": "Adjust cube ID badge position",
        "sim_msg": "remove Parent Child Tooltips",
        "sim_diff": "diff --git a/accessibility-checker-extension/src/ts/devtools/ReportRow.tsx b/accessibility-checker-extension/src/ts/devtools/ReportRow.tsx import React, { RefObject } from \"react\";\n-import ReactTooltip from \"react-tooltip\";\n+// import ReactTooltip from \"react-tooltip\";\nimport { IReportItem, valueMap, ICheckpoint, IReport} from \"./Report\";\n@@ -190,15 +190,16 @@ export default class ReportRow extends React.Component<IReportRowProps, IReportR\nreturn <React.Fragment>\n{!this.props.focusedViewFilter || (focusedView && (item.selected || item.selectedChild)) ?\n(this.props.dataFromParent[0] || this.props.dataFromParent[1] && val === \"Violation\" || this.props.dataFromParent[2] && val === \"Needs review\" || this.props.dataFromParent[3] && val === \"Recommendation\") ?\n+ // (<div data-tip data-for={item.selected ? \"selectedTip\" : \"selectedChildTip\" } tabIndex={0} role=\"row\" style={{cursor:'pointer'}} aria-rowindex={++rowindex} aria-selected={!!item.selected} className={\"bx--row itemDetail\"+(item.selected ? \" selected\": \"\")+(item.selectedChild ? \" selectedChild\": \"\")} onClick={this.props.selectItem.bind(this, item, this.props.group.checkpoint)} onKeyDown={this.onKeyDown.bind(this)}>\n(<div data-tip data-for={item.selected ? \"selectedTip\" : \"selectedChildTip\" } tabIndex={0} role=\"row\" style={{cursor:'pointer'}} aria-rowindex={++rowindex} aria-selected={!!item.selected} className={\"bx--row itemDetail\"+(item.selected ? \" selected\": \"\")+(item.selectedChild ? \" selectedChild\": \"\")} onClick={this.props.selectItem.bind(this, item, this.props.group.checkpoint)} onKeyDown={this.onKeyDown.bind(this)}>\n- {focusedView && item.selected ?\n+ {/* {focusedView && item.selected ?\n<ReactTooltip id=\"selectedTip\" place=\"top\" effect=\"solid\">\nParent element issue\n</ReactTooltip> : \"\"}\n{focusedView && item.selectedChild ?\n<ReactTooltip id=\"selectedChildTip\" place=\"top\" effect=\"solid\">\nChild element issue\n- </ReactTooltip> : \"\"}\n+ </ReactTooltip> : \"\"} */}\n<div role=\"cell\" className=\"bx--col-sm-1\"> </div>\n<div role=\"cell\" className=\"bx--col-sm-3\">\n<div className=\"itemMessage\">\n",
        "chatgpt_cot": "Add new followers modal link in CubeOverview class. The modification enhances the user interface by displaying the number of followers for a specific cube."
    },
    {
        "org_diff": "diff --git a/src/components/Markdown.js b/src/components/Markdown.js @@ -72,13 +72,13 @@ const renderHeading = (node) => {\nreturn React.createElement(`h${node.level}`, node.node?.data?.hProperties ?? {}, node.children);\n};\n-const renderCode = ({ language, value }) => {\n+const renderCode = (node) => {\nconst mode = getComputedStyle(document.body).getPropertyValue('--mode').trim();\nconst style = mode === 'dark' ? a11yDark : a11yLight;\nreturn (\n- <SyntaxHighlighter language={language || 'text'} style={style}>\n- {value}\n+ <SyntaxHighlighter language={node.language || 'text'} style={style}>\n+ {node.value}\n</SyntaxHighlighter>\n);\n};\n@@ -149,6 +149,9 @@ const renderCardrow = (node) => {\n};\nconst Markdown = ({ markdown, limited }) => {\n+ const validSymbols = 'wubrgcmtsqepxyz/-0123456789';\n+ const markdownStr = markdown?.toString() ?? '';\n+\nconst renderers = {\n// overridden defaults\nlink: renderLink,\n@@ -170,25 +173,23 @@ const Markdown = ({ markdown, limited }) => {\ncardrow: renderCardrow,\n};\n- const validSymbols = 'wubrgcmtsqepxyz/-0123456789';\n- const markdownStr = markdown?.toString() ?? '';\n- return (\n- <ReactMarkdown\n- className=\"markdown\"\n- plugins={[\n+ const plugins = [\ncardrow,\ncentering,\nbreaks,\nmath,\nuserlink,\ncardlink,\n- slug,\n- headings,\n[gfm, { singleTilde: false }],\n[symbols, { allowed: validSymbols }],\n- ]}\n- renderers={renderers}\n- >\n+ ];\n+\n+ if (!limited) {\n+ plugins.push(slug, headings);\n+ }\n+\n+ return (\n+ <ReactMarkdown className=\"markdown\" plugins={plugins} renderers={renderers}>\n{markdownStr}\n</ReactMarkdown>\n);\n",
        "org_msg": "removed heading links from comments",
        "sim_msg": "fix rte link serialization",
        "sim_diff": "diff --git a/src/components/Widgets/MarkdownControl/VisualEditor/index.js b/src/components/Widgets/MarkdownControl/VisualEditor/index.js @@ -90,27 +90,36 @@ const MARK_TAGS = {\ncode: 'code'\n}\n-const NODE_COMPONENTS = {\n- 'quote': props => <blockquote {...props.attributes}>{props.children}</blockquote>,\n+const BLOCK_COMPONENTS = {\n+ 'paragraph': props => <p>{props.children}</p>,\n+ 'list-item': props => <li {...props.attributes}>{props.children}</li>,\n'bulleted-list': props => <ul {...props.attributes}>{props.children}</ul>,\n+ 'numbered-list': props => <ol {...props.attributes}>{props.children}</ol>,\n+ 'quote': props => <blockquote {...props.attributes}>{props.children}</blockquote>,\n+ 'code': props => <pre {...props.attributes}><code>{props.children}</code></pre>,\n'heading-one': props => <h1 {...props.attributes}>{props.children}</h1>,\n'heading-two': props => <h2 {...props.attributes}>{props.children}</h2>,\n'heading-three': props => <h3 {...props.attributes}>{props.children}</h3>,\n'heading-four': props => <h4 {...props.attributes}>{props.children}</h4>,\n'heading-five': props => <h5 {...props.attributes}>{props.children}</h5>,\n'heading-six': props => <h6 {...props.attributes}>{props.children}</h6>,\n- 'list-item': props => <li {...props.attributes}>{props.children}</li>,\n- 'numbered-list': props => <ol {...props.attributes}>{props.children}</ol>,\n- 'code': props => <pre {...props.attributes}><code>{props.children}</code></pre>,\n- 'link': props => <a href={props.node.data.href} {...props.attributes}>{props.children}</a>,\n- 'paragraph': props => <p>{props.children}</p>,\n};\n+const NODE_COMPONENTS = {\n+ ...BLOCK_COMPONENTS,\n+ 'link': props => {\n+ const href = props.node && props.node.getIn(['data', 'href']) || props.href;\n+ return <a href={href} {...props.attributes}>{props.children}</a>;\n+ },\n+}\n+\n+\nconst MARK_COMPONENTS = {\nbold: props => <strong>{props.children}</strong>,\n- code: props => <code>{props.children}</code>,\nitalic: props => <em>{props.children}</em>,\nunderlined: props => <u>{props.children}</u>,\n+ strikethrough: props => <s>{props.children}</s>,\n+ code: props => <code>{props.children}</code>,\n};\nconst RULES = [\n@@ -125,7 +134,7 @@ const RULES = [\n}\n},\nserialize(entity, children) {\n- const component = NODE_COMPONENTS[entity.type]\n+ const component = BLOCK_COMPONENTS[entity.type]\nif (!component) {\nreturn;\n}\n@@ -166,7 +175,6 @@ const RULES = [\n}\n},\n},\n- /*\n{\n// Special case for links, to grab their href.\ndeserialize(el, next) {\n@@ -180,8 +188,19 @@ const RULES = [\n}\n}\n},\n+ serialize(entity, children) {\n+ if (entity.type !== 'link') {\n+ return;\n+ }\n+ const data = entity.get('data');\n+ const props = {\n+ href: data.get('href'),\n+ attributes: data.get('attributes'),\n+ children,\n+ };\n+ return NODE_COMPONENTS.link(props);\n+ }\n},\n- */\n]\nconst serializer = new SlateHtml({ rules: RULES });\n",
        "chatgpt_cot": "\"Add validSymbols and plugins array, conditionally push slug and headings plugins based on limited prop in Markdown.js\""
    },
    {
        "org_diff": "diff --git a/models/cube.js b/models/cube.js @@ -6,6 +6,11 @@ let cubeSchema = mongoose.Schema({\ntype: String,\nrequired: true\n},\n+ shortID: {\n+ type: String,\n+ required: true\n+ },\n+ urlAlias: String,\nowner: {\ntype: String,\nrequired: true\n",
        "org_msg": "add shortID and urlAlias fields to cube model",
        "sim_msg": "additionalProperties supports multiple possible types",
        "sim_diff": "diff --git a/bin/definition/schema.js b/bin/definition/schema.js @@ -195,10 +195,9 @@ Object.assign(Schema.properties, {\n}\n}\n},\n- items: {\n- allowed: ({parent}) => parent.value.type === 'array',\n- additionalProperties: Schema\n- },\n+ items: Object.assign({}, Schema, {\n+ allowed: ({parent}) => parent.value.type === 'array'\n+ }),\nallOf: {\nallowed: ({parent}) => parent.value.type === 'object',\nitems: Schema\n@@ -209,6 +208,8 @@ Object.assign(Schema.properties, {\n},\nadditionalProperties: {\nallowed: ({parent}) => parent.value.type === 'object',\n+ type: ['boolean', 'object'],\n+ default: false,\nproperties: Schema\n},\ndiscriminator: {\n",
        "chatgpt_cot": "Add shortID attribute to Cube model for unique identification and required field, update Cube model schema."
    },
    {
        "org_diff": "diff --git a/src/components/Paginate.js b/src/components/Paginate.js @@ -30,7 +30,7 @@ RealPage.defaultProps = {\nconst FakePage = ({ text }) => (\n<PaginationItem disabled>\n- <PaginationLink tag=\"a\">{text}</PaginationLink>\n+ <PaginationLink>{text}</PaginationLink>\n</PaginationItem>\n);\n",
        "org_msg": "tag=a without href is a button",
        "sim_msg": "Fix dynamic bullets when not enough bullets\nFixes",
        "sim_diff": "diff --git a/src/components/pagination/pagination.js b/src/components/pagination/pagination.js @@ -69,7 +69,8 @@ const Pagination = {\n}\n}\nif (params.dynamicBullets) {\n- const bulletsOffset = (((swiper.pagination.bulletSize * 5) - (swiper.pagination.bulletSize)) / 2) - (current * swiper.pagination.bulletSize);\n+ const dynamicBulletsLength = Math.min(bullets.length, 5);\n+ const bulletsOffset = (((swiper.pagination.bulletSize * dynamicBulletsLength) - (swiper.pagination.bulletSize)) / 2) - (current * swiper.pagination.bulletSize);\nconst offsetProp = rtl ? 'right' : 'left';\nbullets.css(swiper.isHorizontal() ? offsetProp : 'top', `${bulletsOffset}px`);\n}\n",
        "chatgpt_cot": "Update Paginate component to remove unnecessary tag attribute in PaginationLink for FakePage."
    },
    {
        "org_diff": "diff --git a/src/components/CubeCompareNavbar.js b/src/components/CubeCompareNavbar.js @@ -66,7 +66,8 @@ class CubeCompareNavbar extends Component {\n</li>\n</ul>\n</div>\n- <Navbar expand=\"md\" light className=\"usercontrols\">\n+ <div className=\"usercontrols\">\n+ <Navbar expand=\"md\" light>\n<NavbarToggler onClick={this.toggle} />\n<Collapse isOpen={this.state.isOpen} navbar>\n<Nav navbar>\n@@ -95,6 +96,7 @@ class CubeCompareNavbar extends Component {\nnumCards={cards.length}\nisOpen={this.props.openCollapse === 'filter'}\n/>\n+ </div>\n<TagColorsModal\ncanEdit={false}\nisOpen={this.state.tagColorsModalOpen}\n",
        "org_msg": "Fix compare collapse UI.",
        "sim_msg": "Navbar height adjusting to screen size",
        "sim_diff": "diff --git a/src/components/appNavigation/NavBar.js b/src/components/appNavigation/NavBar.js @@ -7,6 +7,7 @@ import normalize from '../../lib/utils/normalizeText'\nimport { getShadowStyles } from '../../lib/utils/getStyles'\nimport { isMobile } from '../../lib/utils/platform'\nimport { IconButton } from '../common'\n+import { getDesignRelativeHeight } from '../../lib/utils/sizes'\n/**\n* @type\n@@ -66,10 +67,11 @@ const getStylesFromProps = ({ theme }) => ({\ntextAlign: 'center',\ntextTransform: 'uppercase',\ncolor: theme.colors.surface,\n- fontSize: normalize(16),\n+ fontSize: getDesignRelativeHeight(normalize(16)),\nfontWeight: '500',\n},\ntopbarStyles: {\n+ height: getDesignRelativeHeight(55),\nflexGrow: 0,\nflexShrink: 0,\n...getShadowStyles('none', { elevation: 0 }),\n",
        "chatgpt_cot": "Fix user controls display in CubeCompareNavbar. Changed the structure of the user controls to resolve display issues and improve user experience."
    },
    {
        "org_diff": "diff --git a/src/components/GroupModal.js b/src/components/GroupModal.js @@ -319,7 +319,7 @@ const GroupModal = ({ cubeID, canEdit, children, ...props }) => {\n</Form>\n</Col>\n</Row>\n- <Row noGutters className=\"mb-2\">\n+ <Row noGutters>\n{totalPrice && (\n<TextBadge name=\"Price\" className=\"mt-2 mr-2\">\n<Tooltip text=\"TCGPlayer Market Price\">${Math.round(totalPrice).toLocaleString()}</Tooltip>\n",
        "org_msg": "Remove useless margin.",
        "sim_msg": "fix (group): save dummy items to array for performance",
        "sim_diff": "diff --git a/src/group.js b/src/group.js @@ -39,6 +39,7 @@ export class Group {\nthis.top = config.top;\nthis.showAllItems = config.showAllItems;\nthis.isLastItems = config.isLastItems;\n+ this.dummyItems = [];\nif (config.styleParams) {\nconst {styleParams} = config;\n@@ -87,12 +88,14 @@ export class Group {\nsafeGetItem(idx) {\nif (this.items[idx]) {\nreturn this.items[idx];\n+ } else if (this.dummyItems[idx]) {\n+ return this.dummyItems[idx];\n} else {\nconst item = cloneDeep(this.items[this.items.length - 1]);\nitem.id += 'dummy';\nitem.idx = this.idx * (idx + 1) + 1;\nitem.type = 'dummy';\n- this.items[idx] = item;\n+ this.dummyItems[idx] = item;\nreturn item;\n}\n}\n",
        "chatgpt_cot": "\"Remove unnecessary class attribute from GroupModal.js\""
    },
    {
        "org_diff": "diff --git a/src/util/Filter.js b/src/util/Filter.js @@ -201,32 +201,28 @@ const rarityMap = new Map([\n['m', 'mythic']\n]);\n+const simplifyCategoryMaps = new Map([\n+ ['color', colorMap],\n+ ['identity', colorMap],\n+ ['rarity', rarityMap]\n+]);\n+\n+\n//change arguments into their verifiable counteraprts, i.e. 'azorius' becomes 'uw'\nfunction simplifyArg(arg, category) {\n- let res = '';\n+ let res = arg;\n+ if (simplifyCategoryMaps.has(category)) {\n+ let map = simplifyCategoryMaps.get(category);\n+ let argLower = arg.toLowerCase()\n+ res = map.has(argLower) ? map.get(argLower) : arg;\n+ }\nswitch (category) {\ncase 'color':\ncase 'identity':\n- if (colorMap.has(arg.toLowerCase())) {\n- res = colorMap.get(arg.toLowerCase());\n- } else {\n- res = arg;\n- }\nres = res.toUpperCase().split('');\nbreak;\ncase 'mana':\n- res = parseManaCost(arg)\n- break;\n- case 'rarity':\n- let argLower = arg.toLowerCase()\n- if (rarityMap.has(argLower)) {\n- res = rarityMap.get(argLower);\n- } else {\n- res = arg;\n- }\n- break;\n- default:\n- res = arg;\n+ res = parseManaCost(res)\nbreak;\n}\nreturn res;\n",
        "org_msg": "Reduce code duplication in simplifyArg from responses to",
        "sim_msg": "set filtered_out to false for everything before redoing the filtering",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -539,7 +539,7 @@ list.filterList = function(search_words, filter_param) {\nnormally_visible_map_items.style(\"display\", \"inline\");\n//set everything that should be visible to unfiltered\n- selected_list_items.each(function (d) {\n+ all_list_items.each(function (d) {\nd.filtered_out = false\n})\n@@ -547,11 +547,11 @@ list.filterList = function(search_words, filter_param) {\nmediator.publish(\"record_action\", \"none\", \"filter\", config.user_id, \"filter_list\", null, \"search_words=\" + search_words + \"filter_param=\"+filter_param);\n// Now actually do the filtering (i.e. remove some object from list and map)\n- this.hideEntriesByWord(selected_list_items, search_words);\n- this.hideEntriesByWord(normally_visible_map_items, search_words);\n+ this.hideEntriesByWord(all_list_items, search_words);\n+ this.hideEntriesByWord(all_map_items, search_words);\n- this.hideEntriesByParam(selected_list_items, filter_param);\n- this.hideEntriesByParam(normally_visible_map_items, filter_param);\n+ this.hideEntriesByParam(all_list_items, filter_param);\n+ this.hideEntriesByParam(all_map_items, filter_param);\n};\n// Returns true if document has parameter or if no parameter is passed\n",
        "chatgpt_cot": "Refactor simplifyArg method and add simplifyCategoryMaps to improve code readability and maintainability in Filter.js."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeAnalysisPage.js b/src/pages/CubeAnalysisPage.js @@ -129,9 +129,10 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText }) => {\nreturn (\n<CubeLayout cube={cube} cubeID={cubeID} canEdit={false} activeLink=\"analysis\">\n<DynamicFlash />\n- {cube.cards.length === 0\n- ? <h5 className=\"mt-3 mb-3\">This cube doesn't have any cards. Add cards to see analytics.</h5>\n- : <Row className=\"mt-3\">\n+ {cube.cards.length === 0 ? (\n+ <h5 className=\"mt-3 mb-3\">This cube doesn't have any cards. Add cards to see analytics.</h5>\n+ ) : (\n+ <Row className=\"mt-3\">\n<Col xs=\"12\" lg=\"2\">\n<Nav vertical=\"lg\" pills className=\"justify-content-sm-start justify-content-center mb-3\">\n{analytics.map((analytic, index) => (\n@@ -163,8 +164,7 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText }) => {\n</Card>\n</Col>\n</Row>\n- }\n-\n+ )}\n</CubeLayout>\n);\n};\n",
        "org_msg": "ran beautify to clean clean up code style",
        "sim_msg": "Fix encoding problems in shape names",
        "sim_diff": "diff --git a/src/modules/boardmatcher.js b/src/modules/boardmatcher.js @@ -16,7 +16,7 @@ exports.getBoardSymmetries = function(board, vertex) {\n}\nexports.readShapes = function(content) {\n- let tree = sgf.parse(content)[0]\n+ let tree = sgf.parse(content, () => {}, true)[0]\nlet result = []\nfor (let i = 0; i < tree.subtrees.length; i++) {\n",
        "chatgpt_cot": "Refactor CubeAnalysisPage.js to use ternary operator for conditional rendering, improving readability and consistency in the file."
    },
    {
        "org_diff": "diff --git a/src/cube_overview.js b/src/cube_overview.js @@ -108,8 +108,7 @@ class CubeOverview extends Component {\nreturn (\n<>\n{canEdit && (\n- <div className=\"usercontrols\">\n- <Navbar expand=\"md\" light>\n+ <Navbar expand=\"md\" light className=\"usercontrols mb-3\">\n<Nav navbar>\n<NavItem>\n<CubeOverviewModal\n@@ -135,17 +134,16 @@ class CubeOverview extends Component {\n</Nav>\n</UncontrolledCollapse>\n</Navbar>\n- </div>\n)}\n<DynamicFlash />\n{this.state.alerts.map(({ color, message }, index) => (\n- <UncontrolledAlert color={color} key={index} className=\"mt-3 mb-0\">\n+ <UncontrolledAlert color={color} key={index}>\n{message}\n</UncontrolledAlert>\n))}\n<Row>\n- <Col md=\"4\">\n- <Card className=\"mt-3\">\n+ <Col md=\"4\" className=\"mb-3\">\n+ <Card>\n<CardHeader>\n<h3>{cube.name}</h3>\n<h6 className=\"card-subtitle mb-2 text-muted\">{cube.users_following.length} followers</h6>\n@@ -212,7 +210,7 @@ class CubeOverview extends Component {\n</Card>\n</Col>\n<Col>\n- <Card className=\"mt-3\">\n+ <Card>\n<CardHeader>\n<h5 className=\"card-title\">Description</h5>\n</CardHeader>\n",
        "org_msg": "Fix alert spacing on overview page.",
        "sim_msg": "fix: set regular font weight to Cardheaders",
        "sim_diff": "diff --git a/src/renderer/selfkey-id/main/components/selfkey-id-overview.jsx b/src/renderer/selfkey-id/main/components/selfkey-id-overview.jsx @@ -73,6 +73,11 @@ const styles = theme => ({\n},\nbutton: {\nmarginBottom: '16px'\n+ },\n+ regularText: {\n+ '& span': {\n+ fontWeight: 400\n+ }\n}\n});\n@@ -221,7 +226,10 @@ class SelfkeyIdOverviewComponent extends Component {\n<Grid container direction=\"column\" spacing={32}>\n<Grid item>\n<Card>\n- <CardHeader title=\"Basic Information\" />\n+ <CardHeader\n+ title=\"Basic Information\"\n+ className={classes.regularText}\n+ />\n<hr className={classes.hr} />\n<CardContent>\n<Grid\n@@ -344,7 +352,10 @@ class SelfkeyIdOverviewComponent extends Component {\n</Grid>\n</CardContent>\n- <CardHeader title=\"Additional Information\" />\n+ <CardHeader\n+ title=\"Additional Information\"\n+ className={classes.regularText}\n+ />\n<hr className={classes.hr} />\n<CardContent>\n<Grid\n@@ -491,7 +502,7 @@ class SelfkeyIdOverviewComponent extends Component {\n</Grid>\n<Grid item>\n<Card>\n- <CardHeader title=\"Documents\" />\n+ <CardHeader title=\"Documents\" className={classes.regularText} />\n<hr className={classes.hr} />\n<CardContent>\n",
        "chatgpt_cot": "Refactor CubeOverview component layout for improved styling and readability, including adding usercontrols class and adjusting card layout."
    },
    {
        "org_diff": "diff --git a/src/util/Sort.js b/src/util/Sort.js @@ -532,7 +532,7 @@ export function cardGetLabels(card, sort) {\nreturn [type];\n}\n} else if (colorIdentity(card).length === 5) {\n- return ['5 Color']\n+ return ['Five Color']\n} else {\nreturn [\n...cardGetLabels(card, 'Guilds'),\n",
        "org_msg": "Fix missing five color cards.",
        "sim_msg": "set inital sort type",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -124,6 +124,7 @@ list.drawList = function() {\n}\n}\n} else {\n+ $('#curr-sort-type').text(config.localization[config.language][config.sort_options[0]])\nfor(var i=0; i<numberOfOptions; i++) {\naddSortOptionDropdownEntry(config.sort_options[i])\n}\n@@ -163,7 +164,7 @@ list.fit_list_height = function() {\nlet addSortOptionDropdownEntry = function(sort_option) {\nlet entry = sortDropdownEntryTemplate({\nsort_by_string: config.localization[config.language].sort_by_label,\n- sorter_label: config.localization[config.language][sort_option]\n+ sorter_label: config.localization[config.language][sort_option],\n})\nvar newEntry = $(entry).appendTo('#sort-menu-entries')\nnewEntry.on(\"click\", () => {\n",
        "chatgpt_cot": "\"Refactor cardGetLabels function to return 'Five Color' instead of '5 Color' for cards with 5 color identities.\""
    },
    {
        "org_diff": "diff --git a/serverjs/util.js b/serverjs/util.js @@ -28,7 +28,7 @@ function from_base_36(str) {\nreturn parseInt(str, 36);\n}\n-function add_word(obj, word) {\n+function addWordToTree(obj, word) {\nif (word.length <= 0) {\nreturn;\n} else if (word.length == 1) {\n@@ -45,7 +45,7 @@ function add_word(obj, word) {\nif (!obj[character]) {\nobj[character] = {};\n}\n- add_word(obj[character], word)\n+ addWordToTree(obj[character], word)\n}\n}\n@@ -113,8 +113,7 @@ var methods = {\nturnToTree: function(arr) {\nvar res = {};\narr.forEach(function(item, index) {\n- //add_word(cardnames, card);\n- add_word(res, item);\n+ addWordToTree(res, item);\n});\nreturn res;\n},\n",
        "org_msg": "give tree building function a more descriptive name",
        "sim_msg": "fix: The render function in reqScript",
        "sim_diff": "diff --git a/lib/rules/index.js b/lib/rules/index.js @@ -156,9 +156,9 @@ function tpl(str, data){\n.split('%>').join('p.push(\\'')\n.split('\\r').join('\\\\\\'');\ntry {\n- fn = new Function('it',\n+ fn = new Function('obj',\n'var p=[],print=function(){p.push.apply(p,arguments);};' +\n- 'p.push(\\'' + str + '\\');return p.join(\\'\\');');\n+ 'with(obj){p.push(\\'' + str + '\\');}return p.join(\\'\\');');\n} catch (e) {\nfn = e;\nthrow e;\n",
        "chatgpt_cot": "Refactor add_word function to addWordToTree for consistency and clarity. Update method calls accordingly. Improve readability and maintainability of the code."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -57,7 +57,7 @@ $('#filterButton').click(function(e) {\n});\n$('#filterInput').keyup(function(e) {\n- if (e.keyCode === 13 && $('#addInput').val().length == 0) {\n+ if (e.keyCode === 13) {\ne.preventDefault();\nfilterButton.click();\n}\n",
        "org_msg": "fixed enter button in search field",
        "sim_msg": "More weapon grabs cleanup",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -7101,7 +7101,7 @@ window.addEventListener('keydown', e => {\ncase 70: { // F\n// pe.grabdown('right');\nif (document.pointerLockElement) {\n- currentWeaponGrabs[0] = true;\n+ currentWeaponGrabs[1] = true;\n}\nbreak;\n}\n@@ -7219,7 +7219,7 @@ window.addEventListener('keyup', e => {\ncase 70: { // F\n// pe.grabup('right');\nif (document.pointerLockElement) {\n- currentWeaponGrabs[0] = false;\n+ currentWeaponGrabs[1] = false;\n}\nbreak;\n}\n",
        "chatgpt_cot": "Refactor keyup event listener in editcube.js for better user experience."
    },
    {
        "org_diff": "diff --git a/src/components/SortCollapse.js b/src/components/SortCollapse.js @@ -18,7 +18,7 @@ const SortCollapse = ({ defaultPrimarySort, defaultSecondarySort, defaultSorts,\ndefaultSorts.length > 1 ? [...defaultSorts] : ['Color Category', 'Types-Multicolor'],\n);\n- const prevSorts = useRef();\n+ const prevSorts = useRef(defSorts);\nuseEffect(() => {\nconst sortTypes = getSorts();\nlet currentPrimarySort = defaultPrimarySort || '';\n@@ -26,7 +26,7 @@ const SortCollapse = ({ defaultPrimarySort, defaultSecondarySort, defaultSorts,\nif (!sortTypes.includes(currentPrimarySort)) currentPrimarySort = '';\nif (!sortTypes.includes(currentSecondarySort)) currentSecondarySort = '';\n- if (prevSorts !== [currentPrimarySort, currentSecondarySort]) {\n+ if (prevSorts[0] !== currentPrimarySort || prevSorts[1] !== currentSecondarySort) {\nif (!currentPrimarySort || currentPrimarySort === defSorts[0]) {\nQuery.del('s1');\ncurrentPrimarySort = defSorts[0];\n",
        "org_msg": "fix prevSort logic",
        "sim_msg": "fix(navigation): correct ordering across browsers",
        "sim_diff": "diff --git a/packages/doc/src/components/Navigation/Navigation.jsx b/packages/doc/src/components/Navigation/Navigation.jsx @@ -19,9 +19,9 @@ import MDXElements from '../MDXElements';\n*/\nconst getSorting = kind =>\n({\n- order: (a, b) => (a.order > b.order ? 1 : -1),\n- alphabetic: (a, b) => (a > b ? -1 : 1),\n- }[kind ?? 'order']);\n+ alphabeticDescending: (a, b) => (a.title > b.title ? -1 : 1),\n+ alphabeticAscending: (a, b) => (a.title > b.title ? 1 : -1),\n+ }[kind ?? 'alphabeticDescending']);\n/**\n* Specify here collapsible sections which should sort its children by name\n@@ -159,8 +159,8 @@ const ListItem = ({\nconst linkPath = prefix ? `/yoga${filteredUrl}` : filteredUrl;\nconst isActive = window && pathname.replace(/\\/$/, '') === linkPath;\nconst innerSorting = sectionsSortedByName.includes(title.toLowerCase())\n- ? 'alphabetic'\n- : 'order';\n+ ? 'alphabeticAscending'\n+ : 'alphabeticDescending';\nconst onNavigate = () => {\nif (filteredUrl !== pathname) {\n@@ -247,7 +247,7 @@ List.propTypes = {\nlevel: number,\ntoggleMenu: func.isRequired,\nprefix: bool.isRequired,\n- sorting: oneOf(['alphabetic', 'order']),\n+ sorting: oneOf(['alphabeticDescending', 'alphabeticAscending']),\n};\nList.defaultProps = {\n",
        "chatgpt_cot": "Fix comparison logic in SortCollapse component useEffect to properly check for changes in primary and secondary sorts. Use useRef with default value."
    },
    {
        "org_diff": "diff --git a/src/analytics/Suggestions.js b/src/analytics/Suggestions.js @@ -36,6 +36,7 @@ const Suggestions = ({ cards, cube }) => {\n});\nconsole.log(response);\nconst val = await response.json(); // parses JSON response into native JavaScript objects\n+ console.log(val);\nreturn val.list;\n}\n",
        "org_msg": "added test log",
        "sim_msg": "fix: parseJSON",
        "sim_diff": "diff --git a/lib/util/index.js b/lib/util/index.js @@ -120,13 +120,13 @@ function evalJson(str) {\n}\nvar result = JSON_CACHE.get(str);\nif (result) {\n- return result;\n+ return extend(true, {}, result);\n}\ntry {\nvar parse = EVAL_SCRIPT.runInContext(CONTEXT, JSON_VM_OPTIONS);\nresult = parse(str);\nJSON_CACHE.set(str, result);\n- return result;\n+ return extend(true, {}, result);\n} catch(e) {} finally {\nclearContext();\n}\n",
        "chatgpt_cot": "Add console log for response value in Suggestions.js."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -19,16 +19,20 @@ function addSeen(seen, cards) {\n}\n}\n}\n+ seen.cards += cards.length;\n}\nfunction init(newDraft) {\ndraft = newDraft;\nfor (const seat of draft.seats) {\nseat.seen = fromEntries(COLOR_COMBINATIONS.map((comb) => [comb.join(''), 0]));\n+ seat.seen.cards = 0;\naddSeen(seat.seen, seat.packbacklog[0].slice());\nseat.picked = fromEntries(COLOR_COMBINATIONS.map((comb) => [comb.join(''), 0]));\n+ seat.picked.cards = 0;\n}\ndraft.overallPool = fromEntries(COLOR_COMBINATIONS.map((comb) => [comb.join(''), 0]));\n+ draft.overallPool.cards = 0;\naddSeen(draft.overallPool, draft.initial_state.flat(3));\n}\n@@ -130,8 +134,8 @@ const considerInCombination = (combination) => (card) =>\n// We want to discourage playing more colors so they get less\n// value the more colors, this gets offset by having more cards.\n-const COLOR_SCALING_FACTOR = [0.8, 1, 0.6, 0.3, 0.2, 0.1];\n-const botRatingAndCombination = (seen, card, picked, overallPool) => {\n+const COLOR_SCALING_FACTOR = [0.8, 1, 0.6, 0.33, 0.15, 0.1];\n+const botRatingAndCombination = (seen, card, picked, overallPool, seats = 1, inPack = 1, packNum = 1, numPacks = 1) => {\n// Find the color combination that gives us the highest score\n// that'll be the color combination we want to play currently.\nlet bestRating = -1;\n@@ -152,8 +156,10 @@ const botRatingAndCombination = (seen, card, picked, overallPool) => {\n// The ratio of seen to overall gives us an idea what is\n// being taken.\nconst openness = seenCount / overallCount;\n+ const opennessWeight = (numPacks * inPack) / seats / packNum;\n+ const scaling = COLOR_SCALING_FACTOR[combination.length];\n// We weigh the factors with exponents to get a final score.\n- const rating = poolRating ** 2 * seenCount * openness ** 5 * COLOR_SCALING_FACTOR[combination.length];\n+ const rating = scaling * poolRating ** 2 * openness ** opennessWeight;\nif (rating > bestRating) {\nbestRating = rating;\nbestCombination = combination;\n@@ -227,9 +233,13 @@ function botPicks() {\npicked,\npackbacklog: [packFrom],\n} = draft.seats[botIndex];\n- const { overallPool } = draft;\n+ const { overallPool, initial_state } = draft;\nlet ratedPicks = [];\nconst unratedPicks = [];\n+ const seats = draft.seats.length;\n+ const inPack = packFrom.length;\n+ const [packNum] = packPickNumber();\n+ const numPacks = initial_state[0].length;\nfor (let cardIndex = 0; cardIndex < packFrom.length; cardIndex++) {\nif (packFrom[cardIndex].rating) {\nratedPicks.push(cardIndex);\n@@ -238,7 +248,10 @@ function botPicks() {\n}\n}\nratedPicks = ratedPicks\n- .map((cardIndex) => [botRating(seen, packFrom[cardIndex], picked, overallPool), cardIndex])\n+ .map((cardIndex) => [\n+ botRating(seen, packFrom[cardIndex], picked, overallPool, seats, inPack, packNum, numPacks),\n+ cardIndex,\n+ ])\n.sort(([a], [b]) => b - a)\n.map(([, cardIndex]) => cardIndex);\narrayShuffle(unratedPicks);\n",
        "org_msg": "Scale opennessWeight with current pick.",
        "sim_msg": "Fix ExactlyXCard Selector pretarget bug",
        "sim_diff": "diff --git a/server/game/CardSelectors/ExactlyXCardSelector.js b/server/game/CardSelectors/ExactlyXCardSelector.js @@ -18,9 +18,9 @@ class ExactlyXCardSelector extends BaseCardSelector {\nreturn selectedCards.length === this.numCards;\n}\n- hasEnoughTargets(context) {\n+ hasEnoughTargets(context, pretarget = false) {\nlet numMatchingCards = context.game.allCards.reduce((total, card) => {\n- if(this.canTarget(card, context)) {\n+ if(this.canTarget(card, context, pretarget)) {\nreturn total + 1;\n}\nreturn total;\n",
        "chatgpt_cot": "Add seen and picked card count in Draft.js. Fix the compilation issue due to the new method and add the new arguments in the botRating function."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeDeckPage.js b/src/pages/CubeDeckPage.js -import React, { useCallback, useState } from 'react';\n+import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n@@ -24,10 +24,37 @@ import DynamicFlash from 'components/DynamicFlash';\nimport CubeLayout from 'layouts/CubeLayout';\nimport DeckCard from 'components/DeckCard';\nimport SampleHandModal from 'components/SampleHandModal';\n+import Query from 'utils/Query';\n-const CubeDeckPage = ({ cube, deck, canEdit, userid, draft }) => {\n- const [seatIndex, setSeatIndex] = useState(0);\n- const [view, setView] = useState('deck');\n+const CubeDeckPage = ({ cube, deck, canEdit, userid, draft, defaultSeat, defaultView }) => {\n+ const [seatIndex, setSeatIndex] = useState(defaultSeat ?? 0);\n+ const [view, setView] = useState(defaultView ?? 'deck');\n+ const didMountRef1 = useRef(false);\n+ const didMountRef2 = useRef(false);\n+\n+ useEffect(() => {\n+ if (didMountRef1.current) {\n+ Query.set('seat', seatIndex);\n+ } else {\n+ const querySeat = Query.get('seat');\n+ if (querySeat || querySeat === 0) {\n+ setSeatIndex(querySeat);\n+ }\n+ didMountRef1.current = true;\n+ }\n+ }, [seatIndex, setSeatIndex]);\n+\n+ useEffect(() => {\n+ if (didMountRef2.current) {\n+ Query.set('view', view);\n+ } else {\n+ const queryView = Query.get('view');\n+ if (queryView) {\n+ setView(queryView);\n+ }\n+ didMountRef2.current = true;\n+ }\n+ }, [view, setView]);\nconst handleChangeSeat = (event) => {\nsetSeatIndex(event.target.value);\n@@ -150,11 +177,15 @@ CubeDeckPage.propTypes = {\ncanEdit: PropTypes.bool,\nuserid: PropTypes.string,\ndraft: PropTypes.shape({}).isRequired,\n+ defaultSeat: PropTypes.number,\n+ defaultView: PropTypes.string,\n};\nCubeDeckPage.defaultProps = {\ncanEdit: false,\nuserid: null,\n+ defaultSeat: 0,\n+ defaultView: 'deck',\n};\nexport default CubeDeckPage;\n",
        "org_msg": "Make deck view page state store in queries.",
        "sim_msg": "website(showcase): shuffle apps order.",
        "sim_diff": "diff --git a/website/src/components/Showcase/Showcase.js b/website/src/components/Showcase/Showcase.js -import React from 'react';\n+import React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport Card from './Card';\nimport cardList from '@site/showcase.json';\nimport styles from './Showcase.module.css';\n+import _ from 'lodash';\nfunction Showcase() {\n- const cards = cardList.map((props) => <Card key={props.title} {...props} />);\n+ const [cards, setCards] = useState([]);\n- return (\n+ useEffect(() => {\n+ setCards(_makeShuffledCardList(cardList).map(_makeCard));\n+ }, []);\n+\n+ return _makeCardsContainer(cards);\n+}\n+\n+const _makeShuffledCardList = (cardList) => {\n+ const partition = _.partition(cardList, 'shouldStayOnTop');\n+ return partition[0].concat(_.shuffle(partition[1]));\n+}\n+\n+const _makeCard = (props) => <Card key={props.title} {...props} />;\n+\n+const _makeCardsContainer = (cards) =>\n+ (\n<section className={clsx('container', styles.container)}>\n<ul className={clsx('col', 'col--12', styles.list)}>{cards}</ul>\n</section>\n);\n-}\nexport default Showcase;\n",
        "chatgpt_cot": "Add defaultSeat and defaultView props, and use Query to manage seat and view in CubeDeckPage."
    },
    {
        "org_diff": "diff --git a/src/components/MagicMarkdown.js b/src/components/MagicMarkdown.js @@ -160,7 +160,24 @@ const InnerMarkdown = ({ markdown }) => {\n}\nif (section.startsWith('[')) {\nconst parts = section.split('](');\n+ const link = parts[1].substring(0, parts[1].length - 1);\n+ const text = parts[0].substring(1);\n+ const isInternalURL = (to) => {\n+ try {\n+ const url = new URL(to, window.location.origin);\n+ return url.hostname === window.location.hostname;\n+ } catch {\n+ return false;\n+ }\n+ };\n+ if (isInternalURL(link)) {\n+ return (\n+ <a target=\"_blank\" rel=\"noopener noreferrer\" href={link}>\n+ {text}\n+ </a>\n+ );\n+ }\nreturn (\n/* eslint-disable-next-line jsx-a11y/anchor-is-valid */\n<Link href=\"#\" modalProps={{ link: parts[1].substring(0, parts[1].length - 1) }}>\n",
        "org_msg": "Don't use link modal for internal markdown links",
        "sim_msg": "[docs] Fix GitHub source links in the demo toolbar",
        "sim_diff": "diff --git a/docs/src/modules/components/MarkdownDocs.js b/docs/src/modules/components/MarkdownDocs.js @@ -82,6 +82,10 @@ function MarkdownDocs(props) {\n);\n}\n+ const splitLocationBySlash = location.split('/');\n+ splitLocationBySlash.pop();\n+ const fileNameWithLocation = `${splitLocationBySlash.join('/')}/${name}`;\n+\nreturn (\n<Demo\nkey={index}\n@@ -94,7 +98,7 @@ function MarkdownDocs(props) {\n}}\ndisableAd={disableAd}\ndemoOptions={renderedMarkdownOrDemo}\n- githubLocation={`${process.env.SOURCE_CODE_REPO}/blob/v${process.env.LIB_VERSION}/docs/src/${name}`}\n+ githubLocation={`${process.env.SOURCE_CODE_REPO}/blob/v${process.env.LIB_VERSION}${fileNameWithLocation}`}\n/>\n);\n})}\n",
        "chatgpt_cot": "\"Add function to check if link is internal and open in new tab if so\""
    },
    {
        "org_diff": "diff --git a/src/components/PagedList.js b/src/components/PagedList.js -import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\nimport { Pagination, PaginationItem, PaginationLink, Table } from 'reactstrap';\n@@ -60,9 +60,11 @@ const PagedList = ({ pageSize, rows }) => {\nconst displayRows = rows.slice(page * pageSize, (page + 1) * pageSize);\nconst validPages = [...Array(Math.ceil(rows.length / pageSize)).keys()];\n+ const current = Math.min(page, validPages.length);\n+\nreturn (\n<>\n- <PaginationLabels validPages={validPages} page={page} setPage={setPage} />\n+ <PaginationLabels validPages={validPages} page={current} setPage={setPage} />\n{displayRows}\n</>\n);\n",
        "org_msg": "added pagination reset",
        "sim_msg": "Immutablely decorate with _viewIndex",
        "sim_diff": "diff --git a/src/index.js b/src/index.js @@ -87,25 +87,31 @@ export default React.createClass({\n// Pagination\nconst startRow = pageSize * page\nconst endRow = startRow + pageSize\n- const pageRows = manual ? resolvedData : sortedData.slice(startRow, endRow)\n+ let pageRows = manual ? resolvedData : sortedData.slice(startRow, endRow)\nconst minRows = this.getMinRows()\nconst padRows = _.range(Math.max(minRows - pageRows.length, 0))\nconst hasColumnFooter = allVisibleColumns.some(d => d.footer)\nconst recurseRowsViewIndex = (rows, path = [], index = -1) => {\n- rows.forEach((row, i) => {\n+ return [\n+ rows.map((row, i) => {\nindex++\n- row._viewIndex = index\n+ const rowWithViewIndex = {\n+ ...row,\n+ _viewIndex: index\n+ }\nconst newPath = path.concat([i])\n- if (row[subRowsKey] && _.get(expandedRows, newPath)) {\n- index = recurseRowsViewIndex(row[subRowsKey], newPath, index)\n+ if (rowWithViewIndex[subRowsKey] && _.get(expandedRows, newPath)) {\n+ [rowWithViewIndex[subRowsKey], index] = recurseRowsViewIndex(rowWithViewIndex[subRowsKey], newPath, index)\n}\n- })\n- return index\n+ return rowWithViewIndex\n+ }),\n+ index\n+ ]\n}\n- recurseRowsViewIndex(pageRows)\n+ [pageRows] = recurseRowsViewIndex(pageRows)\nconst canPrevious = page > 0\nconst canNext = page + 1 < pages\n",
        "chatgpt_cot": "\"Add useEffect hook to PagedList.js for handling side effects and fix pagination label issue\""
    },
    {
        "org_diff": "diff --git a/serverjs/util.js b/serverjs/util.js @@ -68,7 +68,7 @@ function addCardToCube(cube, card_details, idOverride) {\ncolors: card_details.color_identity,\ncmc: card_details.cmc,\ncardID: idOverride === undefined ? card_details._id : idOverride,\n- type: card_details.type,\n+ type_line: card_details.type,\naddedTmsp: new Date()\n});\n}\n",
        "org_msg": "Fix addCardsToCube type line.",
        "sim_msg": "set card type bool",
        "sim_diff": "diff --git a/server/game/drawcard.js b/server/game/drawcard.js @@ -24,6 +24,8 @@ class DrawCard extends BaseCard {\nthis.contributesToFavor = true;\nthis.bowed = false;\nthis.inConflict = false;\n+ this.isConflict = false;\n+ this.isDynasty = false;\nthis.readysDuringReadying = true;\nthis.challengeOptions = {\ndoesNotBowAs: {\n@@ -32,6 +34,12 @@ class DrawCard extends BaseCard {\n}\n};\nthis.stealthLimit = 1;\n+\n+ if(cardData.deck === 'conflict') {\n+ this.isConflict = true;\n+ } else if(cardData.deck === 'dynasty') {\n+ this.isDynasty = true;\n+ }\n}\nisLimited() {\n",
        "chatgpt_cot": "Update type field to type_line in addCardToCube function to match card_details object structure."
    },
    {
        "org_diff": "diff --git a/src/components/CardModalForm.js b/src/components/CardModalForm.js @@ -85,6 +85,21 @@ class CardModalForm extends Component {\n},\n}\n}));\n+ // asyncronously grab the pricing data and update state\n+ fetch(`/cube/api/getcardfromid/${value}`).then(\n+ response => response.json()\n+ ).then(json => {\n+ this.setState(({ card }) => ({\n+ card: {\n+ ...card,\n+ details: {\n+ ...card.details,\n+ price: json.card.price,\n+ price_foil: json.card.price_foil,\n+ },\n+ }\n+ }))\n+ }).catch(err => console.error(err));\n} else {\nconsole.error('Can\\'t find version');\n}\n",
        "org_msg": "asynchronously fetch tcgplayer data when card version changes in CardModal",
        "sim_msg": "set default state.currentServiceArea to 'PS'",
        "sim_diff": "diff --git a/src/components/CardCollection/index.js b/src/components/CardCollection/index.js @@ -53,9 +53,9 @@ class CardCollection extends React.Component {\nsuper(props);\nthis.state = {\ncurrentYear: fiscalYearList[7],\n- currentServiceArea: \"\",\ncurrentBureau: \"\",\ndata: null,\n+ currentServiceArea: \"PS\",\n}\n// this.getData = this.getData.bind(this);\n// this.getAllData = this.getAllData.bind(this);\n",
        "chatgpt_cot": "\"Add async fetch for pricing data in CardModalForm.js to update state\""
    },
    {
        "org_diff": "diff --git a/src/analytics/HyperGeom.js b/src/analytics/HyperGeom.js @@ -242,7 +242,13 @@ const HyperGeom = () => {\n<p>\nThis Hypergeometric Calculator makes it easy to compute individual and cumulative hypergeometric probabilities.\n</p>\n- <p>The population is the entire cube.</p>\n+ <p>\n+ View information on how to use this tool{' '}\n+ <a href=\"https://www.youtube.com/watch?v=lKYNtxrACRY\" target=\"_blank\">\n+ here\n+ </a>\n+ .\n+ </p>\n<>\n<TextField\nname=\"1\"\n",
        "org_msg": "Add link for hypergeomtric calculator",
        "sim_msg": "Small geometry cleanup",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -1487,7 +1487,7 @@ teleportMeshes.forEach(teleportMesh => {\n});\nconst tetrehedronGeometry = (() => {\n- const geometry = new THREE.TetrahedronBufferGeometry(0.2, 0).toNonIndexed();\n+ const geometry = new THREE.TetrahedronBufferGeometry(0.2, 0)// .toNonIndexed();\nconst barycentrics = new Float32Array(geometry.attributes.position.array.length);\nlet barycentricIndex = 0;\nfor (let i = 0; i < geometry.attributes.position.array.length; i += 9) {\n",
        "chatgpt_cot": "Add a link to a tutorial video in HyperGeom.js file to provide information on how to use the tool."
    },
    {
        "org_diff": "diff --git a/src/pages/MarkdownPage.js b/src/pages/MarkdownPage.js @@ -49,6 +49,9 @@ const MarkdownPage = ({ user, loginCallback }) => (\n<li>\n<a href=\"#latex\">LaTeX</a>\n</li>\n+ <li>\n+ <a href=\"#centering\">Centering</a>\n+ </li>\n</ol>\n</CardBody>\n<CardBody className=\"border-top\">\n@@ -702,6 +705,102 @@ const MarkdownPage = ({ user, loginCallback }) => (\n</Col>\n</Row>\n</CardBody>\n+ <CardBody className=\"border-top\">\n+ <h5 id=\"centering\">Centering</h5>\n+ <p>You can center elements by wrapping them in triple angle brackets.</p>\n+ <Row>\n+ <Col xs=\"12\" sm=\"6\">\n+ <Card>\n+ <CardHeader>Source</CardHeader>\n+ <CardBody>\n+ <code>{`>>> This text is centered <<<`}</code>\n+ </CardBody>\n+ </Card>\n+ </Col>\n+ <Col xs=\"12\" sm=\"6\">\n+ <Card>\n+ <CardHeader>Result</CardHeader>\n+ <CardBody>\n+ <MagicMarkdown markdown={`>>> This text is centered <<<`} />\n+ </CardBody>\n+ </Card>\n+ </Col>\n+ </Row>\n+ <br />\n+ <p>You can center card images, titles and multi-line paragraphs as well.</p>\n+ <Row>\n+ <Col xs=\"12\" sm=\"6\">\n+ <Card>\n+ <CardHeader>Source</CardHeader>\n+ <CardBody>\n+ <code>{`>>> Centered Card: [[!Hexdrinker]] <<<`}</code>\n+ </CardBody>\n+ </Card>\n+ </Col>\n+ <Col xs=\"12\" sm=\"6\">\n+ <Card>\n+ <CardHeader>Result</CardHeader>\n+ <CardBody>\n+ <MagicMarkdown markdown={`>>> Centered Image: [[!Hexdrinker]] <<<`} />\n+ </CardBody>\n+ </Card>\n+ </Col>\n+ </Row>\n+ <Row>\n+ <Col xs=\"12\" sm=\"6\">\n+ <Card>\n+ <CardHeader>Source</CardHeader>\n+ <CardBody>\n+ <code>{`>>>`}</code> <br />\n+ <code>### Centered heading</code> <br />\n+ <code>{`<<<`}</code>\n+ </CardBody>\n+ </Card>\n+ </Col>\n+ <Col xs=\"12\" sm=\"6\">\n+ <Card>\n+ <CardHeader>Result</CardHeader>\n+ <CardBody>\n+ <MagicMarkdown markdown={`>>>\n+ #### Centered heading\n+ <<<`}\n+ />\n+ </CardBody>\n+ </Card>\n+ </Col>\n+ </Row>\n+ <Row>\n+ <Col xs=\"12\" sm=\"6\">\n+ <Card>\n+ <CardHeader>Source</CardHeader>\n+ <CardBody>\n+ <code>\n+ <code>{`>>>`}</code> <br />\n+ <code>Centered paragraph</code> <br />\n+ <code>spanning</code> <br />\n+ <code>multiple</code> <br />\n+ <code>lines</code> <br />\n+ <code>{`<<<`}</code> <br />\n+ </code>\n+ </CardBody>\n+ </Card>\n+ </Col>\n+ <Col xs=\"12\" sm=\"6\">\n+ <Card>\n+ <CardHeader>Result</CardHeader>\n+ <CardBody>\n+ <MagicMarkdown markdown={`>>>\n+ Centered paragraph\n+ spanning\n+ multiple\n+ lines\n+ <<<`}\n+ />\n+ </CardBody>\n+ </Card>\n+ </Col>\n+ </Row>\n+ </CardBody>\n</Card>\n</MainLayout>\n);\n",
        "org_msg": "Add documentation for markdown centering",
        "sim_msg": "Change size and margin of page title in list fragment based on display summary",
        "sim_diff": "diff --git a/layouts/partials/fragments/list.html b/layouts/partials/fragments/list.html {{- end -}}\n\">\n{{- range first (.Params.count | default 10) (.page_scratch.Get \"pages\") -}}\n- {{ $self.page_scratch.Set \"pages\" (slice .) }}\n- {{ range .Resources.ByType \"page\" }}\n- {{ $self.page_scratch.Add \"pages\" . }}\n- {{ end }}\n+ {{- $self.page_scratch.Set \"pages\" (slice .) -}}\n+ {{- range .Resources.ByType \"page\" -}}\n+ {{- $self.page_scratch.Add \"pages\" . -}}\n+ {{- end -}}\n+ {{- $display_summary := or (not (isset $self.Params \"summary\")) (eq $self.Params.summary true) -}}\n{{- if $self.Params.tiled -}}\n<div class=\"col-lg-6 col-12 mb-2 d-flex\">\n{{- end -}}\n<article class=\"\n{{- if $self.Params.tiled -}}\n- {{- printf \"card w-100\" -}}\n+ {{- print \"card w-100\" -}}\n{{- else -}}\n- {{- printf \"col-12 mb-4\" -}}\n+ {{- printf \"col-12 mb-%s\" (cond $display_summary \"4\" \"2\") -}}\n{{- end -}}\">\n{{- if $self.Params.tiled }}\n<div class=\"card-body\">\n{{- end -}}\n\">\n<div class=\"row align-items-center justify-content-between mx-0\">\n- <h3 class=\"col-12 col-md px-0\">\n+ {{- if $display_summary }}\n+ <h4 class=\"col-12 col-md px-0\">\n<a href=\"{{ .URL }}\">\n{{- .Params.title | markdownify -}}\n</a>\n- </h3>\n+ </h4>\n+ {{- else }}\n+ <h5 class=\"col-12 col-md px-0\">\n+ <a href=\"{{ .URL }}\">\n+ {{- .Params.title | markdownify -}}\n+ </a>\n+ </h5>\n+ {{- end -}}\n{{- if and ((not $self.Params.tiled) $self.Params.display_date) }}\n{{- range first 1 (where ($self.page_scratch.Get \"pages\") \"Params.fragment\" \"in\" \"content\") -}}\n{{- partial \"helpers/publish-date.html\" (dict \"root\" . \"background\" $bg \"badge\" false) -}}\n<img src=\"{{ partial \"helpers/image.html\" (dict \"root\" $self \"asset\" .Params.asset) }}\" alt=\"{{ .Params.subtitle | default .Params.title }}\" class=\"img-fluid mb-4\">\n</a>\n{{- end -}}\n- {{- if or (not (isset $self.Params \"summary\")) (eq $self.Params.summary true) }}\n+ {{- if $display_summary }}\n<div class=\"col-12 pl-0\n{{- if or (eq $bg \"secondary\") (eq $bg \"primary\") -}}\n{{- printf \" text-%s\" \"dark\" -}}\n",
        "chatgpt_cot": "Add centering functionality to MarkdownPage for improved text and image alignment."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -271,7 +271,7 @@ router.get('/card/:id', async (req, res) => {\nmetadata: generateMeta(\n`${card.name} - Cube Cobra`,\n`Analytics for ${card.name} on CubeCobra`,\n- card.art_crop,\n+ card.image_normal,\n`https://cubecobra.com/card/${req.params.id}`,\n),\n});\n",
        "org_msg": "1083 use full image instead of art crop",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "\"Update card metadata generation to use card.image_normal instead of card.art_crop for Cube Cobra analytics.\""
    },
    {
        "org_diff": "diff --git a/src/components/CardModalForm.js b/src/components/CardModalForm.js @@ -71,16 +71,20 @@ class CardModalForm extends Component {\nif (name === 'version') {\n// This should guarantee that version array is non-null.\n- if (this.state.versions.length > 0) {\n+ const { versions } = this.state;\n+ const newDetails = versions.find(version => version._id === value);\n+ if (versions.length > 0 && newDetails) {\nthis.setState(({ card }) => ({\ncard: {\n...card,\ndetails: {\n- ...versions.find(c => c.cardID === value),\n- display_image: card.details.imgUrl || card.details.image_normal,\n+ ...newDetails,\n+ display_image: card.imgUrl || newDetails.image_normal,\n},\n}\n}));\n+ } else {\n+ console.error('Can\\'t find version');\n}\n}\n}\n",
        "org_msg": "Fix version-change bug.",
        "sim_msg": "Fix new form syntax.",
        "sim_diff": "diff --git a/src/components/Form.js b/src/components/Form.js @@ -32,13 +32,13 @@ export default class extends Component {\nconst {options, src, form} = this.props;\nif (src) {\n- this.createPromise = new Form(this.element, src, options).then(formio => {\n+ this.createPromise = new Form(this.element, src, options).render().then(formio => {\nthis.formio = formio;\nthis.formio.src = src;\n});\n}\nif (form) {\n- this.createPromise = new Form(this.element, form, options).then(formio => {\n+ this.createPromise = new Form(this.element, form, options).render().then(formio => {\nthis.formio = formio;\nthis.formio.form = form;\n});\n@@ -77,14 +77,14 @@ export default class extends Component {\nconst {options, src, form, submission} = this.props;\nif (src !== nextProps.src) {\n- this.createPromise = new Form(this.element, nextProps.src, options).then(formio => {\n+ this.createPromise = new Form(this.element, nextProps.src, options).render().then(formio => {\nthis.formio = formio;\nthis.formio.src = nextProps.src;\n});\nthis.initializeFormio();\n}\nif (form !== nextProps.form) {\n- this.createPromise = new Form(this.element, nextProps.form, options).then(formio => {\n+ this.createPromise = new Form(this.element, nextProps.form, options).render().then(formio => {\nthis.formio = formio;\nthis.formio.form = form;\n});\n",
        "chatgpt_cot": "\"Refactor version array handling in CardModalForm\""
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -148,7 +148,7 @@ router.post('/lostpassword', [body('email', 'Email is required').isEmail()], fla\nif (!req.validated) {\nres.render('user/lostpassword');\n} else {\n- const recoveryEmail = req.body.email.toLowerCase()\n+ const recoveryEmail = req.body.email.toLowerCase();\nPasswordReset.deleteOne(\n{\nemail: recoveryEmail,\n@@ -223,7 +223,7 @@ router.post(\nif (!req.validated) {\nres.render('user/passwordreset');\n} else {\n- const recoveryEmail = req.body.email.toLowerCase()\n+ const recoveryEmail = req.body.email.toLowerCase();\nPasswordReset.findOne(\n{\ncode: req.body.code,\n",
        "org_msg": "fix: code style",
        "sim_msg": "fix(web): trimming password on login for consistency",
        "sim_diff": "diff --git a/src/webroutes/authentication/verifyPassword.js b/src/webroutes/authentication/verifyPassword.js @@ -28,7 +28,7 @@ module.exports = async function AuthVerify(ctx) {\nrenderData.message = 'Wrong Password!';\nreturn ctx.utils.render('login', renderData);\n}\n- if (!VerifyPasswordHash(ctx.request.body.password, admin.password_hash)) {\n+ if (!VerifyPasswordHash(ctx.request.body.password.trim(), admin.password_hash)) {\nlogWarn(`Wrong password for from: ${ctx.ip}`);\nrenderData.message = 'Wrong Password!';\nreturn ctx.utils.render('login', renderData);\n",
        "chatgpt_cot": "Fix syntax error and add missing semicolon in users_routes.js. Ensure email is lowercase for password reset and recovery."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -694,13 +694,14 @@ function sortGroupsOrdered(cards, sort) {\nfor (const [card, cardLabels] of allCardLabels) {\nif (cardLabels.length > 0) {\ncardLabels.sort(compare);\n- const label = cardLabels[0];\n+ for (const label of cardLabels) {\nif (!byLabel[label]) {\nbyLabel[label] = [];\n}\nbyLabel[label].push(card);\n}\n}\n+ }\nreturn labels.filter((label) => byLabel[label]).map((label) => [formatLabel(label), byLabel[label]]);\n}\n",
        "org_msg": "Fix sorting with duplicate labels.",
        "sim_msg": "add analytics for categories",
        "sim_diff": "diff --git a/docs/js/script.js b/docs/js/script.js @@ -150,11 +150,14 @@ function sortByApplication(event) {\nconst targetAttr = target.getAttribute('app');\nconst allLabels = document.querySelectorAll(`.label[for=\"${targetAttr}\"]`);\nconst buttons = [...document.querySelectorAll('.sort-tool-modal__btn-choose')];\n- const targetIsActive = target.classList.contains('-active');\nconst sortedButtons = buttons.filter(button => button.classList.contains('-active'))\nconst activeApps = sortedButtons.map(button => button.getAttribute('app'));\n+ console.log(activeApps);\n+\n+ ga('send', 'event', 'Awesome design Plugins', 'Click', 'State of Platforms', activeApps.join('-'));\n+\nallLabels.forEach((label) => {\nconst toolContainer = label.parentElement.parentElement.parentElement.parentElement;\nconst list = toolContainer.parentElement;\n@@ -165,8 +168,7 @@ function sortByApplication(event) {\n} else {\ntoolContainer.classList.add('-hidden');\n}\n- // const arr = [...toolContainer.parentElement].filter(tool => !tool.classList.contains('hidden'));\n- // console.log(toolContainer.parentElement.childElementCount);\n+\nconst arr = [...list.children].filter((tool) => !tool.classList.contains('-hidden'));\nif (arr.length === 0) {\nsectionContainer.classList.add('-hidden');\n",
        "chatgpt_cot": "Refactor Sort.js to properly sort and group cards by label. Fix iteration and grouping logic for better organization of cards."
    },
    {
        "org_diff": "diff --git a/src/components/Markdown.js b/src/components/Markdown.js @@ -16,6 +16,14 @@ import { Col, Row, Card, CardBody } from 'reactstrap';\nconst AutocardLink = withAutocard('a');\n+function renderBlockQuote(node) {\n+ return (\n+ <Card className=\"bg-light\">\n+ <CardBody children={node.children} />\n+ </Card>\n+ );\n+}\n+\nfunction renderMath(node) {\nreturn <Latex trusted={false} displayMode>{`$$ ${node.value} $$`}</Latex>;\n}\n@@ -69,6 +77,7 @@ function renderCardImage(node) {\nconst Markdown = ({ markdown, limited }) => {\nconst renderers = {\n+ blockquote: renderBlockQuote,\nmath: renderMath,\ninlineMath: renderInlineMath,\nuserlink: renderUserlink,\n",
        "org_msg": "added block quote renderer",
        "sim_msg": "make App render CardCollection by default at homepage route",
        "sim_diff": "diff --git a/src/components/App/index.js b/src/components/App/index.js import React from 'react';\nimport styled from 'styled-components';\n+import CardCollection from '../CardCollection';\nconst Container = styled.div`\nmin-height: 100%;\n@@ -22,7 +23,7 @@ function App(props) {\nApp.displayName = 'App';\nApp.defaultProps = {\n- children: <div />,\n+ children: <CardCollection />,\n};\nApp.propTypes = {\n",
        "chatgpt_cot": "\"Add renderBlockQuote function to Markdown.js to render blockquote nodes and improve rendering of blockquote elements in Markdown component.\""
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -130,7 +130,7 @@ const considerInCombination = (combination) => (card) =>\n// We want to discourage playing more colors so they get less\n// value the more colors, this gets offset by having more cards.\n-const COLOR_SCALING_FACTOR = [0.8, 1, 0.8, 0.56, 0.2, 0.15];\n+const COLOR_SCALING_FACTOR = [0.8, 1, 0.6, 0.3, 0.2, 0.1];\nconst botRatingAndCombination = (seen, card, picked, overallPool) => {\n// Find the color combination that gives us the highest score\n// that'll be the color combination we want to play currently.\n@@ -138,9 +138,10 @@ const botRatingAndCombination = (seen, card, picked, overallPool) => {\nlet bestCombination = [];\nconst cardValue = card ? toValue(card.rating ?? 0) : 0;\nfor (const combination of COLOR_COMBINATIONS) {\n+ if (!card || considerInCombination(combination)(card)) {\n// The sum of the values of all cards in our pool, possibly\n// plus the card we are considering.\n- const poolRating = picked[combination.join('')] + (considerInCombination(combination)(card) ? cardValue : 0);\n+ const poolRating = picked[combination.join('')] + cardValue;\n// The sum of the values of all cards we've seen passed to\n// us times the number of times we've seen them.\nconst seenCount = seen?.[combination.join('')] ?? 1;\n@@ -152,12 +153,13 @@ const botRatingAndCombination = (seen, card, picked, overallPool) => {\n// being taken.\nconst openness = seenCount / overallCount;\n// We weigh the factors with exponents to get a final score.\n- const rating = poolRating ** 2 * seenCount * openness * COLOR_SCALING_FACTOR[combination.length];\n+ const rating = poolRating ** 2 * seenCount * openness ** 5 * COLOR_SCALING_FACTOR[combination.length];\nif (rating > bestRating) {\nbestRating = rating;\nbestCombination = combination;\n}\n}\n+ }\nreturn [bestRating, bestCombination];\n};\n",
        "org_msg": "Only consider a card in a combination if it can be played in the combination.",
        "sim_msg": "refactor(rating): update default Icon (native)",
        "sim_diff": "diff --git a/packages/yoga/src/Rating/native/Rating.jsx b/packages/yoga/src/Rating/native/Rating.jsx @@ -2,7 +2,7 @@ import React, { useState, useEffect } from 'react';\nimport { PanResponder } from 'react-native';\nimport styled, { withTheme } from 'styled-components';\nimport { number, func, bool, shape } from 'prop-types';\n-import { Star } from '@gympass/yoga-icons';\n+import { StarFilled } from '@gympass/yoga-icons';\nimport { max as maxPropType } from '../../shared';\n@@ -31,7 +31,7 @@ const Rating = ({\ncomponents: { rating },\n},\n},\n- icon: { type: Icon = Star, size: iconSize = 24 },\n+ icon: { type: Icon = StarFilled, size: iconSize = 24 },\n...rest\n}) => {\nconst [panResponder, setPanResponder] = useState({});\n@@ -175,7 +175,7 @@ Rating.propTypes = {\nRating.defaultProps = {\nvalue: undefined,\nicon: {\n- type: Star,\n+ type: StarFilled,\nsize: 24,\n},\nmax: 5,\n",
        "chatgpt_cot": "Change the COLOR_SCALING_FACTOR array values to discourage playing more colors and offset by having more cards, improving the bot's color combination selection."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -927,13 +927,10 @@ router.get('/samplepack/:id/:seed', async (req, res) => {\n});\nrouter.get('/samplepackimage/:id/:seed', async (req, res) => {\n+ try {\nreq.params.seed = req.params.seed.replace('.png', '');\nconst pack = await generatePack(req.params.id, carddb, req.params.seed);\n- if (err) {\n- req.flash('danger', 'Pack could not be created');\n- res.status(404).render('misc/404', {});\n- } else {\nvar srcArray = pack.pack.map((card, index) => {\nreturn {\nsrc: card.image_normal,\n@@ -941,6 +938,7 @@ router.get('/samplepackimage/:id/:seed', async (req, res) => {\ny: CARD_HEIGHT * Math.floor(index / 5),\n};\n});\n+\nmergeImages(srcArray, {\nwidth: CARD_WIDTH * 5,\nheight: CARD_HEIGHT * 3,\n@@ -951,6 +949,8 @@ router.get('/samplepackimage/:id/:seed', async (req, res) => {\n});\nres.end(Buffer.from(image.replace(/^data:image\\/png;base64,/, ''), 'base64'));\n});\n+ } catch (err) {\n+ util.handleRouteError(res, err, '/404');\n}\n});\n",
        "org_msg": "revise samplepackimage",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Fix error handling and image generation in cube_routes.js"
    },
    {
        "org_diff": "diff --git a/src/components/MagicMarkdown.js b/src/components/MagicMarkdown.js @@ -299,7 +299,7 @@ const OuterMarkdown = ({ markdown, limited }) => {\nreturn <Markdown markdown={markdown} />;\n}\n- const markdownStr = markdown.toString();\n+ const markdownStr = markdown?.toString() ?? '';\nconst split = markdownStr.split(/(<<.+>>|(?:^>(?: .*)?\\r?\\n)+|^>>>[^<>]+<<<)/gm);\nreturn (\n<>\n",
        "org_msg": "added nullish check to markdown parser",
        "sim_msg": "[docs] Fix GitHub source links in the demo toolbar",
        "sim_diff": "diff --git a/docs/src/modules/components/MarkdownDocs.js b/docs/src/modules/components/MarkdownDocs.js @@ -82,6 +82,10 @@ function MarkdownDocs(props) {\n);\n}\n+ const splitLocationBySlash = location.split('/');\n+ splitLocationBySlash.pop();\n+ const fileNameWithLocation = `${splitLocationBySlash.join('/')}/${name}`;\n+\nreturn (\n<Demo\nkey={index}\n@@ -94,7 +98,7 @@ function MarkdownDocs(props) {\n}}\ndisableAd={disableAd}\ndemoOptions={renderedMarkdownOrDemo}\n- githubLocation={`${process.env.SOURCE_CODE_REPO}/blob/v${process.env.LIB_VERSION}/docs/src/${name}`}\n+ githubLocation={`${process.env.SOURCE_CODE_REPO}/blob/v${process.env.LIB_VERSION}${fileNameWithLocation}`}\n/>\n);\n})}\n",
        "chatgpt_cot": "\"Fix issue with converting undefined markdown to string in MagicMarkdown component\""
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -20,12 +20,12 @@ html\nmeta(property=metadatum.property, content=metadatum.content)\nlink(rel='icon', href='/content/favicon.ico', type='image/x-icon')\ntitle=title ? title + ' - Cube Cobra' : 'Cube Cobra'\n- link(rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.css')\n+ link(rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.min.css')\nlink(rel='stylesheet' href='/css/stylesheet.css')\n#autocard_popup\n#autocard_popup2\n#autocard_popup_info\n- script(src='/bower_components/jquery/dist/jquery.js')\n+ script(src='/bower_components/jquery/dist/jquery.slim.min.js')\nscript(src='/jquery-ui/jquery-ui.min.js')\nbody\nnav.navbar.navbar-expand-md.navbar-dark.bg-dark\n@@ -135,7 +135,7 @@ html\na |\na(href='/cookies') Cookies Policy\n- script(src='/bower_components/bootstrap/dist/js/bootstrap.js')\n+ script(src='/bower_components/bootstrap/dist/js/bootstrap.min.js')\nscript(src='/js/csrf.js')\nscript(src='/js/main.js')\nscript(src='/js/autocard.js')\n",
        "org_msg": "Use minified JS everywhere.",
        "sim_msg": "kind fix unit tests",
        "sim_diff": "diff --git a/test/html/unitTests.html b/test/html/unitTests.html <div id=\"qunit-fixture\"></div>\n<script src=\"../testUtils.js\"></script>\n+ <script src=\"../../https/chromium/rules.js\"></script>\n+ <script src=\"../../https/chromium/storage.js\"></script>\n+ <script src=\"../../https/chromium/utils.js\"></script>\n+ <script src=\"../../https/chromium/background.js\"></script>\n+ <script src=\"../../https/chromium/incognito-cache-clearing.js.js\"></script>\n<script src=\"../../js/require.js\"></script>\n<script src=\"../../js/utils.js\"></script>\n<script src=\"../../js/topBlocked.js\"></script>\n<script src=\"../../js/tab.js\"></script>\n<script src=\"../../js/tabManager.js\"></script>\n<script src=\"../../js/trackerLists.js\"></script>\n- <script src=\"../../js/list_importers/importers.js\"></script>\n- <script src=\"../../js/list_importers/disconnect.js\"></script>\n<script src=\"../../js/trackers.js\"></script>\n- <script src=\"../../https-everywhere/chromium/rules.js\"></script>\n- <script src=\"../../https-everywhere/chromium/storage.js\"></script>\n- <script src=\"../../https-everywhere/chromium/util.js\"></script>\n- <script src=\"../../https-everywhere/chromium/background.js\"></script>\n- <script src=\"../../https-everywhere/chromium/incognito-cache-clearing.js\"></script>\n+ <script src=\"../../js/url-parse.js\"></script>\n<script src=\"../../js/background.js\"></script>\n+ <script src=\"../../js/abp.js\"></script>\n<script src=\"../tests/settings.js\"></script>\n<script src=\"../tests/utils.js\"></script>\n",
        "chatgpt_cot": "Update Bootstrap and jQuery library links to use minified versions for improved performance and load times in layout.pug file."
    },
    {
        "org_diff": "diff --git a/src/utils/Card.js b/src/utils/Card.js @@ -189,12 +189,8 @@ export const cardDevotion = (card, color) => {\nreturn cost?.reduce((count, symbol) => count + (symbol.includes(color.toLowerCase()) ? 1 : 0), 0) ?? 0;\n};\n-export const cardIsSpecialZoneType = (card) => {\n- return (\n- /(plane|phenomenon|vanguard|scheme|conspiracy|contraption)/i.test(cardType(card)) &&\n- !/planeswalker/i.test(cardType(card))\n- );\n-};\n+export const cardIsSpecialZoneType = (card) =>\n+ /\\b(plane|phenomenon|vanguard|scheme|conspiracy|contraption)\\b/i.test(cardType(card));\nconst isCreatureLand = (details) =>\ndetails.type.includes('Land') && details.oracle_text.match(/\\bbecomes? a .*\\bcreature\\b/);\n",
        "org_msg": "removed planeswalker check from cardIsSpecialZoneType",
        "sim_msg": "Hook in glyph generator to card generator",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -2,6 +2,7 @@ import metaversefile from 'metaversefile';\nimport {generateStats, types} from './procgen/procgen.js';\nimport {screenshotObjectApp} from './object-screenshotter.js';\nimport {screenshotAvatarUrl} from './avatar-screenshotter.js';\n+import {generateGlyph} from './glyph-generator.js';\n// const baseUrl = import.meta.url.replace(/(\\/)[^\\/\\\\]*$/, '$1');\n// const cardsSvgUrl = `${baseUrl}cards.svg`;\n@@ -102,6 +103,9 @@ export const generateObjectCard = async ({\n});\nminterAvatarPreview = await _getCanvasDataUrl(minterAvatarPreview);\n+ let glyphImage = generateGlyph(url);\n+ glyphImage = await _getCanvasDataUrl(glyphImage);\n+\n// _previewImage(minterAvatarPreview, width, height);\nconst minterUsername = 'Scillia';\nconsole.log('call generate card', {\n@@ -112,6 +116,7 @@ export const generateObjectCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n});\nconst cardImg = await generateCard({\nstats,\n@@ -123,6 +128,7 @@ export const generateObjectCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n});\n_previewImage(cardImg, width, height);\nreturn cardImg;\n@@ -138,6 +144,7 @@ export const generateCard = async ({\nobjectImage,\nminterUsername,\nminterAvatarPreview,\n+ glyphImage,\n} = {}) => {\nconst cardSvgSource = await _loadCachedSvgSource();\nawait _waitForAllCardFonts();\n@@ -217,6 +224,15 @@ export const generateCard = async ({\nurlEl.innerHTML = url;\n}\n+ // glyph image\n+ {\n+ const glyphImageEl = el.querySelector('#glyph-image');\n+ // window.glyphImageEl = glyphImageEl;\n+ // glyphImageEl.innerHTML = glyphImage;\n+ glyphImageEl.setAttribute('image-rendering', 'pixelated');\n+ glyphImageEl.setAttribute('xlink:href', glyphImage);\n+ }\n+\n/* {\nconst lines = description.split('\\n');\nconst descriptionHeaderTextEl = el.querySelector('#description-header-text');\n",
        "chatgpt_cot": "Refactor cardIsSpecialZoneType function to use a more concise and efficient regular expression for checking special zone types in Card.js."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -808,11 +808,10 @@ export function sortForCSVDownload(\nquaternary = 'Alphabetical',\n) {\nconst exportCards = [];\n- cards = sortDeep(cards, primary, secondary, tertiary);\n+ cards = sortDeep(cards, quaternary, primary, secondary, tertiary);\nfor (const firstGroup of cards) {\nfor (const secondGroup of firstGroup[1]) {\nfor (const thirdGroup of secondGroup[1]) {\n- thirdGroup[1].sort(OrderSortMap[quaternary]);\nfor (const card of thirdGroup[1]) {\nexportCards.push(card);\n}\n",
        "org_msg": "fix csv download",
        "sim_msg": "CSV export, escape \" in column header name",
        "sim_diff": "diff --git a/src/utils.js b/src/utils.js @@ -27,11 +27,14 @@ function sortCompare(order) {\n}\nfunction createCSVDownload(columns, data, options) {\n+\n+ const replaceDoubleQuoteInString = columnData => typeof columnData === 'string' ? columnData.replace(/\\\"/g, '\"\"') : columnData;\n+\nconst CSVHead =\ncolumns\n.reduce(\n(soFar, column) =>\n- column.download ? soFar + '\"' + column.name + '\"' + options.downloadOptions.separator : soFar,\n+ column.download ? soFar + '\"' + replaceDoubleQuoteInString(column.name) + '\"' + options.downloadOptions.separator : soFar,\n'',\n)\n.slice(0, -1) + '\\r\\n';\n@@ -41,7 +44,7 @@ function createCSVDownload(columns, data, options) {\n(soFar, row) =>\nsoFar +\n'\"' +\n- row.data.filter((field, index) => columns[index].download).join('\"' + options.downloadOptions.separator + '\"') +\n+ row.data.filter((field, index) => columns[index].download).map(columnData => replaceDoubleQuoteInString(columnData)).join('\"' + options.downloadOptions.separator + '\"') +\n'\"\\r\\n',\n[],\n)\n",
        "chatgpt_cot": "\"Update sortForCSVDownload function to use quaternary sorting and fix sorting issue in Sort.js\""
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -55,7 +55,7 @@ async function matchingCards(filter) {\n}\n/* This is a Bayesian adjustment to the rating like IMDB does. */\n-const adjust = (r) => (r.picks * r.value + MIN_PICKS * 0.5) / (r.picks + MIN_PICKS);\n+const adjust = (picks, rating) => (picks * rating + MIN_PICKS * 0.5) / (picks + MIN_PICKS);\nasync function topCards(filter) {\nconst cards = await matchingCards(filter);\n@@ -84,16 +84,16 @@ async function topCards(filter) {\n.filter(({ oracleId }) => selectedVersions.has(oracleId))\n.map(({ oracleId, current }) => {\nconst { rating, elo, picks, cubes } = current;\n- const qualifies = picks !== undefined && picks > MIN_PICKS;\n+ const qualifies = Number.isFinite(picks) && picks > MIN_PICKS;\nconst version = selectedVersions.get(oracleId);\nreturn [\nversion.name,\nversion.image_normal,\nversion.image_flip || null,\n- qualifies && rating !== undefined ? adjust(rating) : null,\n- picks !== undefined ? picks : 0,\n- qualifies && elo !== undefined ? elo : null,\n- cubes !== undefined ? cubes : 0,\n+ qualifies && Number.isFinite(rating) && Number.isFinite(picks) ? adjust(picks, rating) : null,\n+ Number.isFinite(picks) ? picks : 0,\n+ qualifies && Number.isFinite(elo) ? elo : null,\n+ Number.isFinite(cubes) ? cubes : 0,\n];\n});\n}),\n",
        "org_msg": "Fix null issue.",
        "sim_msg": "set filtered_out to false for everything before redoing the filtering",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -539,7 +539,7 @@ list.filterList = function(search_words, filter_param) {\nnormally_visible_map_items.style(\"display\", \"inline\");\n//set everything that should be visible to unfiltered\n- selected_list_items.each(function (d) {\n+ all_list_items.each(function (d) {\nd.filtered_out = false\n})\n@@ -547,11 +547,11 @@ list.filterList = function(search_words, filter_param) {\nmediator.publish(\"record_action\", \"none\", \"filter\", config.user_id, \"filter_list\", null, \"search_words=\" + search_words + \"filter_param=\"+filter_param);\n// Now actually do the filtering (i.e. remove some object from list and map)\n- this.hideEntriesByWord(selected_list_items, search_words);\n- this.hideEntriesByWord(normally_visible_map_items, search_words);\n+ this.hideEntriesByWord(all_list_items, search_words);\n+ this.hideEntriesByWord(all_map_items, search_words);\n- this.hideEntriesByParam(selected_list_items, filter_param);\n- this.hideEntriesByParam(normally_visible_map_items, filter_param);\n+ this.hideEntriesByParam(all_list_items, filter_param);\n+ this.hideEntriesByParam(all_map_items, filter_param);\n};\n// Returns true if document has parameter or if no parameter is passed\n",
        "chatgpt_cot": "Refactor rating adjustment function and add number validation in tools_routes.js. Fixes potential issues with rating and picks validation."
    },
    {
        "org_diff": "diff --git a/src/utils/LandCategories.js b/src/utils/LandCategories.js export default {\n- CREATURE: [\n- 'Blinkmoth Nexus',\n- 'Celestial Colonnade',\n- 'Crawling Barrens',\n- 'Creeping Tar Pit',\n- 'Dread Statuary',\n- 'Faerie Conclave',\n- 'Forbidding Watchtower',\n- 'Frostwalk Bastion',\n- 'Ghitu Encampment',\n- 'Hissing Quagmire',\n- 'Hostile Desert',\n- 'Inkmoth Nexus',\n- 'Lavaclaw Reaches',\n- 'Lumbering Falls',\n- \"Mishra's Factory\",\n- 'Mobilized District',\n- 'Mutavault',\n- 'Nantuko Monastery',\n- 'Needle Spires',\n- 'Raging Ravine',\n- 'Shambling Vent',\n- 'Spawning Pool',\n- 'Stalking Stones',\n- 'Stirring Wildwood',\n- 'Svogthos, the Restless Tomb',\n- 'Treetop Village',\n- 'Wandering Fumarole',\n- ],\n-\nCYCLE: ['Canyon Slough', 'Fetid Pools', 'Irrigated Farmland', 'Scattered Groves', 'Sheltered Thicket'],\nBOUNCE: [\n",
        "org_msg": "generalized \"creatureland\" filter",
        "sim_msg": "Add water to land module loading",
        "sim_diff": "diff --git a/metaverse_modules/land/index.js b/metaverse_modules/land/index.js @@ -11,6 +11,9 @@ export default e => {\n{\n\"start_url\": \"https://webaverse.github.io/dual-contouring-terrain/\"\n},\n+ {\n+ \"start_url\": \"https://webaverse.github.io/water/\"\n+ },\n/* {\n\"start_url\": \"https://webaverse.github.io/silk-grass/\"\n},\n",
        "chatgpt_cot": "Remove land categories from CREATURE and add categories to CYCLE and BOUNCE in LandCategories.js."
    },
    {
        "org_diff": "diff --git a/nearley/cardFilters.ne b/nearley/cardFilters.ne @@ -105,7 +105,7 @@ const genericCondition = (propertyName, propertyAccessor, valuePred) => {\n%} # %}\n-cmcCondition -> \"cmc\"i integerOpValue {% ([, valuePred]) => genericCondition('cmc', cardCmc, valuePred) %}\n+cmcCondition -> (\"mv\"i | \"cmc\"i) integerOpValue {% ([, valuePred]) => genericCondition('cmc', cardCmc, valuePred) %}\ncolorCondition -> (\"c\"i | \"color\"i | \"colors\"i) colorCombinationOpValue {% ([, valuePred]) => genericCondition('colors', cardColors, valuePred) %}\n",
        "org_msg": "added `mv:` filter",
        "sim_msg": "allow default to provide an entire subobject",
        "sim_diff": "diff --git a/src/encoded/static/components/form.js b/src/encoded/static/components/form.js @@ -67,7 +67,9 @@ const filterValue = function (value) {\n// for any property that defines one,\n// with the exception of read-only and calculated properties.\nconst defaultValue = function (schema) {\n- if (schema.properties !== undefined) {\n+ if (schema.default !== undefined) {\n+ return schema.default || undefined;\n+ } else if (schema.properties !== undefined) {\nconst value = {};\n_.each(schema.properties, (property, name) => {\nif (property.calculatedProperty) return;\n@@ -79,8 +81,6 @@ const defaultValue = function (schema) {\n}\n});\nreturn (Object.keys(value).length ? value : undefined);\n- } else if (schema.items !== undefined) {\n- return schema.default;\n}\nreturn schema.default || undefined;\n};\n",
        "chatgpt_cot": "Refactor cmcCondition to handle \"mv\"i in addition to \"cmc\"i, fixing a bug in cardFilters.ne."
    },
    {
        "org_diff": "diff --git a/src/pages/CardPage.js b/src/pages/CardPage.js @@ -218,6 +218,7 @@ const CardPage = ({ user, card, data, versions, related, cubes, loginCallback })\nconst [selectedTab, setSelectedTab] = useQueryParam('tab', '0');\nconst [priceType, setPriceType] = useQueryParam('priceType', 'price');\nconst [cubeType, setCubeType] = useQueryParam('cubeType', 'total');\n+ const [imageUsed, setImageUsed] = useState(card.image_normal);\nconst sortedVersions = versions.sort((a, b) => {\nconst date1 = new Date(a.released_at);\n@@ -246,12 +247,23 @@ const CardPage = ({ user, card, data, versions, related, cubes, loginCallback })\n</CardHeader>\n<Row className=\"mt-2\" noGutters>\n<Col className=\"pl-2 pb-2\" xs=\"12\" sm=\"3\">\n- <ImageFallback\n- className=\"w-100\"\n- src={card.image_normal}\n- fallbackSrc=\"/content/default_card.png\"\n- alt={card.name}\n- />\n+ <ImageFallback className=\"w-100\" src={imageUsed} fallbackSrc=\"/content/default_card.png\" alt={card.name} />\n+ {card.image_flip && (\n+ <Button\n+ color=\"success\"\n+ outline\n+ block\n+ onClick={() => {\n+ if (imageUsed === card.image_normal) {\n+ setImageUsed(card.image_flip);\n+ } else {\n+ setImageUsed(card.image_normal);\n+ }\n+ }}\n+ >\n+ Flip\n+ </Button>\n+ )}\n<CardBody className=\"breakdown p-1\">\n<p>\nPlayed in {Math.round(data.current.total[1] * 1000.0) / 10}%\n@@ -726,6 +738,7 @@ CardPage.propTypes = {\nname: PropTypes.string.isRequired,\nelo: PropTypes.number.isRequired,\nimage_normal: PropTypes.string.isRequired,\n+ image_flip: PropTypes.string,\nscryfall_uri: PropTypes.string.isRequired,\ntcgplayer_id: PropTypes.number.isRequired,\n_id: PropTypes.string.isRequired,\n",
        "org_msg": "Add button to flip card on card pages",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Add image flip functionality with useState hook in CardPage component. Flip image on button click based on current image used."
    },
    {
        "org_diff": "diff --git a/jobs/download_drafts.js b/jobs/download_drafts.js require('dotenv').config();\nconst fs = require('fs');\nconst mongoose = require('mongoose');\n+const AWS = require('aws-sdk');\nconst Deck = require('../models/deck');\nconst Draft = require('../models/draft');\nconst carddb = require('../serverjs/cards.js');\nconst deckutils = require('../dist/utils/deckutils');\n-const path = (batch) => `jobs/export/drafts/${batch}.json`;\n+const s3 = new AWS.S3({\n+ accessKeyId: process.env.AWS_ACCESS_KEY,\n+ secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY\n+});\n+const monthNames = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\",\n+ \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"\n+];\n+\n+const date = new Date();\n+const folder = `${monthNames[date.getMonth()]}${date.getDate()}`;\nconst batchSize = 100;\n@@ -70,6 +80,15 @@ const processDeck = async (deck) => {\nreturn { picks, main, sideboard, cards };\n};\n+const writeToS3 = async (fileName, body) => {\n+ const params = {\n+ Bucket: 'cubecobra',\n+ Key: `${folder}/${fileName}`,\n+ Body: JSON.stringify(body),\n+ }\n+ await s3.upload(params).promise();\n+}\n+\n(async () => {\nawait carddb.initializeCardDb();\nconst cardNames = new Set(carddb.allCards().map((c) => c.name_lower));\n@@ -79,8 +98,7 @@ const processDeck = async (deck) => {\nintToCard[cardToInt[card.name_lower]] = card;\n}\n- fs.writeFileSync('jobs/export/cardToInt.json', JSON.stringify(cardToInt), 'utf8');\n- fs.writeFileSync('jobs/export/intToCard.json', JSON.stringify(intToCard), 'utf8');\n+ await Promise.all([writeToS3('cardToInt.json', cardToInt), writeToS3('intToCard.json', intToCard)]);\nmongoose.connect(process.env.MONGODB_URL).then(async () => {\n// process all deck objects\n@@ -88,6 +106,7 @@ const processDeck = async (deck) => {\nconst count = await Deck.countDocuments();\nconsole.log(`Counted ${count} documents`);\nconst cursor = Deck.find().lean().cursor();\n+ let counter = 0;\nfor (let i = 0; i < count; i += batchSize) {\nconst deckQs = [];\n@@ -103,7 +122,8 @@ const processDeck = async (deck) => {\n// eslint-disable-next-line no-await-in-loop\nconst decks = (await Promise.all(deckQs)).filter((d) => d);\nif (decks.length > 0) {\n- fs.writeFileSync(path(i / batchSize), JSON.stringify(decks), 'utf8');\n+ await writeToS3(`drafts/${counter}.json`, decks);\n+ counter += 1;\n}\nconsole.log(`Finished: ${Math.min(count, i + batchSize)} of ${count} decks`);\n}\n",
        "org_msg": "Store to S3 instead of locally.",
        "sim_msg": "recreate bucket bug: produced an interesting bug by messing up the first request",
        "sim_diff": "diff --git a/scripts/recreate-bucket-bug.js b/scripts/recreate-bucket-bug.js @@ -4,6 +4,7 @@ import * as Utilities from \"~/node_common/utilities\";\nimport configs from \"~/knexfile\";\nimport knex from \"knex\";\nimport FS from \"fs\";\n+import AbortController from \"abort-controller\";\nimport { PrivateKey } from \"@textile/hub\";\nimport { execSync } from \"child_process\";\n@@ -18,6 +19,12 @@ console.log(`RUNNING: recreate-bucket-bug.js`);\nconst HIGH_WATER_MARK = 1024 * 1024 * 3;\n+function sleep(ms) {\n+ return new Promise((resolve) => {\n+ setTimeout(resolve, ms);\n+ });\n+}\n+\nconst TEXTILE_KEY_INFO = {\nkey: Environment.TEXTILE_HUB_KEY,\nsecret: Environment.TEXTILE_HUB_SECRET,\n@@ -54,7 +61,11 @@ const run = async () => {\nconsole.log({ api });\n- let { buckets, bucketKey } = await Utilities.getBucketAPIFromUserToken({\n+ let {\n+ buckets,\n+ bucketKey,\n+ bucketRoot,\n+ } = await Utilities.getBucketAPIFromUserToken({\nuser,\nbucketName: \"delete-this-bucket\",\n});\n@@ -84,6 +95,16 @@ const run = async () => {\nconst files = [];\ntry {\n+ // NOTE(jim): For Textile\n+ // Uncommenting this block will trigger a bug we should\n+ // Resolve first.\n+ // ----------------------------------------------------------------\n+\n+ await execSync(\n+ \"dd if=/dev/random of=4GB_BUCKET_TEST.txt bs=1 count=0 seek=4g\"\n+ );\n+ files.push(\"4GB_BUCKET_TEST.txt\");\n+\nawait execSync(\n\"dd if=/dev/random of=200MB_BUCKET_TEST.txt bs=1 count=0 seek=200m\"\n);\n@@ -103,16 +124,6 @@ const run = async () => {\n\"dd if=/dev/random of=2GB_BUCKET_TEST.txt bs=1 count=0 seek=2g\"\n);\nfiles.push(\"2GB_BUCKET_TEST.txt\");\n-\n- // NOTE(jim): For Textile\n- // Uncommenting this block will trigger a bug we should\n- // Resolve first.\n- // ----------------------------------------------------------------\n-\n- await execSync(\n- \"dd if=/dev/random of=4GB_BUCKET_TEST.txt bs=1 count=0 seek=4g\"\n- );\n- files.push(\"4GB_BUCKET_TEST.txt\");\n} catch (e) {\nreportError(e.message);\n}\n@@ -121,22 +132,48 @@ const run = async () => {\n// NOTE(jim): Try to upload each file the first time.\n// ----------------------------------------------------------------\n+ let firstTry = true;\n+\nlet items;\nfor (let i = 0; i < files.length; i++) {\nconst file = files[i];\n-\n+ let controller = new AbortController();\n+ let { signal } = controller;\nconst readStream = FS.createReadStream(`${file}`, {\nhighWaterMark: HIGH_WATER_MARK,\n});\n-\nreportTask(`attempting ${file} push to bucket`);\n+ if (firstTry) {\n+ firstTry = false;\n+\ntry {\n- await buckets.pushPath(bucketKey, file, readStream);\n+ buckets.pushPath(bucketKey, file, readStream, {\n+ root: bucketRoot,\n+ signal,\n+ });\n+\n+ await sleep(5000);\n+\n+ controller.abort();\n+\n+ reportTask(`aborted the first file: ${file}`);\n+\n+ await sleep(5000);\n+ } catch (e) {\n+ reportError(e.message);\n+ }\n+ } else {\n+ try {\n+ await buckets.pushPath(bucketKey, file, readStream, {\n+ root: bucketRoot,\n+ signal,\n+ });\nreportTask(`successfully added ${file}`);\n} catch (e) {\nreportError(e.message);\n}\n+ }\nitems = null;\ntry {\n",
        "chatgpt_cot": "\"Add AWS S3 functionality to download_drafts.js, write to S3 instead of local files, and improve performance by writing to S3 in batches.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -896,6 +896,7 @@ router.get('/samplepackimage/:id/:seed', async (req, res) => {\n});\nasync function updateCubeAndBlog(req, res, cube, changelog, added, missing) {\n+ try {\nconst blogpost = new Blog();\nblogpost.title = 'Cube Bulk Import - Automatic Post';\nblogpost.html = changelog;\n@@ -935,6 +936,9 @@ async function updateCubeAndBlog(req, res, cube, changelog, added, missing) {\n}\nreq.flash('success', 'All cards successfully added.');\nreturn res.redirect(`/cube/list/${req.params.id}`);\n+ } catch (err) {\n+ return util.handleRouteError(req, res, err, `/cube/list/${req.params.id}`);\n+ }\n}\nrouter.post('/importcubetutor/:id', ensureAuth, body('cubeid').toInt(), flashValidationErrors, async (req, res) => {\n",
        "org_msg": "Wrap updating blog in try catch.",
        "sim_msg": "[UpdateArticleReplyStatus] extracts core function so that ot\ns callable and importable",
        "sim_diff": "diff --git a/src/graphql/mutations/UpdateArticleReplyStatus.js b/src/graphql/mutations/UpdateArticleReplyStatus.js @@ -3,17 +3,23 @@ import client from 'util/client';\nimport ArticleReply from 'graphql/models/ArticleReply';\nimport ArticleReplyStatusEnum from 'graphql/models/ArticleReplyStatusEnum';\n-export default {\n- type: new GraphQLList(ArticleReply),\n- description: 'Change status of specified articleReplies',\n- args: {\n- articleId: { type: new GraphQLNonNull(GraphQLString) },\n- replyId: { type: new GraphQLNonNull(GraphQLString) },\n- status: {\n- type: new GraphQLNonNull(ArticleReplyStatusEnum),\n- },\n- },\n- async resolve(rootValue, { articleId, replyId, status }, { userId, appId }) {\n+/**\n+ * @param {object} arg\n+ * @param {string} arg.articleId\n+ * @param {string} arg.replyId\n+ * @param {string} arg.userId\n+ * @param {string} arg.appId\n+ * @param {string} arg.status\n+ *\n+ * @returns {ArticleReply[]} list of article replies after delete\n+ */\n+export async function updateArticleReplyStatus({\n+ articleId,\n+ replyId,\n+ userId,\n+ appId,\n+ status,\n+}) {\nconst {\nbody: {\nresult,\n@@ -68,7 +74,29 @@ export default {\n);\n}\n+ return _source.articleReplies;\n+}\n+\n+export default {\n+ type: new GraphQLList(ArticleReply),\n+ description: 'Change status of specified articleReplies',\n+ args: {\n+ articleId: { type: new GraphQLNonNull(GraphQLString) },\n+ replyId: { type: new GraphQLNonNull(GraphQLString) },\n+ status: {\n+ type: new GraphQLNonNull(ArticleReplyStatusEnum),\n+ },\n+ },\n+ async resolve(rootValue, { articleId, replyId, status }, { userId, appId }) {\n+ const articleReplies = await updateArticleReplyStatus({\n+ articleId,\n+ replyId,\n+ userId,\n+ appId,\n+ status,\n+ });\n+\n// When returning, insert articleId so that ArticleReply object type can resolve article.\n- return _source.articleReplies.map(ar => ({ ...ar, articleId }));\n+ return articleReplies.map(ar => ({ ...ar, articleId }));\n},\n};\n",
        "chatgpt_cot": "Add error handling to updateCubeAndBlog function in cube_routes.js. Fixes potential errors during cube and blog update process."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -14,6 +14,9 @@ const winston = require('winston');\nconst onFinished = require('on-finished');\nconst uuid = require('uuid/v4');\nconst tmp = require('tmp');\n+const schedule = require('node-schedule');\n+const updatedb = require('./serverjs/updatecards.js');\n+const carddb = require('./serverjs/cards.js');\nconst errorFile = tmp.fileSync({ prefix: `node-error-${process.pid}-`, postfix: '.log', discardDescriptor: true });\nconst combinedFile = tmp.fileSync({\n",
        "org_msg": "add back dependencies",
        "sim_msg": "Do not allow partial commits mid-merge/rebase/etc",
        "sim_diff": "diff --git a/node/lib/util/commit.js b/node/lib/util/commit.js @@ -53,6 +53,7 @@ const Hook = require(\"../util/hook\");\nconst Open = require(\"./open\");\nconst RepoStatus = require(\"./repo_status\");\nconst PrintStatusUtil = require(\"./print_status_util\");\n+const SequencerStateUtil = require(\"../util/sequencer_state_util\");\nconst SparseCheckoutUtil = require(\"./sparse_checkout_util\");\nconst StatusUtil = require(\"./status_util\");\nconst Submodule = require(\"./submodule\");\n@@ -2170,6 +2171,14 @@ exports.doCommitCommand = co.wrap(function *(repo,\nif (usingPaths) {\ncheckForPathIncompatibleSubmodules(repoStatus, relCwd);\n}\n+ if (usingPaths || !all) {\n+ const seq = yield SequencerStateUtil.readSequencerState(repo.path());\n+ if (seq) {\n+ const ty = seq.type.toLowerCase();\n+ const msg = \"Cannot do a partial commit during a \" + ty;\n+ throw new UserError(msg);\n+ }\n+ }\n// If there is nothing possible to commit, exit early.\n",
        "chatgpt_cot": "Add schedule and carddb modules, update cards.js in serverjs."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2341,30 +2341,34 @@ router.get('/api/cubelist/:id', function(req, res) {\n});\n});\n-router.post('/editdeck/:id', function(req, res) {\n- Deck.findById(req.params.id, function(err, deck) {\n+router.post('/editdeck/:id', async function(req, res) {\n+ try {\n+ const deck = Deck.findById(req.params.id);\nif (err || !deck) {\nreq.flash('danger', 'Deck not found');\n- res.status(404).render('misc/404', {});\n- } else if ((deck.owner && !(req.user)) || (deck.owner && (deck.owner != req.user._id))) {\n+ return res.status(404).render('misc/404', {});\n+ }\n+ if ((deck.owner && !(req.user)) || (deck.owner && (deck.owner != req.user._id))) {\nreq.flash('danger', 'Unauthorized');\n- res.status(404).render('misc/404', {});\n- } else {\n+ return res.status(404).render('misc/404', {});\n+ }\n+\ndeck = JSON.parse(req.body.draftraw);\n- Deck.updateOne({\n+ await Deck.updateOne({\n_id: deck._id\n- }, deck, function(err) {\n- if (err) {\n- req.flash('danger', 'Error saving deck');\n- } else {\n+ });\n+\nreq.flash('success', 'Deck saved succesfully');\n- }\nres.redirect('/cube/deck/' + deck._id);\n+ } catch (err) {\n+ console.error(err);\n+ res.status(500).send({\n+ success: 'false',\n+ message: err\n});\n}\n});\n-});\nrouter.post('/submitdeck/:id', async function(req, res) {\ntry {\n@@ -2395,16 +2399,20 @@ router.post('/submitdeck/:id', async function(req, res) {\n}\ncube.numDecks += 1;\n- await cube.save();\n- const user = await User.findById(deck.owner);\n+ const userq = User.findById(deck.owner);\n+ const cubeOwnerq = User.findById(cube.owner);\n+\n+ const [user, cubeOwner] = await Promise.all([userq, cubeOwnerq]);\nvar owner = user ? user.username : \"Anonymous\";\ndeck.name = owner + \"'s draft of \" + cube.name + \" on \" + deck.date.toLocaleString(\"en-US\");\ndeck.username = owner;\ndeck.cubename = cube.name;\ncube.decks.push(deck._id);\n- await cube.save();\n- await deck.save();\n+\n+ await util.addNotification(cubeOwner,user,'/cube/deck/'+deck._id,user.username + \" drafted your cube: \" + cube.name);\n+\n+ await Promise.all([cube.save(), deck.save(), cubeOwner.save()]);\nreturn res.redirect('/cube/deckbuilder/' + deck._id);\n} catch (err) {\n",
        "org_msg": "Added notifications to drafts",
        "sim_msg": "Switch to a case statement",
        "sim_diff": "diff --git a/client/deck-validator.js b/client/deck-validator.js @@ -273,76 +273,95 @@ module.exports = function validateDeck(deck, packs) { // eslint-disable-line no-\nif(response.success) {\nlet responseStatus = parseInt(response.status);\n- if(responseStatus === 0) {\n+ switch(responseStatus) {\n+ case 0:\nextendedStatus.push('Deck is valid');\n- } else if(responseStatus === 1) {\n+ break;\n+ case 1:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too many copies of one or more cards');\n- } else if(responseStatus === 2) {\n+ break;\n+ case 2:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too few Strongholds');\n- } else if(responseStatus === 3) {\n+ break;\n+ case 3:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too many Strongholds');\n- } else if(responseStatus === 4) {\n+ break;\n+ case 4:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too many Roles');\n- } else if(responseStatus === 5) {\n+ break;\n+ case 5:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too few Dynasty cards');\n- } else if(responseStatus === 6) {\n+ break;\n+ case 6:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too many Dynasty cards');\n- } else if(responseStatus === 7) {\n+ break;\n+ case 7:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has off-clan Dynasty cards');\n- } else if(responseStatus === 8) {\n+ break;\n+ case 8:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too few Conflict cards');\n- } else if(responseStatus === 9) {\n+ break;\n+ case 9:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too many Conflict cards');\n- } else if(responseStatus === 10) {\n+ break;\n+ case 10:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck does not have enough influence for its off-clan Conflict cards');\n- } else if(responseStatus === 11) {\n+ break;\n+ case 11:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has more than one off-clan in its Conflict deck');\n- } else if(responseStatus === 12) {\n+ break;\n+ case 12:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too many Character cards in its Conflict deck');\n- } else if(responseStatus === 13) {\n+ break;\n+ case 13:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too few Provinces');\n- } else if(responseStatus === 14) {\n+ break;\n+ case 14:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too many Provinces');\n- } else if(responseStatus === 15) {\n+ break;\n+ case 15:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has too many Provinces of one Element');\n- } else if(responseStatus === 16) {\n+ break;\n+ case 16:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has an off-clan Province');\n- } else if(responseStatus === 17) {\n+ break;\n+ case 17:\nstatus = 'Invalid';\nisValid = false;\nextendedStatus.push('Deck has an off-clan Conflict card with no influence cost');\n+ break;\n}\n}\n",
        "chatgpt_cot": "\"Add async and await to editdeck endpoint, fix compilation issue because of async function, and add error handling for editdeck and submitdeck endpoints.\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -241,14 +241,7 @@ app.use((err, req, res, next) => {\n});\n});\n-schedule.scheduleJob('0 0 * * *', () => {\n- winston.info('Starting midnight cardbase update...');\n- updatedb.updateCardbase();\n-});\n-\n// Start server after carddb is initialized.\n-carddb.initializeCardDb().then(() => {\nhttp.createServer(app).listen(5000, 'localhost', () => {\nwinston.info('Server started on port 5000...');\n});\n-});\n",
        "org_msg": "remove card base update",
        "sim_msg": "refactor: allows for web routes to worked on locally even if powergate and devnet are not running",
        "sim_diff": "diff --git a/server.js b/server.js @@ -67,6 +67,7 @@ app.prepare().then(async () => {\nif (!production) {\n// TODO(jim): Remove later.\n// We wipe all of the local data each time you run the application.\n+ try {\nawait Utilities.resetFileSystem();\nconst updates = await Utilities.refresh({ PG: PowerGate });\n@@ -120,6 +121,11 @@ app.prepare().then(async () => {\nconst parsedLibrary = FS.readFileSync(\"./.data/library.json\", \"utf8\");\nstate.library = JSON.parse(parsedLibrary).library;\n}\n+ } catch (e) {\n+ console.log(\n+ \"[ prototype ] you can not run the filecoin client, only web views allowed.\"\n+ );\n+ }\n}\nconst server = express();\n@@ -324,7 +330,7 @@ app.prepare().then(async () => {\n});\nserver.get(\"/\", async (req, res) => {\n- if (production) {\n+ if (production || !state.token) {\nreturn res.redirect(Constants.GITHUB_URL);\n}\n",
        "chatgpt_cot": "Remove scheduled job for midnight cardbase update and start the server after carddb initialization in app.js."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cards.test.js b/__tests__/serverjs/cards.test.js @@ -62,4 +62,30 @@ test(\"loadJSONFile loads a JSON file into the correct attribute\", () => {\n});\n});\n-test(\"getPlaceholderCard\", () => {});\n\\ No newline at end of file\n+test(\"getPlaceholderCard\", () => {\n+ const _id = \"abckggght\";\n+ const expected = {\n+ _id: _id,\n+ set: '',\n+ collector_number: '',\n+ promo: false,\n+ digital: false,\n+ full_name: 'Invalid Card',\n+ name: 'Invalid Card',\n+ name_lower: 'Invalid Card',\n+ artist: '',\n+ scryfall_uri: '',\n+ rarity: '',\n+ legalities: {},\n+ oracle_text: '',\n+ image_normal: 'https://img.scryfall.com/errors/missing.jpg',\n+ cmc: 0,\n+ type: '',\n+ colors: [],\n+ color_identity: [],\n+ parsed_cost: [],\n+ colorcategory: 'c',\n+ error: true\n+ };\n+ expect(carddb.getPlaceholderCard(_id)).toEqual(expected);\n+});\n\\ No newline at end of file\n",
        "org_msg": "test getPlaceholderCard",
        "sim_msg": "Added one more test with random string.",
        "sim_diff": "diff --git a/test/utils.test.js b/test/utils.test.js @@ -280,6 +280,10 @@ describe('#Utils', () => {\nexpect(utils.getErrorPcc(null)).to.be.a('null');\n});\n+ it('should not break on any other string', () => {\n+ expect(utils.getErrorPcc('123')).to.equal(null);\n+ });\n+\nit('should work with correct data', () => {\nexpect(utils.getErrorPcc('NO AGREEMENT EXISTS FOR AGENCY - 38KP')).to.equal('38KP');\n});\n",
        "chatgpt_cot": "Add test for getPlaceholderCard function to ensure correct placeholder card is returned. Fixes #1234."
    },
    {
        "org_diff": "diff --git a/src/components/GroupModal.js b/src/components/GroupModal.js @@ -93,7 +93,7 @@ const GroupModal = ({ cubeID, canEdit, children, ...props }) => {\nevent.stopPropagation();\nconst target = event.currentTarget;\nconst index = target.getAttribute('data-index');\n- setCardIndices((cards) => cards.filter((c) => c.index !== parseInt(index)));\n+ setCardIndices((cards) => cards.filter((c) => c !== parseInt(index)));\n});\nconst setTags = useCallback((tagF) => {\n",
        "org_msg": "Fix x's in group modal.",
        "sim_msg": "always set full obj for node group labels and anno",
        "sim_diff": "diff --git a/lib/shared/addon/components/node-group-row/component.js b/lib/shared/addon/components/node-group-row/component.js @@ -20,23 +20,11 @@ export default Component.extend({\nediting: equal('mode', 'edit'),\nactions: {\nsetTags(section) {\n- const { model: { tags = {} } } = this;\n-\n- for (let key in section) {\n- tags[key] = section[key];\n- }\n-\n- set(this, 'model.tags', tags);\n+ set(this, 'model.tags', section);\n},\nsetLabels(section) {\n- const { model: { labels = {} } } = this;\n-\n- for (let key in section) {\n- labels[key] = section[key];\n- }\n-\n- set(this, 'model.labels', labels);\n+ set(this, 'model.labels', section);\n},\n},\n",
        "chatgpt_cot": "\"Fix bug in setCardIndices method to correctly filter out card indices in GroupModal component\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1398,8 +1398,8 @@ router.post('/bulkreplacefile/:id', ensureAuth, async (req, res) => {\ncube.maybe = newMaybe;\nconst pids = new Set();\nconst cardNames = new Set();\n- const addDetails = (cardList) => {\n- cardList.splice().map((card, index) => {\n+ const addDetails = (cardList) =>\n+ cardList.map((card, index) => {\ncard = { ...card, details: { ...carddb.cardFromId(card.cardID) }, index };\nif (!card.type_line) {\ncard.type_line = card.details.type;\n@@ -1410,8 +1410,6 @@ router.post('/bulkreplacefile/:id', ensureAuth, async (req, res) => {\ncardNames.add(card.details.name);\nreturn card;\n});\n- return cardList;\n- };\nconst cubeCards = addDetails(cards);\nconst newDetails = addDetails(newCards);\n",
        "org_msg": "Fix replacecube.",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "Refactor addDetails function to properly map and update card details. Remove unnecessary return statement and improve code readability in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/jobs/download_drafts.js b/jobs/download_drafts.js // Load Environment Variables\nrequire('dotenv').config();\n-const fs = require('fs');\nconst mongoose = require('mongoose');\nconst AWS = require('aws-sdk');\n@@ -24,23 +23,8 @@ const batchSize = 100;\nlet cardToInt;\n-const processDeck = async (deck) => {\n+const processDeck = async (deck, draft) => {\nconst picks = [];\n- if (\n- !deck.seats ||\n- !deck.seats[0] ||\n- !deck.seats[0].deck ||\n- !deck.seats[0].pickorder ||\n- !deck.draft ||\n- !deck.seats[0].sideboard ||\n- !deck.seats[0].pickorder.length ||\n- deck.cards ||\n- deck.seats[0].bot\n- ) {\n- return null;\n- }\n-\n- const draft = await Draft.findOne({ _id: deck.draft }).lean();\nif (!draft || !draft.initial_state || !draft.initial_state[0].length || !draft.initial_state[0][0].length) {\nreturn null;\n}\n@@ -108,22 +92,35 @@ const writeToS3 = async (fileName, body) => {\nconsole.log(`Counted ${count} documents`);\nconst cursor = Deck.find().lean().cursor();\nlet counter = 0;\n-\nfor (let i = 0; i < count; i += batchSize) {\n- const deckQs = [];\n+ const decks = [];\nfor (let j = 0; j < batchSize; j++) {\nif (i + j < count) {\n// eslint-disable-next-line no-await-in-loop\nconst deck = await cursor.next();\n- if (deck) {\n- deckQs.push(processDeck(deck));\n+ if (deck &&\n+ deck.seats &&\n+ deck.seats[0] &&\n+ deck.seats[0].deck &&\n+ deck.seats[0].pickorder &&\n+ deck.draft &&\n+ deck.seats[0].sideboard &&\n+ deck.seats[0].pickorder.length &&\n+ !deck.cards &&\n+ !deck.seats[0].bot) {\n+ decks.push(deck);\n}\n}\n}\n+ draftIds = decks.map(({ draft }) => draft);\n+ // eslint-disable-next-line no-await-in-loop\n+ const drafts = await Draft.find({ _id: { $in: decks } }).lean();\n+ const draftsById = Object.fromEntries(drafts.map((draft) => [draft._id, draft]));\n+ const deckQs = decks.map((deck) => processDeck(deck, draftsById[deck.draft]));\n// eslint-disable-next-line no-await-in-loop\n- const decks = (await Promise.all(deckQs)).filter((d) => d);\n- if (decks.length > 0) {\n- await writeToS3(`drafts/${counter}.json`, decks);\n+ const processedDecks = (await Promise.all(deckQs)).filter((d) => d);\n+ if (processedDecks.length > 0) {\n+ await writeToS3(`drafts/${counter}.json`, processedDecks);\ncounter += 1;\n}\nconsole.log(`Finished: ${Math.min(count, i + batchSize)} of ${count} decks`);\n",
        "org_msg": "Batch loading the drafts.",
        "sim_msg": "adjust drawing",
        "sim_diff": "diff --git a/instancing.js b/instancing.js @@ -362,25 +362,25 @@ export class GeometryAllocator {\n// }\n// console.log(culled);\n- // for (let i = 0; i < this.numDraws; i++) {\n+ for (let i = 0; i < this.numDraws; i++) {\n+ // console.log(culled[i]);\n+ const found = culled.find(e => e[0] == i);\n+ if(found === undefined){\n+ if(testBoundingFn(i)){\n+ drawStarts.push(this.drawStarts[i]);\n+ drawCounts.push(this.drawCounts[i]);\n+ }\n+ }\n+ }\n+\n+ // for (let i = 0; i < culled.length; i++) {\n// // console.log(culled[i]);\n- // const found = culled.find(e => e[0] == i);\n- // if(found === undefined){\n- // // if(testBoundingFn(i)){\n- // drawStarts.push(this.drawStarts[i]);\n- // drawCounts.push(this.drawCounts[i]);\n+ // const id = culled[i][0];\n+ // // if(testBoundingFn(id)){\n+ // drawStarts.push(this.drawStarts[id]);\n+ // drawCounts.push(this.drawCounts[id]);\n// // }\n// }\n- // }\n-\n- for (let i = 0; i < culled.length; i++) {\n- // console.log(culled[i]);\n- const id = culled[i][0];\n- // if(testBoundingFn(id)){\n- drawStarts.push(this.drawStarts[id]);\n- drawCounts.push(this.drawCounts[id]);\n- // }\n- }\n}\n}\n",
        "chatgpt_cot": "\"Fix compilation issue by adding a parameter to processDeck method and updating the processDeck method to handle new parameter.\""
    },
    {
        "org_diff": "diff --git a/one_shot_scripts/import_ratings.js b/one_shot_scripts/import_ratings.js @@ -29,7 +29,7 @@ async function saveRatings(defaultPath = null) {\n(async () => {\nmongoose.connect(mongosecrets.connectionString).then(async () => {\n- saveRatings(process.argv[2]);\n+ await saveRatings(process.argv[2]);\nmongoose.disconnect();\nconsole.log('done');\nprocess.exit();\n",
        "org_msg": "Await so the changes get saved.",
        "sim_msg": "added ignore404 to check api call",
        "sim_diff": "diff --git a/website/js/lib/store/api/actions.js b/website/js/lib/store/api/actions.js @@ -103,7 +103,6 @@ module.exports={\nrequest.data=opts.body,\nrequest.headers['content-type']='application/json'\n}\n- context.commit('loading',true)\nvar credentials=await mutex.runExclusive(async function(){\nreturn context.dispatch('user/getCredentials',{},{root:true})\n})\n@@ -112,11 +111,11 @@ module.exports={\ndelete request.headers[\"Content-Length\"]\ntry{\n+ context.commit('loading',true)\nvar result=await axios(signed)\nreturn result.data\n}catch(e){\n- //console.log(JSON.stringify(e,null,2))\n-\n+ console.log(JSON.stringify(e,null,2))\nif(e.response){\nvar status=e.response.status\nif(status===403){\n@@ -125,14 +124,24 @@ module.exports={\nfailed=true\nvar result=window.confirm(\"You need to be logged in to use this page. click ok to be redirected to the login page\")\nif(result) window.window.location.href=login\n+ }else{\n+ throw e\n+ }\n+ }else if(status===404){\n+ if(!opts.ignore404){\n+\n}\n}else {\nvar message={\nresponse:_.get(error,\"response.data\"),\nstatus:_.get(error,\"response.status\")\n}\n+ if(status===404 && opts.ignore404){\n+ return false\n+ }else{\nwindow.alert(\"Request Failed: error response from endpoint\")\n- return message\n+ throw message\n+ }\n}\n}else if(e.code===\"CredentialTimeout\"){\nvar login=_.get(context,\"rootState.info._links.DesignerLogin.href\")\n@@ -142,11 +151,13 @@ module.exports={\nif(result){\ncontext.dispatch('user/logout',{},{root:true})\nwindow.window.location.href=login\n+ }else{\n+ throw e\n}\n}\n}else{\nwindow.alert(\"Unknown Error\")\n- //console.log(JSON.stringify(error,null,2))\n+ throw e\n}\n}finally{\ncontext.commit('loading',false)\n@@ -197,10 +208,10 @@ module.exports={\nreturn context.dispatch('_request',{\nurl:context.rootState.info._links.questions.href+'/'+qid,\nmethod:'head',\n- reason:qid+' does not exists'\n+ reason:qid+' does not exists',\n+ ignore404:true\n})\n.then(()=>true)\n- .catch(()=>false)\n},\nadd(context,payload){\nreturn context.dispatch('update',payload)\n",
        "chatgpt_cot": "Add await keyword to saveRatings function call for asynchronous behavior in import_ratings script."
    },
    {
        "org_diff": "diff --git a/src/cube_list.js b/src/cube_list.js @@ -2,6 +2,7 @@ import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Filter from './util/Filter';\n+import Hash from './util/Hash';\nimport CardModalForm from './components/CardModalForm';\nimport CubeListNavbar from './components/CubeListNavbar';\n@@ -21,7 +22,7 @@ class CubeList extends Component {\nthis.state = {\ncubeView: 'table',\n- openCollapse: null,\n+ openCollapse: Hash.get('f', false) ? 'filter' : null,\nfilter: [],\n};\n",
        "org_msg": "Open filter collapse if filter in URL.",
        "sim_msg": "Use usercard on UserList",
        "sim_diff": "diff --git a/src/user/UserList.js b/src/user/UserList.js @@ -2,6 +2,7 @@ import React from 'react';\nimport { Link } from 'react-router';\nimport ReduxInfiniteScroll from 'redux-infinite-scroll';\nimport { isNumber, take } from 'lodash';\n+import UserCard from '../widgets/UserCard';\nimport Follow from '../widgets/Follow';\nimport Avatar from '../widgets/Avatar';\nimport Icon from '../widgets/Icon';\n@@ -56,8 +57,11 @@ export default class UserList extends React.Component {\nloadMore={this.paginate}\nelementIsScrollable={false}\nhasMore={users.length > noOfItemsToShow}\n+ className=\"row my-5\"\n>\n- {take(users, noOfItemsToShow).map(user => <UserRow username={user} key={user} />)}\n+ {take(users, noOfItemsToShow).map(user =>\n+ <UserCard key={user} username={user} label={<Follow username={user} />} />\n+ )}\n</ReduxInfiniteScroll>\n</div>\n);\n",
        "chatgpt_cot": "Add Hash import and update openCollapse initialization in CubeList to use Hash.get method for 'f' key."
    },
    {
        "org_diff": "diff --git a/src/components/GroupModal.js b/src/components/GroupModal.js @@ -29,7 +29,7 @@ class GroupModal extends Component {\ncmc: '',\ntype_line: '',\n...fromEntries([...'WUBRGC'].map(c => [`color${c}`, false])),\n- addTags: false,\n+ addTags: true,\ndeleteTags: false,\ntags: [],\n};\n",
        "org_msg": "Make \"add tags\" the default in GroupModal.",
        "sim_msg": "always set full obj for node group labels and anno",
        "sim_diff": "diff --git a/lib/shared/addon/components/node-group-row/component.js b/lib/shared/addon/components/node-group-row/component.js @@ -20,23 +20,11 @@ export default Component.extend({\nediting: equal('mode', 'edit'),\nactions: {\nsetTags(section) {\n- const { model: { tags = {} } } = this;\n-\n- for (let key in section) {\n- tags[key] = section[key];\n- }\n-\n- set(this, 'model.tags', tags);\n+ set(this, 'model.tags', section);\n},\nsetLabels(section) {\n- const { model: { labels = {} } } = this;\n-\n- for (let key in section) {\n- labels[key] = section[key];\n- }\n-\n- set(this, 'model.labels', labels);\n+ set(this, 'model.labels', section);\n},\n},\n",
        "chatgpt_cot": "Update GroupModal component to enable adding tags functionality."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -56,38 +56,19 @@ async function generateShortId() {\nreturn newId;\n}\n+const FORMATS = ['Vintage', 'Legacy', 'Modern', 'Pioneer', 'Standard'];\n+\nfunction intToLegality(val) {\n- switch (val) {\n- case 0:\n- return 'Vintage';\n- case 1:\n- return 'Legacy';\n- case 2:\n- return 'Modern';\n- case 3:\n- return 'Pioneer';\n- case 4:\n- return 'Standard';\n- default:\n- return undefined;\n- }\n+ return FORMATS[val];\n}\nfunction legalityToInt(legality) {\n- switch (legality) {\n- case 'Vintage':\n- return 0;\n- case 'Legacy':\n- return 1;\n- case 'Modern':\n- return 2;\n- case 'Pioneer':\n- return 3;\n- case 'Standard':\n- return 4;\n- default:\n- return undefined;\n- }\n+ let res;\n+ FORMATS.forEach((format, index) => {\n+ if (legality === format) res = index;\n+ });\n+\n+ return res;\n}\nfunction cardsAreEquivalent(card, details) {\n",
        "org_msg": "moved format list to a separate data structure",
        "sim_msg": "rewrite random buffer generator",
        "sim_diff": "diff --git a/bin/data-type-formats.js b/bin/data-type-formats.js @@ -34,14 +34,7 @@ exports.binary = {\n}\n},\n- random: function ({ schema }, { length, maxLength, minLength }) {\n- if (maxLength === undefined) maxLength = schema.hasOwnProperty('maxLength') / 8 ? schema.maxLength : 25;\n- if (minLength === undefined) minLength = schema.hasOwnProperty('minLength') / 8 ? schema.minLength : 1;\n- if (length === undefined) length = minLength + Math.round(Math.random() * (maxLength - minLength));\n- const array = [];\n- for (let i = 0; i < length; i++) array.push(Math.floor(Math.random() * 256));\n- return Buffer.from(array);\n- },\n+ random: randomBuffer(8),\nserialize: function ({ exception, value }) {\nif (value instanceof Buffer) {\n@@ -86,14 +79,7 @@ exports.byte = {\n}\n},\n- random: function ({ schema }, { length, maxLength, minLength }) {\n- if (maxLength === undefined) maxLength = schema.hasOwnProperty('maxLength') / 4 ? schema.maxLength : 150;\n- if (minLength === undefined) minLength = schema.hasOwnProperty('minLength') / 4 ? schema.minLength : 1;\n- if (length === undefined) length = minLength + Math.round(Math.random() * (maxLength - minLength));\n- const array = [];\n- for (let i = 0; i < length; i++) array.push(Math.floor(Math.random() * 256));\n- return Buffer.from(array);\n- },\n+ random: randomBuffer(4),\nserialize: function ({ exception, value }) {\nif (value instanceof Buffer) {\n@@ -222,6 +208,32 @@ exports.dateTime = {\n}\n};\n+function randomBuffer (divider) {\n+ return function (schema, { randomNumber }) {\n+ const hasMin = schema.hasOwnProperty('minLength');\n+ const hasMax = schema.hasOwnProperty('maxLength');\n+\n+ const config = {};\n+ if (hasMin && hasMax) {\n+ config.min = schema.minLength / divider;\n+ config.max = schema.maxLength / divider;\n+ } else if (hasMin) {\n+ config.min = +schema.minLength / divider;\n+ config.max = config.min + 25;\n+ } else if (hasMax) {\n+ config.max = +schema.maximum / divider;\n+ config.min = config.max - 25;\n+ } else {\n+ config.min = 1;\n+ config.max = 25;\n+ }\n+\n+ const length = randomNumber(config);\n+ const array = [];\n+ for (let i = 0; i < length; i++) array.push(Math.floor(Math.random() * 256));\n+ return Buffer.from(array);\n+ }\n+}\nfunction randomDate(schema, { randomNumber }) {\nconst fiveYears = 157248000000; // 5 years in milliseconds\n",
        "chatgpt_cot": "\"Add array of formats and refactor intToLegality and legalityToInt functions to use the array for improved readability and maintainability.\""
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -33,7 +33,7 @@ html\nimg(src=\"/content/banner.png\" style='height: 45px; margin: 0 0' alt=\"Cube Cobra: a site for Magic: the Gathering Cubing\")\nbutton.navbar-toggler(type='button', data-toggle='collapse', data-target='#navbar', aria-controls='navbar', aria-expanded='false', aria-label='Toggle navigation')\nspan.navbar-toggler-icon\n- #navbar.collapse.navbar-collapse\n+ #navbar.collapse.navbar-collapse(style='flex: 10000 1 auto')\nul.navbar-nav.mr-auto\nform(method='POST', action='/search').form-inline\n.input-group.mt-2.mb-sm-2\n@@ -55,7 +55,9 @@ html\nli.nav-item\na.nav-link.d-none.d-lg-block(href=\"#\", data-toggle='modal', data-target='#cubeModal') New Cube\nli.nav-item\n- a.nav-link(href=\"/user/view/\"+user.id) Your Profile\n+ a.nav-link(href=\"/user/view/\"+user.id)\n+ span.d-none.d-lg-inline Your\n+ | Profile\nli.nav-item.dropdown\na#navbarDropdownMenuLink.nav-link.dropdown-toggle(href='#', role='button', data-toggle='dropdown', aria-haspopup='true', aria-expanded='false')\n| #{user.username}\n",
        "org_msg": "Fix global navbar spacing.",
        "sim_msg": "quick add button mayhaps",
        "sim_diff": "diff --git a/app/components/page-header/template.hbs b/app/components/page-header/template.hbs {{/each}}\n</ul>\n+ <!--quick add-->\n+ <ul class=\"dropdown\">\n+ <li>\n+ <a class=\"btn btn-sm dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label={{t 'nav.user.label' username=session.user}}>\n+ Quick Add <i class=\"icon icon-plus\"></i>\n+ <span class=\"sr-only\">{{t 'nav.srToggleDropdown'}}</span>\n+ </a>\n+ </li>\n+ </ul>\n+\n<ul class=\"nav-user dropdown\">\n<li>\n<a class=\"btn dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label={{t 'nav.user.label' username=session.user}}>\n",
        "chatgpt_cot": "\"Adjust layout.pug to improve navbar responsiveness and user profile link display for better user experience.\""
    },
    {
        "org_diff": "diff --git a/src/components/CardModal.js b/src/components/CardModal.js @@ -23,6 +23,7 @@ import LoadingButton from 'components/LoadingButton';\nimport FoilCardImage from 'components/FoilCardImage';\nimport TagInput from 'components/TagInput';\nimport TextBadge from 'components/TextBadge';\n+import Tooltip from 'components/Tooltip';\nconst CardModal = ({\ncard,\n@@ -51,12 +52,16 @@ const CardModal = ({\n<Row noGutters className=\"mb-2\">\n{card.details.price && (\n<TextBadge name=\"Price\" className=\"mt-2 mr-2\">\n+ <Tooltip text=\"TCGPlayer Market Price\">\n${card.details.price.toFixed(2)}\n+ </Tooltip>\n</TextBadge>\n)}\n{card.details.price_foil && (\n<TextBadge name=\"Foil\" className=\"mt-2 mr-2\">\n+ <Tooltip text=\"TCGPlayer Market Price\">\n${card.details.price_foil.toFixed(2)}\n+ </Tooltip>\n</TextBadge>\n)}\n{card.details.elo && (\n",
        "org_msg": "Add tooltips to card modal.",
        "sim_msg": "Fix UserCard propTypes",
        "sim_diff": "diff --git a/src/components/UserCard.js b/src/components/UserCard.js @@ -5,27 +5,22 @@ import FollowButton from '../widgets/FollowButton';\nimport Avatar from '../components/Avatar';\nimport './UserCard.less';\n-const UserCard = ({ username, alt }) =>\n- (<div className=\"UserCard\">\n+const UserCard = ({ username, alt }) => (\n+ <div className=\"UserCard\">\n<div className=\"UserCard__left\">\n<Link to={`/@${username}`}>\n<Avatar username={username} size={40} />\n</Link>\n- <Link to={`/@${username}`}>\n- {username}\n- </Link>\n- {alt &&\n- <span className=\"UserCard__alt\">\n- {alt}\n- </span>\n- }\n+ <Link to={`/@${username}`}>{username}</Link>\n+ {alt && <span className=\"UserCard__alt\">{alt}</span>}\n</div>\n<FollowButton username={username} />\n- </div>);\n+ </div>\n+);\nUserCard.propTypes = {\nusername: PropTypes.string.isRequired,\n- alt: PropTypes.oneOf(PropTypes.string, PropTypes.bool),\n+ alt: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n};\nUserCard.defaultProps = {\n",
        "chatgpt_cot": "Add Tooltip component to display TCGPlayer Market Price in CardModal. Fixes issue with displaying market price in CardModal."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1387,7 +1387,7 @@ router.post('/bulkreplacefile/:id', ensureAuth, async (req, res) => {\nconst pids = new Set();\nconst cardNames = new Set();\nconst addDetails = (cardList) => {\n- cardList.splice().forEach((card, index) => {\n+ cardList.splice().map((card, index) => {\ncard = { ...card, details: { ...carddb.cardFromId(card.cardID) }, index };\nif (!card.type_line) {\ncard.type_line = card.details.type;\n@@ -1396,6 +1396,7 @@ router.post('/bulkreplacefile/:id', ensureAuth, async (req, res) => {\npids.add(card.details.tcgplayer_id);\n}\ncardNames.add(card.details.name);\n+ return card;\n});\nreturn cardList;\n};\n",
        "org_msg": "Correctly add details.",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "\"Fix bug in addDetails function to correctly map cardList and return card, ensuring proper card details and type line are set.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -595,6 +595,10 @@ router.get('/rss/:id', async (req, res) => {\nconst split = req.params.id.split(';');\nconst cubeID = split[0];\nconst cube = await Cube.findOne(buildIdQuery(cubeID)).lean();\n+ if (!cube) {\n+ req.flash('danger', `Cube ID ${req.params.id} not found/`);\n+ res.redirect('/404');\n+ }\nconst blogs = await Blog.find({\ncube: cube._id,\n})\n@@ -3267,7 +3271,7 @@ router.get('/deck/:id', async (req, res) => {\nlet draft = null;\nif (deck.draft) {\ndraft = await Draft.findById(deck.draft);\n- if (!draft.synergies) {\n+ if (draft && !draft.synergies) {\n// put in synergies for old drafts that don't have em.\nconst cards = draft.initial_state.flat(3);\n",
        "org_msg": "Fix error from logs",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Add error handling for missing cube ID and check for draft existence before accessing synergies in deck view."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -231,6 +231,7 @@ router.get('/api/downloadcubes/:page/:key', async (req, res) => {\nreturn res.status(200).send({\nsuccess: 'true',\n+ pages: Math.ceil(count / cubePageSize),\ncubes: cubes.map((cube) => cube.cards.map((card) => carddb.cardFromId(card.cardID).name_lower)),\n});\n} catch (err) {\n@@ -267,6 +268,7 @@ router.get('/api/downloaddecks/:page/:key', async (req, res) => {\nreturn res.status(200).send({\nsuccess: 'true',\n+ pages: Math.ceil(count / deckPageSize),\ndecks: decks.map((deck) => {\nconst main = [];\nconst side = [];\n",
        "org_msg": "Add page count to api",
        "sim_msg": "Import from public decks as well",
        "sim_diff": "diff --git a/client/DeckEditor.jsx b/client/DeckEditor.jsx @@ -238,17 +238,26 @@ class InnerDeckEditor extends React.Component {\nimportDeck() {\n$(findDOMNode(this.refs.modal)).modal('hide');\n- let strainUrl = document.getElementById('strainUrl').value;\n+ let importUrl = document.getElementById('importUrl').value;\nlet apiUrl = 'https://api.fiveringsdb.com/';\n- let path = 'strains';\n+ let strainPath = 'strains';\n+ let deckPath = 'decks';\nlet deckResponse = {};\n- let strainId = String(strainUrl).split('/')[4];\n+ let importId = String(importUrl).split('/')[4];\n+ let selector = String(importUrl).split('/')[3];\n+\n+ let path = '';\n+ if(selector === 'decks') {\n+ path = deckPath;\n+ } else if(selector === 'strains') {\n+ path = strainPath;\n+ }\n$.ajax({\ntype: 'GET',\n- url: apiUrl + path + '/' + strainId,\n+ url: apiUrl + path + '/' + importId,\ndataType: 'json',\nasync: false,\nsuccess: function(data) {\n@@ -256,12 +265,26 @@ class InnerDeckEditor extends React.Component {\n}\n});\n+ let deckClan = '';\n+ let deckAlliance = '';\n+ let deckName = '';\n+ let deckList = '';\n+ let cardList = '';\n+\n+\nif(deckResponse.success) {\nlet deckRecord = deckResponse.record;\n- let deckClan = deckRecord.head.clan;\n- let deckName = deckRecord.head.name;\n- let deckList = deckRecord.head.cards;\n- let cardList = '';\n+ if(selector === 'decks') {\n+ deckClan = deckRecord.primary_clan;\n+ deckAlliance = deckRecord.secondary_clan;\n+ deckName = deckRecord.name;\n+ deckList = deckRecord.cards;\n+ } else if(selector === 'strains') {\n+ deckClan = deckRecord.head.primary_clan;\n+ deckAlliance = deckRecord.head.secondary_clan;\n+ deckName = deckRecord.head.name;\n+ deckList = deckRecord.head.cards;\n+ }\nlet deck = this.copyDeck(this.state.deck);\n@@ -272,12 +295,14 @@ class InnerDeckEditor extends React.Component {\ndeck.faction = this.props.factions['crab'];\n}\n+ if(deckAlliance) {\n+ deck.alliance = this.props.factions[deckAlliance];\n+ } else {\n+ deck.alliance = this.props.factions['crab'];\n+ }\n+\n_.each(deckList, (count, card) => {\ncardList += count + ' ' + this.props.cards[card].name + '\\n';\n- let allianceClan = this.props.cards[card].clan;\n- if(allianceClan !== 'neutral' && allianceClan !== deckClan) {\n- deck.alliance = this.props.factions[this.props.cards[card].clan];\n- }\n});\n//Duplicate onCardListChange to get this working correctly\n@@ -361,7 +386,7 @@ class InnerDeckEditor extends React.Component {\n<h4 className='modal-title'>Provide Permalink</h4>\n</div>\n<div className='modal-body'>\n- <Input name='strainUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n+ <Input name='importUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n<div className='col-sm-1'>\n<button className='btn btn-default' onClick={ this.importDeck.bind(this) }>Import</button>\n</div>\n",
        "chatgpt_cot": "\"Add pagination functionality to downloadcubes and downloaddecks API endpoints\""
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"lint\": \"beautify-lint *.js {config,models,routes,serverjs,views,public/js}/**/*.js\",\n\"build\": \"node_modules/.bin/webpack --mode production --config webpack.prod.js\",\n\"start\": \"nodemon --ignore src --ignore public & node_modules/.bin/webpack-dev-server --config webpack.dev.js\",\n- \"test\": \"jest --silent\"\n+ \"test\": \"jest --silent --detectOpenHandles\"\n},\n\"author\": \"Gwen Dekker\",\n\"license\": \"ISC\",\n",
        "org_msg": "detect open filehandles in jest to avoid test hangs",
        "sim_msg": "remove `pretty` script from package.json",
        "sim_diff": "diff --git a/package.json b/package.json \"code-lint\": \"eslint setup lib bin hot buildin \\\"test/*.js\\\" \\\"test/**/webpack.config.js\\\" \\\"examples/**/webpack.config.js\\\" \\\"schemas/**/*.js\\\"\",\n\"type-lint\": \"tsc --pretty\",\n\"fix\": \"yarn code-lint --fix\",\n- \"pretty\": \"prettier --write \\\"**/*.{js,ts}\\\"\",\n\"schema-lint\": \"node --max-old-space-size=4096 node_modules/jest-cli/bin/jest --testMatch \\\"<rootDir>/test/*.lint.js\\\" --no-verbose\",\n\"benchmark\": \"node --max-old-space-size=4096 --trace-deprecation node_modules/jest-cli/bin/jest --testMatch \\\"<rootDir>/test/*.benchmark.js\\\" --runInBand\",\n\"cover\": \"yarn cover:init && yarn cover:all && yarn cover:report\",\n",
        "chatgpt_cot": "Update Jest test command to include \"--detectOpenHandles\" flag to improve test coverage in package.json."
    },
    {
        "org_diff": "diff --git a/src/blogpost.js b/src/blogpost.js -import React, { Component } from 'react';\n+import React from 'react';\nimport ReactDOM from 'react-dom';\n+import PropTypes from 'prop-types';\n-import BlogPost from './components/BlogPost';\n+import BlogPost from 'components/BlogPost';\n-class SinglePost extends Component {\n- constructor(props) {\n- super(props);\n- }\n-\n- render() {\n- const { post, userid, loggedIn, position } = this.props;\n- return (\n+const BlogPostPage = ({ post, userid, loggedIn, position }) => (\n<BlogPost key={post._id} post={post} canEdit={false} userid={userid} loggedIn={loggedIn} focused={position} />\n);\n- }\n+\n+BlogPostPage.propTypes = {\n+ post: PropTypes.shape({\n+ _id: PropTypes.string.isRequired,\n+ }).isRequired,\n+ userid: PropTypes.string.isRequired,\n+ loggedIn: PropTypes.bool.isRequired,\n+ position: PropTypes.arrayOf(PropTypes.number).isRequired,\n}\nconst post = JSON.parse(document.getElementById('blogData').value);\n@@ -22,5 +23,7 @@ const hasPosition = document.getElementById('positionData') != null;\nconst userid = loggedIn ? document.getElementById('userid').value : '';\nconst position = hasPosition ? JSON.parse(document.getElementById('positionData').value) : [];\nconst wrapper = document.getElementById('react-root');\n-const element = <SinglePost post={post} loggedIn={loggedIn} userid={userid} position={position} />;\n-wrapper ? ReactDOM.render(element, wrapper) : false;\n+const element = <BlogPostPage post={post} loggedIn={loggedIn} userid={userid} position={position} />;\n+if (wrapper) {\n+ ReactDOM.render(element, wrapper);\n+}\n",
        "org_msg": "Resolve blogpost.js",
        "sim_msg": "load content only if it doesn't exist in state",
        "sim_diff": "diff --git a/src/post/postSingle/PostSingle.js b/src/post/postSingle/PostSingle.js @@ -12,7 +12,7 @@ import { editPost } from '../Write/EditorActions';\n@connect(\n({ posts, app, reblog, auth, bookmarks }) => ({\n- content: posts[app.lastPostId] ? posts[app.lastPostId] : null,\n+ posts,\nisPostModalOpen: app.isPostModalOpen,\nlastPostId: app.lastPostId,\nsidebarIsVisible: app.sidebarIsVisible,\n@@ -39,20 +39,20 @@ import { editPost } from '../Write/EditorActions';\nexport default class PostSingle extends React.Component {\ncomponentWillMount() {\n- if (!this.props.modal) {\n+ const { location, posts } = this.props;\n+ const postId = location.state;\n+\n+ if (!postId || !posts[postId]) {\nthis.props.getContent();\n}\n}\n- handlePageClick(e) {\n- e.stopPropagation();\n- this.props.closeCommentingDraft();\n- }\n-\nrender() {\nlet onEdit;\n- const { modal, isPostModalOpen, sidebarIsVisible, content, contentList = [], reblog, reblogList, auth } = this.props;\n+ const { modal, posts, isPostModalOpen, sidebarIsVisible, contentList = [], reblog, reblogList, auth } = this.props;\n+ const postId = this.props.location.state;\n+ const content = postId && posts[postId];\nif (!content) {\nreturn null;\n}\n@@ -87,7 +87,7 @@ export default class PostSingle extends React.Component {\n});\nreturn (\n- <div onClick={e => this.handlePageClick(e)}>\n+ <div>\n{(modal && isPostModalOpen) &&\n<PostSingleModal\ncontent={content}\n",
        "chatgpt_cot": "Refactor BlogPostPage component, update imports, and change SinglePost class to functional component with propTypes for better code organization."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -857,8 +857,8 @@ router.get('/samplepack/:id/:seed', function(req, res) {\nmetadata: generateMeta(\n'Cube Cobra Sample Pack',\n`A sample pack from ${cube.name}`,\n- `https://www.cubecobra.com/cube/samplepackimage/${req.params.id}/${pack.seed}.png`,\n- `https://www.cubecobra.com/cube/samplepack/${req.params.id}/${pack.seed}`\n+ `http://162.243.163.51/cube/samplepackimage/${req.params.id}/${pack.seed}.png`,\n+ `http://162.243.163.51/cube/samplepack/${req.params.id}/${pack.seed}`\n),\nloginCallback: '/cube/samplepack/' + req.params.id\n});\n",
        "org_msg": "Added debugging urls for dev server",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Fix image and link URLs in cube_routes.js to use the correct server address."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeDraftPage.js b/src/pages/CubeDraftPage.js @@ -228,6 +228,7 @@ const CubeDraftPage = ({ cube, cubeID, initialDraft }) => {\n</CSRFForm>\n<DndProvider>\n{showPack(initialDraft, packNumber) && (\n+ <>\n<ErrorBoundary>\n<Pack\npack={pack}\n@@ -238,7 +239,6 @@ const CubeDraftPage = ({ cube, cubeID, initialDraft }) => {\nonClickCard={handleClickCard}\n/>\n</ErrorBoundary>\n- )}\n{showBotBreakdown && (\n<ErrorBoundary>\n<Card className=\"mt-3\">\n@@ -258,6 +258,8 @@ const CubeDraftPage = ({ cube, cubeID, initialDraft }) => {\n</Card>\n</ErrorBoundary>\n)}\n+ </>\n+ )}\n<ErrorBoundary className=\"mt-3\">\n<Card className=\"mt-3\">\n<DeckStacks\n",
        "org_msg": "Fix bug with finishing a draft and the draftbot breakdown.",
        "sim_msg": "fix (Item): enable new item without dto",
        "sim_diff": "diff --git a/src/item.js b/src/item.js @@ -29,10 +29,6 @@ export class Item {\nthis._dto = _.merge({}, config.dto, metadata);\nthis.dto = config.dto;\n- if (_.isEmpty(this._dto)) {\n- throw new Error('Item: no dto');\n- }\n-\nthis.cubeType = config.cubeType || 'fill';\nthis.cubeImages = config.cubeImages;\nthis._cubeRatio = config.cubeRatio;\n",
        "chatgpt_cot": "Refactor CubeDraftPage to fix display issues and improve code readability by restructuring JSX elements and adding ErrorBoundary components for better error handling."
    },
    {
        "org_diff": "diff --git a/public/css/stylesheet.css b/public/css/stylesheet.css @@ -269,7 +269,7 @@ border-bottom: none;\nbackground: #fff;\n}\n-@media(min-width: 768px) {\n+@media(max-width: 767.98px) {\n#autocard_popup_info,\n#autocard_popup2,\n#autocard_popup {\n@@ -566,7 +566,7 @@ body.busy-cursor {\n}\n.table-view.row {\n- overflow: auto hidden;\n+ overflow: auto;\nflex-wrap: nowrap;\npadding: 0 calc(50vw - 50% - 2px);\nmargin: 0 calc(-50vw + 50%);\n",
        "org_msg": "Fix two bugs.",
        "sim_msg": "Fix the aspect ratio fix",
        "sim_diff": "diff --git a/src/web/stylesheets/components/_pane.css b/src/web/stylesheets/components/_pane.css line-height: 30px;\nbackground-color: var(--primary-background-colour);\nflex-direction: row;\n+ padding-left: 10px;\n}\n.io-card.card:hover {\nmargin-top: auto;\nmargin-right: auto;\nmargin-bottom: auto;\n- padding: 10px;\n- padding-right: 0px;\n+ padding: 0px;\n}\n",
        "chatgpt_cot": "Update media query breakpoints and fix overflow property in stylesheet for better responsiveness and layout handling."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -546,7 +546,7 @@ const methods = {\nconst draft = createDraft(format, cube.cards, 0, 1, { username: 'Anonymous' }, seed);\nreturn {\nseed,\n- pack: draft.unopenedPacks[0][0].map((card) => card.details),\n+ pack: draft.unopenedPacks[0][0],\n};\n},\ngenerateShortId,\n",
        "org_msg": "Don't map to just details in generatePack.",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "\"Refactor pack generation in cubefn.js for improved performance and readability\""
    },
    {
        "org_diff": "diff --git a/src/util/Draft.js b/src/util/Draft.js @@ -48,11 +48,11 @@ function botRating(botColors, card) {\n// Prioritize on-color or overlapping fetches.\n// Then overlapping lands, then overlapping spells.\nif (subset || (isFetch && overlap)) {\n- rating -= 0.4;\n- } else if (isLand && overlap) {\nrating -= 0.3;\n- } else if (overlap) {\n+ } else if (isLand && overlap) {\nrating -= 0.2;\n+ } else if (overlap) {\n+ rating -= 0.15;\n}\nreturn rating;\n}\n",
        "org_msg": "Adjust bot rating values.",
        "sim_msg": "rough changes to deckbuilder tests",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -41,17 +41,10 @@ class DeckBuilder {\n}\n});\n- var agenda;\n- var agendaCount = _.find(cardCounts, cardCount => cardCount.card.type_code === 'agenda');\n- if(agendaCount) {\n- agenda = agendaCount.card;\n- }\n-\nreturn {\nfaction: { value: faction },\n- agenda: agenda,\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'location', 'attachment', 'event'].includes(cardCount.card.type_code)),\n- plotCards: _.filter(cardCounts, cardCount => cardCount.card.type_code === 'plot')\n+ drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type_code)),\n+ provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type_code === 'province')\n};\n}\n",
        "chatgpt_cot": "\"Refactor botRating function to prioritize on-color or overlapping fetches, lands, and spells. Adjust rating values based on conditions to improve card evaluation.\""
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -339,6 +339,11 @@ const CubeListNavbar = ({\nconst handleToggleTagColorsModal = useCallback(() => setTagColorsModalOpen(false), []);\nconst handleToggleSelectEmptyModal = useCallback(() => setSelectEmptyModalOpen(false), []);\n+ const enc = encodeURIComponent;\n+ const sortUrlSegment = `primary=${enc(primary)}&secondary=${enc(secondary)}&tertiary=${enc(tertiary)}`;\n+ const filterString = filter?.stringify ?? '';\n+ const filterUrlSegment = filterString ? `&filter=${enc(filterString)}` : '';\n+\nreturn (\n<div className={`usercontrols${className ? ` ${className}` : ''}`}>\n<Navbar expand=\"md\" className=\"navbar-light\">\n@@ -430,9 +435,7 @@ const CubeListNavbar = ({\n)}\n<DropdownItem href={`/cube/clone/${cubeID}`}>Clone Cube</DropdownItem>\n<DropdownItem href={`/cube/download/plaintext/${cubeID}`}>Card Names (.txt)</DropdownItem>\n- <DropdownItem\n- href={`/cube/download/csv/${cubeID}?primary=${primary}&secondary=${secondary}&tertiary=${tertiary}`}\n- >\n+ <DropdownItem href={`/cube/download/csv/${cubeID}?${sortUrlSegment}${filterUrlSegment}`}>\nComma-Separated (.csv)\n</DropdownItem>\n<DropdownItem href={`/cube/download/forge/${cubeID}`}>Forge (.dck)</DropdownItem>\n",
        "org_msg": "added filter to export URL link",
        "sim_msg": "fix: get value from current item instead of parent",
        "sim_diff": "diff --git a/src/components/NavigationDesktop/NavigationItemDesktop.js b/src/components/NavigationDesktop/NavigationItemDesktop.js @@ -122,7 +122,7 @@ class NavigationItemDesktop extends Component {\n<MenuList disablePadding>\n<MenuItem>\n<Link onClick={this.onClose} route={`${this.linkPath(item)}`}>\n- <ListItemText primary={navigationItem.data.content[0].value} />\n+ <ListItemText primary={item.navigationItem.data.content[0].value} />\n</Link>\n</MenuItem>\n{Array.isArray(item.items) && this.renderSubNav(item)}\n",
        "chatgpt_cot": "Add URL encoding and filter options to CubeListNavbar for sorting and filtering functionality. Fix download CSV link to include sorting and filtering parameters."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -148,7 +148,7 @@ const FOUR_AND_FIVE_COLOR = ['4c', '5c'];\nconst allDevotions = (cube, color) => {\nconst counts = new Set();\n- for (const card in cube) {\n+ for (const card of cube) {\ncounts.add(cardDevotion(card, color));\n}\nreturn [...counts].sort((a, b) => b - a);\n",
        "org_msg": "iterating over array values, not over keys",
        "sim_msg": "clean up SortableSet\nremove unnecessary _isSorted flag\nremove clear-override as an empty set is \"sorted\"\nearly return on empty sets",
        "sim_diff": "diff --git a/lib/util/SortableSet.js b/lib/util/SortableSet.js @@ -6,7 +6,6 @@ module.exports = class SortableSet extends Set {\nsuper(initialIterable);\nthis._sortFn = defaultSort;\nthis._lastActiveSortFn = null;\n- this._isSorted = false;\n}\n/**\n@@ -15,26 +14,16 @@ module.exports = class SortableSet extends Set {\n*/\nadd(value) {\nthis._lastActiveSortFn = null;\n- this._isSorted = false;\nsuper.add(value);\nreturn this;\n}\n- /**\n- * @returns {void}\n- */\n- clear() {\n- this._lastActiveSortFn = null;\n- this._isSorted = false;\n- super.clear();\n- }\n-\n/**\n* @param {Function} sortFn - function to sort the set\n* @returns {void}\n*/\nsortWith(sortFn) {\n- if(this._isSorted && sortFn === this._lastActiveSortFn) {\n+ if(this.size === 0 || sortFn === this._lastActiveSortFn) {\n// already sorted - nothing to do\nreturn;\n}\n@@ -45,7 +34,6 @@ module.exports = class SortableSet extends Set {\nthis.add(sortedArray[i]);\n}\nthis._lastActiveSortFn = sortFn;\n- this._isSorted = true;\n}\n/**\n",
        "chatgpt_cot": "Fix iteration method in Sort.js for better performance."
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -550,6 +550,7 @@ router.get('/decks/:userid/:page', async (req, res) => {\nconst page = parseInt(req.params.page, 10);\nconst userQ = User.findById(userid, '_id username users_following').lean();\n+\nconst decksQ = Deck.find(\n{\n'seats.0.userid': userid,\n@@ -562,8 +563,8 @@ router.get('/decks/:userid/:page', async (req, res) => {\n.skip(pagesize * page)\n.limit(pagesize)\n.lean();\n- const numDecksQ = Deck.countDocuments({\n- seats: { $elemMatch: { userid } },\n+ const numDecksQ = Deck.estimatedDocumentCount({\n+ 'seats.0.userid': userid,\n});\nconst [user, numDecks, decks] = await Promise.all([userQ, numDecksQ, decksQ]);\n",
        "org_msg": "fix deck query",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Fix compilation issue due to change in method for fetching user decks. Update Deck count query to use estimatedDocumentCount for better performance."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -59,9 +59,8 @@ app.use(session({\nsecret: 'vertical donkey gatorade helicopter',\nresave: false,\nsaveUninitialized: true,\n- cookie: {\n- secure: true,\n- maxAge: 365 * 24 * 60 * 60 * 1000\n+ cooke: {\n+ secure: true\n}\n}));\n",
        "org_msg": "Fix login issue",
        "sim_msg": "direct all paths to the correct index",
        "sim_diff": "diff --git a/app.js b/app.js @@ -35,12 +35,21 @@ app.use(bodyParser.urlencoded({ extended: false }));\nif (process.env.NODE_ENV === 'production') {\napp.use(express.static(path.join(__dirname, 'public'), {\nmaxAge: OneWeek,\n- index: 'index.html',\n}));\n+\n+ app.get('/*', function (req, res) {\n+ res.sendFile('index.html', {\n+ root: __dirname + '/public/',\n+ });\n+ });\n} else {\n- app.use(express.static(path.join(__dirname, 'assets'), {\n- index: '../templates/development_index.html',\n- }));\n+ app.use(express.static(path.join(__dirname, 'assets')));\n+\n+ app.get('/*', function (req, res) {\n+ res.sendFile('development_index.html', {\n+ root: path.resolve(__dirname + '/templates/'),\n+ });\n+ });\n}\napp.use(express.static(path.join(__dirname, 'node_modules')));\n",
        "chatgpt_cot": "Fix typo in cookie object initialization in session configuration in app.js. Remove unnecessary maxAge attribute to simplify configuration."
    },
    {
        "org_diff": "diff --git a/src/components/Deckbuilder.js b/src/components/Deckbuilder.js @@ -36,7 +36,14 @@ const makeInitialStacks = (playerDeck) => {\nconst Deckbuilder = ({ initialDeck }) => {\nconst [deck, setDeck] = useState(makeInitialStacks(initialDeck.playerdeck));\n- const [sideboard, setSideboard] = useState([initialDeck.playersideboard.slice(0, 8)]);\n+ const [sideboard, setSideboard] = useState(() => {\n+ const initial = initialDeck.playersideboard;\n+ if (!initial || !Array.isArray(initial) || initial.length === 0) {\n+ return [new Array(8).fill([])];\n+ } else {\n+ return [initialDeck.playersideboard.slice(0, 8)]\n+ }\n+ });\nconst locationMap = {\n[Location.DECK]: [deck, setDeck],\n",
        "org_msg": "Fix initial sideboard.",
        "sim_msg": "[feat] WebGL context lost handling > pass to listeners of onError",
        "sim_diff": "diff --git a/modules/core/src/lib/deck.js b/modules/core/src/lib/deck.js @@ -133,7 +133,7 @@ const defaultProps = {\nonBeforeRender: noop,\nonAfterRender: noop,\nonLoad: noop,\n- onError: null,\n+ onError: (error, ...args) => log.error(...args, error)(),\n_onMetrics: null,\ngetCursor,\n@@ -175,7 +175,6 @@ export default class Deck {\nthis._onPointerDown = this._onPointerDown.bind(this);\nthis._onPointerMove = this._onPointerMove.bind(this);\nthis._pickAndCallback = this._pickAndCallback.bind(this);\n- this._onRendererInitialized = this._onRendererInitialized.bind(this);\nthis._onRenderFrame = this._onRenderFrame.bind(this);\nthis._onViewStateChange = this._onViewStateChange.bind(this);\nthis._onInteractionStateChange = this._onInteractionStateChange.bind(this);\n@@ -496,8 +495,16 @@ export default class Deck {\nautoResizeDrawingBuffer,\nautoResizeViewport: false,\ngl,\n- onCreateContext: opts => createGLContext({...glOptions, ...opts, canvas: this.canvas, debug}),\n- onInitialize: this._onRendererInitialized,\n+ onCreateContext: options =>\n+ createGLContext({\n+ ...glOptions,\n+ ...options,\n+ canvas: this.canvas,\n+ debug,\n+ onContextLost: event => this.props.onError(event)\n+ }),\n+ // eslint-disable-next-line no-shadow\n+ onInitialize: ({gl}) => this._setGLContext(gl),\nonRender: this._onRenderFrame,\nonBeforeRender: props.onBeforeRender,\nonAfterRender: props.onAfterRender,\n@@ -703,10 +710,6 @@ export default class Deck {\n// Callbacks\n- _onRendererInitialized({gl}) {\n- this._setGLContext(gl);\n- }\n-\n_onRenderFrame(animationProps) {\nthis._getFrameStats();\n",
        "chatgpt_cot": "\"Refactor sideboard initialization in Deckbuilder to handle empty or non-array initialDeck.playersideboard, improving flexibility and error handling.\""
    },
    {
        "org_diff": "diff --git a/src/components/BlogPost.js b/src/components/BlogPost.js @@ -72,7 +72,15 @@ class BlogPost extends React.Component {\n<h5 className=\"card-title\">\n{post.title}\n<div className=\"float-sm-right\">\n- {this.props.canEdit && <BlogContextMenu className=\"float-sm-right\" post={post} value=\"...\" onDelete={onDelete} onEdit={onEdit} />}\n+ {this.props.canEdit && (\n+ <BlogContextMenu\n+ className=\"float-sm-right\"\n+ post={post}\n+ value=\"...\"\n+ onDelete={onDelete}\n+ onEdit={onEdit}\n+ />\n+ )}\n</div>\n</h5>\n<h6 className=\"card-subtitle mb-2 text-muted\">\n",
        "org_msg": "Fix delete modal.",
        "sim_msg": "Prevent triggering visibility before content is loaded",
        "sim_diff": "diff --git a/src/post/Post.js b/src/post/Post.js @@ -82,7 +82,7 @@ export default class Post extends React.Component {\n</Affix>\n<div className=\"center\" style={{ paddingBottom: '24px' }}>\n{content ? <PostContent content={content} /> : <Loading />}\n- <VisibilitySensor onChange={this.handleCommentsVisibility} />\n+ {content && <VisibilitySensor onChange={this.handleCommentsVisibility} />}\n<div id=\"comments\">\n{content && <Comments show={this.state.commentsVisible} post={content} />}\n</div>\n",
        "chatgpt_cot": "\"Refactor BlogPost.js to improve readability and maintainability by using conditional rendering for BlogContextMenu component.\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -796,10 +796,6 @@ function writeCatalog(basePath = 'private') {\n}\nfunction saveEnglishCard(card) {\n- if (card.lang !== 'en') {\n- return;\n- }\n-\nif (card.layout === 'transform') {\naddCardToCatalog(convertCard(card, true), true);\n}\n",
        "org_msg": "Don't short circuit on non-english.",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "Remove unnecessary condition in saveEnglishCard function"
    },
    {
        "org_diff": "diff --git a/public/js/sortfilter.js b/public/js/sortfilter.js @@ -58,6 +58,10 @@ function cardIsLabel(card, label, sort) {\n} else if (sort == 'Color Identity') {\nreturn GetColorIdentity(card.colors) == label;\n} else if (sort == 'Color') {\n+ if(!card.details.colors)\n+ {\n+ return label == 'Colorless';\n+ }\nswitch (label) {\ncase 'White':\nreturn card.details.colors.includes('W');\n",
        "org_msg": "Hotfix for adventure crash",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Add handling for Colorless cards in sort filter for Color attribute in cardIsLabel function in sortfilter.js."
    },
    {
        "org_diff": "diff --git a/nearley/cardFilters.ne b/nearley/cardFilters.ne @@ -168,14 +168,13 @@ isCondition -> \"is\"i isOpValue {% ([, valuePred]) => genericCondition('details',\nnotCondition -> \"not\"i isOpValue {% ([, valuePred]) => negated(genericCondition('details', ({ details }) => details, valuePred)) %}\n-isOpValue -> \":\" isValue {% ([, category]) => (fieldValue) => CARD_CATEGORY_DETECTORS[category](fieldValue) %}\n+isOpValue -> \":\" isValue {% ([, category]) => (fieldValue, card) => CARD_CATEGORY_DETECTORS[category](fieldValue, card) %}\nisValue -> (\n\"gold\"i | \"twobrid\"i | \"hybrid\"i | \"phyrexian\"i | \"promo\"i | \"digital\"i | \"reasonable\"i | \"dfc\"i | \"mdfc\"i\n| \"meld\"i | \"transform\"i | \"split\"i | \"flip\"i | \"leveler\"i | \"commander\"i | \"spell\"i | \"permanent\"i | \"historic\"i\n- | \"vanilla\"i | \"modal\"i\n+ | \"vanilla\"i | \"modal\"i | \"fullart\"i | \"foil\"i | \"nonfoil\"i\n| \"bikeland\"i | \"cycleland\"i | \"bicycleland\"i | \"bounceland\"i | \"karoo\"i | \"canopyland\"i | \"canland\"i\n| \"checkland\"i | \"dual\"i | \"fastland\"i | \"filterland\"i | \"gainland\"i | \"painland\"i | \"scryland\"i | \"shadowland\"i\n| \"shockland\"i | \"storageland\"i | \"creatureland\"i | \"manland\"i | \"triland\"i | \"tangoland\"i | \"battleland\"i\n- | \"foil\"i | \"nonfoil\"i | \"fullart\"i\n) {% ([[category]]) => category.toLowerCase() %}\n",
        "org_msg": "fixed is:(non)foil for cards in cube",
        "sim_msg": "refactor: includeFilter://h:name",
        "sim_diff": "diff --git a/lib/rules/rules.js b/lib/rules/rules.js @@ -1143,10 +1143,7 @@ function resolveMatchFilter(list) {\n}\n} else {\nvar index = value.indexOf('=');\n- if (index === -1 || !index || index === value.length - 1) {\n- return;\n- }\n- var key = value.substring(0, index).toLowerCase();\n+ var key = (index === -1 ? value : value.substring(0, index)).toLowerCase();\nvar lastIndex = key.length - 1;\nif (key[lastIndex] === '!') {\nkey = key.substring(0, lastIndex);\n@@ -1155,7 +1152,7 @@ function resolveMatchFilter(list) {\n}\nnot = !not;\n}\n- orgVal = value.substring(index + 1);\n+ orgVal = index === -1 ? '' : value.substring(index + 1);\nvalue = { key: key };\nif (pattern = util.toRegExp(orgVal)) {\nvalue.hPattern = pattern;\n@@ -1316,9 +1313,18 @@ function matchFilter(url, filter, req) {\nvar filterHeader = function(headers, filterVal) {\nif (!filterVal || !headers) {\n+ return true;\n+ }\n+ var value = headers[filterVal.key];\n+ if (value == null) {\n+ result = false;\n+ return;\n+ }\n+ if (!value) {\n+ result = !filterVal.value;\nreturn;\n}\n- var value = String(headers[filterVal.key] || '');\n+ value = String(value);\nif (filterVal.hPattern) {\nresult = filterVal.hPattern.test(value);\n} else {\n",
        "chatgpt_cot": "Add parameter to isOpValue method to fix cardFilters compilation issue."
    },
    {
        "org_diff": "diff --git a/routes/content_routes.js b/routes/content_routes.js @@ -5,6 +5,7 @@ const express = require('express');\nconst { ensureAuth, ensureRole, csrfProtection } = require('./middleware');\nconst { render } = require('../serverjs/render');\nconst { getFeedData, getFeedEpisodes } = require('../serverjs/rss');\n+const generateMeta = require('../serverjs/meta.js');\nconst Application = require('../models/application');\nconst Article = require('../models/article');\nconst Podcast = require('../models/podcast');\n@@ -155,7 +156,21 @@ router.get('/article/:id', async (req, res) => {\nreturn res.redirect('/content/browse');\n}\n- return render(req, res, 'ArticlePage', { article });\n+ return render(\n+ req,\n+ res,\n+ 'ArticlePage',\n+ { article },\n+ {\n+ title: article.title,\n+ metadata: generateMeta(\n+ article.title,\n+ article.short || 'An article posted to Cube Cobra',\n+ article.image,\n+ `https://cubecobra.com/content/article/${req.params.id}`,\n+ ),\n+ },\n+ );\n});\nrouter.get('/podcast/:id', async (req, res) => {\n@@ -167,7 +182,21 @@ router.get('/podcast/:id', async (req, res) => {\n}\nconst episodes = await PodcastEpisode.find({ podcast: podcast._id }).sort({ date: -1 });\n- return render(req, res, 'PodcastPage', { podcast, episodes });\n+ return render(\n+ req,\n+ res,\n+ 'PodcastPage',\n+ { podcast, episodes },\n+ {\n+ title: podcast.title,\n+ metadata: generateMeta(\n+ podcast.title,\n+ `Listen to ${podcast.title} on Cube Cobra!`,\n+ podcast.image,\n+ `https://cubecobra.com/content/podcast/${req.params.id}`,\n+ ),\n+ },\n+ );\n});\nrouter.get('/episode/:id', async (req, res) => {\n@@ -178,7 +207,21 @@ router.get('/episode/:id', async (req, res) => {\nreturn res.redirect('/content/browse');\n}\n- return render(req, res, 'PodcastEpisodePage', { episode });\n+ return render(\n+ req,\n+ res,\n+ 'PodcastEpisodePage',\n+ { episode },\n+ {\n+ title: episode.title,\n+ metadata: generateMeta(\n+ episode.title,\n+ `Listen to ${episode.title} on Cube Cobra!`,\n+ episode.image,\n+ `https://cubecobra.com/content/episode/${req.params.id}`,\n+ ),\n+ },\n+ );\n});\nrouter.get('/video/:id', async (req, res) => {\n@@ -189,7 +232,21 @@ router.get('/video/:id', async (req, res) => {\nreturn res.redirect('/content/browse');\n}\n- return render(req, res, 'VideoPage', { video });\n+ return render(\n+ req,\n+ res,\n+ 'VideoPage',\n+ { video },\n+ {\n+ title: video.title,\n+ metadata: generateMeta(\n+ video.title,\n+ video.short || 'A video posted to Cube Cobra',\n+ video.image,\n+ `https://cubecobra.com/content/video/${req.params.id}`,\n+ ),\n+ },\n+ );\n});\nrouter.get('/article/edit/:id', ensureContentCreator, async (req, res) => {\n",
        "org_msg": "add content metadata",
        "sim_msg": "Update quick-start.md\nThe quick-start uses `react-create-app`, but following the instructions & dropping in the Basic Example results in linting warnings (e.g. `warning  'Home' was used before it was defined  no-use-before-define`)",
        "sim_diff": "diff --git a/packages/react-router-dom/docs/guides/quick-start.md b/packages/react-router-dom/docs/guides/quick-start.md @@ -33,24 +33,6 @@ import {\nLink\n} from 'react-router-dom'\n-const BasicExample = () => (\n- <Router>\n- <div>\n- <ul>\n- <li><Link to=\"/\">Home</Link></li>\n- <li><Link to=\"/about\">About</Link></li>\n- <li><Link to=\"/topics\">Topics</Link></li>\n- </ul>\n-\n- <hr/>\n-\n- <Route exact path=\"/\" component={Home}/>\n- <Route path=\"/about\" component={About}/>\n- <Route path=\"/topics\" component={Topics}/>\n- </div>\n- </Router>\n-)\n-\nconst Home = () => (\n<div>\n<h2>Home</h2>\n@@ -63,6 +45,12 @@ const About = () => (\n</div>\n)\n+const Topic = ({ match }) => (\n+ <div>\n+ <h3>{match.params.topicId}</h3>\n+ </div>\n+)\n+\nconst Topics = ({ match }) => (\n<div>\n<h2>Topics</h2>\n@@ -91,12 +79,23 @@ const Topics = ({ match }) => (\n</div>\n)\n-const Topic = ({ match }) => (\n+const BasicExample = () => (\n+ <Router>\n<div>\n- <h3>{match.params.topicId}</h3>\n+ <ul>\n+ <li><Link to=\"/\">Home</Link></li>\n+ <li><Link to=\"/about\">About</Link></li>\n+ <li><Link to=\"/topics\">Topics</Link></li>\n+ </ul>\n+\n+ <hr/>\n+\n+ <Route exact path=\"/\" component={Home}/>\n+ <Route path=\"/about\" component={About}/>\n+ <Route path=\"/topics\" component={Topics}/>\n</div>\n+ </Router>\n)\n-\nexport default BasicExample\n```\n",
        "chatgpt_cot": "Add meta generation for article, podcast, episode, and video pages to improve SEO and sharing capabilities on Cube Cobra website."
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -325,7 +325,10 @@ router.get('/search/:id', (req, res) => {\nlet query = {};\nconst terms = [];\n- function regexEscape(input) {\n+ // input is the search string from a user -- should be treated as a string literal, rather than\n+ // a regex with special characters. This method escapes any characters which could be considered\n+ // special characters by the regex, like . and *\n+ function escapeRegexLiteral(input) {\nreturn input.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n}\nrawQueries.forEach((searchExpression) => {\n@@ -336,12 +339,12 @@ router.get('/search/:id', (req, res) => {\nif (searchExpression.includes('=')) {\n[field, filter] = searchExpression.split('=');\n- const escapedFilter = regexEscape(filter);\n+ const escapedFilter = escapeRegexLiteral(filter);\nsearchRegex = new RegExp(`^${escapedFilter}$`, 'i');\nexpressionTerm = 'is exactly';\n} else if (searchExpression.includes('~')) {\n[field, filter] = searchExpression.split('~');\n- searchRegex = new RegExp(regexEscape(filter), 'i');\n+ searchRegex = new RegExp(escapeRegexLiteral(filter), 'i');\nexpressionTerm = 'contains';\n}\n",
        "org_msg": "255 Rename method and add comment about escaping",
        "sim_msg": "Ignore null values in getSearchQueryPredicate",
        "sim_diff": "diff --git a/packages/cx/src/util/getSearchQueryPredicate.js b/packages/cx/src/util/getSearchQueryPredicate.js -import { escapeSpecialRegexCharacters } from './escapeSpecialRegexCharacters';\n+import { escapeSpecialRegexCharacters } from \"./escapeSpecialRegexCharacters\";\nexport function getSearchQueryPredicate(query, options) {\n- if (!query)\n- return () => true;\n+ if (!query) return () => true;\n- let terms = query.split(' ').filter(Boolean);\n- if (terms.length == 0)\n- return () => true;\n+ let terms = query.split(\" \").filter(Boolean);\n+ if (terms.length == 0) return () => true;\n- let regexes = terms.map(w => new RegExp(escapeSpecialRegexCharacters(w), 'gi'));\n+ let regexes = terms.map((w) => new RegExp(escapeSpecialRegexCharacters(w), \"gi\"));\nif (regexes.length == 1) {\nlet regex = regexes[0];\n- return text => text.match(regex);\n+ return (text) => text && text.match(regex);\n}\n- return text => regexes.every(re => text.match(re));\n+ return (text) => text && regexes.every((re) => text.match(re));\n}\n-\n",
        "chatgpt_cot": "Fix regex escape method to handle special characters in search filter. Improve search functionality in root route for better user experience."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -770,6 +770,7 @@ async function saveAllCards(ratings = [], basePath = 'private', defaultPath = nu\n.on('close', resolve),\n);\n+ winston.info('Saving cardbase files...');\nawait writeCatalog(basePath);\n}\n@@ -791,7 +792,13 @@ async function updateCardbase(ratings = [], basePath = 'private', defaultPath =\n}\nwinston.info('Creating objects...');\n+ try {\nawait saveAllCards(ratings, basePath, defaultPath, allPath);\n+ } catch (error) {\n+ winston.error('Updating cardbase objects failed:');\n+ winston.error(error.message);\n+ winston.error('Cardbase update may not have fully completed');\n+ }\nwinston.info('Finished cardbase update...');\n}\n",
        "org_msg": "add check to object creator",
        "sim_msg": "fix(error-message): fix wrong passwod message",
        "sim_diff": "diff --git a/src/common/app/index.js b/src/common/app/index.js @@ -11,6 +11,13 @@ const log = new Logger('app-redux');\nconst eventEmitter = new EventEmitter();\n+const transformErrorMessage = msg => {\n+ if (msg === 'Key derivation failed - possibly wrong password') {\n+ return 'Wrong password. Please try again';\n+ }\n+ return msg;\n+};\n+\nexport const initialState = {\nwallets: [],\nhardwareWallets: [],\n@@ -88,7 +95,8 @@ const unlockWalletWithNewFile = (filePath, password) => async dispatch => {\nawait dispatch(identityOperations.unlockIdentityOperation(wallet.id));\nawait dispatch(push('/main/dashboard'));\n} catch (error) {\n- await dispatch(appActions.setUnlockWalletErrorAction(error.message));\n+ const message = transformErrorMessage(error.message);\n+ await dispatch(appActions.setUnlockWalletErrorAction(message));\n}\n};\n@@ -100,7 +108,8 @@ const unlockWalletWithPrivateKey = privateKey => async dispatch => {\nawait dispatch(identityOperations.unlockIdentityOperation(wallet.id));\nawait dispatch(push('/main/dashboard'));\n} catch (error) {\n- await dispatch(appActions.setUnlockWalletErrorAction(error.message));\n+ const message = transformErrorMessage(error.message);\n+ await dispatch(appActions.setUnlockWalletErrorAction(message));\n}\n};\n@@ -111,7 +120,8 @@ const unlockWalletWithPublicKey = publicKey => async dispatch => {\nawait dispatch(walletOperations.updateWalletWithBalance(wallet));\nawait dispatch(push('/main/dashboard'));\n} catch (error) {\n- await dispatch(appActions.setUnlockWalletErrorAction(error.message));\n+ const message = transformErrorMessage(error.message);\n+ await dispatch(appActions.setUnlockWalletErrorAction(message));\n}\n};\n@@ -124,7 +134,8 @@ const loadLedgerWallets = page => async dispatch => {\nawait dispatch(push('/selectAddress'));\n} catch (error) {\nlog.error(error);\n- await dispatch(appActions.setUnlockWalletErrorAction(error.message));\n+ const message = transformErrorMessage(error.message);\n+ await dispatch(appActions.setUnlockWalletErrorAction(message));\n}\n};\n@@ -156,7 +167,8 @@ const loadTrezorWallets = page => async dispatch => {\nclearTimeout(timeoutId);\neventEmitter.off('TREZOR_PIN_REQUEST', () => {});\nif (error.message.indexOf('PIN canceled') === -1) {\n- await dispatch(appActions.setUnlockWalletErrorAction(error.message));\n+ const message = transformErrorMessage(error.message);\n+ await dispatch(appActions.setUnlockWalletErrorAction(message));\n}\nif (error.message.indexOf('PIN invalid') !== -1) {\nawait dispatch(loadTrezorWallets(page));\n",
        "chatgpt_cot": "Add logging for saving and updating cardbase files, and error handling for cardbase update failure."
    },
    {
        "org_diff": "diff --git a/src/util/Sort.js b/src/util/Sort.js @@ -655,7 +655,7 @@ export function sortDeep(cards, ...sorts) {\nconst result = sortGroupsOrdered(cards, first);\nfor (const labelGroup of result) {\nif (rest.length > 0) {\n- labelGroup[1] = sortDeep(labelGroup[1], rest);\n+ labelGroup[1] = sortDeep(labelGroup[1], ...rest);\n} else {\nlabelGroup[1].sort(alphaCompare);\n}\n",
        "org_msg": "Fix sorting issue w/ Visual Spoiler.",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "\"Fix issue with sortDeep method in Sort.js by adding spread operator for rest parameter\""
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -42,18 +42,7 @@ const NumericField = ({ name, humanName, placeholder, valueOp, value, onChange,\nconst allFields = ['name', 'oracle', 'cmc', 'color', 'colorIdentity', 'mana', 'type', 'tag', 'status', 'price', 'priceFoil', 'power', 'toughness', 'rarity'];\nconst numFields = ['cmc', 'price', 'priceFoil', 'power', 'toughness', 'rarity'];\n-class AdvancedFilterModal extends Component {\n- constructor(props) {\n- super(props);\n-\n- this.state = {};\n- }\n-\n- render() {\n- const { isOpen, toggle, apply, onChange, ...props } = this.props;\n- const values = this.state;\n-\n- return (\n+const AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props }) =>\n<Modal isOpen={isOpen} toggle={toggle} size=\"lg\" {...props}>\n<ModalHeader toggle={toggle}>Advanced Filters</ModalHeader>\n<ModalBody>\n@@ -99,10 +88,7 @@ class AdvancedFilterModal extends Component {\n<Button color=\"danger\" aria-label=\"Close\" onClick={toggle}>Cancel</Button>\n<Button color=\"success\" onClick={apply}>Apply</Button>\n</ModalFooter>\n- </Modal>\n- );\n- }\n-}\n+ </Modal>;\nclass FilterCollapse extends Component {\nconstructor(props) {\n@@ -111,6 +97,7 @@ class FilterCollapse extends Component {\nthis.state = {\nadvancedOpen: false,\nfilterInput: Hash.get('f', ''),\n+ ...Object.fromEntries(allFields.map(n => [n, ''])),\n...Object.fromEntries(numFields.map(n => [n + 'Op', '='])),\n};\n",
        "org_msg": "Fix bug with reopening filter modal.",
        "sim_msg": "refactor checkbox change handler",
        "sim_diff": "diff --git a/src/screens/FilterModal/component.js b/src/screens/FilterModal/component.js @@ -30,6 +30,17 @@ type Props = {\nonCancel: () => void\n};\n+const toggleTagFilter = (\n+ selectedValues: Set<string> | Set<Area>,\n+ sectionValue: string\n+) => {\n+ const values: Set<string> = new Set([...selectedValues]);\n+ if (!values.delete(sectionValue)) {\n+ values.add(sectionValue);\n+ }\n+ return values;\n+};\n+\nclass FilterModal extends PureComponent<Props> {\ncomponentDidMount() {\nconst { navigation, onCancel } = this.props;\n@@ -44,27 +55,24 @@ class FilterModal extends PureComponent<Props> {\nremove: () => void\n};\n- toggleTagFilter = (\n- selectedValues: Set<string> | Set<Area>,\n- sectionValue: string\n- ) => {\n- const values: Set<string> = new Set([...selectedValues]);\n- if (!values.delete(sectionValue)) {\n- values.add(sectionValue);\n- }\n- return values;\n- };\n-\nclearTagFilters = () =>\nthis.props.onChange(\nObject.keys(tags).reduce((acc, key) => ({ ...acc, [key]: new Set() }), {})\n);\n+ handleCheckboxChange = (sectionName: string, sectionValue: string) => {\n+ this.props.onChange({\n+ [sectionName]: toggleTagFilter(\n+ this.props.eventFilters[sectionName],\n+ sectionValue\n+ )\n+ });\n+ };\n+\nrender() {\nconst {\napplyButtonText,\nonApply,\n- onChange,\neventFilters,\nnavigation,\nnumEventsSelected,\n@@ -99,14 +107,9 @@ class FilterModal extends PureComponent<Props> {\ntags[sectionName].map(sectionValue => (\n<CheckBox\nkey={sectionValue}\n- onChange={() => {\n- onChange({\n- [sectionName]: this.toggleTagFilter(\n- eventFilters[sectionName],\n- sectionValue\n- )\n- });\n- }}\n+ onChange={() =>\n+ this.handleCheckboxChange(sectionName, sectionValue)\n+ }\nchecked={eventFilters[sectionName].has(sectionValue)}\n// $FlowFixMe\nlabel={text.tags[sectionValue] || sectionValue}\n",
        "chatgpt_cot": "refactor AdvancedFilterModal to functional component and initialize state with allFields and numFields."
    },
    {
        "org_diff": "diff --git a/src/util/Sort.js b/src/util/Sort.js @@ -403,9 +403,9 @@ function typeLine(card) {\nexport function cardGetLabels(card, sort) {\nif (sort == 'Color Category') {\n- return [GetColorCategory(typeLine(card), colorIdentity(card) || card.details.color_identity)];\n+ return [GetColorCategory(typeLine(card), colorIdentity(card))];\n} else if (sort == 'Color Identity') {\n- return [GetColorIdentity(colorIdentity(card) || card.details.color_identity)];\n+ return [GetColorIdentity(colorIdentity(card))];\n} else if (sort == 'Color') {\nif (card.details.colors.length === 0) {\nreturn ['Colorless'];\n@@ -531,6 +531,8 @@ export function cardGetLabels(card, sort) {\n} else {\nreturn [type];\n}\n+ } else if (colorIdentity(card).length === 5) {\n+ return ['5 Color']\n} else {\nreturn [\n...cardGetLabels(card, 'Guilds'),\n",
        "org_msg": "Fix 5-color cards missing in Types-Multicolor.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Fix color category and identity sorting in Sort.js for cardGetLabels function. Add condition for 5 color cards."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -151,7 +151,7 @@ const allDevotions = (cube, color) => {\nfor (const card of cube) {\ncounts.add(cardDevotion(card, color));\n}\n- return [...counts].sort((a, b) => b - a);\n+ return [...counts].sort((a, b) => a - b);\n};\nfunction getLabelsRaw(cube, sort) {\n",
        "org_msg": "devotion sort is now increasing",
        "sim_msg": "Fixing an issue caused by resolving conflicts before merging",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -104,7 +104,7 @@ list.drawList = function() {\nshow_list: config.localization[config.language].show_list,\nfilter_dropdown: config.filter_menu_dropdown,\nfilter_by_label: config.localization[config.language].filter_by_label,\n- items: config.localization[config.language].items\n+ items: config.localization[config.language].items,\ndropdown: config.sort_menu_dropdown,\nsort_by_label: config.localization[config.language].sort_by_label,\n});\n",
        "chatgpt_cot": "Fix sorting order in allDevotions function in Sort.js. Changed sorting logic from descending to ascending to ensure correct order."
    },
    {
        "org_diff": "diff --git a/models/cube.js b/models/cube.js @@ -63,8 +63,14 @@ const cubeSchema = mongoose.Schema({\ntype: [String],\ndefault: [],\n},\n- cards: [Card],\n- maybe: [Card],\n+ cards: {\n+ type: [Card],\n+ default: [],\n+ },\n+ maybe: {\n+ type: [Card],\n+ default: [],\n+ },\ntag_colors: [\n{\ntag: String,\n",
        "org_msg": "Add default values.",
        "sim_msg": "swagger v2 complete",
        "sim_diff": "diff --git a/bin/definition/schema.js b/bin/definition/schema.js @@ -186,6 +186,7 @@ Object.assign(Schema.properties, {\n},\nenum: {\nitems: {\n+ allowed: ({ parent }) => !!(parent && parent.parent),\ntype: ({ parent }) => parent.parent.value.type,\ndeserialize: ({ exception, parent, value }) => {\nreturn Schema.helpers.deserializeDate(parent.parent.value, exception, value);\n@@ -213,27 +214,30 @@ Object.assign(Schema.properties, {\nproperties: Schema\n},\ndiscriminator: {\n- allowed: ({ parent }) => parent && parent.validator === Schema && parent.type === 'object',\n+ allowed: ({ parent }) => parent && parent.validator === Schema && parent.validator.type === 'object',\ntype: 'string',\n- error: ({ exception, major, parent, value }) => {\n+ errors: ({ exception, major, parent, value }) => {\nif (major === 2) {\nif (!parent.value.required || !parent.value.required.includes(value)) {\n- exception('Value must be found in the parent\\'s required properties list.');\n+ exception('Value \"' + value + '\" must be found in the parent\\'s required properties list.');\n}\nif (!parent.value.properties || !parent.value.properties.hasOwnProperty(value)) {\n- exception('Value must be found in the parent\\'s properties definition.');\n+ exception('Value \"' + value + '\" must be found in the parent\\'s properties definition.');\n}\n}\n}\n},\nreadOnly: {\n- allowed: ({ parent }) => parent && parent.validator === Schema && parent.value.type === 'object',\n+ allowed: ({ parent, value }) => {\n+ return parent && parent.parent && parent.parent.key === 'properties' &&\n+ parent.parent.parent && parent.parent.parent.validator === Schema;\n+ },\ntype: 'boolean',\ndefault: false,\n- error: ({ parent, value, warn }) => {\n- if (parent && parent.value.required && parent.required.includes(value)) {\n- warn('Value should not be exist in the parent\\'s required properties list.');\n+ errors: ({ parent, value, warn }) => {\n+ if (parent && parent.parent && parent.parent.parent && parent.parent.parent.value.required && parent.parent.parent.value.required.includes(parent.key)) {\n+ parent.warn('Property should not be marked as both read only and required');\n}\n}\n},\n",
        "chatgpt_cot": "\"Refactor cube model to use object type for cards and maybe properties, and update default values for cards and maybe arrays.\""
    },
    {
        "org_diff": "diff --git a/src/components/CommentEntry.js b/src/components/CommentEntry.js @@ -63,7 +63,7 @@ class CommentEntry extends React.Component {\n<a onClick={this.toggle}>{this.props.children}</a>\n</Collapse>\n<Collapse isOpen={this.state.collapse}>\n- <textarea value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"2\" maxLength=\"500\"></textarea>\n+ <textarea value={this.state.inputValue} onChange={this.updateInputValue} className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"2\" maxLength=\"500\"></textarea>\n<a className=\"comment-button ml-1 mt-1 text-muted clickable\" onClick={this.clickSubmit}>Submit</a>\n{' '}\n<a className=\"comment-button ml-1 mt-1 text-muted clickable\" onClick={this.toggle}>Cancel</a>\n",
        "org_msg": "streamlined event handler",
        "sim_msg": "Add inputValue",
        "sim_diff": "diff --git a/src/components/Comments/Comment.js b/src/components/Comments/Comment.js @@ -216,6 +216,7 @@ class Comment extends React.Component {\nif (this.state.editOpen) {\ncontent = (<EmbeddedCommentForm\nparentPost={comment}\n+ inputValue={comment.body}\n/>);\n} else {\ncontent = this.state.collapsed\n",
        "chatgpt_cot": "Refactor CommentEntry.js to simplify input value update function by removing arrow function in onChange event."
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -128,7 +128,7 @@ const CubetutorImportModal = ({ isOpen, toggle }) => {\n<InputGroupText>Cube ID (enter cube id from URL):</InputGroupText>\n</InputGroupAddon>\n{/* FIXME: For some reason hitting enter in this input doesn't submit the form. */}\n- <Input type=\"text\" name=\"cubeid\" placeholder=\"e.g. 123456\" />\n+ <Input type=\"number\" name=\"cubeid\" placeholder=\"e.g. 123456\" />\n</InputGroup>\n</ModalBody>\n<ModalFooter>\n",
        "org_msg": "Fix password manager + cubetutor import input.",
        "sim_msg": "Support boolean option values in the Select widget",
        "sim_diff": "diff --git a/packages/cx/src/widgets/form/Select.js b/packages/cx/src/widgets/form/Select.js @@ -160,7 +160,7 @@ class SelectComponent extends VDOM.Component {\n}}\nclassName={CSS.element(baseClass, 'select')}\nstyle={data.inputStyle}\n- value={data.value || widget.nullString}\n+ value={data.value == null ? widget.nullString : String(data.value)}\nmultiple={multiple}\ndisabled={data.disabled}\n{...data.inputAttrs}\n",
        "chatgpt_cot": "Fix input form submission issue by changing the type of the input from text to number in CubeListNavbar.js."
    },
    {
        "org_diff": "diff --git a/src/components/CardModal.js b/src/components/CardModal.js @@ -54,12 +54,12 @@ const CardModal = ({\n<div className=\"price-area\">\n{!card.details.price ? '' :\n<div className=\"card-price\">\n- TCGPlayer Market: {card.price.toFixed(2)}\n+ TCGPlayer Market: {card.details.price.toFixed(2)}\n</div>\n}\n{!card.details.price_foil ? '' :\n<div className=\"card-price\">\n- Foil TCGPlayer Market: {card.price_foil.toFixed(2)}\n+ Foil TCGPlayer Market: {card.details.price_foil.toFixed(2)}\n</div>\n}\n</div>\n",
        "org_msg": "Fix price issue.",
        "sim_msg": "Fix UserCard propTypes",
        "sim_diff": "diff --git a/src/components/UserCard.js b/src/components/UserCard.js @@ -5,27 +5,22 @@ import FollowButton from '../widgets/FollowButton';\nimport Avatar from '../components/Avatar';\nimport './UserCard.less';\n-const UserCard = ({ username, alt }) =>\n- (<div className=\"UserCard\">\n+const UserCard = ({ username, alt }) => (\n+ <div className=\"UserCard\">\n<div className=\"UserCard__left\">\n<Link to={`/@${username}`}>\n<Avatar username={username} size={40} />\n</Link>\n- <Link to={`/@${username}`}>\n- {username}\n- </Link>\n- {alt &&\n- <span className=\"UserCard__alt\">\n- {alt}\n- </span>\n- }\n+ <Link to={`/@${username}`}>{username}</Link>\n+ {alt && <span className=\"UserCard__alt\">{alt}</span>}\n</div>\n<FollowButton username={username} />\n- </div>);\n+ </div>\n+);\nUserCard.propTypes = {\nusername: PropTypes.string.isRequired,\n- alt: PropTypes.oneOf(PropTypes.string, PropTypes.bool),\n+ alt: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n};\nUserCard.defaultProps = {\n",
        "chatgpt_cot": "\"Refactor card price display to use details object, fixing incorrect price and foil price display in CardModal component\""
    },
    {
        "org_diff": "diff --git a/src/components/DecksPickBreakdown.js b/src/components/DecksPickBreakdown.js @@ -58,7 +58,7 @@ const DecksPickBreakdown = ({ draft, seatIndex, deck, defaultIndex }) => {\nfor (let i = start + picks; i < end; i += 1) {\ncardsInPack.push(deck.seats[current].pickorder[i]);\n- if (pack % 2 === 0) {\n+ if (pack % 2 !== draft.initial_state[0].length % 2) {\ncurrent += 1;\ncurrent %= draft.initial_state.length;\n} else {\n",
        "org_msg": "fix for even and odd numbered packs",
        "sim_msg": "Fix onHover/tooltip flickering",
        "sim_diff": "diff --git a/modules/core/src/lib/deck.js b/modules/core/src/lib/deck.js @@ -530,7 +530,7 @@ export default class Deck {\nif (_pickRequest.event) {\n// Perform picking\nconst {result, emptyInfo} = this._pick('pickObject', 'pickObject Time', _pickRequest);\n- const pickedInfo = result[0] || emptyInfo;\n+ const pickedInfo = result.find(info => info.picked) || emptyInfo;\n// Update tooltip\nif (this.props.getTooltip) {\n",
        "chatgpt_cot": "Fix loop iteration condition in DecksPickBreakdown.js for correct pack handling based on draft initial state length parity."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -68,8 +68,7 @@ export function GetColorCategory(type, colors, full) {\nif (colors.length == 5) {\nreturn '5c';\n}\n- }\n- else{\n+ } else {\nreturn 'Multicolored';\n}\n}\n@@ -160,9 +159,7 @@ function getLabelsRaw(cube, sort) {\nreturn ['White', 'Blue', 'Black', 'Red', 'Green', 'Hybrid', 'Multicolored', 'Colorless', 'Lands'];\n}\nif (sort == 'Color Category Full') {\n- return SINGLE_COLOR_AND_COLORLESS.concat(GUILDS)\n- .concat(SHARDS)\n- .concat(FOUR_AND_FIVE_COLOR);\n+ return SINGLE_COLOR_AND_COLORLESS.concat(GUILDS).concat(SHARDS).concat(FOUR_AND_FIVE_COLOR);\n}\nif (sort == 'Color Identity') {\nreturn ['White', 'Blue', 'Black', 'Red', 'Green', 'Multicolored', 'Colorless'];\n",
        "org_msg": "Adding Spacing for Formatting",
        "sim_msg": "fix(colors): blend alpha after textToRgb is 0-100",
        "sim_diff": "diff --git a/ui/src/utils/colors.js b/ui/src/utils/colors.js @@ -241,12 +241,12 @@ export function blend (fgColor, bgColor) {\nr1 = rgb1.r / 255,\ng1 = rgb1.g / 255,\nb1 = rgb1.b / 255,\n- a1 = rgb1.a !== void 0 ? rgb1.a / 255 : 1,\n+ a1 = rgb1.a !== void 0 ? rgb1.a / 100 : 1,\nrgb2 = typeof bgColor === 'string' ? textToRgb(bgColor) : bgColor,\nr2 = rgb2.r / 255,\ng2 = rgb2.g / 255,\nb2 = rgb2.b / 255,\n- a2 = rgb2.a !== void 0 ? rgb2.a / 255 : 1,\n+ a2 = rgb2.a !== void 0 ? rgb2.a / 100 : 1,\na = a1 + a2 * (1 - a1),\nr = Math.round(((r1 * a1 + r2 * a2 * (1 - a1)) / a) * 255),\ng = Math.round(((g1 * a1 + g2 * a2 * (1 - a1)) / a) * 255),\n",
        "chatgpt_cot": "Refactor code for Sort.js. Fixed indentation issues and removed unnecessary line breaks for better code readability. Updated the method for 'Color Category Full'."
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -314,7 +314,18 @@ const operatorMap = {\n};\nconst delimiters = [':', '<=', '>=', '<', '>', '='];\n-const prefixes = ['Powered', 'Unpowered', 'Pauper', 'Peasant', 'Budget', 'Silver-bordered', 'Commander'];\n+const prefixes = [\n+ 'Powered',\n+ 'Unpowered',\n+ 'Pauper',\n+ 'Peasant',\n+ 'Budget',\n+ 'Silver-bordered',\n+ 'Commander',\n+ 'Battle Box',\n+ 'Multiplayer',\n+ 'Judge Tower',\n+];\nasync function getCardCubes(value) {\nconst ids = carddb.getIdsFromName(value);\n",
        "org_msg": "Added more labels",
        "sim_msg": "Update card types",
        "sim_diff": "diff --git a/server/game/cards/index.js b/server/game/cards/index.js @@ -2,8 +2,9 @@ const _ = require('underscore');\nconst path = require('path');\nconst fs = require('fs');\n-const plots = require('./plots');\n-const locations = require('./locations');\n+const strongholds = require('./strongholds');\n+const provinces = require('./provinces');\n+const holdings = require('./holdings');\nconst characters = require('./characters');\nconst attachments = require('./attachments');\nconst events = require('./events');\n@@ -16,6 +17,6 @@ _.each(fs.readdirSync(path.join(__dirname, 'agendas')), file => {\ncards[card.code] = card;\n});\n-cards = _.extend(cards, plots, locations, characters, attachments, events);\n+cards = _.extend(cards, strongholds, provinces, holdings, characters, attachments, events);\nmodule.exports = cards;\n",
        "chatgpt_cot": "Add new prefixes to the prefixes array in root.js for card cube types."
    },
    {
        "org_diff": "diff --git a/src/components/AutocompleteInput.js b/src/components/AutocompleteInput.js @@ -23,7 +23,8 @@ function getPosts(names, current) {\n//please don't try to understand why this works\nif (\ncharacter.toUpperCase() != character.toLowerCase() &&\n- names[character.toUpperCase()] && names[character.toLowerCase()]\n+ names[character.toUpperCase()] &&\n+ names[character.toLowerCase()]\n) {\nif (names[character.toUpperCase()][sub.charAt(0)]) {\nconst upper = getPosts(names[character.toUpperCase()], sub);\n",
        "org_msg": "Prettier AutocompleteInput.",
        "sim_msg": "fix: QAutocomplete bad popover positioning unless static data",
        "sim_diff": "diff --git a/src/components/autocomplete/QAutocomplete.js b/src/components/autocomplete/QAutocomplete.js @@ -92,7 +92,8 @@ export default {\nconst\nterms = [null, void 0].includes(this.__input.val) ? '' : String(this.__input.val),\ntermsLength = terms.length,\n- searchId = uid()\n+ searchId = uid(),\n+ popover = this.$refs.popover\nthis.searchId = searchId\n@@ -108,19 +109,12 @@ export default {\nif (this.staticData) {\nthis.searchId = ''\nthis.results = this.filter(terms, this.staticData)\n- const popover = this.$refs.popover\nif (this.results.length) {\n- this.__keyboardShow(-1)\n- if (popover && popover.showing) {\n- this.$nextTick(() => popover && popover.reposition())\n- }\n- else {\n- popover.show()\n- }\n+ this.__showResults()\n+ return\n}\n- else {\n+\npopover.hide()\n- }\nreturn\n}\n@@ -134,8 +128,7 @@ export default {\nif (Array.isArray(results) && results.length > 0) {\nthis.results = results\n- this.__keyboardShow(-1)\n- this.$refs.popover.show()\n+ this.__showResults()\nreturn\n}\n@@ -209,6 +202,17 @@ export default {\nreturn\n}\nthis.timer = setTimeout(this.trigger, this.debounce)\n+ },\n+ __showResults () {\n+ const popover = this.$refs.popover\n+\n+ this.__keyboardShow(-1)\n+ if (popover.showing) {\n+ this.$nextTick(() => popover.showing && popover.reposition())\n+ }\n+ else {\n+ popover.show()\n+ }\n}\n},\nmounted () {\n",
        "chatgpt_cot": "Fix issue with AutocompleteInput.js by updating condition to check for both upper and lower case characters in names array."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -56,7 +56,7 @@ app.use(express.static(path.join(__dirname, 'public')));\n// Express session middleware\napp.use(session({\n- secret: 'vertical donkey gatorade helicopter',\n+ secret: 'zzzzzzzzdddzzzzzzzzzzzzzzzz',\nresave: true,\nsaveUninitialized: true,\ncooke: {\n",
        "org_msg": "modify secret",
        "sim_msg": "load statics from assets on development",
        "sim_diff": "diff --git a/app.js b/app.js @@ -32,10 +32,16 @@ app.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n+if (process.env.NODE_ENV === 'production') {\napp.use(express.static(path.join(__dirname, 'public'), {\nmaxAge: OneWeek,\n- index: process.env.NODE_ENV !== 'production' ? '../templates/development_index.html' : 'index.html',\n+ index: 'index.html',\n}));\n+} else {\n+ app.use(express.static(path.join(__dirname, 'assets'), {\n+ index: '../templates/development_index.html',\n+ }));\n+}\napp.use(express.static(path.join(__dirname, 'node_modules')));\napp.use(cors());\n",
        "chatgpt_cot": "Fix session secret in Express middleware to use a more secure value. The modification improves the security of the session handling in the app."
    },
    {
        "org_diff": "diff --git a/serverjs/draftutil.js b/serverjs/draftutil.js @@ -12,7 +12,7 @@ var methods = {\ncolors.push('R');\ncolors.push('G');\n}\n- util.shuffle(colors);\n+ colors = util.shuffle(colors);\nfor (i = 0; i < params.seats - 1; i++) {\nvar colorcombo = [colors.pop(), colors.pop()];\ndraftbots.push(colorcombo);\n",
        "org_msg": "use returned array since util.shuffle is not in-place",
        "sim_msg": "Removing references to faction.code",
        "sim_diff": "diff --git a/server/game/game.js b/server/game/game.js @@ -310,9 +310,9 @@ class Game extends EventEmitter {\n}\ntransferHonor(winner, loser, honor) {\n- var appliedHonor = Math.min(loser.faction.honor, honor);\n- loser.faction.honor -= appliedHonor;\n- winner.faction.honor += appliedHonor;\n+ var appliedHonor = Math.min(loser.honor, honor);\n+ loser.honor -= appliedHonor;\n+ winner.honor += appliedHonor;\nthis.raiseEvent('onStatChanged', loser, 'honor');\nthis.raiseEvent('onStatChanged', winner, 'honor');\n@@ -821,10 +821,9 @@ class Game extends EventEmitter {\n}\nplayerSummaries[player.name] = {\n- agenda: player.agenda ? player.agenda.code : undefined,\ndeck: deck,\nemailHash: player.emailHash,\n- faction: player.faction.code,\n+ faction: player.faction.value,\nid: player.id,\nlobbyId: player.lobbyId,\nleft: player.left,\n",
        "chatgpt_cot": "\"Fix bug in draftutil.js by correctly shuffling colors array before using it to create color combinations for draftbots.\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -36,35 +36,15 @@ function updateCardbase() {\n});\n}\n-function saveAllCards(arr) {\n- var normalizedName, normalizedFullName;\n- arr.forEach(function(card, index) {\n- if (card.layout == 'transform') {\n- var extraCard = convertExtraCard(card);\n- dict[extraCard._id] = extraCard;\n- normalizedFullName = extraCard.full_name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n- normalizedName = carddb.normalizedName(extraCard);\n- imagedict[normalizedFullName] = {\n- uri: extraCard.art_crop,\n- artist: extraCard.artist\n- }\n- //only add if it doesn't exist, this makes the default the newest edition\n- if (!nameToId[normalizedName]) {\n- nameToId[normalizedName] = [];\n- }\n- nameToId[normalizedName].push(extraCard._id);\n- util.binaryInsert(normalizedName, names);\n- util.binaryInsert(normaliedFullName, full_names);\n- }\n- normalizedFullName = card.full_name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n- normalizedName = carddb.normalizedName(card);\n- card = convertCard(card);\n+function addCardToCatalog(card, isExtra) {\ndict[card._id] = card;\n+ const normalizedFullName = card.full_name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n+ const normalizedName = carddb.normalizedName(card);\nimagedict[normalizedFullName] = {\nuri: card.art_crop,\nartist: card.artist\n}\n-\n+ if (isExtra !== true) {\nlet card_images = {\nimage_normal: card.image_normal\n};\n@@ -72,14 +52,23 @@ function saveAllCards(arr) {\ncard_images.image_flip = card.image_flip;\n}\ncardimages[normalizedName] = card_images;\n-\n+ }\n//only add if it doesn't exist, this makes the default the newest edition\nif (!nameToId[normalizedName]) {\nnameToId[normalizedName] = [];\n}\nnameToId[normalizedName].push(card._id);\nutil.binaryInsert(normalizedName, names);\n- util.binaryInsert(normalizedFullName, full_names);\n+ util.binaryInsert(normaliedFullName, full_names);\n+}\n+\n+function saveAllCards(arr) {\n+ var normalizedName, normalizedFullName;\n+ arr.forEach(function(card, index) {\n+ if (card.layout == 'transform') {\n+ addCardToCatalog(convertExtraCard(card), true);\n+ }\n+ addCardToCatalog(convertCard(card));\n});\nfs.writeFile('private/names.json', JSON.stringify(names), 'utf8', function(err) {\nif (err) {\n",
        "org_msg": "deduplicate copypasta in saveAllCards",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "\"Refactor saveAllCards to addCardToCatalog to improve readability and maintainability.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2049,7 +2049,7 @@ function saveEdit(comments, position, comment) {\n}\n}\n-router.get('/blogpost/:id', async function(req, res) {\n+router.get('/blogpost/:id', async (req, res) => {\ntry {\nconst post = await Blog.findById(req.params.id);\nconst owner = await User.findById(post.owner);\n@@ -2066,7 +2066,7 @@ router.get('/blogpost/:id', async function(req, res) {\nrouter.get('/viewcomment/:id/:position', async function(req, res) {\ntry {\n- const position = req.params.position.split('-');\n+ const {position, id} = req.params;\nconst post = await Blog.findById(req.params.id);\nconst owner = await User.findById(post.owner);\n@@ -2074,8 +2074,8 @@ router.get('/viewcomment/:id/:position', async function(req, res) {\nreturn res.render('cube/blogpost', {\npost: post,\nowner: owner._id,\n- loginCallback: '/blogpost/' + req.params.id,\n- position: position\n+ loginCallback: `/blogpost/${id}`,\n+ position: position.split('-')\n});\n} catch (err) {\nres.redirect('/404');\n@@ -2117,8 +2117,8 @@ router.post('/api/editcomment', ensureAuth, async function(req, res) {\n});\nrouter.post('/api/postcomment', ensureAuth, async function(req, res) {\n- const userq = await User.findById(req.user._id);\n- const postq = await Blog.findById(req.body.id);\n+ const userq = User.findById(req.user._id);\n+ const postq = Blog.findById(req.body.id);\nconst [user, post] = await Promise.all([userq, postq]);\n@@ -2341,7 +2341,8 @@ router.get('/api/cubelist/:id', function(req, res) {\nrouter.post('/editdeck/:id', async function(req, res) {\ntry {\n- const deck = Deck.findById(req.params.id);\n+ const deck = await Deck.findById(req.params.id);\n+\nif (err || !deck) {\nreq.flash('danger', 'Deck not found');\nreturn res.status(404).render('misc/404', {});\n",
        "org_msg": "Fixed issues per review",
        "sim_msg": "More validation before auto-posting comment",
        "sim_diff": "diff --git a/PostBanDeletedPosts.user.js b/PostBanDeletedPosts.user.js // @description When user posts on SO Meta regarding a post ban, fetch and display deleted posts (must be mod) and provide easy way to copy the results into a comment\n// @homepage https://github.com/samliew/SO-mod-userscripts\n// @author @samliew\n-// @version 2.3.2\n+// @version 2.4\n//\n// @include https://meta.stackoverflow.com/questions/*\n//\nconst postText = ($('h1 .question-hyperlink').text() + $('.post-text p', post).text()).toLowerCase();\nconst isDeleted = post.find('.js-post-notice a[href=\"/help/deleted-questions\"]').length > 0;\n+ const postDate = new Date(post.find('.post-signature.owner .relativetime').attr('title'));\n+ const isRelativelyNew = Date.now() - postDate.getTime() < 3 * 86400000; // 86400000 = 1 day\n+\n// Is a deleted user, do nothing\nif(postOwner.length === 0) return;\nconst commentArea = $(`<textarea readonly=\"readonly\"></textarea>`).val(comment).appendTo(stats);\n- // Rest of the function is for Sam\n- if(!isSuperuser()) return;\n+ // If post is not within past three days, or has more than 20 links, do not auto-post anything!\n+ if(!isSuperuser() || !isRelativelyNew || hyperlinks.length > 20) return;\n// If there are more comments or comments by myself, ignore\nconst hasMyComments = post.find(`.comment-user[href*=\"/users/${StackExchange.options.user.userId}/\"]`).length > 0;\n",
        "chatgpt_cot": "Refactor routes to use arrow functions, fix compilation issues, and improve code readability and consistency."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -43,21 +43,23 @@ const timestamped = winston.format((info) => {\nreturn info;\n});\n-winston.configure({\n- level: 'info',\n- format: winston.format.combine(\n+const textFormat = winston.format.combine(\nwinston.format.splat(), // Necessary to produce the 'meta' property\nerrorStackTracerFormat(),\nwinston.format.simple(),\n- ),\n+);\n+\n+winston.configure({\n+ level: 'info',\n+ format: winston.format.json(),\nexitOnError: false,\ntransports: [\n//\n// - Write to all logs with level `info` and below to `combined.log`\n// - Write all logs error (and below) to `error.log`.\n//\n- new winston.transports.File({ filename: errorFile.name, level: 'error' }),\n- new winston.transports.File({ filename: combinedFile.name }),\n+ new winston.transports.File({ filename: errorFile.name, level: 'error', format: textFormat }),\n+ new winston.transports.File({ filename: combinedFile.name, format: textFormat }),\nnew winston.transports.Console({\nformat: winston.format.combine(\nwinston.format.splat(), // Necessary to produce the 'meta' property\n@@ -130,7 +132,7 @@ app.use((req, res, next) => {\nnext();\n});\n-// error handling\n+// per-request logging configuration\napp.use((req, res, next) => {\nreq.uuid = uuid();\nreq.logger = winston.child({\n",
        "org_msg": "Revise logging config.",
        "sim_msg": "Update src/config/config.js",
        "sim_diff": "diff --git a/src/config/config.js b/src/config/config.js @@ -88,7 +88,7 @@ const Config = {\nskipEmailVerification: env.REACT_APP_SKIP_EMAIL_VERIFICATION === 'true',\nskipMobileVerification: env.REACT_APP_SKIP_MOBILE_VERIFICATION === 'true',\nwithMockedFeeds: env.REACT_APP_WITH_MOCKED_FEEDS === 'true',\n- feedItemTtl: moment.duration(env.REACT_APP_FEEDITEM_TTL || '00:10:00').as('milliseconds'), // default for 10 min\n+ feedItemTtl: moment.duration(env.REACT_APP_FEEDITEM_TTL || '24:00:00').as('milliseconds'), // default for 1 day min\nsafariMobileKeyboardGuidedSize: env.REACT_APP_SAFARI_MOBILE_KEYBOARD_GUIDED_SIZE === 'true',\nreceiveUrl: env.REACT_APP_RECEIVE_URL || `${publicUrl}`,\nenableShortUrl: env.REACT_APP_ENABLE_SHORTURL === 'true',\n",
        "chatgpt_cot": "\"Add textFormat to winston transports for consistent logging format\""
    },
    {
        "org_diff": "diff --git a/src/pages/CubePlaytestPage.js b/src/pages/CubePlaytestPage.js @@ -113,7 +113,8 @@ const CustomDraftCard = ({\n<CSRFForm method=\"POST\" action={`/cube/startdraft/${cubeID}`}>\n<CardHeader>\n<CardTitleH5>\n- {defaultDraftFormat === index && 'Default Format: '}{format.title}{' '}(Custom Draft)\n+ {defaultDraftFormat === index && 'Default Format: '}\n+ {format.title} (Custom Draft)\n</CardTitleH5>\n</CardHeader>\n<CardBody>\n",
        "org_msg": "Run prettier on custom-p1p1.",
        "sim_msg": "added numberoflines to eventcard",
        "sim_diff": "diff --git a/src/components/EventCard.js b/src/components/EventCard.js @@ -58,7 +58,7 @@ const EventCard = ({\n{timeDisplay}\n</Text>\n<View style={styles.eventNameContainer}>\n- <Text type=\"h3\" style={styles.eventName}>\n+ <Text type=\"h3\" style={styles.eventName} numberOfLines={2}>\n{name}\n</Text>\n</View>\n",
        "chatgpt_cot": "Refactor CubePlaytestPage.js to improve readability and consistency with format.title in CustomDraftCard. Update defaultDraftFormat condition and CardTitleH5 for better UI representation."
    },
    {
        "org_diff": "diff --git a/src/components/DraftView.js b/src/components/DraftView.js @@ -34,7 +34,7 @@ const Pack = ({ pack, packNumber, pickNumber, picking, onMoveCard, onClickCard }\n<Row noGutters>\n{pack.map((card, index) => (\n<Col\n- key={card.details._id}\n+ key={index}\nxs={4}\nsm={3}\nclassName=\"col-md-1-5 d-flex justify-content-center align-items-center\"\n",
        "org_msg": "Fix duplicate index error.\nFixes",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "\"Fix key issue in DraftView.js to use index instead of card details _id for unique key in pack map.\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -466,7 +466,7 @@ function convertParsedCost(card, isExtra = false) {\n.split('}{')\n.reverse();\n} else {\n- winston.error(`Error converting parsed colors: (isExtra:${isExtra}) card.name`);\n+ winston.error(`Error converting parsed colors: (isExtra:${isExtra}) ${card.name}`);\n}\nif (parsedCost) {\n@@ -480,7 +480,6 @@ function convertParsedCost(card, isExtra = false) {\nfunction convertColors(card, isExtra = false) {\nif (isExtra) {\nif (typeof card.card_faces === 'undefined' || card.card_faces.length < 2) {\n- winston.error(`Error converting colors: (isExtra:${isExtra}) card.name`);\nreturn [];\n}\n// special case: Adventure faces currently do not have colors on Scryfall (but probably should)\n@@ -552,6 +551,8 @@ function convertCard(card, isExtra) {\nconst newcard = {};\nif (isExtra) {\n[, faceAttributeSource] = card.card_faces;\n+ card = { ...card };\n+ card.card_faces = [faceAttributeSource];\n} else if (card.card_faces) {\n[faceAttributeSource] = card.card_faces;\n} else {\n",
        "org_msg": "Treat preflipped cards as only one face",
        "sim_msg": "Make fancy scatter properly select points",
        "sim_diff": "diff --git a/src/traces/scattergl/convert.js b/src/traces/scattergl/convert.js @@ -586,7 +586,7 @@ proto.updateFancy = function(options) {\nfor(j = 0; j < 4; ++j) {\nvar color = colors[4 * index + j];\n- if (sel && sel[index] && j === 3) {\n+ if (sel && !sel[index] && j === 3) {\ncolor *= DESELECTDIM\n}\nthis.scatter.options.colors[4 * i + j] = color;\n",
        "chatgpt_cot": "Fix error in logging message and update card object in updatecards.js. The modifications address logging and card object updates related to card conversion."
    },
    {
        "org_diff": "diff --git a/src/components/CubeListNavbar.js b/src/components/CubeListNavbar.js @@ -86,8 +86,8 @@ const UploadBulkModal = ({ isOpen, toggle }) => {\n<CSRFForm method=\"POST\" action={`/cube/bulkuploadfile/${cubeID}`} encType=\"multipart/form-data\">\n<ModalBody>\n<p>\n- Acceptable files are either .txt (plaintext) with one card name per line, or .csv with the exact format as\n- our .csv export.\n+ Acceptable files are either .txt (plaintext) with one card name per line, or .csv with the same format as\n+ our .csv export (columns may be ommitted and re-arranged, default values may be used).\n</p>\n<CustomInput type=\"file\" id=\"uploadBulkFile\" type=\"file\" name=\"document\" />\n<Label for=\"uploadBulkFile\" className=\"sr-only\">\n",
        "org_msg": "Fix csv tooltip",
        "sim_msg": "handle all types of keypresses to prevent submitting the outer form element",
        "sim_diff": "diff --git a/src/plugins/Dashboard/FileCard.js b/src/plugins/Dashboard/FileCard.js @@ -8,7 +8,10 @@ module.exports = function fileCard (props) {\nconst tempStoreMetaOrSubmit = (ev) => {\nif (ev.keyCode === 13) {\n+ ev.stopPropagation()\n+ ev.preventDefault()\nprops.done(meta, file.id)\n+ return\n}\nconst value = ev.target.value\n@@ -26,7 +29,9 @@ module.exports = function fileCard (props) {\ndata-name=\"${field.id}\"\nvalue=\"${file.meta[field.id]}\"\nplaceholder=\"${field.placeholder || ''}\"\n- onkeyup=${tempStoreMetaOrSubmit} /></fieldset>`\n+ onkeyup=${tempStoreMetaOrSubmit}\n+ onkeydown=${tempStoreMetaOrSubmit}\n+ onkeypress=${tempStoreMetaOrSubmit} /></fieldset>`\n})\n}\n",
        "chatgpt_cot": "Update file CubeListNavbar.js to specify acceptable file formats for bulk upload feature. Clarify .csv format requirements for better user understanding."
    },
    {
        "org_diff": "diff --git a/src/components/CardModal.js b/src/components/CardModal.js @@ -140,6 +140,11 @@ const CardModal = ({\n<ColorChecksAddon addonType=\"append\" prefix=\"color\" values={values} onChange={onChange} />\n</InputGroup>\n+ <h5>Notes</h5>\n+ <InputGroup className=\"mb-3\">\n+ <Input type=\"textarea\" name=\"notes\" value={values.notes} onChange={onChange} />\n+ </InputGroup>\n+\n<h5>Tags</h5>\n<TagInput\ntags={values.tags}\n@@ -149,11 +154,6 @@ const CardModal = ({\nhandleInputBlur={addTagText}\n{...tagActions}\n/>\n-\n- <h5>Notes</h5>\n- <InputGroup className=\"mb-3\">\n- <Input type=\"text\" name=\"notes\" value={values.notes} onChange={onChange} />\n- </InputGroup>\n</fieldset>\n</Col>\n</Row>\n",
        "org_msg": "Changed input type to textarea and moved notes above tags",
        "sim_msg": "Fix UserCard propTypes",
        "sim_diff": "diff --git a/src/components/UserCard.js b/src/components/UserCard.js @@ -5,27 +5,22 @@ import FollowButton from '../widgets/FollowButton';\nimport Avatar from '../components/Avatar';\nimport './UserCard.less';\n-const UserCard = ({ username, alt }) =>\n- (<div className=\"UserCard\">\n+const UserCard = ({ username, alt }) => (\n+ <div className=\"UserCard\">\n<div className=\"UserCard__left\">\n<Link to={`/@${username}`}>\n<Avatar username={username} size={40} />\n</Link>\n- <Link to={`/@${username}`}>\n- {username}\n- </Link>\n- {alt &&\n- <span className=\"UserCard__alt\">\n- {alt}\n- </span>\n- }\n+ <Link to={`/@${username}`}>{username}</Link>\n+ {alt && <span className=\"UserCard__alt\">{alt}</span>}\n</div>\n<FollowButton username={username} />\n- </div>);\n+ </div>\n+);\nUserCard.propTypes = {\nusername: PropTypes.string.isRequired,\n- alt: PropTypes.oneOf(PropTypes.string, PropTypes.bool),\n+ alt: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n};\nUserCard.defaultProps = {\n",
        "chatgpt_cot": "Add textarea input for notes in CardModal to allow users to add additional information. Remove duplicate text input for notes."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -271,7 +271,7 @@ function CSVtoCards(csvString, carddb) {\nfinish: finish || 'Non-foil',\nimgUrl: (imageUrl || null) && imageUrl !== 'undefined' ? imageUrl : null,\nimgBackUrl: (imageBackUrl || null) && imageBackUrl !== 'undefined' ? imageBackUrl : null,\n- tags: tags && tags.length > 0 ? tags.split(',') : [],\n+ tags: tags && tags.length > 0 ? tags.split(';').map((t) => t.strip()) : [],\nnotes: notes || '',\nrarity: rarity || null,\ncolorCategory: colorCategory || null,\n",
        "org_msg": "Use semicolons instead of commas to separate tags",
        "sim_msg": "Update fetchdata to skip over incomplete data",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -43,12 +43,14 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- var imagesrc = card.pack_cards[0].image_url;\n+ if(card.pack_cards.length > 0 && card.pack_cards[0].image_url) {\n+ var imagesrc = card.pack_cards[0].image_url;\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n+ }\n});\nreturn cards;\n",
        "chatgpt_cot": "\"Modify CSVtoCards to split tags by semicolon and strip whitespace\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -46,7 +46,7 @@ let BulkUploadPage = null;\nlet CubeListPage = null;\nlet CubePlaytestPage = null;\nlet DraftView = null;\n-if (NODE_ENV === 'production') {\n+if (false) { // NODE_ENV === 'production') {\nBulkUploadPage = require('../dist/components/BulkUploadPage').default;\nCubeListPage = require('../dist/components/CubeListPage').default;\nCubePlaytestPage = require('../dist/components/CubePlaytestPage').default;\n@@ -829,7 +829,7 @@ router.get('/list/:id', async function(req, res) {\nres.render('cube/cube_list', {\nreactHTML:\n- NODE_ENV === 'production'\n+ CubeListPage\n? await ReactDOMServer.renderToString(React.createElement(CubeListPage, reactProps))\n: undefined,\nreactProps,\n@@ -892,7 +892,7 @@ router.get('/playtest/:id', async (req, res) => {\nres.render('cube/cube_playtest', {\nreactHTML:\n- NODE_ENV === 'production'\n+ CubePlaytestPage\n? await ReactDOMServer.renderToString(React.createElement(CubePlaytestPage, reactProps))\n: undefined,\nreactProps,\n@@ -1463,7 +1463,7 @@ async function bulkUpload(req, res, list, cube) {\n};\nres.render('cube/bulk_upload', {\nreactHTML:\n- NODE_ENV === 'production'\n+ BulkUploadPage\n? await ReactDOMServer.renderToString(React.createElement(BulkUploadPage, reactProps))\n: undefined,\nreactProps,\n@@ -1701,7 +1701,7 @@ router.get('/draft/:id', async function(req, res) {\nres.render('cube/cube_draft', {\nreactHTML:\n- NODE_ENV === 'production'\n+ DraftView\n? await ReactDOMServer.renderToString(React.createElement(DraftView, reactProps))\n: undefined,\nreactProps,\n",
        "org_msg": "Disable server-side rendering for now.",
        "sim_msg": "Don't save empty drafts",
        "sim_diff": "diff --git a/src/post/Write/Write.js b/src/post/Write/Write.js @@ -122,11 +122,18 @@ export class RawNewPost extends Component {\nconst postBody = this.editor.getContent();\nconst { location: { query } } = this.props;\nlet id = query.draft;\n- if (id === undefined) {\n+\n+ // Remove zero width space\n+ const isBodyEmpty = postBody.markdown.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim().length === 0;\n+\n+ if (id === undefined && !isBodyEmpty) {\nid = Date.now().toString(16);\nthis.props.router.push({ pathname: '/write', query: { draft: id } });\n}\n+\n+ if (id !== undefined) {\nthis.props.saveDraft({ postData: data, rawBody: postBody.raw, id });\n+ }\n}, 400);\ncomponentWillReceiveProps(nextProps) {\n",
        "chatgpt_cot": "Update conditional rendering for production environment in cube_routes.js. Use specific components for rendering based on environment variables to improve code readability."
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -16,6 +16,7 @@ var data = {\nreturn carddict[id];\n}\nelse{\n+ console.log(\"Could not find: \" + id);\n//placeholder card if we don't find the one due to a scryfall ID update bug\nreturn {\n// img:\n@@ -48,7 +49,7 @@ var data = {\nallIds: card => data.nameToId[data.normalizedName(card)]\n}\nfs.readFile('private/carddict.json', 'utf8', function(err, contents) {\n- data.carddict = JSON.parse(contents);\n+ carddict = JSON.parse(contents);\nconsole.log(\"carddict loaded\");\n});\nfs.readFile('private/cardtree.json', 'utf8', function(err, contents) {\n@@ -106,7 +107,7 @@ fs.watchFile('private/names.json', (curr, prev) => {\nfs.watchFile('private/carddict.json', (curr, prev) => {\nconsole.log('File Changed: carddict');\nfs.readFile('private/carddict.json', 'utf8', function(err, contents) {\n- data.carddict = JSON.parse(contents);\n+ carddict = JSON.parse(contents);\nconsole.log(\"carddict reloaded\");\n});\n});\n",
        "org_msg": "Fixed issue with switching to wrapper for carddict",
        "sim_msg": "Update fetchdata to skip over incomplete data",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -43,12 +43,14 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- var imagesrc = card.pack_cards[0].image_url;\n+ if(card.pack_cards.length > 0 && card.pack_cards[0].image_url) {\n+ var imagesrc = card.pack_cards[0].image_url;\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n+ }\n});\nreturn cards;\n",
        "chatgpt_cot": "Fix variable assignment and add console log for error handling in cards.js file."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -15,18 +15,28 @@ if (!fs.existsSync('private')) {\nfs.mkdirSync('private');\n}\n-function updateCardbase() {\n+function downloadDefaultCards() {\nvar file = fs.createWriteStream('private/cards.json');\n- var request = https.get(\"https://archive.scryfall.com/json/scryfall-default-cards.json\", function(response) {\n+ var promise = new Promise((resolve, reject) => {\n+ https.get(\"https://archive.scryfall.com/json/scryfall-default-cards.json\", function(response) {\nlet stream = response.pipe(file);\nstream.on('finish', function() {\n+ console.log(\"resolved\");\n+ resolve();\n+ });\n+ })\n+ });\n+ return promise;\n+}\n+\n+function updateCardbase() {\n+ downloadDefaultCards().then(function() {\n+ console.log(\"Running save\");\nvar contents = fs.readFileSync('private/cards.json');\n- // Define to JSON type\nvar cards = JSON.parse(contents);\nsaveAllCards(cards);\nconsole.log(\"Finished cardbase update...\");\n});\n- });\n}\nfunction addCardToCatalog(card, isExtra) {\n",
        "org_msg": "factor out streaming download to enable mocking it in test",
        "sim_msg": "cors: fixes broken host conditional",
        "sim_diff": "diff --git a/common/actions.js b/common/actions.js @@ -8,9 +8,6 @@ const REQUEST_HEADERS = {\n\"Content-Type\": \"application/json\",\n};\n-const dev = process.env.NODE_ENV !== \"www\";\n-const SERVER_PATH = dev ? \"http://localhost:1337\" : \"https://slate.host\";\n-\nexport const setDefaultConfig = async (data) => {\nconst options = {\nmethod: \"POST\",\n@@ -19,7 +16,7 @@ export const setDefaultConfig = async (data) => {\nbody: JSON.stringify(data),\n};\n- const response = await fetch(`${SERVER_PATH}/_/settings`, options);\n+ const response = await fetch(`/_/settings`, options);\nconst json = await response.json();\nreturn json;\n@@ -37,7 +34,7 @@ export const createWalletAddress = async (data) => {\nbody: JSON.stringify(data),\n};\n- const response = await fetch(`${SERVER_PATH}/_/wallet/create`, options);\n+ const response = await fetch(`/_/wallet/create`, options);\nconst json = await response.json();\nreturn json;\n@@ -63,7 +60,7 @@ export const sendWalletAddressFilecoin = async (data) => {\nbody: JSON.stringify(data),\n};\n- const response = await fetch(`${SERVER_PATH}/_/wallet/send`, options);\n+ const response = await fetch(`/_/wallet/send`, options);\nconst json = await response.json();\nreturn json;\n@@ -79,7 +76,7 @@ export const hydrateAuthenticatedUser = async (data) => {\nbody: JSON.stringify({ data }),\n};\n- const response = await fetch(`${SERVER_PATH}/api/hydrate`, options);\n+ const response = await fetch(`/api/hydrate`, options);\nconst json = await response.json();\nreturn json;\n@@ -93,7 +90,7 @@ export const deleteUser = async (data) => {\nbody: JSON.stringify({ data }),\n};\n- const response = await fetch(`${SERVER_PATH}/api/users/delete`, options);\n+ const response = await fetch(`/api/users/delete`, options);\nconst json = await response.json();\nreturn json;\n};\n@@ -106,7 +103,7 @@ export const createUser = async (data) => {\nbody: JSON.stringify({ data }),\n};\n- const response = await fetch(`${SERVER_PATH}/api/users/create`, options);\n+ const response = await fetch(`/api/users/create`, options);\nconst json = await response.json();\nreturn json;\n};\n@@ -119,7 +116,7 @@ export const health = async (data) => {\nbody: JSON.stringify({ data: { success: true } }),\n};\n- const response = await fetch(`${SERVER_PATH}/api/_`, options);\n+ const response = await fetch(`/api/_`, options);\nconst json = await response.json();\nreturn json;\n};\n",
        "chatgpt_cot": "Add promise-based downloadDefaultCards method, update updateCardbase to use it, and add console logs for debugging and status messages."
    },
    {
        "org_diff": "diff --git a/src/pages/LandingPage.js b/src/pages/LandingPage.js @@ -36,7 +36,7 @@ const LandingPage = ({ numusers, numcubes, numdrafts }) => {\n<Button href=\"/user/register\" className=\"landing-btn my-3\" color=\"success\">\nSign Up\n</Button>\n- <LoginModalButton className=\"landing-btn mb-3\" color=\"success\" outline>\n+ <LoginModalButton modalProps={{ loginCallback: '/' }} className=\"landing-btn mb-3\" color=\"success\" outline>\nLogin\n</LoginModalButton>\n</div>\n",
        "org_msg": "added missing required loginCallback prop",
        "sim_msg": "refactor: updated login pages Helmet props",
        "sim_diff": "diff --git a/src/pages/login.js b/src/pages/login.js @@ -43,10 +43,10 @@ const styles = (theme) => ({\n}\n},\nbackLink: {\n- \"color\": theme.palette.reaction.black80,\n- \"cursor\": \"pointer\",\n- \"fontFamily\": theme.typography.fontFamily,\n- \"fontSize\": 14,\n+ color: theme.palette.reaction.black80,\n+ cursor: \"pointer\",\n+ fontFamily: theme.typography.fontFamily,\n+ fontSize: 14,\n\"&:hover\": {\ncolor: theme.palette.reaction.reactionBlue400\n}\n@@ -113,7 +113,7 @@ export default class Login extends Component {\nreturn null;\n}\n- state = {}\n+ state = {};\nhandleLoginClick = () => {\n// TODO: Redirect to Auth solution\n@@ -188,10 +188,10 @@ export default class Login extends Component {\nconst { classes, shop } = this.props;\nreturn (\n<Fragment>\n- <Helmet>\n- <title>{shop && shop.name} | Login</title>\n- <meta name=\"description\" content={shop && shop.description} />\n- </Helmet>\n+ <Helmet\n+ title={`Login | ${shop && shop.name}`}\n+ meta={[{ name: \"description\", content: shop && shop.description }]}\n+ />\n<CheckoutTopHat checkoutMessage=\"Free Shipping + Free Returns\" />\n<div className={classes.root}>\n{this.renderHeader()}\n",
        "chatgpt_cot": "\"Add login callback to LoginModalButton in LandingPage.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1246,7 +1246,9 @@ function bulkuploadCSV(req, res, cards, cube) {\naddedTmsp: new Date(),\ncollector_number: split[5],\nstatus: split[6],\n- tags: split[7] && split[7].length > 0 ? split[7].split(',') : [],\n+ finish: split[7],\n+ imgUrl: split[8],\n+ tags: split[9] && split[9].length > 0 ? split[9].split(',') : [],\n};\nlet potentialIds = carddb.allIds(card);\n@@ -1312,7 +1314,7 @@ function bulkuploadCSV(req, res, cards, cube) {\nfunction bulkUpload(req, res, list, cube) {\ncards = list.match(/[^\\r\\n]+/g);\nif (cards) {\n- if (cards[0].trim() == 'Name,CMC,Type,Color,Set,Collector Number,Status,Tags') {\n+ if (cards[0].trim() == 'Name,CMC,Type,Color,Set,Collector Number,Status,Finish,Image URL,Tags') {\ncards.splice(0, 1);\nbulkuploadCSV(req, res, cards, cube);\n} else {\n@@ -1450,7 +1452,7 @@ router.get('/download/csv/:id', function(req, res) {\nres.setHeader('Content-disposition', 'attachment; filename=' + cube.name.replace(/\\W/g, '') + '.csv');\nres.setHeader('Content-type', 'text/plain');\nres.charset = 'UTF-8';\n- res.write('Name,CMC,Type,Color,Set,Collector Number,Status,Tags\\r\\n');\n+ res.write('Name,CMC,Type,Color,Set,Collector Number,Status,Finish,Image URL,Tags\\r\\n');\ncube.cards.forEach(function(card, index) {\nif (!card.type_line) {\ncard.type_line = carddb.cardFromId(card.cardID).type;\n@@ -1468,7 +1470,9 @@ router.get('/download/csv/:id', function(req, res) {\nres.write(card.colors.join('') + ',');\nres.write('\"' + carddb.cardFromId(card.cardID).set + '\"' + ',');\nres.write('\"' + carddb.cardFromId(card.cardID).collector_number + '\"' + ',');\n- res.write(card.status + ',\"');\n+ res.write(card.status + ',');\n+ res.write(card.finish + ',');\n+ res.write('\"' + card.imgUrl + '\",\"');\ncard.tags.forEach(function(tag, t_index) {\nif (t_index != 0) {\nres.write(', ');\n",
        "org_msg": "Add Finish and Image URL to csv format.",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "Add finish and imgUrl attributes, update CSV download format for cube cards, and add bulk upload functionality to cube routes."
    },
    {
        "org_diff": "diff --git a/views/cube/cube_blog.pug b/views/cube/cube_blog.pug @@ -38,7 +38,7 @@ block cube_content\ninput#postBlogTitleInput.form-control(maxlength='200' name='title', type='text')\nlabel Body:\ninput#postBlogHiddenId(type='hidden', name='id')\n- input#postBlogHiddenHTML(type='hidden', name='html')\n+ input.postBlogHiddenHTML(type='hidden', name='html')\ninclude ../texteditor\n.modal-footer\ninput.btn.btn-success(type='submit',value='Save')\n",
        "org_msg": "Fixed not being able to edit blog posts",
        "sim_msg": "Link members to blogs",
        "sim_diff": "diff --git a/OurUmbraco/Community/BlogPosts/BlogInfo.cs b/OurUmbraco/Community/BlogPosts/BlogInfo.cs @@ -20,6 +20,8 @@ namespace OurUmbraco.Community.BlogPosts {\npublic string LogoUrl { get; private set; }\n+ public int MemberId { get; private set; }\n+\npublic bool HasLogoUrl {\nget { return !String.IsNullOrWhiteSpace(LogoUrl); }\n}\n@@ -35,6 +37,7 @@ namespace OurUmbraco.Community.BlogPosts {\nUrl = obj.GetString(\"url\");\nRssUrl = obj.GetString(\"rss\");\nLogoUrl = obj.GetString(\"logo\");\n+ MemberId = obj.GetInt32(\"memberId\");\nEncoding = Encoding.UTF8;\n}\n",
        "chatgpt_cot": "\"Fix input element class name in cube_blog.pug file\""
    },
    {
        "org_diff": "diff --git a/src/components/PagedTable.js b/src/components/PagedTable.js @@ -22,6 +22,8 @@ class PagedTable extends Component {\nif (prevProps.rows.length !== this.props.rows.length) {\nthis.setState({ page: 0 });\n}\n+ /* global */\n+ autocard_init('autocard');\n}\nrender() {\n",
        "org_msg": "Temporary hack to fix",
        "sim_msg": "refactor: remove with theme",
        "sim_diff": "diff --git a/src/components/PageStepper/PageStepper.js b/src/components/PageStepper/PageStepper.js @@ -11,7 +11,7 @@ const styles = (theme) => ({\n}\n});\n-@withStyles(styles, { withTheme: true })\n+@withStyles(styles)\nexport default class ProductGrid extends Component {\nstatic propTypes = {\nclasses: PropTypes.object,\n@@ -27,7 +27,7 @@ export default class ProductGrid extends Component {\n};\nrender() {\n- const { classes, pageInfo, theme } = this.props;\n+ const { classes, pageInfo } = this.props;\nreturn (\n<Grid className={classes.root} container justify=\"space-between\">\n",
        "chatgpt_cot": "\"Add autocard initialization to PagedTable component for global use\""
    },
    {
        "org_diff": "diff --git a/src/components/EditCollapse.js b/src/components/EditCollapse.js @@ -82,19 +82,19 @@ class EditCollapse extends Component {\n</Row>\n<Row>\n<Col xs=\"12\" sm=\"auto\">\n- <Form inline className=\"mb-2\" onSubmit={e => e.preventDefault()}>\n+ <Form inline className=\"mb-2\" onSubmit={e => { e.preventDefault(); /* global */ justAdd(); }}>\n<div className=\"autocomplete\">\n- <Input type=\"text\" className=\"mr-2\" id=\"addInput\" placeholder=\"Card to Add\" autoComplete=\"off\" />\n+ <Input type=\"text\" className=\"mr-2\" id=\"addInput\" placeholder=\"Card to Add\" autoComplete=\"off\" data-lpignore />\n</div>\n- <Button color=\"success\" onClick={/* global */ justAdd}>Just Add</Button>\n+ <Button color=\"success\" type=\"submit\">Just Add</Button>\n</Form>\n</Col>\n<Col xs=\"12\" sm=\"auto\">\n- <Form inline className=\"mb-2\" onSubmit={e => e.preventDefault()}>\n+ <Form inline className=\"mb-2\" onSubmit={e => { e.preventDefault(); /* global */ remove(); }}>\n<div className=\"autocomplete\">\n- <Input type=\"text\" className=\"mr-2\" id=\"removeInput\" placeholder=\"Card to Remove\" autoComplete=\"off\" />\n+ <Input type=\"text\" className=\"mr-2\" id=\"removeInput\" placeholder=\"Card to Remove\" autoComplete=\"off\" data-lpignore />\n</div>\n- <Button color=\"success\" onClick={/* global */ remove}>Remove/Replace</Button>\n+ <Button color=\"success\" type=\"submit\">Remove/Replace</Button>\n</Form>\n</Col>\n</Row>\n",
        "org_msg": "Return to old submit-on-enter behavior.",
        "sim_msg": "Enhance code insertion mechanism",
        "sim_diff": "diff --git a/src/components/Editor/Editor.js b/src/components/Editor/Editor.js @@ -57,63 +57,62 @@ class Editor extends React.Component {\nthis.input = input && input.refs && input.refs.input;\n};\n- insertCode = (type) => {\n- if (!this.input) {\n- return;\n+ insertAtCursor = (before, after, deltaStart = 0, deltaEnd = 0) => {\n+ if (!this.input) return;\n+\n+ const startPos = this.input.selectionStart;\n+ const endPos = this.input.selectionEnd;\n+ this.input.value = this.input.value.substring(0, startPos)\n+ + before\n+ + this.input.value.substring(startPos, endPos)\n+ + after\n+ + this.input.value.substring(endPos, this.input.value.length);\n+\n+ this.input.selectionStart = startPos + deltaStart;\n+ this.input.selectionEnd = endPos + deltaEnd;\n}\n- let addedText = '';\n- let cursorDiff = 0;\n+ insertCode = (type) => {\n+ if (!this.input) return;\n+ this.input.focus();\nswitch (type) {\ncase 'h1':\n- addedText = '# ';\n+ this.insertAtCursor('# ', '', 2, 2);\nbreak;\ncase 'h2':\n- addedText = '## ';\n+ this.insertAtCursor('## ', '', 3, 3);\nbreak;\ncase 'h3':\n- addedText = '### ';\n+ this.insertAtCursor('### ', '', 4, 4);\nbreak;\ncase 'h4':\n- addedText = '#### ';\n+ this.insertAtCursor('#### ', '', 5, 5);\nbreak;\ncase 'h5':\n- addedText = '##### ';\n+ this.insertAtCursor('##### ', '', 6, 6);\nbreak;\ncase 'h6':\n- addedText = '###### ';\n+ this.insertAtCursor('###### ', '', 7, 7);\nbreak;\ncase 'b':\n- addedText = '****';\n- cursorDiff = 2;\n+ this.insertAtCursor('**', '**', 2, 2);\nbreak;\ncase 'i':\n- addedText = '**';\n- cursorDiff = 1;\n- break;\n- case 'u':\n- addedText = '____';\n- cursorDiff = 2;\n+ this.insertAtCursor('*', '*', 1, 1);\nbreak;\ncase 'q':\n- addedText = '> ';\n+ this.insertAtCursor('> ', '', 2, 2);\nbreak;\ncase 'link':\n- addedText = '[](url)';\n- cursorDiff = 6;\n+ this.insertAtCursor('[', '](url)', 1, 1);\nbreak;\ncase 'image':\n- addedText = '![](url)';\n- cursorDiff = 6;\n+ this.insertAtCursor('![', '](url)', 2, 2);\nbreak;\ndefault:\nbreak;\n}\n-\n- this.input.focus();\n- this.input.value = `${this.input.value}${addedText}`;\n- this.input.selectionEnd -= cursorDiff;\n}\nrender() {\n@@ -165,7 +164,6 @@ class Editor extends React.Component {\n<Button className=\"Editor__toolbar__button\" onClick={() => this.insertCode('h6')}>h6</Button>\n<Button className=\"Editor__toolbar__button\" onClick={() => this.insertCode('b')}>B</Button>\n<Button className=\"Editor__toolbar__button\" onClick={() => this.insertCode('i')}>I</Button>\n- <Button className=\"Editor__toolbar__button\" onClick={() => this.insertCode('u')}>U</Button>\n<Button className=\"Editor__toolbar__button\" onClick={() => this.insertCode('q')}>\"</Button>\n<Button className=\"Editor__toolbar__button\" onClick={() => this.insertCode('link')}>Link</Button>\n<Button className=\"Editor__toolbar__button\" onClick={() => this.insertCode('image')}>Image</Button>\n",
        "chatgpt_cot": "\"Add form submission functionality and prevent default behavior in EditCollapse component to improve user experience.\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.js b/__tests__/serverjs/updatecards.js @@ -30,3 +30,15 @@ test(\"updateCardbase creates the expected files\", () => {\nexpect(fs.existsSync('private/full_names.json')).toBe(true);\n});\n});\n+\n+test(\"addCardToCatalog\", () => {\n+ // make internal members public, verify that they have been populated\n+});\n+\n+test(\"saveAllCards\", () => {\n+ // do in test what updateCardbase does before call to saveAllCards\n+ // use that as input to saveallcards for test\n+});\n+\n+test(\"convertCard\", () => {});\n+test(\"convertExtraCard\", () => {});\n\\ No newline at end of file\n",
        "org_msg": "stubs and notes about tests to write",
        "sim_msg": "Removed the pings from the client, so I cleared out the tests for it.",
        "sim_diff": "diff --git a/server/tests/classes/client.test.js b/server/tests/classes/client.test.js @@ -29,9 +29,6 @@ describe(\"Client\", () => {\nexpect(c.caches).toEqual([]);\nexpect(c.mobile).toBe(false);\nexpect(c.cards).toEqual([]);\n-\n- expect(c.sentPing).toBeNull();\n- expect(c.ping).toBeNull();\n});\ntest(\"should create a Scanner\", () => {\n",
        "chatgpt_cot": "\"Add tests for addCardToCatalog, saveAllCards, convertCard, and convertExtraCard functions in updatecards.js\""
    },
    {
        "org_diff": "diff --git a/src/components/CurveView.js b/src/components/CurveView.js @@ -36,7 +36,7 @@ const ColorCard = ({ color, groups, count, typeCounts, primary }) => (\n</h5>\n</CardHeader>\n<CardBody>\n- {getLabels(null, Creature / Non - Creature)\n+ {getLabels(null, 'Creature/Non-Creature')\n.filter((cardType) => groups[cardType])\n.map((cardType) => (\n<TypeRow key={cardType} cardType={cardType} groups={groups[cardType]} count={typeCounts[cardType]} />\n@@ -52,7 +52,7 @@ const CurveViewRaw = ({ cards, primary, secondary, tertiary, changeSort, ...prop\nlet typeCounts = {};\nfor (let color of Object.keys(groups)) {\n- groups[color] = sortIntoGroups(groups[color], Creature / Non - Creature);\n+ groups[color] = sortIntoGroups(groups[color], 'Creature/Non-Creature');\ncolorCounts[color] = 0;\ntypeCounts[color] = {};\nfor (let cardType of Object.keys(groups[color])) {\n",
        "org_msg": "Added back quotes",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Fix syntax error and update method parameters in CurveView.js. The modification resolves the syntax error and improves the functionality of the CurveView component."
    },
    {
        "org_diff": "diff --git a/models/cardrating.js b/models/cardrating.js @@ -7,4 +7,8 @@ let cardRatingSchema = mongoose.Schema({\nname: String\n});\n+cardRatingSchema.index({\n+ name: 1,\n+});\n+\nlet CardRating = module.exports = mongoose.model('CardRating', cardRatingSchema)\n\\ No newline at end of file\n",
        "org_msg": "Add index on name to card ratings.",
        "sim_msg": "added required to description in response card title,Url",
        "sim_diff": "diff --git a/templates/master/elasticsearch/schema.js b/templates/master/elasticsearch/schema.js @@ -38,12 +38,12 @@ module.exports={\ntitle:{\ntype:\"text\",\ntitle:\"Card Title\",\n- description:\"\",\n+ description:\"Required\",\nmaxLength:100\n},\nimageUrl:{\ntype:\"text\",\n- description:\"\",\n+ description:\"Required\",\ntitle:\"Card Image Url\",\nformat:'url',\nmaxLength:2000\n",
        "chatgpt_cot": "Add an index for the name field in cardRatingSchema to improve query performance."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -543,7 +543,7 @@ function GetColorIdentity(colors) {\n}\nfunction getSorts() {\n- return ['Artist', 'CMC', 'Color Category', 'Color Count', 'Color Identity', 'Color', 'Guilds', 'Legality', 'Loyalty', 'Manacost Type', 'Power', 'Price', 'Price Foil', 'Rarity', 'Set', 'Shards / Wedges', 'Status', 'Subtype', 'Supertype', 'Tags', 'Toughness', 'Type', 'Types-Multicolor'];\n+ return ['Artist', 'CMC', 'Color Category', 'Color Count', 'Color Identity', 'Color', 'Date Added', 'Guilds', 'Legality', 'Loyalty', 'Manacost Type', 'Power', 'Price', 'Price Foil', 'Rarity', 'Set', 'Shards / Wedges', 'Status', 'Subtype', 'Supertype', 'Tags', 'Toughness', 'Type', 'Types-Multicolor'];\n}\n",
        "org_msg": "add DateAdded as a sort/filter field",
        "sim_msg": "Use #hasOwnProperty rather than `in`",
        "sim_diff": "diff --git a/source/color/Color.js b/source/color/Color.js @@ -459,7 +459,7 @@ Object.assign(Color, {\nlet b;\nlet parts;\ncolor = color.toLowerCase();\n- if (color in cssColorNames) {\n+ if (cssColorNames.hasOwnProperty(color)) {\nconst number = cssColorNames[color];\nr = getDoubleByte(number, 2);\ng = getDoubleByte(number, 1);\n",
        "chatgpt_cot": "Update getSorts method to include 'Date Added' for sorting, improving the functionality of sorting in editcube.js."
    },
    {
        "org_diff": "diff --git a/src/components/ListView.js b/src/components/ListView.js @@ -190,7 +190,7 @@ class ListViewRaw extends Component {\n}\nrender() {\n- const { cards, primary, secondary, tertiary, ...props } = this.props;\n+ const { cards, primary, secondary, tertiary, changeSort, ...props } = this.props;\nconst groups = {};\nfor (const [label1, primaryGroup] of Object.entries(sortIntoGroups(cards, primary))) {\ngroups[label1] = {};\n",
        "org_msg": "Fix DOM warning.",
        "sim_msg": "Add ListView support for setting focused view",
        "sim_diff": "diff --git a/source/views/collections/ListView.js b/source/views/collections/ListView.js @@ -50,10 +50,16 @@ const ListView = Class({\n};\nthis.controller = null;\n+ this.focused = null;\nthis.selection = null;\nListView.parent.constructor.apply( this, arguments );\n+ const focused = this.get( 'focused' );\n+ if ( focused ) {\n+ focused.addObserverForKey( 'record', this, 'redrawFocused' );\n+ }\n+\nconst selection = this.get( 'selection' );\nif ( selection ) {\nselection.addObserverForKey(\n@@ -67,6 +73,12 @@ const ListView = Class({\nselection.removeObserverForKey(\n'selectedStoreKeys', this, 'redrawSelection' );\n}\n+\n+ const focused = this.get( 'focused' );\n+ if ( focused ) {\n+ focused.removeObserverForKey( 'record', this, 'redrawFocused' );\n+ }\n+\nif ( this.get( 'isRendered' ) ) {\nconst content = this.get( 'content' );\nif ( content ) {\n@@ -75,6 +87,7 @@ const ListView = Class({\ncontent.off( 'query:updated', this, 'contentWasUpdated' );\n}\n}\n+\nListView.parent.destroy.call( this );\n},\n@@ -139,7 +152,8 @@ const ListView = Class({\ncreateItemView ( content, index, list, isAdded ) {\nconst ItemView = this.get( 'ItemView' );\n- return new ItemView({\n+ const focused = this.get( 'focused' );\n+ const view = new ItemView({\ncontroller: this.get( 'controller' ),\nselection: this.get( 'selection' ),\nparentView: this,\n@@ -148,6 +162,10 @@ const ListView = Class({\nlist,\nisAdded,\n});\n+ if ( focused ) {\n+ view.set( 'isFocused', content === focused.get( 'record' ) );\n+ }\n+ return view;\n},\ndestroyItemView ( view ) {\n@@ -277,6 +295,23 @@ const ListView = Class({\nthis.endPropertyChanges();\n},\n+ redrawFocused ( _, __, oldRecord ) {\n+ const rendered = this._rendered;\n+ const newRecord = this.get( 'focused' ).get( 'record' );\n+ if ( oldRecord ) {\n+ const view = rendered[ guid( oldRecord ) ];\n+ if ( view ) {\n+ view.set( 'isFocused', false );\n+ }\n+ }\n+ if ( newRecord ) {\n+ const view = rendered[ guid( newRecord ) ];\n+ if ( view ) {\n+ view.set( 'isFocused', true );\n+ }\n+ }\n+ },\n+\nredrawSelection () {\nconst selection = this.get( 'selection' );\nconst itemViews = this.get( 'childViews' );\n",
        "chatgpt_cot": "Add changeSort method to ListView.js for sorting functionality. This modification enhances the functionality of the ListView component."
    },
    {
        "org_diff": "diff --git a/public/js/autocard.js b/public/js/autocard.js @@ -70,7 +70,7 @@ function autocard_show_card(card_image, card_flip, show_art_crop, tags) {\n//display on top\ndocument.getElementById(\"autocard_popup\").style.top = Math.max(0,(-(h+5+tag_offset)+y_offset)) + \"px\";\ndocument.getElementById(\"autocard_popup2\").style.top = Math.max(0,(-(h+5+tag_offset)+y_offset)) + \"px\";\n- document.getElementById(\"autocard_popup_info\").style.top = Math.max(0,(-(5+tag_offset)+y_offset)) + \"px\";\n+ document.getElementById(\"autocard_popup_info\").style.top = Math.max((h),(-(5+tag_offset)+y_offset)) + \"px\";\n}\n}\ndocument.getElementById(\"autocard_popup\").innerHTML = '<img src=\"\" width=225 height=' + h + '>';\n",
        "org_msg": "Fixed tag on autocard position",
        "sim_msg": "Add preview thumbnail in job manager",
        "sim_diff": "diff --git a/dashboard/apps/job_manager.fma/js/job_manager.js b/dashboard/apps/job_manager.fma/js/job_manager.js @@ -130,6 +130,17 @@ function makeActions() {\nreturn actions;\n}\n+// Returns an img string DOM element for holding the job preview thumbnail.\n+function createPreviewThumbnail(job, width, height) {\n+ var img = document.createElement(\"img\");\n+ img.style.marginRight = \"4px\";\n+ img.width = width;\n+ img.height = height;\n+ img.alt = \"[No possible preview]\";\n+ img.src = \"/job/\" + job._id + \"/thumbnail\";\n+ return img.outerHTML;\n+}\n+\nfunction addQueueEntries(jobs) {\nclearQueue();\nvar table = document.getElementById('queue_table');\n@@ -156,7 +167,7 @@ function addQueueEntries(jobs) {\nlistItem.setAttribute(\"data-id\", jobs[i]._id);\ntable.appendChild(listItem);\nvar id = document.getElementById(jobs[i]._id);\n- id.innerHTML = '<div id=\"menu\"></div><div class=\"job_name\">' + jobs[i].name + '</div><div class=\"description\">' + jobs[i].description + '</div>';\n+ id.innerHTML = '<div id=\"menu\"></div><div class=\"job_name\">' + jobs[i].name + '</div><div class=\"description\">' + createPreviewThumbnail(jobs[i], 100, 100) + jobs[i].description + '</div>';\nvar menu = id.firstChild;\n// menu.className += ' actions-control';\n@@ -196,7 +207,7 @@ function addQueueEntries(jobs) {\nrecentItem.setAttribute(\"data-id\", recent[i]._id);\nrecentJobs.appendChild(recentItem);\nvar id = document.getElementById(recent[i]._id);\n- id.innerHTML = '<div id=\"menu\"></div><div id=\"name\">' + recent[i].name + '</div><div class=\"description\">' + recent[i].description + '</div>';\n+ id.innerHTML = '<div id=\"menu\"></div><div id=\"name\">' + recent[i].name + '</div><div class=\"description\">' + createPreviewThumbnail(recent[i], 100, 100) + recent[i].description + '</div>';\nvar menu = id.firstChild;\n// menu.className += ' actions-control';\n@@ -293,7 +304,7 @@ function addHistoryEntries(jobs) {\nvar time = row.insertCell(3);\nmenu.innerHTML = createHistoryMenu(job._id);\n- name.innerHTML = '<div class=\"job-' + job.state + '\">' + job.name + '</div>';\n+ name.innerHTML = '<div class=\"job-' + job.state + '\">' + createPreviewThumbnail(job, 50, 50) + job.name + '</div>';\ndone.innerHTML = moment(job.finished_at).fromNow();\ntime.innerHTML = moment.utc(job.finished_at - job.started_at).format('HH:mm:ss');\n});\n",
        "chatgpt_cot": "\"Fix display issue in autocard.js by adjusting the top position of popup_info to properly show card information.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -30,8 +30,8 @@ const {\n} = require('canvas');\nCanvas.Image = Image;\n-const CARD_HEIGHT = 204;\n-const CARD_WIDTH = 146;\n+const CARD_HEIGHT = 680;\n+const CARD_WIDTH = 488;\n//grabbing sortfilter.cardIsLabel from client-side\nvar sortfilter = require('../public/js/sortfilter.js');\n@@ -883,7 +883,7 @@ router.get('/samplepackimage/:id/:seed', function(req, res) {\n} else {\nvar srcArray = pack.pack.map((card, index) => {\nreturn {\n- src: card.image_small,\n+ src: card.image_normal,\nx: CARD_WIDTH * (index % 5),\ny: CARD_HEIGHT * Math.floor(index / 5)\n}\n",
        "org_msg": "Increased image size",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "\"Update card dimensions and image source in cube_routes.js\nChange CARD_HEIGHT and CARD_WIDTH values, and update image source from image_small to image_normal.\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -127,7 +127,7 @@ app.use((req, res, next) => {\nmorgan.token('uuid', (req) => req.uuid);\napp.use(\n- morgan(':remote-addr :uuid :method :url :status :res[content-length] - :response-time ms', {\n+ morgan('[:date[iso]] :remote-addr :uuid :method :url :status :res[content-length] - :response-time ms', {\nstream: {\nwrite: (message) => winston.info(message.trim()),\n},\n",
        "org_msg": "Add date to request logs.",
        "sim_msg": "Remove cors (not used)",
        "sim_diff": "diff --git a/server/app.js b/server/app.js @@ -17,7 +17,6 @@ const logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst http = require('http');\nconst https = require('https');\n-const cors = require('cors');\nconst debug = require('debug')('busy:serverApp');\nconst steem = require('steem');\n@@ -55,7 +54,6 @@ app.use((req, res, next) => {\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n-app.use(cors());\nif (process.env.NODE_ENV === 'production') {\napp.use(express.static(path.join(rootDir, 'public'), { maxAge: OneWeek }));\n",
        "chatgpt_cot": "\"Update morgan format to include date in ISO format for logging\""
    },
    {
        "org_diff": "diff --git a/src/utils/draftbots.js b/src/utils/draftbots.js @@ -170,37 +170,23 @@ export const getColor = (combination, picked) => {\nconst basics = ['Plains', 'Island', 'Swamp', 'Mountain', 'Forest'];\n// Does this help us fix for this combination of colors?\n-// Scale from 0-1.\n+// Scale from 0-1. Perfect is double-on-color fetch.\nexport const getFixing = (combination, _, card) => {\nconst colors = fetchLands[card.details.name] ?? cardColorIdentity(card);\nconst typeLine = cardType(card);\nconst isLand = typeLine.indexOf('Land') > -1;\nconst isFetch = !!fetchLands[cardName(card)];\n- // Guaranteed contains by botRatingAndCombination\n- if (isLand || isFetch) {\n- let score = 0.25;\n-\n+ if (isLand) {\n+ const overlap = colors.filter((c) => combination.includes(c)).length;\nconst hasBasicTypes = basics.filter((basic) => typeLine.toLowerCase().includes(basic.toLowerCase())).length > 1;\n- if (hasBasicTypes) {\n- score *= 1.5;\n- } else if (isFetch) {\n- score *= 2;\n+ if (isFetch) {\n+ return overlap;\n}\n-\n- switch (colors.length) {\n- case 0:\n- return 0;\n- case 1:\n- break;\n- case 2:\n- score *= 2;\n- break;\n- default:\n- score *= Math.min(colors.length, combination.length);\n- break;\n+ if (hasBasicTypes) {\n+ return 0.75 * overlap;\n}\n- return score;\n+ return 0.5 * overlap;\n}\nreturn 0;\n};\n@@ -230,7 +216,7 @@ export const botRatingAndCombination = (card, picked, seen, synergies, initialSt\n// Find the color combination that gives us the highest score1\n// that'll be the color combination we want to play currently.\nconst pickNum = initialState?.[0]?.[packNum - 1]?.length - inPack + 1;\n- let bestRating = -1;\n+ let bestRating = -10000;\nlet bestCombination = [];\nfor (const combination of COLOR_COMBINATIONS) {\nlet rating = 0;\n",
        "org_msg": "Fix fixing score.",
        "sim_msg": "Major colors debugging",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -40,6 +40,11 @@ const localMatrix2 = new THREE.Matrix4();\nconst {promise} = await import('./bin/objectize2.js');\nawait promise;\n+const colors = await (async () => {\n+ const res = await fetch('./colors.json');\n+ return await res.json();\n+})();\n+\nclass Allocator {\nconstructor() {\nthis.offsets = [];\n@@ -79,7 +84,7 @@ const HEIGHTFIELD_SHADER = {\n},\nheightColorTex: {\ntype: 't',\n- value: new THREE.DataTexture(new Uint8Array(256*3), 256, 1, THREE.RGBFormat, THREE.UnsignedByteType, THREE.UVMapping, THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping, THREE.NearestFilter, THREE.NearestFilter, 1),\n+ value: null,\n},\n},\nvertexShader: `\\\n@@ -173,13 +178,13 @@ const HEIGHTFIELD_SHADER = {\nconst _makePotentials = () => {\nconst allocator = new Allocator();\n- const seed = rng();\n+ const seed = Math.floor(rng() * 0xFFFFFF);\nconst potentials = allocator.alloc(Float32Array, PARCEL_SIZE_P2 * PARCEL_SIZE_P2 * PARCEL_SIZE_P2);\nconst dims = allocator.alloc(Int32Array, 3);\ndims.set(Int32Array.from([PARCEL_SIZE_P2, PARCEL_SIZE_P2, PARCEL_SIZE_P2]));\nModule._doNoise2(\n- seed.offet,\n+ seed,\n0.02,\n4,\ndims.offset,\n@@ -286,11 +291,18 @@ const _makeChunkMesh = () => {\n},\n});\n- const stops = [\n- [0, 0xff7043],\n- [120, 0x64b5f6],\n- [200, 0x9ccc65],\n- ];\n+ const numStops = Math.floor(2 + rng() * 5);\n+ const stops = Array(numStops);\n+ const colorKeys = Object.keys(colors);\n+ for (let i = 0; i < numStops; i++) {\n+ const pos = i === 0 ? 0 : Math.floor(rng() *255);\n+ const colorIndex = colorKeys[Math.floor(rng() * colorKeys.length)];\n+ const color = colors[colorIndex];\n+ const col = parseInt('0x' + color[400].slice(1));\n+ stops[i] = [pos, col];\n+ }\n+ stops.sort((a, b) => a[0] - b[0]);\n+ heightfieldMaterial.uniforms.heightColorTex.value = new THREE.DataTexture(new Uint8Array(256*3), 256, 1, THREE.RGBFormat, THREE.UnsignedByteType, THREE.UVMapping, THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping, THREE.NearestFilter, THREE.NearestFilter, 1);\nstops.forEach((stop, i) => {\nconst [startIndex, colorValue] = stop;\nconst nextStop = stops[i+1] || null;\n@@ -341,9 +353,9 @@ window.addEventListener('mousedown', e => {\nchunkMesh.geometry.setIndex(new THREE.BufferAttribute(spec.indices, 1));\n});\n-for (let i = 0; i < 10; i++) {\n+for (let i = 0; i < 30; i++) {\nconst chunkMesh = _makeChunkMesh();\n- chunkMesh.position.set(-1 + rng()*2, -1 + rng()*2, -1 + rng()*2).multiplyScalar(30);\n+ chunkMesh.position.set(-1 + rng()*2, -1 + rng()*2, -1 + rng()*2).multiplyScalar(100);\nscene.add(chunkMesh);\n}\n",
        "chatgpt_cot": "\"Fix scoring algorithm in getColor and getFixing functions for draftbots.js\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/util.js b/__tests__/serverjs/util.js @@ -147,3 +147,9 @@ test(\"arraysEqual returns false for unequal arrays\", () => {\nconst result = util.arraysEqual(testArrayA, testArrayB);\nexpect(result).toBe(false);\n});\n+\n+test(\"CSVtoArray returns an array of the correct length when commas are included in values\", () => {\n+ const testCSV = '\"a,g\",\"b\",\"c\"';\n+ const result = util.CSVtoArray(testCSV);\n+ expect(result.length).toBe(3);\n+});\n\\ No newline at end of file\n",
        "org_msg": "add test for CSVtoArray",
        "sim_msg": "give hint what warnings were expected and which file\ncurrently if you \"break\" warnings you have no idea which ones where supposed to show\nor which module actually failed.",
        "sim_diff": "diff --git a/test/checkArrayExpectation.js b/test/checkArrayExpectation.js @@ -12,11 +12,12 @@ module.exports = function checkArrayExpectation(testDirectory, object, kind, fil\nreturn !/from UglifyJs/.test(item);\n});\nif(fs.existsSync(path.join(testDirectory, filename + \".js\"))) {\n- var expected = require(path.join(testDirectory, filename + \".js\"));\n+ var expectedFilename = path.join(testDirectory, filename + \".js\");\n+ var expected = require(expectedFilename);\nif(expected.length < array.length)\n- return done(new Error(\"More \" + kind + \"s while compiling than expected:\\n\\n\" + array.join(\"\\n\\n\"))), true;\n+ return done(new Error(\"More \" + kind + \"s while compiling than expected:\\n\\n\" + array.join(\"\\n\\n\") + \". Check expected warnings: \" + filename)), true;\nelse if(expected.length > array.length)\n- return done(new Error(\"Less \" + kind + \"s while compiling than expected:\\n\\n\" + array.join(\"\\n\\n\"))), true;\n+ return done(new Error(\"Less \" + kind + \"s while compiling than expected:\\n\\n\" + array.join(\"\\n\\n\") + \". Check expected warnings: \" + filename)), true;\nfor(var i = 0; i < array.length; i++) {\nif(Array.isArray(expected[i])) {\nfor(var j = 0; j < expected[i].length; j++) {\n",
        "chatgpt_cot": "Add test for CSVtoArray function to ensure correct length of array when commas are included in values."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -800,8 +800,7 @@ router.get('/playtest/:id', async (req, res) => {\nreturn res.status(404).render('misc/404', {});\n}\n- const userq = User.findById(cube.owner).exec();\n- const decksq = Deck.find(\n+ const decks = await Deck.find(\n{\ncube: cube._id,\n},\n@@ -813,8 +812,6 @@ router.get('/playtest/:id', async (req, res) => {\n.limit(10)\n.exec();\n- const [user, decks] = await Promise.all([userq, decksq]);\n-\ndelete cube.cards;\ndelete cube.decks;\ndelete cube.maybe;\n@@ -831,7 +828,7 @@ router.get('/playtest/:id', async (req, res) => {\nconst reactProps = {\ncube,\ncubeID: req.params.id,\n- canEdit: user._id.equals(cube.owner),\n+ canEdit: req.user._id.equals(cube.owner),\ndecks,\ndraftFormats,\n};\n",
        "org_msg": "Fix canEdit on playtest page.",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "Refactor cube_routes.js to use async/await for Deck.find, update user reference to req.user for canEdit check, and remove unnecessary Promise.all."
    },
    {
        "org_diff": "diff --git a/src/components/CardModalForm.js b/src/components/CardModalForm.js @@ -201,7 +201,7 @@ class CardModalForm extends Component {\n}\nrender() {\n- let { canEdit, children, ...props } = this.props;\n+ let { canEdit, setOpenCollapse, children, ...props } = this.props;\nreturn (\n<CardModalContext.Provider value={this.openCardModal}>\n{children}\n",
        "org_msg": "Fix react warning.",
        "sim_msg": "Update to have a down arrow on odyssey layout",
        "sim_diff": "diff --git a/src/components/layouts/LayoutOdyssey/index.js b/src/components/layouts/LayoutOdyssey/index.js @@ -130,7 +130,7 @@ class LayoutOdyssey extends Component {\nclassName=\"card-name\"\nonClick={() => this.setState({ changingCard: !changingCard })}\n>\n- {cardName}\n+ {cardName} <span style={{ float: \"right\" }}>&#9660;</span>\n</h2>\n</div>\n<CardFrame simulator={simulator} />\n",
        "chatgpt_cot": "\"Add setOpenCollapse prop to CardModalForm for better control over modal behavior.\""
    },
    {
        "org_diff": "diff --git a/src/components/analytics/Chart.js b/src/components/analytics/Chart.js -import React, { useState } from 'react';\n+import React from 'react';\nimport ChartComponent from 'react-chartjs-2';\n-import { Col, Row } from 'reactstrap';\n+import { Row } from 'reactstrap';\nimport PropTypes from 'prop-types';\n// Data should be:\n",
        "org_msg": "Fix linter errors in Chart.js.",
        "sim_msg": "Overlay scatter on lines",
        "sim_diff": "diff --git a/packages/component-library/src/LineChart/LineChart.js b/packages/component-library/src/LineChart/LineChart.js import React, { PropTypes } from 'react';\nimport { css } from 'emotion';\nimport {\n+ VictoryScatter,\nVictoryChart,\nVictoryLine,\nVictoryAxis,\n@@ -61,6 +62,11 @@ const LineChart = ({\nx=\"dataKey\"\ny=\"dataValue\"\n/>\n+ <VictoryScatter\n+ data={data.map(d => ({ dataKey: d[dataKey], dataValue: d[dataValue] }))}\n+ x=\"dataKey\"\n+ y=\"dataValue\"\n+ />\n</VictoryChart>\n</div>\n</div>\n",
        "chatgpt_cot": "\"Remove useState import and Col component, and update PropTypes in Chart.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -852,7 +852,7 @@ router.get('/list/:id', async function(req, res) {\nrouter.get('/playtest/:id', async (req, res) => {\ntry {\n- const cube = await Cube.findOne(build_id_query(req.params.id));\n+ const cube = await Cube.findOne(build_id_query(req.params.id)).lean();\nif (!cube) {\nreq.flash('danger', 'Cube not found');\n",
        "org_msg": "Fix custom draft title/description issue.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Add lean() method to Cube.findOne() to return a plain JavaScript object, fix Cube not found flash message bug."
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -94,6 +94,13 @@ function loadJSONFile(filename, attribute) {\n});\n}\n+function registerFileWatcher(filename, attribute) {\n+ fs.watchFile(filename, (curr, prev) => {\n+ console.log('File Changed: imagedict');\n+ loadJSONFile(filename, attribute)\n+ });\n+}\n+\nfunction initializeCardDb(dataRoot) {\nif (dataRoot === undefined) {\ndataRoot = \"private\";\n@@ -107,60 +114,14 @@ function initializeCardDb(dataRoot) {\n'imagedict.json': 'imagedict',\n'cardimages.json': 'cardimages'\n};\n- var promises = [];\n+ var promises = [],\n+ filepath, attribute;\nfor (var filename in fileToAttribute) {\n- promises.push(loadJSONFile(dataRoot + '/' + filename, fileToAttribute[filename]));\n+ filepath = dataRoot + '/' + filename;\n+ attribute = fileToAttribute[filename];\n+ promises.push(loadJSONFile(filepath, attribute));\n+ registerFileWatcher(filepath, attribute);\n}\n-\n- fs.watchFile(dataRoot + '/imagedict.json', (curr, prev) => {\n- console.log('File Changed: imagedict');\n- fs.readFile(dataRoot + '/imagedict.json', 'utf8', function(err, contents) {\n- data.imagedict = JSON.parse(contents);\n- console.log(\"imagedict reloaded\");\n- });\n- });\n- fs.watchFile(dataRoot + '/cardimages.json', (curr, prev) => {\n- console.log('File Changed: cardimages');\n- fs.readFile(dataRoot + '/cardimages.json', 'utf8', function(err, contents) {\n- data.cardimages = JSON.parse(contents);\n- console.log(\"cardimages reloaded\");\n- });\n- });\n- fs.watchFile(dataRoot + '/cardtree.json', (curr, prev) => {\n- console.log('File Changed: cardtree');\n- fs.readFile(dataRoot + '/cardtree.json', 'utf8', function(err, contents) {\n- data.cardtree = JSON.parse(contents);\n- console.log(\"cardtree reloaded\");\n- });\n- });\n- fs.watchFile(dataRoot + '/names.json', (curr, prev) => {\n- console.log('File Changed: names');\n- fs.readFile(dataRoot + '/names.json', 'utf8', function(err, contents) {\n- data.cardnames = JSON.parse(contents);\n- console.log(\"names reloaded\");\n- });\n- });\n- fs.watchFile(dataRoot + '/carddict.json', (curr, prev) => {\n- console.log('File Changed: carddict');\n- fs.readFile(dataRoot + '/carddict.json', 'utf8', function(err, contents) {\n- carddict = JSON.parse(contents);\n- console.log(\"carddict reloaded\");\n- });\n- });\n- fs.watchFile(dataRoot + '/nameToId.json', (curr, prev) => {\n- console.log('File Changed: nameToId');\n- fs.readFile(dataRoot + '/nameToId.json', 'utf8', function(err, contents) {\n- data.nameToId = JSON.parse(contents);\n- console.log(\"nameToId reloaded\");\n- });\n- });\n- fs.watchFile(dataRoot + '/full_names.json', (curr, prev) => {\n- console.log('File Changed: full_names');\n- fs.readFile(dataRoot + '/full_names.json', 'utf8', function(err, contents) {\n- data.full_names = JSON.parse(contents);\n- console.log(\"full_names reloaded\");\n- });\n- });\nreturn Promise.all(promises);\n}\n",
        "org_msg": "deduplicate file watching code",
        "sim_msg": "build: prevent error ENOTDIR when starting application [skip ci]\nSome OSes stores custom attribute in a specific files like `.DS_Store`.\n```sh\n(node:88679) UnhandledPromiseRejectionWarning: Error: ENOTDIR: not a directory, open 'packages/manager/apps/.DS_Store/package.json'\n```",
        "sim_diff": "diff --git a/scripts/start-application.js b/scripts/start-application.js @@ -37,11 +37,11 @@ const applicationsWorkspace = 'packages/manager/apps';\n* @return {Array} Applications' list.\n*/\nconst choices = () =>\n- readdirSync(applicationsWorkspace, {\n- withFileTypes: true,\n- }).map((application) => {\n+ readdirSync(applicationsWorkspace, { withFileTypes: true })\n+ .filter((dirent) => dirent.isDirectory())\n+ .map(({ name: application }) => {\nconst data = readFileSync(\n- `${applicationsWorkspace}/${application.name}/package.json`,\n+ `${applicationsWorkspace}/${application}/package.json`,\n'utf8',\n);\nconst { name } = JSON.parse(data);\n",
        "chatgpt_cot": "Add file watcher for JSON files and reload data on change to improve real-time updates in card database initialization."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -9,6 +9,8 @@ const toValue = (elo) => 10 ** (elo / 400);\nfunction addSeen(seen, cards) {\nfor (const card of cards) {\nconst colors = card.colors ?? card.details.colors ?? [];\n+ // We ignore colorless because they just reduce variance by\n+ // being in all color combinations.\nif (colors.length > 0) {\nfor (const comb of COLOR_COMBINATIONS) {\nif (arrayIsSubset(colors, comb)) {\n@@ -124,19 +126,32 @@ function botCardRating(botColors, card) {\n}\nconst considerInCombination = (combination) => (card) =>\n- arrayIsSubset(card.colors ?? card.details.color_identity ?? card.details.colors ?? [], combination);\n+ card && arrayIsSubset(card.colors ?? card.details.color_identity ?? card.details.colors ?? [], combination);\n+// We want to discourage playing more colors so they get less\n+// value the more colors, this gets offset by having more cards.\nconst COLOR_SCALING_FACTOR = [1, 1, 0.8, 0.6, 0.3, 0.2];\nconst botRatingAndCombination = (seen, card, picked, overallPool) => {\n+ // Find the color combination that gives us the highest score\n+ // that'll be the color combination we want to play currently.\nlet bestRating = -1;\nlet bestCombination = [];\nconst cardValue = card ? toValue(card.rating ?? 0) : 0;\nfor (const combination of COLOR_COMBINATIONS) {\n- const poolRating =\n- picked[combination.join('')] + (card && considerInCombination(combination)(card) ? cardValue : 0);\n+ // The sum of the values of all cards in our pool, possibly\n+ // plus the card we are considering.\n+ const poolRating = picked[combination.join('')] + (considerInCombination(combination)(card) ? cardValue : 0);\n+ // The sum of the values of all cards we've seen passed to\n+ // us times the number of times we've seen them.\nconst seenCount = seen?.[combination.join('')] ?? 1;\n+ // This is technically cheating, but looks at the set of\n+ // all cards dealt out to players to see what the trends\n+ // for colors are. This is in value as well.\nconst overallCount = overallPool?.[combination.join('')] || 1;\n+ // The ratio of seen to overall gives us an idea what is\n+ // being taken.\nconst openness = seenCount / overallCount;\n+ // We equally weight the factors to get a final score.\nconst rating = poolRating * seenCount * openness * COLOR_SCALING_FACTOR[combination.length];\nif (rating > bestRating) {\nbestRating = rating;\n",
        "org_msg": "Add comments to explain how the algorith works.",
        "sim_msg": "Fix ExactlyXCard Selector pretarget bug",
        "sim_diff": "diff --git a/server/game/CardSelectors/ExactlyXCardSelector.js b/server/game/CardSelectors/ExactlyXCardSelector.js @@ -18,9 +18,9 @@ class ExactlyXCardSelector extends BaseCardSelector {\nreturn selectedCards.length === this.numCards;\n}\n- hasEnoughTargets(context) {\n+ hasEnoughTargets(context, pretarget = false) {\nlet numMatchingCards = context.game.allCards.reduce((total, card) => {\n- if(this.canTarget(card, context)) {\n+ if(this.canTarget(card, context, pretarget)) {\nreturn total + 1;\n}\nreturn total;\n",
        "chatgpt_cot": "Refactor color combination logic and rating calculation in Draft.js for better card selection strategy and value assessment."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -939,7 +939,7 @@ router.get('/samplepack/:id/:seed', async (req, res) => {\ntitle: `${abbreviate(cube.name)} - Sample Pack`,\npack: pack.pack,\nseed: pack.seed,\n- cubeID: req.params.id,\n+ cube_id: req.params.id,\nactiveLink: 'playtest',\nmetadata: generateMeta(\n'Cube Cobra Sample Pack',\n",
        "org_msg": "Fix bad sample pack links.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Fix parameter naming convention in cube_routes.js. Changed \"cubeID\" to \"cube_id\" for consistency and readability."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -5,7 +5,7 @@ const carddb = require('../serverjs/cards');\nconst cardutil = require('../dist/utils/Card.js');\nconst { addPrices, GetPrices } = require('../serverjs/prices');\nconst Filter = require('../dist/utils/Filter');\n-var { getElo } = require('../serverjs/cubefn.js');\n+const { getElo } = require('../serverjs/cubefn.js');\nconst CardRating = require('../models/cardrating');\nconst Card = require('../models/card');\n@@ -39,9 +39,8 @@ async function matchingCards(filter) {\nconst firstPass = Filter.filterCardsDetails(cards, filter);\nconst withPrices = await addPrices(firstPass);\nreturn Filter.filterCardsDetails(withPrices, filter);\n- } else {\n- return cards;\n}\n+ return cards;\n}\nfunction makeFilter(filterText) {\n@@ -61,7 +60,7 @@ function makeFilter(filterText) {\n};\n}\n-async function topCards(filter, res) {\n+async function topCards(filter) {\nconst cards = await matchingCards(filter);\nconst nameMap = new Map();\nfor (const card of cards) {\n@@ -178,12 +177,12 @@ router.get('/topcards', async (req, res) => {\nrouter.get('/card/:id', async (req, res) => {\ntry {\n// if id is a cardname, redirect to the default version for that card\n- let possibleName = cardutil.decodeName(req.params.id);\n- let ids = carddb.getIdsFromName(possibleName);\n+ const possibleName = cardutil.decodeName(req.params.id);\n+ const ids = carddb.getIdsFromName(possibleName);\nif (ids) {\n- return res.redirect('/tool/card/' + carddb.getMostReasonable(possibleName)._id);\n+ return res.redirect(`/tool/card/${carddb.getMostReasonable(possibleName)._id}`);\n}\n- let card = carddb.cardFromId(req.params.id);\n+ const card = carddb.cardFromId(req.params.id);\nconst data = await Card.findOne({ cardName: card.name_lower });\nconst cubes = await Promise.all(\n@@ -193,19 +192,19 @@ router.get('/card/:id', async (req, res) => {\n);\nconst pids = carddb.nameToId[card.name_lower].map((id) => carddb.cardFromId(id).tcgplayer_id);\n- prices = await GetPrices(pids);\n+ const prices = await GetPrices(pids);\ncard.elo = (await getElo([card.name], true))[card.name];\n- res.render('tool/cardpage', {\n- card: card,\n- data: data,\n- prices: prices,\n- cubes: cubes,\n+ return res.render('tool/cardpage', {\n+ card,\n+ data,\n+ prices,\n+ cubes,\nrelated: data.cubedWith.map((name) => carddb.getMostReasonable(name[0])),\n});\n} catch (err) {\nconsole.error(err);\nreq.flash('danger', err.message);\n- res.redirect('/404');\n+ return res.redirect('/404');\n}\n});\n",
        "org_msg": "Squash eslint errors in tools_routes.",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "Fix compilation issue by changing variable declaration from var to const and adding async keyword to topCards function. Also, improved code readability by using template literals."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -7,6 +7,7 @@ const { GetPrices } = require('../serverjs/prices');\nconst { filterUses, makeFilter, filterCardsDetails } = require('../dist/filtering/FilterCards');\nconst { getElo } = require('../serverjs/cubefn.js');\nconst generateMeta = require('../serverjs/meta.js');\n+const util = require('../serverjs/util.js');\nconst CardHistory = require('../models/cardHistory');\nconst Cube = require('../models/cube');\n@@ -163,8 +164,7 @@ router.get('/topcards', async (req, res) => {\ntitle: 'Top Cards',\n});\n} catch (err) {\n- req.logger.error(err);\n- res.sendStatus(500);\n+ return util.handleRouteError(req, res, err, `/404`);\n}\n});\n",
        "org_msg": "Properly catch topcards error for analytics transition",
        "sim_msg": "feat: add product route for a shop",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,6 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"product\", \"/product/:slug\", \"product\")\n+ .add(\"product\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Add util.js and handleRouteError function to tools_routes.js to handle route errors and return a 404 error page."
    },
    {
        "org_diff": "diff --git a/src/utils/draftutil.js b/src/utils/draftutil.js @@ -379,7 +379,7 @@ export function calculateCustomAsfans(cards, cube, sort, draftFormat) {\nsum += 1 / matches.length;\n}\n}\n- total += sum / slot.length;\n+ total += (1-total) * sum / slot.length;\n}\nasfanDict[card.cardID] = total;\n}\n",
        "org_msg": "more accurate asfans",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "Adjust calculation of total asfan in draftutil.js to improve accuracy."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -320,9 +320,14 @@ describe('compareCubes', () => {\n});\nconst queryMock = jest.fn();\nqueryMock.mockReturnValue(queryMockPromise);\n- let cardsA = [cubefixture.exampleCube.cards[0], cubefixture.exampleCube.cards[1]];\n- let cardsB = [cubefixture.exampleCube.cards[1], cubefixture.exampleCube.cards[2]];\n- [cardsA, cardsB] = await cubefn.populateCardDetails([cardsA, cardsB], carddb, {});\n+ const cardsA = [cubefixture.exampleCube.cards[0], cubefixture.exampleCube.cards[1]];\n+ const cardsB = [cubefixture.exampleCube.cards[1], cubefixture.exampleCube.cards[2]];\n+ for (const card of cardsA) {\n+ card.details = { ...carddb.cardFromId(card.cardID) };\n+ }\n+ for (const card of cardsB) {\n+ card.details = { ...carddb.cardFromId(card.cardID) };\n+ }\nconst { inBoth, onlyA, onlyB, aNames, bNames, allCards } = await cubefn.compareCubes(cardsA, cardsB);\nexpect(inBoth.length).toBe(1);\nexpect(inBoth[0].cardID).toBe(cubefixture.exampleCube.cards[1].cardID);\n",
        "org_msg": "Fix tests to not use populateCardDetails.",
        "sim_msg": "address review and run prettier\naddress",
        "sim_diff": "diff --git a/test/BenchmarkTestCases.benchmark.js b/test/BenchmarkTestCases.benchmark.js @@ -76,10 +76,9 @@ describe(\"BenchmarkTestCases\", function() {\n}\nfunction doLoadWebpack() {\n- const baselineWebpack = require.requireActual(path.resolve(\n- baselinePath,\n- \"lib/webpack.js\"\n- ));\n+ const baselineWebpack = require.requireActual(\n+ path.resolve(baselinePath, \"lib/webpack.js\")\n+ );\nbaselines.push({\nname: baselineInfo.name,\nrev: baselineRevision,\n@@ -88,9 +87,10 @@ describe(\"BenchmarkTestCases\", function() {\ncallback();\n}\n},\n- (err) => {\n+ err => {\nif (err) {\ndone(err);\n+ return;\n}\ncreateTests();\ndone();\n@@ -101,11 +101,11 @@ describe(\"BenchmarkTestCases\", function() {\nafterAll(() => {\nremove(baselinesPath);\n- })\n+ });\nfunction getBaselineRevs(rootPath, callback) {\nconst git = require(\"simple-git\")(rootPath);\n- const lastVersionTag = \"v\" + require.requireActual(\"../package.json\").version;\n+ const lastVersionTag = \"v\" + require(\"../package.json\").version;\ngit.raw([\"rev-list\", \"-n\", \"1\", lastVersionTag], (err, resultVersion) => {\nif (err) return callback(err);\nconst matchVersion = /^([a-f0-9]+)\\s*$/.exec(resultVersion);\n@@ -289,7 +289,10 @@ describe(\"BenchmarkTestCases\", function() {\n`baseline-${baseline.name}`,\ntestName\n);\n- const config = require.requireActual(path.join(testDirectory, \"webpack.config.js\")) || {}\n+ const config =\n+ require.requireActual(\n+ path.join(testDirectory, \"webpack.config.js\")\n+ ) || {};\nconfig.output = config.output || {};\nif (!config.context) config.context = testDirectory;\nif (!config.output.path) config.output.path = outputDirectory;\n@@ -314,7 +317,10 @@ describe(\"BenchmarkTestCases\", function() {\n`baseline-${baseline.name}`,\ntestName\n);\n- const config = require.requireActual(path.join(testDirectory, \"webpack.config.js\")) || {};\n+ const config =\n+ require.requireActual(\n+ path.join(testDirectory, \"webpack.config.js\")\n+ ) || {};\nconfig.output = config.output || {};\nif (!config.context) config.context = testDirectory;\nif (!config.output.path) config.output.path = outputDirectory;\n@@ -339,7 +345,9 @@ describe(\"BenchmarkTestCases\", function() {\nbaselineStats.text\n}) (90% confidence)`\n);\n- } else if (baselineStats.minConfidence > headStats.maxConfidence) {\n+ } else if (\n+ baselineStats.minConfidence > headStats.maxConfidence\n+ ) {\nconsole.log(\n`======> HEAD is ${Math.round(\nbaselineStats.mean / headStats.mean * 100 - 100\n",
        "chatgpt_cot": "\"Refactor populateCardDetails function to use carddb.cardFromId for card details retrieval and improve code readability and maintainability\""
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -225,7 +225,7 @@ function maybeCards(cube, carddb) {\nreturn maybe.map((card) => ({ ...card, details: carddb.cardFromId(card.cardID) }));\n}\n-async function getCardElo(cardname) {\n+async function getCardElo(cardname, round) {\nconst rating = await CardRating.findOne({ name: { $regex: new RegExp(cardname, 'i') } });\nif (!rating || Number.isNaN(rating.elo)) {\n",
        "org_msg": "Fixed nodef error",
        "sim_msg": "Serve additional card data",
        "sim_diff": "diff --git a/server/services/CardService.js b/server/services/CardService.js @@ -25,7 +25,7 @@ class CardService {\n_.each(result, card => {\nif(options && options.shortForm) {\n- cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'unicity', 'influence_cost', 'pack_cards');\n+ cards[card.id] = _.pick(card, 'id', 'name', 'type', 'clan', 'side', 'deck_limit', 'element', 'unicity', 'influence_cost', 'influence_pool', 'pack_cards');\n} else {\ncards[card.id] = card;\n}\n",
        "chatgpt_cot": "Add round parameter to getCardElo function for improved card rating retrieval."
    },
    {
        "org_diff": "diff --git a/public/css/stylesheet.css b/public/css/stylesheet.css @@ -465,10 +465,15 @@ body.busy-cursor {\ntext-align: center;\n}\n-.markdown .centered-markdown .card-image {\n+.markdown .centered-markdown > .card-image,\n+.markdown .centered-markdown :not(.cardRow) > .card-image {\nmargin: auto;\n}\n+.markdown .centered-markdown .cardRow {\n+ justify-content: center;\n+}\n+\n.markdown .quote {\nbackground-color: var(--bg-dark);\n}\n",
        "org_msg": "centered card row now centers cards instead of spreading them evenly across the line",
        "sim_msg": "Add css for search box",
        "sim_diff": "diff --git a/src/web/stylesheets/layout/_io.css b/src/web/stylesheets/layout/_io.css #btn-next-input-tab,\n-#btn-go-to-input-tab,\n+#btn-input-tab-dropdown,\n#btn-next-output-tab,\n#btn-go-to-output-tab {\nfloat: right;\n#magic svg path {\nfill: var(--primary-font-colour);\n}\n+\n+#input-search-results {\n+ list-style: none;\n+ width: fit-content;\n+ margin-left: auto;\n+ margin-right: auto;\n+}\n+\n+#input-search-results li {\n+ padding-left: 5px;\n+ padding-right: 5px;\n+ padding-top: 10px;\n+ padding-bottom: 10px;\n+ text-align: center;\n+ transition: 0.25s ease all;\n+ width: 100%;\n+ background: var(--secondary-background-colour);\n+}\n+\n+#input-search-results li:hover {\n+ cursor: pointer;\n+ background: var(--primary-background-colour);\n+}\n",
        "chatgpt_cot": "\"Add centering for card images in markdown\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2101,17 +2101,17 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\n// remove id\nconst [indexOutStr, outID] = edit.substring(1).split('$');\nconst indexOut = parseInt(indexOutStr, 10);\n+\nif (!Number.isInteger(indexOut) || indexOut < 0 || indexOut >= cube.cards.length) {\n- req.flash('danger', 'Bad request format.');\n- return res.redirect(`/cube/list/${req.params.id}`);\n- }\n- removes.add(indexOut);\n+ req.flash('danger', `Unable to remove card due to invalid index: ${carddb.cardFromId(outID).name}`);\n+ } else {\nconst card = cube.cards[indexOut];\nif (card.cardID === outID) {\n+ removes.add(indexOut);\nchangelog += removeCardHtml(carddb.cardFromId(card.cardID));\n} else {\n- req.flash('danger', 'Bad request format.');\n- return res.redirect(`/cube/list/${req.params.id}`);\n+ req.flash('danger', `Unable to remove card due outdated index: ${carddb.cardFromId(outID).name}`);\n+ }\n}\n} else if (edit.charAt(0) === '/') {\nconst [outStr, idIn] = edit.substring(1).split('>');\n@@ -2125,19 +2125,20 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\nconst [indexOutStr, outID] = outStr.split('$');\nconst indexOut = parseInt(indexOutStr, 10);\nif (!Number.isInteger(indexOut) || indexOut < 0 || indexOut >= cube.cards.length) {\n- req.flash('danger', 'Bad request format.');\n- return res.redirect(`/cube/list/${req.params.id}`);\n- }\n- removes.add(indexOut);\n+ req.flash('danger', `Unable to replace card due to invalid index: ${carddb.cardFromId(outID).name}`);\n+ changelog += addCardHtml(detailsIn);\n+ } else {\nconst cardOut = cube.cards[indexOut];\nif (cardOut.cardID === outID) {\n+ removes.add(indexOut);\nchangelog += replaceCardHtml(carddb.cardFromId(cardOut.cardID), detailsIn);\n} else {\n- req.flash('danger', 'Bad request format.');\n- return res.redirect(`/cube/list/${req.params.id}`);\n+ req.flash('danger', `Unable to replace card due outdated index: ${carddb.cardFromId(outID).name}`);\n+ changelog += addCardHtml(detailsIn);\n+ }\n}\n} else {\n- req.flash('danger', 'Bad request format.');\n+ req.flash('danger', 'Bad request format, all operations must be add, remove, or replace.');\nreturn res.redirect(`/cube/list/${req.params.id}`);\n}\n}\n",
        "org_msg": "Add better fail cases for cube edits",
        "sim_msg": "* Fixing an edge case causing bulk drag to fail, and a failed drag no longer floods the inventory with bad items.",
        "sim_diff": "diff --git a/src/module/actor/actor-inventory.js b/src/module/actor/actor-inventory.js @@ -248,6 +248,11 @@ export async function moveItemBetweenActorsAsync(sourceActor, itemToMove, target\n/** Ensure the original to-move item has the quantity correct. */\nitemData[0].data.quantity = quantity;\n+ if (itemData.length != items.length) {\n+ console.log(['Mismatch in item count', itemData, items]);\n+ return;\n+ }\n+\nconst createOwnedItemResult = await targetActor.createOwnedItem(itemData);\nconst createResult = createOwnedItemResult instanceof Array ? createOwnedItemResult : [createOwnedItemResult];\nif (targetActor.actor?.sheet) {\n@@ -257,19 +262,51 @@ export async function moveItemBetweenActorsAsync(sourceActor, itemToMove, target\ntargetActor.token.sheet.stopRendering = false;\n}\n+ if (createResult.length != items.length) {\n+ console.log(['Mismatch in item count after creating', createResult, items]);\n+ const deleteIds = createResult.map(x => x._id);\n+ return targetActor.deleteOwnedItem(deleteIds);\n+ }\n+\nconst updatesToPerform = [];\nfor (let i = 0; i<items.length; i++) {\nconst itemToTest = items[i];\nconst itemToUpdate = createResult[i];\nif (itemToTest.children && itemToTest.children.length > 0) {\n- const indexMap = itemToTest.item.data.container.contents.map(x => items.indexOf(items.find(y => y.item._id == x.id)));\n- const newContents = duplicate(itemToUpdate.data.container.contents);\n+ const indexMap = itemToTest.item.data.container.contents.map(x => {\n+ const foundItem = items.find(y => y.item._id === x.id);\n+ const foundItemIndex = items.indexOf(foundItem);\n+ return foundItemIndex;\n+ });\n+ let newContents = duplicate(itemToUpdate.data.container.contents);\nfor (let j = 0; j<indexMap.length; j++) {\nconst index = indexMap[j];\n+ if (index === -1) {\n+ newContents[j].id = \"deleteme\";\n+ continue;\n+ }\n+\n+ try {\nnewContents[j].id = createResult[index]._id;\n+ } catch (error) {\n+ console.log({\n+ index: index,\n+ items: items,\n+ createResult: createResult,\n+ itemToTest: itemToTest,\n+ itemToUpdate: itemToUpdate,\n+ indexMap: indexMap\n+ });\n+ const deleteIds = createResult.map(x => x._id);\n+ await targetActor.deleteOwnedItem(deleteIds);\n+ throw error;\n}\n+ }\n+\n+ newContents = newContents.filter(x => x.id !== \"deleteme\");\n+\nupdatesToPerform.push({ _id: itemToUpdate._id, 'data.container.contents': newContents});\n}\n}\n",
        "chatgpt_cot": "fix error handling and add flash messages for invalid and outdated index during card removal and replacement in cube_routes."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1290,7 +1290,7 @@ async function bulkUpload(req, res, list, cube) {\ncards.push(item.substring(item.indexOf('x') + 1));\n}\n} else {\n- let selected;\n+ let selected = null;\nif (/(.*)( \\((.*)\\))/.test(item)) {\n// has set info\nconst name = item.substring(0, item.indexOf('('));\n@@ -1303,7 +1303,8 @@ async function bulkUpload(req, res, list, cube) {\n}\n} else {\n// does not have set info\n- selected = carddb.getMostReasonable(item, cube.defaultPrinting)._id;\n+ const selectedCard = carddb.getMostReasonable(item, cube.defaultPrinting);\n+ selected = selectedCard ? selectedCard._id : null;\n}\nif (selected) {\nconst details = carddb.cardFromId(selected);\n",
        "org_msg": "Fix bulk upload missing cards route.",
        "sim_msg": "Cleanly error out on unknown uploads",
        "sim_diff": "diff --git a/util.js b/util.js @@ -815,7 +815,7 @@ export const handleUpload = async (\nonProgress = null,\n} = {}\n) => {\n- console.log('uploading...');\n+ console.log('uploading...', item);\nconst _uploadObject = async item => {\nlet u;\n@@ -853,7 +853,9 @@ export const handleUpload = async (\nconst s = await new Promise((accept, reject) => {\nitem.getAsString(accept);\n});\n- const j = JSON.parse(s);\n+ const j = jsonParse(s);\n+\n+ if (j?.asset_contract?.address) {\nconst {token_id, asset_contract} = j;\nconst {address} = asset_contract;\n@@ -906,6 +908,9 @@ export const handleUpload = async (\n}\n}\n}\n+ } else {\n+ console.warn('not uploading unknown json object', j);\n+ }\n} else if (entry.isDirectory) {\nconst formData = new FormData();\n",
        "chatgpt_cot": "Refactor bulkUpload function in cube_routes.js to handle card selection more efficiently and avoid potential null reference issues."
    },
    {
        "org_diff": "diff --git a/src/pages/BrowsePackagesPage.js b/src/pages/BrowsePackagesPage.js @@ -59,6 +59,11 @@ const BrowsePackagesPage = ({ user, loginCallback }) => {\nsetRefresh(true);\n};\n+ const changeTab = (i) => {\n+ setPage(0);\n+ setSelectedTab(i);\n+ };\n+\nuseEffect(() => {\nconst fetchData = async () => {\nif (refresh) {\n@@ -164,14 +169,14 @@ const BrowsePackagesPage = ({ user, loginCallback }) => {\n</Row>\n</div>\n<Nav tabs>\n- <Tab tab={selectedTab} setTab={setSelectedTab} index=\"0\">\n+ <Tab tab={selectedTab} setTab={changeTab} index=\"0\">\nApproved\n</Tab>\n- <Tab tab={selectedTab} setTab={setSelectedTab} index=\"1\">\n+ <Tab tab={selectedTab} setTab={changeTab} index=\"1\">\nSubmitted\n</Tab>\n{user && (\n- <Tab tab={selectedTab} setTab={setSelectedTab} index=\"2\">\n+ <Tab tab={selectedTab} setTab={changeTab} index=\"2\">\nYour Packages\n</Tab>\n)}\n",
        "org_msg": "reset page on tab change",
        "sim_msg": "add: refactor add to home prompt handling",
        "sim_diff": "diff --git a/src/components/common/view/AddWebApp.web.js b/src/components/common/view/AddWebApp.web.js @@ -153,8 +153,8 @@ const AddWebApp = props => {\n])\n}\n- const installApp = async () => {\n- installPrompt.prompt()\n+ const handleUserPromptChoice = async () => {\n+ try {\nlet outcome = await installPrompt.userChoice\nif (outcome.outcome == 'accepted') {\nfireEvent(ADDTOHOME_OK)\n@@ -163,6 +163,9 @@ const AddWebApp = props => {\nfireEvent(ADDTOHOME_REJECTED)\nlog.debug('App not installed')\n}\n+ } catch (e) {\n+ log.error('prompt user choice failed', e.message, e)\n+ }\n// Remove the event reference\nstore.set('installPrompt')(null)\n@@ -170,7 +173,13 @@ const AddWebApp = props => {\nconst handleInstallApp = () => {\nif (installPrompt) {\n- installApp()\n+ //calling prompt from a non async context, async may happen to cause browser to say its not from user gesture\n+ installPrompt\n+ .prompt()\n+ .then(_ => handleUserPromptChoice())\n+ .catch(e => {\n+ log.error('prompt display failed', e.message, e)\n+ })\n} else if (isMobileSafari) {\nAsyncStorage.setItem('GD_AddWebAppIOSAdded', true)\nshowExplanationDialog()\n",
        "chatgpt_cot": "Add new function changeTab to handle tab changes, replacing setSelectedTab with changeTab for better code organization and readability in BrowsePackagesPage."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/util.js b/__tests__/serverjs/util.js @@ -93,3 +93,22 @@ test(\"addCardToCube adds a well-formed object\", () => {\nexpect(result.addedTmsp).toBe(addedTmsp);\nexpect(result.imgUrl).toBe(undefined);\n});\n+\n+test(\"addCardToCube allows card id to be overridden\", () => {\n+ var testCube = {\n+ \"cards\": []\n+ };\n+ var initialLength = testCube.cards.length;\n+ const testCard = {\n+ color_identity: \"W\",\n+ cmc: 1,\n+ _id: \"abcdef\",\n+ type: \"creature\"\n+ };\n+ const addedTmsp = new Date();\n+ const idOverride = \"new id ___\";\n+ util.addCardToCube(testCube, testCard, idOverride, addedTmsp);\n+ expect(testCube.cards.length).toBe(initialLength + 1);\n+ const result = testCube.cards[0];\n+ expect(result.cardID).toBe(idOverride);\n+});\n\\ No newline at end of file\n",
        "org_msg": "add test for idOverride in addCardToCube",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "\"Add test for addCardToCube method with overridden card id\""
    },
    {
        "org_diff": "diff --git a/src/util/Filter.js b/src/util/Filter.js @@ -626,17 +626,15 @@ function filterApply(card, filter, inCube) {\n}\n}\nif (filter.category == 'tag') {\n- res = card.tags.some((element) => {\n+ res = card.tags && card.tags.some((element) => {\nreturn element.toLowerCase() == filter.arg.toLowerCase();\n});\n}\nif (filter.category == 'finish') {\n- return card.finish.toLowerCase() === filter.arg.toLowerCase();\n+ res = card.finish && card.finish.toLowerCase() === filter.arg.toLowerCase();\n}\nif (filter.category == 'status') {\n- if (card.status.toLowerCase() == filter.arg.toLowerCase()) {\n- res = true;\n- }\n+ res = card.status && card.status.toLowerCase() == filter.arg.toLowerCase()\n}\nif (filter.category == 'price') {\n@@ -647,8 +645,8 @@ function filterApply(card, filter, inCube) {\nprice = card.details.price_foil;\n}\nif (price) {\n- price = parseInt(price, 10);\n- let arg = parseInt(filter.arg, 10);\n+ price = parseFloat(price, 10);\n+ let arg = parseFloat(filter.arg, 10);\nswitch (filter.operand) {\ncase ':':\ncase '=':\n@@ -674,8 +672,8 @@ function filterApply(card, filter, inCube) {\nif (filter.category == 'pricefoil') {\nvar price = card.details.price_foil || null;\nif (price) {\n- price = parseInt(price, 10);\n- let arg = parseInt(filter.arg, 10);\n+ price = parseFloat(price, 10);\n+ let arg = parseFloat(filter.arg, 10);\nswitch (filter.operand) {\ncase ':':\ncase '=':\n",
        "org_msg": "Fix crash on Top Cards tags filter.",
        "sim_msg": "escape parens",
        "sim_diff": "diff --git a/scripts/filterToRule.js b/scripts/filterToRule.js @@ -80,7 +80,7 @@ function parseFilter (filterOrig) {\nfilter = filter.replace(/\\|\\|/,'')\n// escape some chars for json\n- filter = filter.replace(/(\\/|\\?|\\.)/g,'\\\\$1')\n+ filter = filter.replace(/(\\(|\\)|\\/|\\?|\\.)/g,'\\\\$1')\n// ending ^\nfilter = filter.replace(/\\^$/, '($|[?/])')\n@@ -91,8 +91,6 @@ function parseFilter (filterOrig) {\n// single wild card\nfilter = filter.replace(/([^\\.\\^])\\*/g, '$1.*')\n- console.log(filter)\n-\n// make sure this is a valid regex\nassert.doesNotThrow(() => new RegExp(filter))\n",
        "chatgpt_cot": "\"Fix type conversion issue in Filter.js to handle price and pricefoil categories, ensuring proper comparison and filtering based on float values.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -833,7 +833,8 @@ router.get('/analysis/:id', function(req, res) {\n});\nrouter.get('/samplepack/:id', function(req, res) {\n- Cube.findOne(build_id_query(req.params.id), function(err, cube) {\n+ res.redirect('/cube/samplepack/'+req.params.id+'/'+Date.now().toString());\n+ /*Cube.findOne(build_id_query(req.params.id), function(err, cube) {\nif (err) {\nreq.flash('danger', 'Cube not found');\nres.status(404).render('misc/404', {});\n@@ -861,7 +862,7 @@ router.get('/samplepack/:id', function(req, res) {\n}\n});\n}\n- });\n+ });*/\n});\nrouter.get('/samplepack/:id/:seed', function(req, res) {\n",
        "org_msg": "Link goes directly to deterministic link",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Fix redirection issue in cube_routes.js to resolve cube not found error and display 404 page when error occurs.\""
    },
    {
        "org_diff": "diff --git a/src/pages/DashboardPage.js b/src/pages/DashboardPage.js @@ -26,7 +26,7 @@ const DashboardPage = ({ posts, cubes, decks, canEdit, userId }) => (\n) : (\n<p className=\"m-2\">\nYou don't have any cubes.{' '}\n- <Button tag=\"button\" data-toggle=\"modal\" data-target=\"#cubeModal\" color=\"success\">\n+ <Button data-toggle=\"modal\" data-target=\"#cubeModal\" color=\"success\">\nAdd a new cube?\n</Button>\n</p>\n",
        "org_msg": "fixed add first cube button to be green",
        "sim_msg": "Update Section Row with align items prop",
        "sim_diff": "diff --git a/src/components/dashboard/Dashboard.js b/src/components/dashboard/Dashboard.js @@ -180,7 +180,7 @@ const Dashboard = props => {\n</Section.Stack>\n</Section.Row>\n)}\n- <Section.Row style={styles.buttonsRow}>\n+ <Section.Row style={styles.buttonsRow} alignItems=\"stretch\">\n<PushButton\nrouteName={'Send'}\nscreenProps={screenProps}\n@@ -226,7 +226,6 @@ const Dashboard = props => {\nconst styles = StyleSheet.create({\nbuttonsRow: {\n- alignItems: 'stretch',\nmarginVertical: normalize(8)\n},\nleftButton: {\n",
        "chatgpt_cot": "\"Refactor DashboardPage.js to remove redundant tag attribute in Add Cube button.\""
    },
    {
        "org_diff": "diff --git a/src/pages/MarkdownPage.js b/src/pages/MarkdownPage.js @@ -751,9 +751,11 @@ const MarkdownPage = ({ user, loginCallback }) => (\n<Card>\n<CardHeader>Source</CardHeader>\n<CardBody>\n- <code>{`>>>`}</code> <br />\n- <code>### Centered heading</code> <br />\n- <code>{`<<<`}</code>\n+ <code>\n+ {`>>>`} <br />\n+ ### Centered heading <br />\n+ {`<<<`}\n+ </code>\n</CardBody>\n</Card>\n</Col>\n@@ -761,7 +763,8 @@ const MarkdownPage = ({ user, loginCallback }) => (\n<Card>\n<CardHeader>Result</CardHeader>\n<CardBody>\n- <MagicMarkdown markdown={`>>>\n+ <MagicMarkdown\n+ markdown={`>>>\n#### Centered heading\n<<<`}\n/>\n@@ -775,12 +778,12 @@ const MarkdownPage = ({ user, loginCallback }) => (\n<CardHeader>Source</CardHeader>\n<CardBody>\n<code>\n- <code>{`>>>`}</code> <br />\n- <code>Centered paragraph</code> <br />\n- <code>spanning</code> <br />\n- <code>multiple</code> <br />\n- <code>lines</code> <br />\n- <code>{`<<<`}</code> <br />\n+ {`>>>`} <br />\n+ Centered paragraph <br />\n+ spanning <br />\n+ multiple <br />\n+ lines <br />\n+ {`<<<`} <br />\n</code>\n</CardBody>\n</Card>\n@@ -789,7 +792,8 @@ const MarkdownPage = ({ user, loginCallback }) => (\n<Card>\n<CardHeader>Result</CardHeader>\n<CardBody>\n- <MagicMarkdown markdown={`>>>\n+ <MagicMarkdown\n+ markdown={`>>>\nCentered paragraph\nspanning\nmultiple\n",
        "org_msg": "Clean up markdown centering documentation",
        "sim_msg": "allow raw html in markdown",
        "sim_diff": "diff --git a/src/components/Widgets/Markdown/unified.js b/src/components/Widgets/Markdown/unified.js @@ -7,29 +7,29 @@ import htmlToRehype from 'rehype-parse';\nimport rehypeToRemark from 'rehype-remark';\nimport remarkToMarkdown from 'remark-stringify';\nimport rehypeSanitize from 'rehype-sanitize';\n+import rehypeReparse from 'rehype-raw';\nimport rehypeMinifyWhitespace from 'rehype-minify-whitespace';\n-const remarkParseConfig = { fences: true };\n-const remarkStringifyConfig = { listItemIndent: '1', fences: true };\n-const rehypeParseConfig = { fragment: true };\n/**\n* Remove empty nodes, including the top level parents of deeply nested empty nodes.\n*/\nconst rehypeRemoveEmpty = () => {\nconst isVoidElement = node => ['img', 'hr'].includes(node.tagName);\n- const isNonEmptyText = node => node.type === 'text' && node.value;\n+ const isNonEmptyLeaf = node => ['text', 'raw'].includes(node.type) && node.value;\nconst isNonEmptyNode = node => {\n- return isVoidElement(node) || isNonEmptyText(node) || find(node.children, isNonEmptyNode);\n+ return isVoidElement(node)\n+ || isNonEmptyLeaf(node)\n+ || find(node.children, isNonEmptyNode);\n};\nconst transform = node => {\n- if (isVoidElement(node) || isNonEmptyText(node)) {\n+ if (isVoidElement(node) || isNonEmptyLeaf(node)) {\nreturn node;\n}\nif (node.children) {\nnode.children = node.children.reduce((acc, childNode) => {\n- if (isVoidElement(childNode) || isNonEmptyText(childNode)) {\n+ if (isVoidElement(childNode) || isNonEmptyLeaf(childNode)) {\nreturn acc.concat(childNode);\n}\nreturn find(childNode.children, isNonEmptyNode) ? acc.concat(transform(childNode)) : acc;\n@@ -91,12 +91,13 @@ const rehypePaperEmoji = () => {\nexport const markdownToHtml = markdown => {\nconst result = unified()\n- .use(markdownToRemark, remarkParseConfig)\n- .use(remarkToRehype)\n+ .use(markdownToRemark, { fences: true })\n+ .use(remarkToRehype, { allowDangerousHTML: true })\n+ .use(rehypeReparse)\n.use(rehypeRemoveEmpty)\n.use(rehypeSanitize)\n.use(rehypeMinifyWhitespace)\n- .use(rehypeToHtml)\n+ .use(rehypeToHtml, { allowDangerousHTML: true })\n.processSync(markdown)\n.contents;\nreturn result;\n@@ -104,14 +105,14 @@ export const markdownToHtml = markdown => {\nexport const htmlToMarkdown = html => {\nconst result = unified()\n- .use(htmlToRehype, rehypeParseConfig)\n+ .use(htmlToRehype, { fragment: true })\n.use(rehypePaperEmoji)\n.use(rehypeSanitize)\n.use(rehypeRemoveEmpty)\n.use(rehypeMinifyWhitespace)\n.use(rehypeToRemark)\n.use(remarkNestedList)\n- .use(remarkToMarkdown, remarkStringifyConfig)\n+ .use(remarkToMarkdown, { listItemIndent: '1', fences: true })\n.processSync(html)\n.contents;\nreturn result;\n",
        "chatgpt_cot": "\"Update MarkdownPage.js to fix rendering issue. The code changes modify the markdown format to resolve the rendering issue in the MarkdownPage component.\""
    },
    {
        "org_diff": "diff --git a/src/utils/Util.js b/src/utils/Util.js @@ -193,7 +193,11 @@ export function isInternalURL(to) {\nexport function isSamePageURL(to) {\ntry {\nconst url = new URL(to, window.location.origin);\n- return url.hostname === window.location.hostname && url.pathname === window.location.pathname;\n+ return (\n+ url.hostname === window.location.hostname &&\n+ url.pathname === window.location.pathname &&\n+ url.search === window.location.search\n+ );\n} catch {\nreturn false;\n}\n",
        "org_msg": "check query param equality",
        "sim_msg": "Add createRelativeUrl method to util.js",
        "sim_diff": "diff --git a/util.js b/util.js @@ -819,6 +819,16 @@ export const proxifyUrl = u => {\nreturn u;\n}\n};\n+export const createRelativeUrl = (u, baseUrl) => {\n+ if (/^(?:[\\.\\/]|([a-z0-9]+):\\/\\/)/i.test(u)) {\n+ return u;\n+ } else {\n+ if (!/([a-z0-9]+):\\/\\//i.test(baseUrl)) {\n+ baseUrl = new URL(baseUrl, window.location.href).href;\n+ }\n+ return new URL(u, baseUrl).href;\n+ }\n+};\nexport const getDropUrl = o => {\nlet u = null;\nif (typeof o?.start_url === 'string') {\n",
        "chatgpt_cot": "Add search parameter check in isSamePageURL function to ensure URL comparison includes search parameters for internal pages."
    },
    {
        "org_diff": "diff --git a/views/info/filters.pug b/views/info/filters.pug @@ -232,7 +232,7 @@ block content\ntd(scope=\"col\") #[code price>10.5]\ntd(scope=\"col\") All non-foil cards with a price over $10.50.\ntr\n- td(scope=\"col\") #[code foilPrice<10 OR price<10]\n+ td(scope=\"col\") #[code priceFoil<10 OR price<10]\ntd(scope=\"col\") All cards with a price under $10.\n.card\n#collapseMiscellaneous-syntax.card-header(data-toggle=\"collapse\" data-target=\"#collapseMiscellaneous\" aria-expanded=\"true\" aria-controls=\"collapseMiscellaneous\")\n",
        "org_msg": "Update views/info/filters.pug",
        "sim_msg": "Fix two faq fragements",
        "sim_diff": "diff --git a/layouts/partials/fragments/faq.html b/layouts/partials/fragments/faq.html {{- if not (in .Name \"/index.md\") -}}\n{{- $item := .Params }}\n{{- $card_header_id := printf \"%s\" (strings.TrimSuffix \".md\" (replace .Name (printf \"%s/\" $.Name) \"\")) }}\n- {{- $collapse_id := printf \"%s-collapse\" (strings.TrimSuffix \".md\" (replace .Name (printf \"%s/\" $.Name) \"\")) }}\n+ {{- $collapse_id := printf \"%s%s\" $.Name (printf \"%s-collapse\" (strings.TrimSuffix \".md\" (replace .Name (printf \"%s/\" $.Name) \"\"))) }}\n<div class=\"card\">\n<div id=\"{{ $card_header_id }}\" class=\"card-header\" data-toggle=\"collapse\" data-target=\"#{{ $collapse_id }}\"\naria-expanded=\"false\" aria-controls=\"{{ $collapse_id }}\">\n",
        "chatgpt_cot": "\"Update filter condition for non-foil cards in filters.pug to use correct variable name, fixing incorrect comparison.\""
    },
    {
        "org_diff": "diff --git a/nearley/values.ne b/nearley/values.ne @@ -61,9 +61,12 @@ const reversedSetOperation = (op, value) => {\ncolorCombinationOpValue -> anyOperator colorCombinationValue {% ([op, value]) => { const operation = setOperation(op, value); return (fieldValue) => operation(normalizeCombination(fieldValue)); } %}\n| anyOperator integerValue {% ([op, value]) => { const operation = defaultOperation(op, value); return (fieldValue) => operation(normalizeCombination(fieldValue).length); } %}\n+ | anyOperator \"m\"i {% ([op]) => { const operation = defaultOperation(op, 2); return (fieldValue) => operation(normalizeCombination(fieldValue).length); } %}\ncolorIdentityOpValue -> anyOperator colorCombinationValue {% ([op, value]) => { const operation = reversedSetOperation(op, value); return (fieldValue) => operation(normalizeCombination(fieldValue)); } %}\n| anyOperator integerValue {% ([op, value]) => { const operation = defaultOperation(op, value); return (fieldValue) => operation(normalizeCombination(fieldValue).length); } %}\n+ | (\"=\" | \":\") \"m\"i {% ([op]) => { normalizeCombination(fieldValue).length > 1; } %}\n+ | (\"!=\" | \"<>\") \"m\"i {% ([op]) => { normalizeCombination(fieldValue).length < 2; } %}\ncomb1[A] -> null {% () => [] %}\n| $A {% (comb) => comb %}\n",
        "org_msg": "Add multicolor support to color identity and colors.",
        "sim_msg": "add map reduce tests",
        "sim_diff": "diff --git a/test-complete/nodejs-optic-from-literals.js b/test-complete/nodejs-optic-from-literals.js @@ -241,4 +241,85 @@ describe('Node.js Optic from literals test', function(){\ndone();\n}, done);\n});\n+\n+ it('TEST 7 - with mapper', function(done){\n+ const plan1 =\n+ op.fromLiterals([\n+ {rowId: 1, colorId_shape: 1, desc: 'ball'},\n+ {rowId: 2, colorId_shape: 2, desc: 'square'},\n+ {rowId: 3, colorId_shape: 1, desc: 'box'},\n+ {rowId: 4, colorId_shape: 1, desc: 'hoop'},\n+ {rowId: 5, colorId_shape: 5, desc: 'circle'}\n+ ]);\n+\n+ const plan2 =\n+ op.fromLiterals([\n+ {colorId: 1, colorDesc: 'red'},\n+ {colorId: 2, colorDesc: 'blue'},\n+ {colorId: 3, colorDesc: 'black'},\n+ {colorId: 4, colorDesc: 'yellow'}\n+ ]);\n+ const output =\n+ plan1.joinInner(\n+ plan2, op.on(op.col('colorId_shape'), op.col('colorId'))\n+ )\n+ .select([\n+ 'rowId',\n+ op.as('description', op.col('desc')),\n+ op.as('myColorId', op.col('colorId')),\n+ 'colorDesc'\n+ ])\n+ .orderBy(op.asc('rowId'))\n+ .map(op.resolveFunction('colorIdMapper', '/optic/test/mapperReducer.sjs'))\n+ db.rows.query(output, { format: 'json', structure: 'object', columnTypes: 'header' })\n+ .then(function(output) {\n+ //console.log(JSON.stringify(output, null, 2));\n+ expect(output.rows.length).to.equal(4);\n+ expect(output.rows[0].rowId).to.equal(1);\n+ expect(output.rows[0].myColorId).to.equal('RED');\n+ expect(output.rows[1].rowId).to.equal(2);\n+ expect(output.rows[1].myColorId).to.equal('BLUE');\n+ done();\n+ }, done);\n+ });\n+\n+ it('TEST 8 - with reducer', function(done){\n+ const plan1 =\n+ op.fromLiterals([\n+ {rowId: 1, colorId_shape: 1, desc: 'ball'},\n+ {rowId: 2, colorId_shape: 2, desc: 'square'},\n+ {rowId: 3, colorId_shape: 1, desc: 'box'},\n+ {rowId: 4, colorId_shape: 1, desc: 'hoop'},\n+ {rowId: 5, colorId_shape: 5, desc: 'circle'}\n+ ]);\n+\n+ const plan2 =\n+ op.fromLiterals([\n+ {colorId: 1, colorDesc: 'red'},\n+ {colorId: 2, colorDesc: 'blue'},\n+ {colorId: 3, colorDesc: 'black'},\n+ {colorId: 4, colorDesc: 'yellow'}\n+ ]);\n+ const output =\n+ plan1.joinInner(\n+ plan2, op.on(op.col('colorId_shape'), op.col('colorId'))\n+ )\n+ .select([\n+ op.as('myRowId', op.col('rowId'))\n+ ])\n+ .orderBy(op.asc('myRowId'))\n+ .reduce(op.resolveFunction('fibReducer', '/optic/test/mapperReducer.sjs'))\n+ db.rows.query(output, { format: 'json', structure: 'object', columnTypes: 'header' })\n+ .then(function(output) {\n+ //console.log(JSON.stringify(output, null, 2));\n+ expect(output.rows.length).to.equal(4);\n+ expect(output.rows[0].myRowId).to.equal(1);\n+ expect(output.rows[0].i).to.equal(0);\n+ expect(output.rows[0].fib).to.equal(0);\n+ expect(output.rows[3].myRowId).to.equal(4);\n+ expect(output.rows[3].i).to.equal(3);\n+ expect(output.rows[3].fib).to.equal(2);\n+ done();\n+ }, done);\n+ });\n});\n",
        "chatgpt_cot": "Add new operations for case-insensitive matching in color combination and identity fields in values.ne."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2482,9 +2482,9 @@ router.get('/deckbuilder/:id', async (req, res) => {\nreturn res.status(404).render('misc/404', {});\n}\n- const deckOwner = await User.findById(deck.owner);\n+ const deckOwner = await User.findById(deck.owner).lean();\n- if (!req.user || deckOwner._id !== req.user.id) {\n+ if (!req.user || !deckOwner._id.equals(req.user._id)) {\nreq.flash('danger', 'Only logged in deck owners can build decks.');\nreturn res.redirect(`/cube/deck/${req.params.id}`);\n}\n@@ -2500,7 +2500,7 @@ router.get('/deckbuilder/:id', async (req, res) => {\n}\n}\n- const cube = await Cube.findOne(build_id_query(deck.cube), Cube.LAYOUT_FIELDS);\n+ const cube = await Cube.findOne(build_id_query(deck.cube), Cube.LAYOUT_FIELDS).lean();\nif (!cube) {\nreq.flash('danger', 'Cube not found');\n",
        "org_msg": "Fix logged-in test for deckbuilding.",
        "sim_msg": "Extract handleSelect callbacks seperately.",
        "sim_diff": "diff --git a/assets/js/components/DashboardNavigation.js b/assets/js/components/DashboardNavigation.js @@ -126,6 +126,23 @@ export default function DashboardNavigation() {\n[ breakpoint ]\n);\n+ const handleSelectTraffic = useCallback(\n+ () => handleSelect( ANCHOR_ID_TRAFFIC ),\n+ [ handleSelect ]\n+ );\n+ const handleSelectContent = useCallback(\n+ () => handleSelect( ANCHOR_ID_CONTENT ),\n+ [ handleSelect ]\n+ );\n+ const handleSelectSpeed = useCallback(\n+ () => handleSelect( ANCHOR_ID_SPEED ),\n+ [ handleSelect ]\n+ );\n+ const handleSelectMonetization = useCallback(\n+ () => handleSelect( ANCHOR_ID_MONETIZATION ),\n+ [ handleSelect ]\n+ );\n+\nuseMount( () => {\nconst { hash } = global.location;\nif ( ! hash ) {\n@@ -204,7 +221,7 @@ export default function DashboardNavigation() {\nid={ ANCHOR_ID_TRAFFIC }\nlabel={ __( 'Traffic', 'google-site-kit' ) }\nleadingIcon={ <NavTrafficIcon width=\"18\" height=\"16\" /> }\n- onClick={ handleSelect.bind( null, ANCHOR_ID_TRAFFIC ) }\n+ onClick={ handleSelectTraffic }\nselected={ selectedID === ANCHOR_ID_TRAFFIC }\n/>\n) }\n@@ -213,7 +230,7 @@ export default function DashboardNavigation() {\nid={ ANCHOR_ID_CONTENT }\nlabel={ __( 'Content', 'google-site-kit' ) }\nleadingIcon={ <NavContentIcon width=\"18\" height=\"18\" /> }\n- onClick={ handleSelect.bind( null, ANCHOR_ID_CONTENT ) }\n+ onClick={ handleSelectContent }\nselected={ selectedID === ANCHOR_ID_CONTENT }\n/>\n) }\n@@ -222,7 +239,7 @@ export default function DashboardNavigation() {\nid={ ANCHOR_ID_SPEED }\nlabel={ __( 'Speed', 'google-site-kit' ) }\nleadingIcon={ <NavSpeedIcon width=\"20\" height=\"16\" /> }\n- onClick={ handleSelect.bind( null, ANCHOR_ID_SPEED ) }\n+ onClick={ handleSelectSpeed }\nselected={ selectedID === ANCHOR_ID_SPEED }\n/>\n) }\n@@ -233,10 +250,7 @@ export default function DashboardNavigation() {\nleadingIcon={\n<NavMonetizationIcon width=\"18\" height=\"16\" />\n}\n- onClick={ handleSelect.bind(\n- null,\n- ANCHOR_ID_MONETIZATION\n- ) }\n+ onClick={ handleSelectMonetization }\nselected={ selectedID === ANCHOR_ID_MONETIZATION }\n/>\n) }\n",
        "chatgpt_cot": "Fix object comparison and add lean() method for better performance in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/src/components/SortCollapse.js b/src/components/SortCollapse.js @@ -8,6 +8,7 @@ import SortContext from './SortContext';\nclass SortCollapseRaw extends Component {\nconstructor(props) {\n+\nsuper(props);\nthis.state = {\n@@ -40,7 +41,7 @@ class SortCollapseRaw extends Component {\n}\nrender() {\n- const { primary, secondary, changeSort, ...props } = this.props;\n+ const { primary, secondary, changeSort, canEdit, ...props } = this.props;\nreturn (\n<Collapse {...props}>\n<Container>\n",
        "org_msg": "Fixed issue with compare view",
        "sim_msg": "fix list widget default values",
        "sim_diff": "diff --git a/src/components/EditorWidgets/List/ListControl.js b/src/components/EditorWidgets/List/ListControl.js @@ -71,7 +71,7 @@ export default class ListControl extends Component {\nsuper(props);\nconst { field, value } = props;\nconst allItemsCollapsed = field.get('collapsed', true);\n- const itemsCollapsed = Array(value.size).fill(allItemsCollapsed);\n+ const itemsCollapsed = value && Array(value.size).fill(allItemsCollapsed);\nthis.state = {\nitemsCollapsed: List(itemsCollapsed),\n",
        "chatgpt_cot": "Add canEdit prop to SortCollapse component for editing functionality. Fix constructor to include super(props) for proper initialization."
    },
    {
        "org_diff": "diff --git a/public/js/deleteconfirm.js b/public/js/deleteconfirm.js @@ -19,7 +19,7 @@ $('.delete-cube').on('click', function(e) {\nif (!response.ok) {\nconsole.log(response);\n} else {\n- window.location.href = '';\n+ window.location.href = '/';\n}\n});\n});\n",
        "org_msg": "Cube deletion will now route to dashboard",
        "sim_msg": "Fix deleting user have not worked (fixes",
        "sim_diff": "diff --git a/public/viewjs/users.js b/public/viewjs/users.js @@ -53,7 +53,7 @@ $(document).on('click', '.user-delete-button', function (e)\n{\nif (result === true)\n{\n- Grocy.Api.Delete('users/delete/' + objectId, {},\n+ Grocy.Api.Delete('users/' + objectId, {},\nfunction(result)\n{\nwindow.location.href = U('/users');\n",
        "chatgpt_cot": "Update redirect URL in delete confirmation script to fix redirection issue."
    },
    {
        "org_diff": "diff --git a/src/components/CustomDraftFormatModal.js b/src/components/CustomDraftFormatModal.js @@ -27,6 +27,9 @@ import CubeContext from './CubeContext';\nimport TextEntry from './TextEntry';\nconst CustomDraftFormatModal = ({ isOpen, toggle, formatIndex, format, setFormat }) => {\n+\n+ console.log(format);\n+\nconst { cubeID } = useContext(CubeContext);\nconst formRef = useRef();\n@@ -112,13 +115,13 @@ const CustomDraftFormatModal = ({ isOpen, toggle, formatIndex, format, setFormat\n<FormGroup tag=\"fieldset\">\n<FormGroup check>\n<Label check>\n- <Input type=\"radio\" name=\"multiples\" value=\"false\" defaultChecked={true} /> Don't allow more than\n+ <Input type=\"radio\" name=\"multiples\" value=\"false\" defaultChecked={!format.multiples} /> Don't allow more than\none of each card in draft\n</Label>\n</FormGroup>\n<FormGroup check>\n<Label check>\n- <Input type=\"radio\" name=\"multiples\" value=\"true\" /> Allow multiples (e.g. set draft)\n+ <Input type=\"radio\" name=\"multiples\" value=\"true\" defaultChecked={format.multiples} /> Allow multiples (e.g. set draft)\n</Label>\n</FormGroup>\n</FormGroup>\n",
        "org_msg": "Fixed custom format modal state",
        "sim_msg": "fix radio component warning",
        "sim_diff": "diff --git a/packages/idyll-components/src/radio.js b/packages/idyll-components/src/radio.js @@ -14,13 +14,15 @@ class Radio extends React.PureComponent {\n}\nrender() {\n+ const { idyll, hasError, updateProps, options, value, ...props } = this.props;\n+\nreturn (\n- <div {...this.props}>\n- {this.props.options.map((d) => {\n+ <div {...props}>\n+ {options.map((d) => {\nif (typeof d === 'string') {\n- return <label><input type=\"radio\" checked={d === this.props.value} onChange={this.onChange} value={d} name={this.id} />{d}</label>;\n+ return <label key={d}><input type=\"radio\" checked={d === value} onChange={this.onChange} value={d} name={this.id} />{d}</label>;\n}\n- return <label><input type=\"radio\" checked={d.value === this.props.value} onChange={this.onChange} value={d.value} name={this.id} />{d.label || d.value}</label>;\n+ return <label key={d.value}><input type=\"radio\" checked={d.value === value} onChange={this.onChange} value={d.value} name={this.id} />{d.label || d.value}</label>;\n})}\n</div>\n);\n",
        "chatgpt_cot": "Add console log for format, and set default checked value for radio buttons based on format multiples in CustomDraftFormatModal."
    },
    {
        "org_diff": "diff --git a/src/components/CubeCompareNavbar.js b/src/components/CubeCompareNavbar.js @@ -54,11 +54,11 @@ class CubeCompareNavbar extends Component {\n<li className=\"nav-item\">\n<h5 style={{ color: '#218937' }}>Compare Cubes</h5>\n<h6 className=\"my-3\" style={{ color: '#218937' }}>\n- <span style={{ color: '#495057' }}>Base Cube:</span>{' '}\n+ <span className=\"text-muted\">Base Cube:</span>{' '}\n<a href={`/cube/list/${cubeAID}`} className=\"mr-3\" style={{ color: '#218937' }}>\n{cubeA.name} ({cubeA.card_count} cards)\n</a>{' '}\n- <span style={{ color: '#495057' }}>Comparison Cube:</span>{' '}\n+ <span className=\"text-muted\">Comparison Cube:</span>{' '}\n<a href={`/cube/list/${cubeBID}`} style={{ color: '#218937' }}>\n{cubeB.name} ({cubeB.card_count} cards)\n</a>\n",
        "org_msg": "changed text color",
        "sim_msg": "Increased the spacing between the two main PDP sections to match the design spec.",
        "sim_diff": "diff --git a/src/components/ProductDetail/ProductDetail.js b/src/components/ProductDetail/ProductDetail.js @@ -227,7 +227,7 @@ class ProductDetail extends Component {\nreturn (\n<Fragment>\n- <Grid container spacing={theme.spacing.unit * 3}>\n+ <Grid container spacing={theme.spacing.unit * 5}>\n<Hidden xsDown>\n<Grid item className={classes.breadcrumbGrid} xs={12}>\n<Breadcrumbs isPDP={true} tag={tag} tags={tags} product={product} />\n",
        "chatgpt_cot": "Update CubeCompareNavbar.js to use className instead of inline styles for text color in cube comparison display."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1238,35 +1238,47 @@ router.post('/uploaddecklist/:id', ensureAuth, async function(req, res) {\n});\nrouter.post('/bulkupload/:id', ensureAuth, async function(req, res) {\n- Cube.findOne(build_id_query(req.params.id), async function(err, cube) {\n- if (err) {\n- console.log(err, req);\n- } else {\n- if (cube.owner != req.user._id) {\n+ try {\n+ const cube = await Cube.findOne(build_id_query(req.params.id));\n+ if (!cube) {\n+ req.flash('danger', 'Cube not found');\n+ return res.status(404).render('misc/404', {});\n+ } else if (cube.owner != req.user._id) {\nreq.flash('danger', 'Not Authorized');\n- res.redirect('/cube/list/' + req.params.id);\n- } else {\n- await bulkUpload(req, res, req.body.body, cube);\n+ return res.redirect('/cube/list/' + req.params.id);\n}\n+\n+ await bulkUpload(req, res, req.body.body, cube);\n+ } catch (err) {\n+ console.log(err);\n+ req.flash('danger', 'Error making bulk upload');\n+ return res.redirect(`/cube/list/${req.params.id}`);\n}\n});\n-});\nrouter.post('/bulkuploadfile/:id', ensureAuth, async function(req, res) {\nif (!req.files) {\nreq.flash('danger', 'Please attach a file');\n- res.redirect('/cube/list/' + req.params.id);\n- } else {\n- items = req.files.document.data.toString('utf8'); // the uploaded file object\n+ return res.redirect('/cube/list/' + req.params.id);\n+ }\n- Cube.findOne(build_id_query(req.params.id), async function(err, cube) {\n- if (cube.owner != req.user._id) {\n+ const items = req.files.document.data.toString('utf8'); // the uploaded file object\n+\n+ try {\n+ const cube = await Cube.findOne(build_id_query(req.params.id));\n+ if (!cube) {\n+ req.flash('danger', 'Cube not found');\n+ return res.status(404).render('misc/404', {});\n+ } else if (cube.owner != req.user._id) {\nreq.flash('danger', 'Not Authorized');\n- res.redirect('/cube/list/' + req.params.id);\n- } else {\n- await bulkUpload(req, res, items, cube);\n+ return res.redirect('/cube/list/' + req.params.id);\n}\n- });\n+\n+ await bulkUpload(req, res, items, cube);\n+ } catch (err) {\n+ console.log(err);\n+ req.flash('danger', 'Error making bulk upload');\n+ return res.redirect(`/cube/list/${req.params.id}`);\n}\n});\n",
        "org_msg": "Add try/catch to bulk upload routes.",
        "sim_msg": "upload: cleans up error handling",
        "sim_diff": "diff --git a/node_common/upload.js b/node_common/upload.js @@ -59,9 +59,9 @@ export const formMultipart = async (req, res, { user, bucketName }) => {\n});\nreturn reject({\n- decorator: \"SERVER_BUCKETS_PUSH_ISSUE\",\n+ decorator: \"SERVER_UPLOAD_ERROR\",\nerror: true,\n- message: e,\n+ message: e.message,\n});\n}\n@@ -81,9 +81,9 @@ export const formMultipart = async (req, res, { user, bucketName }) => {\n});\nreturn reject({\n- decorator: \"SERVER_BUCKET_STREAM_FAILURE\",\n+ decorator: \"SERVER_UPLOAD_ERROR\",\nerror: true,\n- message: e,\n+ message: e.message,\n});\n});\n@@ -121,9 +121,9 @@ export const formMultipart = async (req, res, { user, bucketName }) => {\n});\nreturn {\n- decorator: \"SERVER_BUCKETS_VERIFY_ISSUE\",\n+ decorator: \"SERVER_UPLOAD_ERROR\",\nerror: true,\n- message: e,\n+ message: e.message,\n};\n}\n",
        "chatgpt_cot": "Refactor cube_routes.js for bulk upload functionality, improve error handling, and ensure authorization checks for cube ownership. Fix redirection and error messages."
    },
    {
        "org_diff": "diff --git a/src/components/Advertisement.js b/src/components/Advertisement.js @@ -3,15 +3,16 @@ import React, { useState } from 'react';\nimport { Col, Card, CardBody } from 'reactstrap';\nconst Advertisment = () => {\n- const [option] = useState(Math.floor(Math.random() * 4));\n+ const [option] = useState(Math.floor(Math.random() * 6));\n- if (option === 0) {\n+ switch (option) {\n+ case 0:\nreturn (\n<Col xs=\"12\" className=\"py-2\">\n<Card>\n<CardBody>\n- Cube Cobra's hosting fees are covered completely by donations. If you enjoy the service Cube Cobra provides,\n- please consider\n+ Cube Cobra's hosting fees are covered completely by donations. If you enjoy the service Cube Cobra\n+ provides, please consider{' '}\n<strong>\n<a href=\"https://www.patreon.com/cubecobra\">donating</a>\n</strong>\n@@ -20,16 +21,15 @@ const Advertisment = () => {\n</Card>\n</Col>\n);\n- }\n- if (option === 1) {\n+\n+ case 1:\nreturn (\n<Col xs=\"12\" className=\"py-2\">\n<Card>\n<CardBody>\n- Enjoying Cube Cobra? You can help support Cube Cobra by purchasing playmats at our\n+ Enjoying Cube Cobra? You can help support Cube Cobra by purchasing playmats at our{' '}\n<strong>\n<a href=\"https://www.inkedgaming.com/collections/artists/gwen-dekker?rfsn=4250904.d3f372&utm_source=refersion&utm_medium=affiliate&utm_campaign=4250904.d3f372\">\n- {' '}\ninked gaming page\n</a>\n!\n@@ -38,9 +38,28 @@ const Advertisment = () => {\n</Card>\n</Col>\n);\n- }\n+ case 2:\n+ return (\n+ <Col xs=\"12\" className=\"py-2\">\n+ <Card>\n+ <CardBody>\n+ Want to showcase your cube? You can feature it as a reward for{' '}\n+ <strong>\n+ <a href=\"https://www.patreon.com/cubecobra\">donating</a>\n+ </strong>{' '}\n+ to Cube Cobra.{' '}\n+ <strong>\n+ <a href=\"/donate\">Find out more.</a>\n+ </strong>\n+ </CardBody>\n+ </Card>\n+ </Col>\n+ );\n+\n+ default:\nreturn <></>;\n+ }\n};\nexport default Advertisment;\n",
        "org_msg": "refactored advertisement, added info about featured cubes",
        "sim_msg": "Use FollowButton in UserCard",
        "sim_diff": "diff --git a/src/components/UserCard.js b/src/components/UserCard.js import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n-import Follow from '../components/Button/Follow';\n+import FollowButton from '../widgets/FollowButton';\nimport Avatar from '../components/Avatar';\nimport './UserCard.less';\n@@ -15,7 +15,7 @@ const UserCard = ({ username }) =>\n{username}\n</Link>\n</div>\n- <Follow />\n+ <FollowButton username={username} />\n</div>);\nUserCard.propTypes = {\n",
        "chatgpt_cot": "Add switch statement and new advertisement option in Advertisement component. Fixes issue with random number generator and adds new ad option."
    },
    {
        "org_diff": "diff --git a/nearley/helper.sh b/nearley/helper.sh @@ -7,6 +7,6 @@ nearleyc nearley/cubeFilters.ne -o dist/generated/filtering/cubeFilters.js;\nmkdir -p src/generated/filtering;\nnearleyc nearley/cardFilters.ne -o src/generated/filtering/cardFilters.js;\n{\n- tail -n +4 src/generated/filtering/cardFilters.js | head -n -6;\n+ tail -n +4 src/generated/filtering/cardFilters.js | awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }' | tail -n +7 | awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }';\necho \"; export default grammar;\"\n} | cat - > src/generated/filtering/cardFilters.js.tmp && mv src/generated/filtering/cardFilters.js.tmp src/generated/filtering/cardFilters.js\n",
        "org_msg": "Fix helper.sh on mac.",
        "sim_msg": "feat(girder): Carry girder provenence over from median filter's source to target",
        "sim_diff": "diff --git a/src/components/tools/MedianFilter/script.js b/src/components/tools/MedianFilter/script.js @@ -170,6 +170,12 @@ export default {\nconst vtkImage = ITKHelper.convertItkToVtkImage(itkOutImage);\nthis.outputImage.setInputData(vtkImage);\n+ if (this.targetImage.getKey('girderProvenence')) {\n+ this.outputImage.setKey(\n+ 'girderProvenence',\n+ this.targetImage.getKey('girderProvenence')\n+ );\n+ }\nthis.$proxyManager.createRepresentationInAllViews(this.outputImage);\nthis.$proxyManager.renderAllViews();\n",
        "chatgpt_cot": "Add awk command to reverse the lines in cardFilters.js to fix parsing issue and improve file readability in nearley/helper.sh."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeAnalysisPage.js b/src/pages/CubeAnalysisPage.js @@ -77,18 +77,22 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText }) => {\nconst analytics = [\n{\nname: 'Averages',\n+ usesAsfan: true,\ncomponent: (collection) => <Averages cards={collection} characteristics={characteristics} />,\n},\n{\nname: 'Table',\n+ usesAsfan: true,\ncomponent: (collection) => <Table cards={collection} />,\n},\n{\nname: 'Chart',\n+ usesAsfan: true,\ncomponent: (collection) => <Chart cards={collection} characteristics={characteristics} />,\n},\n{\nname: 'Recommender',\n+ usesAsfan: false,\ncomponent: (collection, cubeObj, addCards, cutCards, isLoading) => (\n<Suggestions\ncards={collection}\n@@ -102,18 +106,22 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText }) => {\n},\n{\nname: 'Tokens',\n+ usesAsfan: false,\ncomponent: (collection, cubeObj) => <Tokens cards={collection} cube={cubeObj} />,\n},\n{\nname: 'Tag Cloud',\n+ usesAsfan: true,\ncomponent: (collection) => <Cloud cards={collection} />,\n},\n{\nname: 'Pivot Table',\n+ usesAsfan: false,\ncomponent: (collection) => <PivotTable cards={collection} />,\n},\n{\nname: 'Hypergeometric Calculator',\n+ usesAsfan: false,\ncomponent: (collection) => <HyperGeom cards={collection} />,\n},\n];\n@@ -167,6 +175,7 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText }) => {\n/>\n</CardBody>\n</Card>\n+ {analytics[activeTab].usesAsfan && (\n<Card className=\"mb-3\">\n<CardBody>\n<Row>\n@@ -197,6 +206,7 @@ const CubeAnalysisPage = ({ cube, cubeID, defaultFilterText }) => {\n</Row>\n</CardBody>\n</Card>\n+ )}\n<Card>\n<CardBody>\n<ErrorBoundary>{analytics[activeTab].component(cards, cube, adds, cuts, loading)}</ErrorBoundary>\n",
        "org_msg": "Hide asfan card for analytics that don't use it.",
        "sim_msg": "Use same ticks for search-console graph.",
        "sim_diff": "diff --git a/assets/js/modules/search-console/components/module/ModuleOverviewWidget/Stats.js b/assets/js/modules/search-console/components/module/ModuleOverviewWidget/Stats.js @@ -35,6 +35,17 @@ import GoogleChart from '../../../../../components/GoogleChart';\nimport { partitionReport } from '../../../../../util/partition-report';\nconst Stats = ( { data, metrics, selectedStats, dateRangeLength } ) => {\n+ const { compareRange, currentRange } = partitionReport( data, { dateRangeLength } );\n+ const googleChartData = getSiteStatsDataForGoogleChart(\n+ currentRange,\n+ compareRange,\n+ metrics[ selectedStats ].label,\n+ metrics[ selectedStats ].metric,\n+ dateRangeLength,\n+ );\n+\n+ const dates = googleChartData.slice( 1 ).map( ( [ date ] ) => date );\n+\nconst options = {\nchart: {\ntitle: __( 'Search Traffic Summary', 'google-site-kit' ),\n@@ -63,6 +74,7 @@ const Stats = ( { data, metrics, selectedStats, dateRangeLength } ) => {\ncolor: '#616161',\nfontSize: 12,\n},\n+ ticks: dates,\n},\nvAxis: {\ndirection: selectedStats === 3 ? -1 : 1,\n@@ -110,15 +122,6 @@ const Stats = ( { data, metrics, selectedStats, dateRangeLength } ) => {\n},\n};\n- const { compareRange, currentRange } = partitionReport( data, { dateRangeLength } );\n- const googleChartData = getSiteStatsDataForGoogleChart(\n- currentRange,\n- compareRange,\n- metrics[ selectedStats ].label,\n- metrics[ selectedStats ].metric,\n- dateRangeLength,\n- );\n-\nreturn (\n<Grid className=\"googlesitekit-search-console-site-stats\">\n<Row>\n",
        "chatgpt_cot": "Add usesAsfan property to analytics objects and conditionally render component based on usesAsfan value."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -130,7 +130,7 @@ const considerInCombination = (combination) => (card) =>\n// We want to discourage playing more colors so they get less\n// value the more colors, this gets offset by having more cards.\n-const COLOR_SCALING_FACTOR = [1, 1, 0.8, 0.6, 0.3, 0.2];\n+const COLOR_SCALING_FACTOR = [1, 1, 0.8, 0.6, 0.2, 0.15];\nconst botRatingAndCombination = (seen, card, picked, overallPool) => {\n// Find the color combination that gives us the highest score\n// that'll be the color combination we want to play currently.\n@@ -212,6 +212,7 @@ async function buildDeck(cards) {\nreturn {\ndeck,\nsideboard,\n+ colors,\n};\n}\n@@ -309,10 +310,10 @@ async function finish() {\nfor (let i = 0; i < draft.seats.length; i++) {\nif (draft.seats[i].bot) {\n- draft.seats[i].drafted = decks[i].deck;\n- draft.seats[i].sideboard = decks[i].sideboard;\n- const colors = botColors(null, null, draft.seats[i].picked, null);\n- draft.seats[i].name = `Bot ${i + 1}: ${colors.join(', ')}`;\n+ const { deck, sideboard, colors } = decks[i];\n+ draft.seats[i].drafted = deck;\n+ draft.seats[i].sideboard = sideboard;\n+ draft.seats[i].name = `Bot ${i === 0 ? draft.seats.length : i}: ${colors.join(', ')}`;\ndraft.seats[i].description = `This deck was drafted by a bot with color preference for ${colors.join('')}.`;\n} else {\nconst picked = fromEntries(COLOR_COMBINATIONS.map((comb) => [comb.join(''), 0]));\n",
        "org_msg": "Make sure we use the correct point to assign colors.",
        "sim_msg": "add cards to The Perfect Gift text",
        "sim_diff": "diff --git a/server/game/cards/01 - Core/ThePerfectGift.js b/server/game/cards/01 - Core/ThePerfectGift.js @@ -10,14 +10,12 @@ class ThePerfectGift extends DrawCard {\nlet opponentTopFour = [];\nlet myTopFour = this.controller.conflictDeck.first(4);\nlet n = myTopFour.length;\n- let formatted = this.formatTopFour(myTopFour);\n- this.game.addMessage('{0) reveals the top {1} from their conflict deck: {2}', this.controller, n > 1 ? n + ' cards' : 'card', formatted);\n+ this.game.addMessage('{0) reveals the top {1} from their conflict deck: {2}', this.controller, n > 1 ? n + ' cards' : 'card', myTopFour);\nif(otherPlayer) {\nopponentTopFour = otherPlayer.conflictDeck.first(4);\nn = opponentTopFour.length;\n- formatted = this.formatTopFour(opponentTopFour);\n- if(formatted) {\n- this.game.addMessage('{0) reveals the top {1} from their conflict deck: {2}', otherPlayer, n > 1 ? n + ' cards' : 'card', formatted);\n+ if(n > 0) {\n+ this.game.addMessage('{0) reveals the top {1} from their conflict deck: {2}', otherPlayer, n > 1 ? n + ' cards' : 'card', opponentTopFour);\nthis.game.promptWithMenu(this.controller, this, {\nsource: this,\nactivePrompt: {\n@@ -65,17 +63,6 @@ class ThePerfectGift extends DrawCard {\nplayer.shuffleConflictDeck();\nreturn true;\n}\n-\n- formatTopFour(cards) {\n- return _.reduce(cards, (string, card, index) => {\n- if(index === 0) {\n- return card.name;\n- } else if(index === 1) {\n- return card.name + ' and ' + string;\n- }\n- return card.name + ', ' + string;\n- },'');\n- }\n}\nThePerfectGift.id = 'the-perfect-gift';\n",
        "chatgpt_cot": "\"Refactor botRatingAndCombination function and buildDeck function to use colors object and fix bot naming issue in Draft.js\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js -var sinon = require(\"sinon\");\n-\nconst cubefn = require(\"../../serverjs/cubefn\");\n+let Cube = require('../../models/cube');\nbeforeEach(() => {});\n@@ -95,7 +94,25 @@ test(\"legalityToInt returns the expected values\", () => {\nexpect(cubefn.legalityToInt(\"not a format\")).toBe(undefined);\n});\n-test(\"generate_short_id\", () => {});\n+test(\"generate_short_id returns a valid short ID\", async () => {\n+ var dummyModel = {\n+ \"shortID\": \"abcdef\",\n+ \"urlAlias\": \"a real alias\"\n+ };\n+ var queryMockPromise = new Promise((resolve, reject) => {\n+ process.nextTick(() => {\n+ resolve([dummyModel]);\n+ });\n+ });\n+ var queryMock = jest.fn();\n+ queryMock.mockReturnValue(queryMockPromise);\n+ var initialCubeFind = Cube.find;\n+ Cube.find = queryMock;\n+ var result = await cubefn.generate_short_id();\n+ expect(result).toBe(false);\n+ Cube.find = initialCubeFind;\n+});\n+\ntest(\"selectionContainsCard\", () => {});\ntest(\"setCubeType\", () => {});\ntest(\"sanitize\", () => {});\n",
        "org_msg": "add possibly-working test for generate_short_id",
        "sim_msg": "fix sinonTest wrapped test behavior\nWrapped test should behave the same way as original one. So when\noriginal function throws, wrapped function should throw too.",
        "sim_diff": "diff --git a/test/www/jxcore/lib/sinonTest.js b/test/www/jxcore/lib/sinonTest.js @@ -4,12 +4,10 @@ var sinon = require('sinon');\nfunction sinonTest (callback) {\nreturn function (t) {\n- var slice = Array.prototype.slice;\nvar config = sinon.getConfig(sinon.config);\nconfig.injectInto = config.injectIntoThis && this || config.injectInto;\nvar sandbox = sinon.sandbox.create(config);\n- var args = slice.call(arguments);\n- var result;\n+ var args = Array.prototype.slice.call(arguments);\nvar ok;\nif (typeof t.end === 'function') {\n@@ -26,12 +24,7 @@ function sinonTest (callback) {\n});\n}\n- try {\n- result = callback.apply(this, args.concat(sandbox.args));\n- } catch (e) {\n- t.fail(e);\n- }\n- return result;\n+ return callback.apply(this, args.concat(sandbox.args));\n};\n}\n",
        "chatgpt_cot": "Add async test for generate_short_id function in cubefn.test.js to test the validity of the short ID generation."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.js b/__tests__/serverjs/updatecards.js @@ -38,6 +38,7 @@ test(\"addCardToCatalog\", () => {\ntest(\"saveAllCards\", () => {\n// do in test what updateCardbase does before call to saveAllCards\n// use that as input to saveallcards for test\n+ // requires an unload function to be run before every test\n});\ntest(\"convertCard\", () => {});\n",
        "org_msg": "deduplicate convertCard functions",
        "sim_msg": "add EmbarkSpec.getAccounts(cb)",
        "sim_diff": "diff --git a/lib/tests/test.js b/lib/tests/test.js @@ -50,6 +50,15 @@ var Test = function(options) {\n}\n};\n+Test.prototype.getAccounts = function(cb) {\n+ this.web3.eth.getAccounts(function(err, accounts) {\n+ if (err) {\n+ throw new Error(err);\n+ }\n+ cb(accounts);\n+ });\n+}\n+\nTest.prototype.deployAll = function(contractsConfig, cb) {\nvar self = this;\n",
        "chatgpt_cot": "Add unload function before every test in saveAllCards test to ensure proper setup and execution."
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -537,7 +537,7 @@ router.get('/view/:id', async (req, res) => {\nreturn res.render('user/user_view', {\nreactProps: serialize({\nuser,\n- canEdit: req.user && user._id === req.user._id,\n+ canEdit: req.user && req.user._id.equals(user._id),\ncubes,\nfollowers,\nfollowing,\n",
        "org_msg": "Fix canEdit on user_view.",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "\"Fix user edit permission logic in view route\""
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -296,7 +296,7 @@ function CSVtoCards(csvString, carddb) {\nconst matchingSetAndNumber = potentialIds.find((id) => {\nconst dbCard = carddb.cardFromId(id);\nreturn (\n- upperSet === dbCard.set.toUpperCase() && card.collectorNumber === dbCard.collector_number.toUpperCase()\n+ upperSet === dbCard.set.toUpperCase() && card.collector_number === dbCard.collector_number.toUpperCase()\n);\n});\nconst matchingSet = potentialIds.find((id) => carddb.cardFromId(id).set.toUpperCase() === upperSet);\n",
        "org_msg": "Fix importing by collector number in CSV import.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Fix collector number comparison in CSVtoCards function in cubefn.js."
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"build\": \"webpack --mode production --config webpack.prod.js && rollup -c\",\n\"start\": \"nodemon --ignore src --ignore public & webpack-dev-server --config webpack.dev.js & rollup -c --watch\",\n\"test\": \"jest --silent --detectOpenHandles --coverage\",\n- \"setup\": \"rollup -c & node force_update.js\"\n+ \"setup\": \"rollup -c && node force_update.js\"\n},\n\"author\": \"Gwen Dekker\",\n\"license\": \"ISC\",\n",
        "org_msg": "add missing & to npm run setup script",
        "sim_msg": "skip prepublish script for install",
        "sim_diff": "diff --git a/package.json b/package.json \"test:watch\": \"jest --watch\",\n\"build\": \"NODE_ENV=production webpack --config webpack.prod.js\",\n\"build:scripts\": \"NODE_ENV=production webpack --config webpack.cli.js\",\n- \"prepublish\": \"npm run build\",\n+ \"prepublish\": \"in-publish && npm run build || not-in-publish\",\n\"storybook\": \"start-storybook -p 9001\",\n\"storybook-build\": \"build-storybook -o dist\",\n\"lint\": \"npm run lint:js & npm run lint:css\",\n\"file-loader\": \"^0.8.5\",\n\"identity-obj-proxy\": \"^3.0.0\",\n\"imports-loader\": \"^0.6.5\",\n+ \"in-publish\": \"^2.0.0\",\n\"jest\": \"19.1.0-alpha.eed82034\",\n\"jest-cli\": \"19.1.0-alpha.eed82034\",\n\"lint-staged\": \"^3.1.0\",\n",
        "chatgpt_cot": "Fix setup script to run sequentially instead of concurrently in package.json. Updated \"setup\" script to use \"&&\" instead of \"&\" for sequential execution."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -5,6 +5,7 @@ const fs = require('fs');\nconst fetch = require('node-fetch');\nconst rp = require('request-promise');\nconst cheerio = require('cheerio');\n+const Filter = require('bad-words');\nvar {\naddAutocard,\ngeneratePack,\n@@ -1553,6 +1554,11 @@ router.post('/editoverview/:id', ensureAuth, function(req, res) {\nres.redirect('/cube/overview/' + req.params.id);\n} else {\nif (req.body.urlAlias && cube.urlAlias !== req.body.urlAlias) {\n+ let filter = new Filter();\n+ if (filter.isProfane(req.body.urlAlias)) {\n+ req.flash('danger', 'Custom URL may not contain profanity.');\n+ res.redirect('/cube/overview/' + req.params.id);\n+ } else {\nCube.findOne(build_id_query(req.body.urlAlias), function(err, takenAlias) {\nif (takenAlias) {\nreq.flash('danger', 'Custom URL already taken.');\n@@ -1561,6 +1567,7 @@ router.post('/editoverview/:id', ensureAuth, function(req, res) {\nupdate_cube();\n}\n});\n+ }\n} else {\nupdate_cube();\n}\n",
        "org_msg": "profanity filter on url alias",
        "sim_msg": "routes/index.js linting complete",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js var fs = require(\"fs\");\nvar path = require(\"path\");\nvar log = require(\"../log\").logger(\"routes\");\n-var restify = require(\"restify\");\n-var util = require(\"../util\");\n-var authentication = require(\"../authentication\");\nvar config = require(\"../config\");\nvar getStaticServeFunction = require(\"../static\");\n@@ -12,13 +9,13 @@ module.exports = function (server) {\nvar routeDir = __dirname;\nvar files = fs.readdirSync(routeDir);\nfiles.forEach(function (file) {\n- filePath = path.resolve(\"./\", routeDir, file);\n+ var filePath = path.resolve(\"./\", routeDir, file);\nif (\npath.extname(filePath) == \".js\" &&\npath.basename(filePath) != \"index.js\"\n) {\ntry {\n- routes = require(filePath);\n+ var routes = require(filePath);\nif (typeof routes == \"function\") {\nroutes(server);\nlog.debug(' Loaded routes from \"' + filePath + '\"');\n",
        "chatgpt_cot": "Add profanity filter for custom URL input to prevent inappropriate content, redirect if profanity detected. Fix taken alias error handling."
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -134,6 +134,7 @@ function reasonableCard(card) {\nreturn (\n!card.promo &&\n!card.digital &&\n+ !card.isToken &&\ncard.border_color !== 'gold' &&\ncard.language === 'en' &&\ncard.tcgplayer_id &&\n",
        "org_msg": "tokens are not reasonable cards",
        "sim_msg": "set card type bool",
        "sim_diff": "diff --git a/server/game/drawcard.js b/server/game/drawcard.js @@ -24,6 +24,8 @@ class DrawCard extends BaseCard {\nthis.contributesToFavor = true;\nthis.bowed = false;\nthis.inConflict = false;\n+ this.isConflict = false;\n+ this.isDynasty = false;\nthis.readysDuringReadying = true;\nthis.challengeOptions = {\ndoesNotBowAs: {\n@@ -32,6 +34,12 @@ class DrawCard extends BaseCard {\n}\n};\nthis.stealthLimit = 1;\n+\n+ if(cardData.deck === 'conflict') {\n+ this.isConflict = true;\n+ } else if(cardData.deck === 'dynasty') {\n+ this.isDynasty = true;\n+ }\n}\nisLimited() {\n",
        "chatgpt_cot": "\"Add check for isToken property in reasonableCard function\""
    },
    {
        "org_diff": "diff --git a/src/components/TokenAnalysis.js b/src/components/TokenAnalysis.js @@ -42,7 +42,7 @@ const TokenAnalysis = ({ tokens }) => (\n{sortTokens(tokens).map(([token, tokenCards]) => (\n<Col key={token._id} xs={6} md={4} lg={3}>\n<Card className=\"mb-3\">\n- <a href={'/tool/card/' + token._id}>\n+ <a href={Affiliate.getTCGLink({details:token})}>\n<img src={token.image_normal} className=\"card-img-top\" />\n</a>\n<CardBody>\n",
        "org_msg": "Fixed token link to tcgplayer",
        "sim_msg": "Allow no token in tokenCard",
        "sim_diff": "diff --git a/packages/fether-ui/src/TokenCard/TokenCard.js b/packages/fether-ui/src/TokenCard/TokenCard.js @@ -20,14 +20,18 @@ export const TokenCard = ({\n<Card {...otherProps}>\n<div className='token'>\n<div className='token_icon'>\n- {token.logo ? (\n+ {token && token.logo ? (\n<img alt={token.symbol} src={token.logo} />\n) : (\n<Placeholder height={20} width={20} />\n)}\n</div>\n<div className='token_name'>\n- {token.name ? token.name : <Placeholder height={20} width={100} />}\n+ {token && token.name ? (\n+ token.name\n+ ) : (\n+ <Placeholder height={20} width={100} />\n+ )}\n</div>\n<div className='token_balance'>\n{balance ? (\n@@ -35,7 +39,7 @@ export const TokenCard = ({\n) : showBalance ? (\n<Placeholder height={20} width={50} />\n) : null}\n- <span className='token_symbol'>{token.symbol}</span>\n+ <span className='token_symbol'>{token && token.symbol}</span>\n</div>\n{children}\n</div>\n@@ -53,7 +57,7 @@ TokenCard.propTypes = {\nlogo: PropTypes.string,\nname: PropTypes.string,\nsymbol: PropTypes.string\n- }).isRequired\n+ })\n};\nexport default TokenCard;\n",
        "chatgpt_cot": "\"Refactor TokenAnalysis.js to use Affiliate.getTCGLink for card link generation.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -485,7 +485,7 @@ router.get('/overview/:id', async (req, res) => {\ncubeID,\nuserID: user ? user._id : null,\nloggedIn: !!user,\n- canEdit: user && user._id === cube.owner,\n+ canEdit: user && user.id === cube.owner,\nowner: user ? user.username : 'unknown',\npost: blogs ? blogs[0] : null,\nfollowed: user ? user.followed_cubes.includes(cube._id) : false,\n@@ -1816,7 +1816,7 @@ router.post(\n}\nconst { user } = req;\n- if (!user || user._id !== cube.owner) {\n+ if (!user || user.id !== cube.owner) {\nreturn res.status(403).send({\nsuccess: 'false',\nmessage: 'Unauthorized',\n@@ -2401,7 +2401,7 @@ router.get('/rebuild/:id', ensureAuth, async (req, res) => {\n`${user.username} rebuilt a deck from your cube: ${cube.name}`,\n);\n}\n- if (baseUser && baseUser._id !== user.id) {\n+ if (baseUser && baseUser.id !== user.id) {\nawait util.addNotification(\nbaseUser,\nuser,\n",
        "org_msg": "Fix canEdits.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Fix user id comparison in cube_routes.js\""
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -175,7 +175,6 @@ export const SORTS = [\n'Subtype',\n'Supertype',\n'Tags',\n- 'Tags Full',\n'Toughness',\n'Type',\n'Types-Multicolor',\n@@ -275,10 +274,6 @@ function getLabelsRaw(cube, sort, showOther) {\n}\n}\nret = tags.sort();\n- } else if (sort === 'Tags Full') {\n- // TODO remove\n- // whitespace around ' Untagged ' to prevent collisions\n- ret = [...getLabelsRaw(cube, 'Tags'), ' Untagged '];\n} else if (sort === 'Date Added') {\nconst dates = cube.map((card) => card.addedTmsp).sort((a, b) => a - b);\nconst days = dates.map((date) => ISODateToYYYYMMDD(date));\n@@ -421,6 +416,7 @@ function getLabelsRaw(cube, sort, showOther) {\n}\n/* End of sort options */\n+ // whitespace around 'Other' to prevent collisions\nreturn showOther ? [...ret, ' Other '] : ret;\n}\n@@ -510,9 +506,6 @@ export function cardGetLabels(card, sort, showOther) {\n}\n} else if (sort === 'Tags') {\nret = card.tags;\n- } else if (sort === 'Tags Full') {\n- // whitespace around ' Untagged ' to prevent collisions\n- ret = card.tags.length === 0 ? [' Untagged '] : card.tags;\n} else if (sort === 'Status') {\nret = [card.status];\n} else if (sort === 'Finish') {\n@@ -655,6 +648,7 @@ export function cardGetLabels(card, sort, showOther) {\n/* End of sort options */\nif (showOther && ret.length === 0) {\n+ // whitespace around 'Other' to prevent collisions\nret = [' Other '];\n}\nreturn ret;\n",
        "org_msg": "removed Tags Full",
        "sim_msg": "add hover test for M1 bars on M3 bars",
        "sim_diff": "diff --git a/test/jasmine/tests/hover_label_test.js b/test/jasmine/tests/hover_label_test.js @@ -4798,11 +4798,6 @@ describe('hovermode: (x|y)unified', function() {\n}\n})\n.then(function(gd) {\n- _hover(gd, { xpx: 25, ypx: 250 });\n- assertLabel({title: 'Jan 1, 2017', items: [\n- 'scatter : 1'\n- ]});\n-\n_hover(gd, { xpx: 50, ypx: 250 });\nassertLabel({title: 'Feb 1, 2017', items: [\n'scatter : 2'\n@@ -4875,6 +4870,135 @@ describe('hovermode: (x|y)unified', function() {\n.then(done, done.fail);\n});\n+ it('case of M1 period bars overlaid on M3 period bars', function(done) {\n+ Plotly.newPlot(gd, {\n+ data: [\n+ {\n+ type: 'bar',\n+ name: 'M3',\n+ xperiod: 'M3',\n+ x: [\n+ '2017-04',\n+ '2017-07',\n+ '2017-10',\n+ '2018-01'\n+ ],\n+ y: [10, 5, 10, 5]\n+ },\n+ {\n+ type: 'bar',\n+ name: 'M1',\n+ xperiod: 'M1',\n+ x: [\n+ '2017-01',\n+ '2017-02',\n+ '2017-03',\n+ '2017-04',\n+ '2017-05',\n+ '2017-06',\n+ '2017-07',\n+ '2017-08',\n+ '2017-09',\n+ '2017-10',\n+ '2017-11',\n+ '2017-12'\n+ ],\n+ y: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n+ }\n+ ],\n+ layout: {\n+ barmode: 'overlay',\n+ hovermode: 'x unified',\n+ showlegend: false,\n+ width: 500,\n+ height: 500,\n+ margin: {\n+ t: 50,\n+ b: 50,\n+ l: 50,\n+ r: 50\n+ }\n+ }\n+ })\n+ .then(function(gd) {\n+ _hover(gd, { xpx: 25, ypx: 250 });\n+ assertLabel({title: 'Jan 1, 2017', items: [\n+ 'M1 : 1'\n+ ]});\n+\n+ _hover(gd, { xpx: 50, ypx: 250 });\n+ assertLabel({title: 'Feb 1, 2017', items: [\n+ 'M1 : 2'\n+ ]});\n+\n+ _hover(gd, { xpx: 75, ypx: 250 });\n+ assertLabel({title: 'Mar 1, 2017', items: [\n+ 'M1 : 3',\n+ 'M1 : (Feb 1, 2017, 2)'\n+ ]});\n+\n+ _hover(gd, { xpx: 100, ypx: 250 });\n+ assertLabel({title: 'Apr 1, 2017', items: [\n+ 'M3 : 10',\n+ 'M1 : 4'\n+ ]});\n+\n+ _hover(gd, { xpx: 125, ypx: 250 });\n+ assertLabel({title: 'May 1, 2017', items: [\n+ 'M3 : (Apr 1, 2017, 10)',\n+ 'M1 : 5'\n+ ]});\n+\n+ _hover(gd, { xpx: 150, ypx: 250 });\n+ assertLabel({title: 'Jun 1, 2017', items: [\n+ 'M3 : (Apr 1, 2017, 10)',\n+ 'M1 : 6'\n+ ]});\n+\n+ _hover(gd, { xpx: 175, ypx: 250 });\n+ assertLabel({title: 'Jul 1, 2017', items: [\n+ 'M3 : 5',\n+ 'M1 : 7'\n+ ]});\n+\n+ _hover(gd, { xpx: 200, ypx: 250 });\n+ assertLabel({title: 'Aug 1, 2017', items: [\n+ 'M3 : (Jul 1, 2017, 5)',\n+ 'M1 : 8'\n+ ]});\n+\n+ _hover(gd, { xpx: 225, ypx: 250 });\n+ assertLabel({title: 'Sep 1, 2017', items: [\n+ 'M3 : (Jul 1, 2017, 5)',\n+ 'M1 : 9'\n+ ]});\n+\n+ _hover(gd, { xpx: 250, ypx: 250 });\n+ assertLabel({title: 'Oct 1, 2017', items: [\n+ 'M3 : 10',\n+ 'M1 : 10'\n+ ]});\n+\n+ _hover(gd, { xpx: 275, ypx: 250 });\n+ assertLabel({title: 'Nov 1, 2017', items: [\n+ 'M3 : (Oct 1, 2017, 10)',\n+ 'M1 : 11'\n+ ]});\n+\n+ _hover(gd, { xpx: 300, ypx: 250 });\n+ assertLabel({title: 'Dec 1, 2017', items: [\n+ 'M3 : (Oct 1, 2017, 10)',\n+ 'M1 : 12'\n+ ]});\n+\n+ _hover(gd, { xpx: 350, ypx: 250 });\n+ assertLabel({title: 'Jan 1, 2018', items: [\n+ 'M3 : 5'\n+ ]});\n+ })\n+ .then(done, done.fail);\n+ });\n+\nit('should have the same traceorder as the legend', function(done) {\nvar mock = require('@mocks/stacked_area.json');\nvar mockCopy = Lib.extendDeep({}, mock);\n",
        "chatgpt_cot": "Remove unused 'Tags Full' sort option and clean up whitespace to prevent collisions for 'Other' sort option in Sort.js."
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -46,6 +46,7 @@ html\na#navbarDropdownMenuLink.nav-link.dropdown-toggle(href='#', role='button', data-toggle='dropdown', aria-haspopup='true', aria-expanded='false')\n| About\n.dropdown-menu(aria-labelledby='navbarDropdownMenuLink')\n+ a.dropdown-item(href='/tool/topcards') Top Cards\na.dropdown-item(href='/contact') Contact\na.dropdown-item(href='/dev/blog') Dev Blog\na.dropdown-item(href='/ourstory') Our Story\n",
        "org_msg": "Add Top Cards link to About menu.",
        "sim_msg": "Fixing up for html validation",
        "sim_diff": "diff --git a/views/_partials/header.pug b/views/_partials/header.pug li(class=(title === 'Bootstrap Legacy' ? 'active' : ''))\na(href='/legacy/' + themeQs) Legacy\nli.dropdown\n- a#nav-dropdown.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-haspopup='true', aria-expanded='false') 4 Beta\n+ a.nav-dropdown.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-haspopup='true', aria-expanded='false') 4 Beta\n|\nspan.caret\n- ul.dropdown-menu.dropdown-menu-right(aria-labelledby='nav-dropdown')\n+ ul.dropdown-menu.dropdown-menu-right\nli\na(href='/beta/',\ndata-ga-category='Navigation',\nli(class=(title === 'Integrations' ? 'active' : ''))\na(href='/integrations/' + themeQs) Integrations\nli.dropdown\n- a#nav-dropdown.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-haspopup='true', aria-expanded='false') Resources\n+ a.nav-dropdown.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-haspopup='true', aria-expanded='false') Resources\n|\nspan.caret\n- ul.dropdown-menu.dropdown-menu-right(aria-labelledby='nav-dropdown')\n+ ul.dropdown-menu.dropdown-menu-right\nli\na(href='https://github.com/MaxCDN/bootstrap-cdn',\ndata-ga-category='Navigation',\n",
        "chatgpt_cot": "Add a new dropdown item \"Top Cards\" in the layout for easy access."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -858,8 +858,8 @@ router.get('/samplepack/:id/:seed', function(req, res) {\nmetadata: generateMeta(\n'Cube Cobra Sample Pack',\n`A sample pack from ${cube.name}`,\n- `https://http://162.243.163.51/cube/samplepackimage/${req.params.id}/${pack.seed}.png`,\n- `https://http://162.243.163.51/cube/samplepack/${req.params.id}/${pack.seed}`\n+ `http://162.243.163.51/cube/samplepackimage/${req.params.id}/${pack.seed}.png`,\n+ `http://162.243.163.51/cube/samplepack/${req.params.id}/${pack.seed}`\n),\nloginCallback: '/cube/samplepack/' + req.params.id\n});\n",
        "org_msg": "Fixed debug urls",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Fix metadata URL typo in cube_routes.js"
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -347,7 +347,16 @@ test(\"sanitize allows the correct tags\", () => {\nexpect(result).toBe(expected);\n});\n-test(\"addAutocard\", () => {});\n+test(\"addAutocard correctly replaces autocard format strings\", () => {\n+ expect.assertions(1);\n+ var promise = carddb.initializeCardDb(fixturesPath, true);\n+ return promise.then(function() {\n+ const exampleHtml = \"<div>lkgdfsge</div><strong>[[Embercleave]]</strong><ol><li>gfgwwerer</li></ol>\";\n+ const expected = \"<div>lkgdfsge</div><strong><a class=\\\"autocard\\\" card=\\\"https://img.scryfall.com/cards/normal/front/9/3/939b8bcc-b9ac-4d8c-9db4-2bf91a853f03.jpg?1568659023\\\">Embercleave</a></strong><ol><li>gfgwwerer</li></ol>\";\n+ const result = cubefn.addAutocard(exampleHtml, carddb);\n+ expect(result).toBe(expected);\n+ });\n+});\ntest(\"generatePack generates a valid pack of cards\", () => {\nexpect.assertions(16);\n",
        "org_msg": "add test for addautocard;",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add test for addAutocard method to ensure correct replacement of autocard format strings in cubefn file. Fix issue with autocard replacement."
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"name\": \"cubepro\",\n\"version\": \"1.0.0\",\n\"description\": \"Cube management app\",\n+ \"private\": true,\n\"main\": \"app.js\",\n\"scripts\": {\n\"beautify\": \"js-beautify --config .js-beautify.json -r *.js {config,models,routes,serverjs,views,public/js}/**/*.js\",\n",
        "org_msg": "Add private key to package.json",
        "sim_msg": "roll back uglify version",
        "sim_diff": "diff --git a/package.json b/package.json \"serve-static\": \"*\",\n\"n3d-threejs\": \"72.0.x\",\n\"tween.js\": \"0.14.x\",\n- \"uglify-js\": \"*\",\n+ \"uglify-js\": \"2.x\",\n\"leveldown\": \"*\",\n\"levelup\": \"*\",\n\"validator\": \"*\",\n",
        "chatgpt_cot": "\"Make package.json private to prevent accidental publishing of sensitive information.\""
    },
    {
        "org_diff": "diff --git a/jobs/process_decks.js b/jobs/process_decks.js @@ -128,10 +128,12 @@ const processDeck = (deck, draft, analytic) => {\n// process all cube objects\nconsole.log('Started');\nconst count = await Cube.countDocuments();\n+ console.log(`Found ${count} cubes`);\nconst cursor = Cube.find().lean().cursor();\nfor (let i = 0; i < count; i++) {\nconst cube = await cursor.next();\n+ console.log(`Started \"${cube.name} - ${cube._id}\"`);\nlet cubeAnalytic = await CubeAnalytic.findOne({ cube: cube._id });\nif (!cubeAnalytic) {\ncubeAnalytic = new CubeAnalytic();\n@@ -139,8 +141,13 @@ const processDeck = (deck, draft, analytic) => {\n}\ncubeAnalytic.cards = [];\n- const decks = await Deck.find({ cube: cube._id }, 'seats draft');\n- const drafts = await Draft.find({ cube: cube._id }, 'seats initial_state');\n+ const decks = await Deck.find({ cube: cube._id }, 'seats draft').lean();\n+ console.log(`saving ${decks.length} decks`);\n+ const drafts = await Draft.find(\n+ { _id: { $in: decks.map((deck) => deck.draft).filter((id) => id) } },\n+ 'seats initial_state',\n+ ).lean();\n+ console.log(`saving ${drafts.length} drafts`);\nconst draftDict = fromEntries(drafts.map((draft) => [draft._id, draft]));\n@@ -148,8 +155,6 @@ const processDeck = (deck, draft, analytic) => {\nprocessDeck(deck, draftDict[deck.draft], cubeAnalytic);\n}\n- console.log(`For cube \"${cube.name}\", saving ${decks.length} decks and ${drafts.length} drafts`);\n-\nawait cubeAnalytic.save();\nconsole.log(`Finished: ${Math.min(count, i + 1)} of ${count} cubes`);\n}\n",
        "org_msg": "Update process_decks.js",
        "sim_msg": "Update the footer to be displayed only when there are ideas.",
        "sim_diff": "diff --git a/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/index.js b/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/index.js @@ -64,21 +64,37 @@ const getIdeaHubContainerOffset = ( ideaHubWidgetOffsetTop ) => {\nreturn ideaHubWidgetOffsetTop + global.window.pageYOffset + headerOffset;\n};\n-const DashboardIdeasWidget = ( {\n- defaultActiveTabIndex,\n- Widget,\n- WidgetReportError,\n-} ) => {\n+function DashboardIdeasWidget( props ) {\n+ const { defaultActiveTabIndex, Widget, WidgetReportError } = props;\n+\nconst ideaHubContainer = useRef();\n- const newIdeas = useSelect( ( select ) =>\n- select( MODULES_IDEA_HUB ).getNewIdeas()\n- );\n- const savedIdeas = useSelect( ( select ) =>\n- select( MODULES_IDEA_HUB ).getSavedIdeas()\n- );\n- const draftIdeas = useSelect( ( select ) =>\n- select( MODULES_IDEA_HUB ).getDraftPostIdeas()\n- );\n+\n+ const { hasNoIdeas, savedIdeas, draftIdeas } = useSelect( ( select ) => {\n+ const newIdeas = select( MODULES_IDEA_HUB ).getNewIdeas();\n+ const saved = select( MODULES_IDEA_HUB ).getSavedIdeas();\n+ const draft = select( MODULES_IDEA_HUB ).getDraftPostIdeas();\n+\n+ let noIdeas, manyIdeas;\n+\n+ if (\n+ newIdeas?.length === 0 &&\n+ saved?.length === 0 &&\n+ draft?.length === 0\n+ ) {\n+ noIdeas = true;\n+ }\n+\n+ if ( newIdeas?.length > 0 || saved?.length > 0 || draft?.length > 0 ) {\n+ manyIdeas = true;\n+ }\n+\n+ return {\n+ hasNoIdeas: noIdeas,\n+ hasManyIdeas: manyIdeas,\n+ savedIdeas: saved,\n+ draftIdeas: draft,\n+ };\n+ } );\nconst [ hash, setHash ] = useHash();\nconst [ activeTabIndex, setActiveTabIndex ] = useState(\n@@ -110,11 +126,7 @@ const DashboardIdeasWidget = ( {\n[ setHash, setActiveTabIndex ]\n);\n- if (\n- newIdeas?.length === 0 &&\n- savedIdeas?.length === 0 &&\n- draftIdeas?.length === 0\n- ) {\n+ if ( hasNoIdeas ) {\nreturn (\n<Widget noPadding>\n<div className=\"googlesitekit-idea-hub\">\n@@ -134,16 +146,20 @@ const DashboardIdeasWidget = ( {\n);\n}\n- const WrappedFooter = () => (\n+ let WrappedFooter;\n+ if ( activeTab === 'new-ideas' ) {\n+ WrappedFooter = () => (\n<Footer\ntab={ activeTab }\n- footerText={\n- activeTab === 'new-ideas'\n- ? __( 'Updated every 2-3 days', 'google-site-kit' )\n- : undefined\n- }\n+ footerText={ __( 'Updated every 2-3 days', 'google-site-kit' ) }\n/>\n);\n+ } else if (\n+ ( activeTab === 'saved-ideas' && savedIdeas?.length > 0 ) ||\n+ ( activeTab === 'draft-ideas' && draftIdeas?.length > 0 )\n+ ) {\n+ WrappedFooter = () => <Footer tab={ activeTab } />;\n+ }\nreturn (\n<Widget noPadding Footer={ WrappedFooter }>\n@@ -228,7 +244,7 @@ const DashboardIdeasWidget = ( {\n</div>\n</Widget>\n);\n-};\n+}\nDashboardIdeasWidget.tabToIndex = {\n'new-ideas': 0,\n",
        "chatgpt_cot": "Add logging statements for cube processing and deck saving in processDeck function. Improve visibility and debugging capability."
    },
    {
        "org_diff": "diff --git a/src/util/draftutil.js b/src/util/draftutil.js @@ -58,13 +58,13 @@ function standardDraft(cards, probabilistic = false) {\nif (cards.length === 0) {\nthrow new Error('Unable to create draft: not enough cards.');\n}\n+ cards = arrayShuffle(cards);\nreturn function(cardFilters) {\n// ignore cardFilters, just take any card in cube\nif (cards.length === 0) {\nthrow new Error('Unable to create draft: not enough cards.');\n}\n// remove a random card\n- cards = arrayShuffle(cards);\nreturn { card: cards.pop(), messages: '' };\n};\n}\n",
        "org_msg": "Only shuffle cards once for standard draft",
        "sim_msg": "Handle cards with no pack data better",
        "sim_diff": "diff --git a/client/deck-validator.js b/client/deck-validator.js @@ -25,10 +25,16 @@ function getStronghold(deck) {\n}\nfunction isCardInReleasedPack(packs, card) { // eslint-disable-line no-unused-vars\n- let cardPack = card.pack_cards[0].pack.id;\n- let pack = _.find(packs, pack => {\n+ let cardPack = '';\n+ let pack = false;\n+\n+ if(card.pack_cards.length > 0) {\n+ cardPack = card.pack_cards[0].pack.id;\n+ pack = _.find(packs, pack => {\nreturn cardPack === pack.id;\n});\n+ }\n+\nif(!pack) {\nreturn false;\n",
        "chatgpt_cot": "\"Fix issue with draft creation by shuffling cards before returning a random card. Ensure enough cards are available for draft creation.\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -606,7 +606,7 @@ function convertCard(card, isExtra) {\neur: card.prices.eur ? parseFloat(card.prices.eur, 10) : null,\ntix: card.prices.tix ? parseFloat(card.prices.tix, 10) : null,\n};\n- newcard.elo = catalog.elodict[name] ? catalog.elodict[name] : 1200;\n+ newcard.elo = catalog.elodict[name] || 1200;\nnewcard.embedding = catalog.embeddingdict[name];\nnewcard.digital = card.digital;\nnewcard.isToken = card.layout === 'token';\n",
        "org_msg": "simplified null check",
        "sim_msg": "Card render debugging",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -137,30 +137,39 @@ export const generateCard = async ({\nsvg.setAttribute('height', cardHeight);\nsvg.innerHTML = cardSvgSource;\n+ // window.svg = svg;\n+\n{\nconst el = svg;\n- const titleTextEl = el.querySelector('#title-text');\n- titleTextEl.innerHTML = name;\n+ // name\n+ const nameEl = el.querySelector('#name');\n+ nameEl.innerHTML = name;\n+\n+ // type icon\nfor (let i = 0; i < types.length; i++) {\nconst type = types[i];\nconst typeEl = el.querySelector('#type-' + type);\ntypeEl.style.display = type === spec.stats.type ? 'block' : 'none';\n}\n+\n+ // stat values\n[\n+ 'level',\n'hp',\n'mp',\n- 'attack',\n- 'defense',\n- 'speed',\n- 'luck',\n+ 'atk',\n+ 'def',\n+ 'mag',\n+ 'spr',\n+ 'dex',\n+ 'lck',\n].forEach(statName => {\n- const statEl = el.querySelector('#' + statName);\n- const texts = statEl.querySelectorAll('text');\n- const textEl = texts[texts.length - 1];\n- textEl.innerHTML = escape(spec.stats[statName] + '');\n+ const statEl = el.querySelector('#' + statName + '-value');\n+ statEl.innerHTML = escape(spec.stats[statName] + '');\n});\n- {\n+\n+ /* {\nconst imageEl = el.querySelector('#Image image');\nimageEl.setAttribute('xlink:href', objectImage);\n}\n@@ -190,7 +199,7 @@ export const generateCard = async ({\ng.id = 'background-' + id;\nconst p = g.nextElementSibling;\np.style = `fill:url(#${g.id});`;\n- }\n+ } */\n}\nconst image = await new Promise((accept, reject) => {\n",
        "chatgpt_cot": "Refactor elo assignment in convertCard function in updatecards.js for better readability and efficiency."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -182,8 +182,19 @@ router.get('/card/:id', async (req, res) => {\nif (ids) {\nreturn res.redirect(`/tool/card/${carddb.getMostReasonable(possibleName)._id}`);\n}\n+\n+ // if id is a foreign cardname, redirect to english version\n+ const english = carddb.getEnglishVersion(req.params.id);\n+ if (english) {\n+ return res.redirect(`/tool/card/${english}`);\n+ }\n+\n+ // otherwise just go to this ID.\nconst card = carddb.cardFromId(req.params.id);\nconst data = await Card.findOne({ cardName: card.name_lower });\n+ if (!data) {\n+ return res.status(404).render('misc/404', {});\n+ }\nconst cubes = await Promise.all(\nshuffle(data.cubes)\n",
        "org_msg": "Add card page redirect for english versions.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Add redirection for foreign cardnames and handle non-existent card IDs in tools_routes.js. Fixes potential redirection and 404 rendering issues."
    },
    {
        "org_diff": "diff --git a/src/util/Sort.js b/src/util/Sort.js @@ -340,8 +340,9 @@ export function getLabels(cube, sort) {\nvar items = [];\ncube.forEach(function(card, index) {\nif (card.details.elo) {\n- if (!items.includes(card.details.elo)) {\n- items.push(card.details.elo);\n+ const bucket = getEloBucket(card.details.elo);\n+ if (!items.includes(bucket)) {\n+ items.push(bucket);\n}\n}\n});\n@@ -356,6 +357,11 @@ export function getLabels(cube, sort) {\n}\n}\n+function getEloBucket(elo) {\n+ const bucket_floor = Math.round(elo / 50) * 50;\n+ return bucket_floor + '-' + (bucket_floor + 49);\n+}\n+\nvar price_buckets = [0.25, 0.5, 1, 2, 3, 4, 5, 7, 10, 15, 20, 25, 30, 40, 50, 75, 100];\n//returns the price bucket label at the index designating the upper bound\n@@ -641,7 +647,11 @@ export function cardGetLabels(card, sort) {\n} else if (sort == 'Unsorted') {\nreturn ['All'];\n} else if (sort == 'Elo') {\n- return [card.details.elo];\n+ if (card.details.elo) {\n+ return [getEloBucket(card.details.elo)];\n+ } else {\n+ return [];\n+ }\n}\n}\n",
        "org_msg": "Revised elo sort to use buckets of 50",
        "sim_msg": "Added Buy/Sell Volume and Base Volume\nVisit Binance.com",
        "sim_diff": "diff --git a/node-binance-api.js b/node-binance-api.js @@ -148,10 +148,10 @@ module.exports = function() {\nconst depthData = function(data) {\nlet bids = {}, asks = {}, obj;\nfor ( obj of data.bids ) {\n- bids[obj[0]] = obj[1];\n+ bids[obj[0]] = parseFloat(obj[1]);\n}\nfor ( obj of data.asks ) {\n- asks[obj[0]] = obj[1];\n+ asks[obj[0]] = parseFloat(obj[1]);\n}\nreturn {bids:bids, asks:asks};\n}\n@@ -159,18 +159,33 @@ module.exports = function() {\nlet symbol = depth.s, obj;\nif ( depth.u <= firstUpdateId ) return;\nfor ( obj of depth.b ) { //bids\n- depthCache[symbol].bids[obj[0]] = obj[1];\n+ depthCache[symbol].bids[obj[0]] = parseFloat(obj[1]);\nif ( obj[1] == '0.00000000' ) {\ndelete depthCache[symbol].bids[obj[0]];\n}\n}\nfor ( obj of depth.a ) { //asks\n- depthCache[symbol].asks[obj[0]] = obj[1];\n+ depthCache[symbol].asks[obj[0]] = parseFloat(obj[1]);\nif ( obj[1] == '0.00000000' ) {\ndelete depthCache[symbol].asks[obj[0]];\n}\n}\n};\n+ const depthVolume = function(symbol) {\n+ let cache = getDepthCache(symbol), quantity, price;\n+ let bidbase = 0, askbase = 0, bidqty = 0, askqty = 0;\n+ for ( price in cache.bids ) {\n+ quantity = cache.bids[price];\n+ bidbase+= parseFloat((quantity * parseFloat(price)).toFixed(8));\n+ bidqty+= quantity;\n+ }\n+ for ( price in cache.asks ) {\n+ quantity = cache.asks[price];\n+ askbase+= parseFloat((quantity * parseFloat(price)).toFixed(8));\n+ askqty+= quantity;\n+ }\n+ return {bids: bidbase, asks: askbase, bidQty: bidqty, askQty: askqty};\n+ };\nconst getDepthCache = function(symbol) {\nif ( typeof depthCache[symbol] == \"undefined\" ) return {bids: {}, asks: {}};\nreturn depthCache[symbol];\n@@ -180,24 +195,29 @@ module.exports = function() {\ndepthCache: function(symbol) {\nreturn getDepthCache(symbol);\n},\n- sortBids: function(symbol, max = Infinity) {\n+ depthVolume: function(symbol) {\n+ return depthVolume(symbol);\n+ },\n+ sortBids: function(symbol, max = Infinity, baseValue = false) {\nlet object = {}, count = 0, cache;\nif ( typeof symbol == \"object\" ) cache = symbol;\nelse cache = getDepthCache(symbol).bids;\nlet sorted = Object.keys(cache).sort(function(a, b){return parseFloat(b)-parseFloat(a)});\nfor ( let price of sorted ) {\n- object[price] = cache[price];\n+ if ( !baseValue ) object[price] = cache[price];\n+ else object[price] = parseFloat((cache[price] * parseFloat(price)).toFixed(8));\nif ( ++count > max ) break;\n}\nreturn object;\n},\n- sortAsks: function(symbol, max = Infinity) {\n+ sortAsks: function(symbol, max = Infinity, baseValue = false) {\nlet object = {}, count = 0, cache;\nif ( typeof symbol == \"object\" ) cache = symbol;\n- else cache = getDepthCache(symbol).asks;\n+ else cache = getDepthCache(sparseFloatymbol).asks;\nlet sorted = Object.keys(cache).sort(function(a, b){return parseFloat(a)-parseFloat(b)});\nfor ( let price of sorted ) {\n- object[price] = cache[price];\n+ if ( !baseValue ) object[price] = cache[price];\n+ else object[price] = parseFloat((cache[price] * parseFloat(price)).toFixed(8));\nif ( ++count > max ) break;\n}\nreturn object;\n",
        "chatgpt_cot": "Add getEloBucket function, update getLabels and cardGetLabels to use getEloBucket to categorize elo into buckets."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -91,16 +91,16 @@ function downloadFile(url, filePath) {\n}\nasync function downloadDefaultCards(basePath = 'private', defaultSourcePath = null, allSourcePath = null) {\n- let defaultUrl = 'https://archive.scryfall.com/json/scryfall-default-cards.json';\n- let allUrl = 'https://archive.scryfall.com/json/scryfall-all-cards.json';\n+ let defaultUrl;\n+ let allUrl;\n- const res = await fetch(`https://api.scryfall.com/bulk-data`);\n+ const res = await fetch('https://api.scryfall.com/bulk-data');\nconst json = await res.json();\nfor (const data of json.data) {\n- if (data.name === 'Default Cards') {\n+ if (data.type === 'default_cards') {\ndefaultUrl = data.download_uri;\n- } else if (data.name === 'All Cards') {\n+ } else if (data.type === 'all_cards') {\nallUrl = data.download_uri;\n}\n}\n",
        "org_msg": "remove obsolete default from download",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "\"Update downloadDefaultCards function to handle different types of card data, using type instead of name for comparison.\""
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -31,41 +31,39 @@ function arrangePicks(picks) {\ndraft.picks[0] = [...picks];\n}\n-const fetchLands = [\n- 'Arid Mesa',\n- 'Bloodstained Mire',\n- 'Flooded Strand',\n- 'Marsh Flats',\n- 'Misty Rainforest',\n- 'Polluted Delta',\n- 'Scalding Tarn',\n- 'Verdant Catacombs',\n- 'Windswept Heath',\n- 'Wooded Foothills',\n-];\n+const fetchLands = {\n+ 'Arid Mesa': ['W', 'R'],\n+ 'Bloodstained Mire': ['B', 'R'],\n+ 'Flooded Strand': ['W', 'U'],\n+ 'Marsh Flats': ['W', 'B'],\n+ 'Misty Rainforest': ['U', 'G'],\n+ 'Polluted Delta': ['U', 'B'],\n+ 'Scalding Tarn': ['U', 'R'],\n+ 'Verdant Catacombs': ['B', 'G'],\n+ 'Windswept Heath': ['W', 'G'],\n+ 'Wooded Foothills': ['R', 'G'],\n+};\nfunction botRating(botColors, card) {\nlet rating = draft.ratings[card.details.name];\n- const colors = card.colors || card.details.color_identity;\n+ const colors = fetchLands[card.details.name] || card.colors || card.details.color_identity;\nconst subset = arrayIsSubset(colors, botColors) && colors.length > 0;\nconst colorless = colors.length === 0;\nconst overlap = botColors.some((c) => colors.includes(c));\nconst typeLine = card.type_line || card.details.type;\nconst isLand = typeLine.indexOf('Land') > -1;\n- const isFetch = fetchLands.includes(card.details.name);\n+ const isFetch = !!fetchLands[card.details.name];\nif (isLand) {\nif (subset || (overlap && isFetch)) {\n- rating += 300;\n+ rating *= 1.2;\n} else if (overlap) {\n- rating += 150;\n+ rating *= 1.1;\n}\n- } else if (subset) {\n- rating += 225;\n- } else if (colorless) {\n- rating += 150;\n+ } else if (subset || colorless) {\n+ rating *= 1.15;\n} else if (overlap) {\n- rating += 75;\n+ rating *= 1.05;\n}\nreturn rating;\n",
        "org_msg": "Back to multiplier rating adjustments.",
        "sim_msg": "Add initial build color coding",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -189,6 +189,8 @@ const HEIGHTFIELD_SHADER = {\n`\n};\nconst _getSliceIndex = (x, y, z) => z + y*NUM_PARCELS + x*NUM_PARCELS*NUM_PARCELS;\n+const _getBuildKey = p => [p.x,p.y,p.z].join(':');\n+const buildMap = {};\nlet nextId = 0;\nfunction meshIdToArray(meshId) {\n@@ -776,6 +778,20 @@ let wallMesh = null;\nwallMesh.visible = false;\nworldContainer.add(wallMesh);\n})();\n+const redBuildMeshMaterial = new THREE.ShaderMaterial({\n+ vertexShader: `\n+ void main() {\n+ gl_Position = projectionMatrix * modelViewMatrix * vec4(position * 1.05, 1.);\n+ }\n+ `,\n+ fragmentShader: `\n+ void main() {\n+ gl_FragColor = vec4(${new THREE.Color(0xff7043).toArray().join(', ')}, 0.5);\n+ }\n+ `,\n+ // side: THREE.DoubleSide,\n+ transparent: true,\n+});\nconst addMesh = (() => {\nconst geometry = BufferGeometryUtils.mergeBufferGeometries([\n@@ -1608,7 +1624,6 @@ function animate(timestamp, frame) {\n.add(localVector2.set(0, 0, -BUILD_SNAP).applyQuaternion(localQuaternion))\n.add(localVector2.set(0, -BUILD_SNAP/2, 0))\n// .add(localVector2.set(BUILD_SNAP/2, 0, 0).applyQuaternion(localQuaternion2));\n- _snapPosition(buildMesh.position);\nlocalEuler.setFromQuaternion(localQuaternion, 'YXZ');\nlocalEuler.x = 0;\n@@ -1620,6 +1635,24 @@ function animate(timestamp, frame) {\nbuildMesh.matrix.compose(buildMesh.position, buildMesh.quaternion, buildMesh.scale)\n.premultiply(localMatrix2.getInverse(worldContainer.matrix))\n.decompose(buildMesh.position, buildMesh.quaternion, buildMesh.scale);\n+ _snapPosition(buildMesh.position);\n+\n+ const buildKey = _getBuildKey(buildMesh.position);\n+ if (!buildMap[buildKey]) {\n+ buildMesh.traverse(o => {\n+ if (o.isMesh && o.originalMaterial) {\n+ o.material = o.originalMaterial;\n+ o.originalMaterial = null;\n+ }\n+ });\n+ } else {\n+ buildMesh.traverse(o => {\n+ if (o.isMesh && !o.originalMaterial) {\n+ o.originalMaterial = o.material;\n+ o.material = redBuildMeshMaterial;\n+ }\n+ });\n+ }\nbuildMesh.visible = true;\n}\n@@ -1711,8 +1744,12 @@ function animate(timestamp, frame) {\ndefault: return null;\n}\n})();\n+ const buildKey = _getBuildKey(buildMesh.position);\n+ if (!buildMap[buildKey]) {\nconst buildMeshClone = buildMesh.clone();\nworldContainer.add(buildMeshClone);\n+ buildMap[buildKey] = true;\n+ }\n}\n}\n",
        "chatgpt_cot": "Refactor fetchLands array to object, update botRating logic for card details, and improve rating calculation for Draft.js file."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -780,9 +780,6 @@ export function getLabels(cube, sort) {\nfunction sortGroupsOrdered(cards, sort) {\nconst labels = getLabelsRaw(cards, sort);\n- console.log(labels);\n- console.log(cards);\n- console.log(sort);\nconst allCardLabels = cards.map((card) => [card, cardGetLabels(card, sort)]);\nconst compare = (x, y) => labels.indexOf(x) - labels.indexOf(y);\nconst byLabel = {};\n",
        "org_msg": "Fix empty modal init",
        "sim_msg": "Retain original data order if no sorting is found",
        "sim_diff": "diff --git a/src/componentMethods.js b/src/componentMethods.js @@ -273,6 +273,9 @@ export default {\n// }]\n},\nsortData (data, sorting) {\n+ if (!sorting.length) {\n+ return data\n+ }\nconst sorted = _.orderBy(data, sorting.map(sort => {\nreturn row => {\nif (row[sort.id] === null || row[sort.id] === undefined) {\n",
        "chatgpt_cot": "\"Remove console logs and optimize sortGroupsOrdered function for better performance and code cleanliness in Sort.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2570,7 +2570,7 @@ router.get('/api/getcardfromid/:id', function(req, res) {\nrouter.get('/api/getversions/:id', function(req, res) {\ncards = [];\ntcg = [];\n- carddb.nameToId[carddb.cardFromId(req.params.id).name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")].forEach(function(id, index) {\n+ carddb.allIds(carddb.cardFromId(req.params.id)).forEach(function(id, index) {\nconst card = carddb.cardFromId(id);\ncards.push(card);\nif (card.tcgplayer_id) {\n",
        "org_msg": "use carddb.allIds for version lookup",
        "sim_msg": "Update fetch to look at new image location",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -32,7 +32,9 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.png');\n- var imagesrc = 'bundles/card_images/';\n+ var imagePack = card.pack_cards[0].pack.id;\n+ var imagesrc = 'bundles/card_images/' + imagePack;\n+\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n",
        "chatgpt_cot": "Refactor card version retrieval method in cube_routes.js for consistency. Fix card name normalization and simplify logic for fetching card versions."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2301,6 +2301,13 @@ router.get('/deck/:id', function(req, res) {\nloginCallback: '/cube/deck/' + req.params.id\n});\n} else {\n+ deck.playerdeck.forEach(function(col, ind)\n+ {\n+ col.forEach(function(card, index)\n+ {\n+ card.details.display_image = util.getCardImageURL(card);\n+ });\n+ });\n//new format\nfor (i = 0; i < deck.cards.length; i++) {\nvar bot_deck = [];\n@@ -2308,7 +2315,9 @@ router.get('/deck/:id', function(req, res) {\nif (carddb.cardFromId(cardid).error) {\nconsole.log(req.params.id + \": Could not find seat \" + (bot_decks.length + 1) + \", pick \" + (bot_deck.length + 1));\n} else {\n- bot_deck.push(carddb.cardFromId(cardid));\n+ card.details = carddb.cardFromId(cardid);\n+ card.details.display_image = util.getCardImageURL(card);\n+ bot_deck.push(card.details);\n}\n});\nbot_decks.push(bot_deck);\n",
        "org_msg": "Fix old decks",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "Add functionality to update card details and display image in deck playerdeck; fix issue with card details and display image in bot_deck."
    },
    {
        "org_diff": "diff --git a/src/components/Markdown.js b/src/components/Markdown.js @@ -123,7 +123,9 @@ const Markdown = ({ markdown, limited }) => {\nconst renderers = {\n// overridden defaults\nlink: renderLink,\n+ linkReference: renderLink,\nimage: renderImage,\n+ imageReference: renderImage,\nblockquote: renderBlockQuote,\n// plugins\nmath: renderMath,\n",
        "org_msg": "link references now also use correct renderers",
        "sim_msg": "capture http links",
        "sim_diff": "diff --git a/components/system/components/Markdown.js b/components/system/components/Markdown.js @@ -11,7 +11,8 @@ export const Markdown = ({ md, options }) => {\n{\nunified()\n.use(parse)\n- .use(linkifyRegex(/[@#](\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g))\n+ .use(linkifyRegex(/[@#](\\w*[0-9a-zA-Z-_]+\\w*[0-9a-zA-Z-_])/g)) // @user #tag\n+ .use(linkifyRegex(/^(https?):\\/\\/[^\\s$.?#].[^\\s]*$/gm)) // http(s) links\n.use(remark2react, options)\n.processSync(md).result\n}\n",
        "chatgpt_cot": "Add renderLink and renderImage methods to Markdown.js to override defaults and fix rendering issues with links and images."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -19,6 +19,7 @@ var {\nvar analytics = require('../serverjs/analytics.js');\nvar draftutil = require('../serverjs/draftutil.js');\nvar carddb = require('../serverjs/cards.js');\n+carddb.initializeCardDb();\nvar util = require('../serverjs/util.js');\nconst tcgconfig = require('../../cubecobrasecrets/tcgplayer');\nvar mergeImages = require('merge-images');\n",
        "org_msg": "initialize carddb after import",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "\"Add initialization of card database in cube_routes.js to ensure proper functioning of card related functionalities.\""
    },
    {
        "org_diff": "diff --git a/src/util/Sort.js b/src/util/Sort.js @@ -590,7 +590,7 @@ export function cardGetLabels(card, sort) {\n} else if (price >= price_buckets[price_buckets.length - 1]) {\nreturn [price_bucket_label(price_buckets.length)];\n} else {\n- for (i = 1; i < price_buckets.length; i++) {\n+ for (let i = 1; i < price_buckets.length; i++) {\nif (price >= price_buckets[i - 1] && price < price_buckets[i]) {\nreturn [price_bucket_label(i)];\n}\n@@ -607,7 +607,7 @@ export function cardGetLabels(card, sort) {\n} else if (card.details.price_foil >= price_buckets[price_buckets.length - 1]) {\nreturn [price_bucket_label(price_buckets.length)];\n} else {\n- for (i = 1; i < price_buckets.length; i++) {\n+ for (let i = 1; i < price_buckets.length; i++) {\nif (card.details.price_foil >= price_buckets[i - 1] && card.details.price_foil < price_buckets[i]) {\nreturn [price_bucket_label(i)];\n}\n",
        "org_msg": "Fix bug with price/price_foil sorting.",
        "sim_msg": "Optimize Sorts\nNo need to parseFloat() on float values",
        "sim_diff": "diff --git a/node-binance-api.js b/node-binance-api.js @@ -2425,16 +2425,14 @@ let api = function Binance( options = {} ) {\nlet object = {}, count = 0, cache;\nif ( typeof symbol === 'object' ) cache = symbol;\nelse cache = getDepthCache( symbol ).bids;\n- let sorted = Object.keys( cache ).sort( function ( a, b ) {\n- return parseFloat( b ) - parseFloat( a )\n- } );\n+ const sorted = Object.keys( cache ).sort( ( a, b ) => parseFloat( b ) - parseFloat( a ) );\nlet cumulative = 0;\nfor ( let price of sorted ) {\n- if ( baseValue === 'cumulative' ) {\n- cumulative += parseFloat( cache[price] );\n+ if ( !baseValue ) object[price] = cache[price];\n+ else if ( baseValue === 'cumulative' ) {\n+ cumulative += cache[price];\nobject[price] = cumulative;\n- } else if ( !baseValue ) object[price] = parseFloat( cache[price] );\n- else object[price] = parseFloat( ( cache[price] * parseFloat( price ) ).toFixed( 8 ) );\n+ } else object[price] = parseFloat( ( cache[price] * parseFloat( price ) ).toFixed( 8 ) );\nif ( ++count >= max ) break;\n}\nreturn object;\n@@ -2451,16 +2449,14 @@ let api = function Binance( options = {} ) {\nlet object = {}, count = 0, cache;\nif ( typeof symbol === 'object' ) cache = symbol;\nelse cache = getDepthCache( symbol ).asks;\n- let sorted = Object.keys( cache ).sort( function ( a, b ) {\n- return parseFloat( a ) - parseFloat( b );\n- } );\n+ const sorted = Object.keys( cache ).sort( ( a, b ) => parseFloat( a ) - parseFloat( b ) );\nlet cumulative = 0;\nfor ( let price of sorted ) {\n- if ( baseValue === 'cumulative' ) {\n- cumulative += parseFloat( cache[price] );\n+ if ( !baseValue ) object[price] = cache[price];\n+ else if ( baseValue === 'cumulative' ) {\n+ cumulative += cache[price];\nobject[price] = cumulative;\n- } else if ( !baseValue ) object[price] = parseFloat( cache[price] );\n- else object[price] = parseFloat( ( cache[price] * parseFloat( price ) ).toFixed( 8 ) );\n+ } else object[price] = parseFloat( ( cache[price] * parseFloat( price ) ).toFixed( 8 ) );\nif ( ++count >= max ) break;\n}\nreturn object;\n",
        "chatgpt_cot": "Fix iteration variable declaration to let in Sort.js. The modification ensures proper scoping and prevents potential issues with variable reassignment."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeDraftPage.js b/src/pages/CubeDraftPage.js @@ -39,6 +39,10 @@ const canDrop = (source, target) => {\nreturn target.type === Location.PICKS;\n};\n+const showPack = (draft, packNum) => {\n+ return packNum <= draft.initial_state[0].length;\n+};\n+\nconst Pack = ({ pack, packNumber, pickNumber, picking, onMoveCard, onClickCard }) => (\n<Card className=\"mt-3\">\n<CardHeader>\n@@ -197,6 +201,7 @@ const CubeDraftPage = ({ cube, cubeID, initialDraft }) => {\n<Input type=\"hidden\" name=\"body\" value={Draft.id()} />\n</CSRFForm>\n<DndProvider>\n+ {showPack(initialDraft, packNumber) && (\n<ErrorBoundary>\n<Pack\npack={pack}\n@@ -207,6 +212,7 @@ const CubeDraftPage = ({ cube, cubeID, initialDraft }) => {\nonClickCard={handleClickCard}\n/>\n</ErrorBoundary>\n+ )}\n<ErrorBoundary className=\"mt-3\">\n<DeckStacks\ncards={picks}\n",
        "org_msg": "hides pack component when final card is picked in a draft",
        "sim_msg": "move makeFillRangeItems outside preSelect",
        "sim_diff": "diff --git a/src/components/selections/select.js b/src/components/selections/select.js @@ -27,6 +27,7 @@ var newSelections = require('./draw_newselection/newselections');\nvar activateLastSelection = require('./draw').activateLastSelection;\nvar Lib = require('../../lib');\n+var ascending = Lib.sorterAsc;\nvar polygon = require('../../lib/polygon');\nvar throttle = require('../../lib/throttle');\nvar getFromId = require('../../plots/cartesian/axis_ids').getFromId;\n@@ -85,7 +86,6 @@ function prepSelect(evt, startX, startY, dragOptions, mode) {\nvar pw = xAxis._length;\nvar ph = yAxis._length;\n- var allAxes = dragOptions.xaxes.concat(dragOptions.yaxes);\nvar subtract = evt.altKey &&\n!(drawMode(mode) && isOpenMode);\n@@ -141,53 +141,9 @@ function prepSelect(evt, startX, startY, dragOptions, mode) {\nvar searchTraces = determineSearchTraces(gd, dragOptions.xaxes,\ndragOptions.yaxes, dragOptions.subplot);\n- function ascending(a, b) { return a - b; }\n-\n// allow subplots to override fillRangeItems routine\n- var fillRangeItems;\n-\n- if(plotinfo.fillRangeItems) {\n- fillRangeItems = plotinfo.fillRangeItems;\n- } else {\n- fillRangeItems = function(eventData, poly, filterPoly) {\n- var range = {};\n- var ranges = {};\n-\n- var hasRange = false;\n- var hasRanges = false;\n-\n- for(i = 0; i < allAxes.length; i++) {\n- var ax = allAxes[i];\n- var axLetter = ax._id.charAt(0);\n-\n- var min = poly[axLetter + 'min'];\n- var max = poly[axLetter + 'max'];\n-\n- if(min !== undefined && max !== undefined) {\n- range[ax._id] = [\n- p2r(ax, min),\n- p2r(ax, max)\n- ].sort(ascending);\n-\n- hasRange = true;\n- }\n-\n- if(filterPoly.filtered) {\n- ranges[ax._id] = filterPoly.filtered.map(axValue(ax));\n-\n- hasRanges = true;\n- }\n- }\n-\n- if(hasRange) {\n- eventData.range = range;\n- }\n-\n- if(hasRanges) {\n- eventData.lassoPoints = ranges;\n- }\n- };\n- }\n+ var fillRangeItems = plotinfo.fillRangeItems ||\n+ makeFillRangeItems(dragOptions.xaxes.concat(dragOptions.yaxes));\ndragOptions.moveFn = function(dx0, dy0) {\nx1 = Math.max(0, Math.min(pw, scaleX * dx0 + x0));\n@@ -1310,6 +1266,47 @@ function convert(ax, d) {\nreturn ax.type === 'log' ? ax.c2p(d) : ax.r2p(d, null, ax.calendar);\n}\n+function makeFillRangeItems(allAxes) {\n+ return function(eventData, poly, filterPoly) {\n+ var range = {};\n+ var ranges = {};\n+\n+ var hasRange = false;\n+ var hasRanges = false;\n+\n+ for(var i = 0; i < allAxes.length; i++) {\n+ var ax = allAxes[i];\n+ var axLetter = ax._id.charAt(0);\n+\n+ var min = poly[axLetter + 'min'];\n+ var max = poly[axLetter + 'max'];\n+\n+ if(min !== undefined && max !== undefined) {\n+ range[ax._id] = [\n+ p2r(ax, min),\n+ p2r(ax, max)\n+ ].sort(ascending);\n+\n+ hasRange = true;\n+ }\n+\n+ if(filterPoly && filterPoly.filtered) {\n+ ranges[ax._id] = filterPoly.filtered.map(axValue(ax));\n+\n+ hasRanges = true;\n+ }\n+ }\n+\n+ if(hasRange) {\n+ eventData.range = range;\n+ }\n+\n+ if(hasRanges) {\n+ eventData.lassoPoints = ranges;\n+ }\n+ };\n+}\n+\nmodule.exports = {\nreselect: reselect,\nprepSelect: prepSelect,\n",
        "chatgpt_cot": "\"Add showPack function to CubeDraftPage to display packs and fix compilation issue\""
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -138,11 +138,13 @@ router.post('/lostpasswordreset', function(req, res) {\nif (!user) {\nreq.flash('danger', 'No user with that email found! Are you sure you created an account?');\nres.render('user/passwordreset');\n+ return;\n}\nif (req.body.password2 != req.body.password) {\nreq.flash('danger', 'New passwords don\\'t match');\nres.render('user/passwordreset');\n- } else {\n+ return;\n+ }\nbcrypt.genSalt(10, function(err, salt) {\nif (err) {\nconsole.error('Password reset genSalt error:', err);\n@@ -167,7 +169,6 @@ router.post('/lostpasswordreset', function(req, res) {\n}\n});\n});\n- }\n});\n}\n});\n",
        "org_msg": "Prevent multiple responses.",
        "sim_msg": "fix(web): trimming password on login for consistency",
        "sim_diff": "diff --git a/src/webroutes/authentication/verifyPassword.js b/src/webroutes/authentication/verifyPassword.js @@ -28,7 +28,7 @@ module.exports = async function AuthVerify(ctx) {\nrenderData.message = 'Wrong Password!';\nreturn ctx.utils.render('login', renderData);\n}\n- if (!VerifyPasswordHash(ctx.request.body.password, admin.password_hash)) {\n+ if (!VerifyPasswordHash(ctx.request.body.password.trim(), admin.password_hash)) {\nlogWarn(`Wrong password for from: ${ctx.ip}`);\nrenderData.message = 'Wrong Password!';\nreturn ctx.utils.render('login', renderData);\n",
        "chatgpt_cot": "Fix issue with password reset form validation and add early return to improve code readability."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2233,7 +2233,7 @@ router.post('/editdeck/:id', ensureAuth, async (req, res) => {\nawait deck.save();\n- req.flash('success', 'Deck saved succesfully');\n+ req.flash('success', 'Deck saved successfully');\nreturn res.redirect(`/cube/deck/${deck._id}`);\n} catch (err) {\nreturn util.handleRouteError(res, req, err, '/404');\n",
        "org_msg": "Fix typo\nAdded extra s",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "Fix typo in flash message for successful deck save in cube_routes file."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1272,7 +1272,7 @@ async function bulkUpload(req, res, list, cube) {\nif ((cards[0].match(/,/g) || []).length > 3) {\nlet newCards = [];\nlet newMaybe = [];\n- ({ newCards, newMaybe, missing } = await CSVtoCards(list, carddb));\n+ ({ newCards, newMaybe, missing } = CSVtoCards(list, carddb));\nchangelog = newCards.reduce((changes, card) => changes + addCardHtml(carddb.cardFromId(card.cardID)), changelog);\ncube.cards.push(...newCards);\ncube.maybe.push(...newMaybe);\n@@ -1394,7 +1394,7 @@ router.post('/bulkreplacefile/:id', ensureAuth, async (req, res) => {\nlet newCards = [];\nlet newMaybe = [];\nif ((lines[0].match(/,/g) || []).length > 3) {\n- ({ newCards, newMaybe, missing } = await CSVtoCards(items, carddb));\n+ ({ newCards, newMaybe, missing } = CSVtoCards(items, carddb));\ncube.cards = newCards;\ncube.maybe = newMaybe;\nconst pids = new Set();\n",
        "org_msg": "Remove extraneous awaits.",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "Fix CSVtoCards method call in bulkUpload and bulkreplacefile routes to resolve compilation issue and ensure correct functionality in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -867,7 +867,7 @@ router.get('/playtest/:id', async (req, res) => {\nrouter.get('/analysis/:id', async (req, res) => {\ntry {\n- const cube = await Cube.findOne(build_id_query(req.params.id));\n+ const cube = await Cube.findOne(build_id_query(req.params.id)).lean();\nif (!cube) {\nreq.flash('danger', 'Cube not found');\n",
        "org_msg": "Fix analysis route performance.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Add lean() method to Cube.findOne() in cube_routes.js for performance optimization. Fix potential issue with Cube not found flash message."
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -45,8 +45,8 @@ async function matchingCards(filter) {\nconst history = historyDict.get(card.oracle_id);\nreturn {\n...card,\n- picks: history?.current.picks,\n- cubes: history?.current.cubes,\n+ picks: history ? history.current.picks : undefined,\n+ cubes: history ? history.current.cubes : undefined,\nsecondPass: true,\n};\n});\n",
        "org_msg": "Crash hotfix",
        "sim_msg": "extracted checkbox logic to function",
        "sim_diff": "diff --git a/packages/component-library/src/CardList/CardList.js b/packages/component-library/src/CardList/CardList.js @@ -123,6 +123,21 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\nsetMobileOpen(!mobileOpen);\n};\n+ const handleCheckboxChange = (category, id) => {\n+ if (showAllStories) setShowAllStories(false);\n+ if (activeFilters[category].includes(id)) {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: activeFilters[category].filter(tag => tag !== id)\n+ });\n+ } else {\n+ setActiveFilters({\n+ ...activeFilters,\n+ [category]: [...activeFilters[category], id]\n+ });\n+ }\n+ };\n+\nconst drawer = (\n<div className={classes.toolbar}>\n<h1 css={filterPadding}>Filters</h1>\n@@ -151,22 +166,7 @@ const CardList = ({ CardRegistry, tagsList, projects }) => {\n<Checkbox\nvalue={activeFilters[category].includes(id)}\nlabel={id}\n- onChange={() => {\n- if (showAllStories) setShowAllStories(false);\n- if (activeFilters[category].includes(id)) {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: activeFilters[category].filter(\n- tag => tag !== id\n- )\n- });\n- } else {\n- setActiveFilters({\n- ...activeFilters,\n- [category]: [...activeFilters[category], id]\n- });\n- }\n- }}\n+ onChange={() => handleCheckboxChange(category, id)}\n/>\n</ListItem>\n))}\n",
        "chatgpt_cot": "\"Refactor matchingCards function to handle undefined history.current.picks and history.current.cubes, fixing potential runtime errors.\""
    },
    {
        "org_diff": "diff --git a/src/components/BlogPost.js b/src/components/BlogPost.js @@ -92,7 +92,7 @@ class BlogPost extends React.Component {\n<Col className=\"col-l-7 col-m-6\">\n<CardBody className=\"py-2\">\n{post.markdown ? (\n- <Markdown markdown={post.markdown} />\n+ <Markdown markdown={post.markdown} limited />\n) : (\n<CardText dangerouslySetInnerHTML={{ __html: post.html }} />\n)}\n",
        "org_msg": "also removed heading links from changelog blog posts",
        "sim_msg": "Display loading icon if post is fetching",
        "sim_diff": "diff --git a/src/post/Post.js b/src/post/Post.js @@ -76,7 +76,7 @@ export default class Post extends React.Component {\n};\nrender() {\n- const { content } = this.props;\n+ const { content, fetching } = this.props;\nreturn (\n<div className=\"main-panel\">\n@@ -89,10 +89,13 @@ export default class Post extends React.Component {\n</div>\n</Affix>\n<div className=\"center\" style={{ paddingBottom: '24px' }}>\n- {content ? <PostContent content={content} /> : <Loading />}\n- {content && <VisibilitySensor onChange={this.handleCommentsVisibility} />}\n+ {content && !fetching\n+ ? <PostContent content={content} /> : <Loading />}\n+ {content && !fetching\n+ && <VisibilitySensor onChange={this.handleCommentsVisibility} />}\n<div id=\"comments\">\n- {content && <Comments show={this.state.commentsVisible} post={content} />}\n+ {content && !fetching\n+ && <Comments show={this.state.commentsVisible} post={content} />}\n</div>\n</div>\n</div>\n",
        "chatgpt_cot": "Add 'limited' prop to Markdown component in BlogPost.js to limit display length of markdown content."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -92,7 +92,12 @@ function downloadFile(url, filePath) {\n}\nconst stream = response.pipe(file);\n- stream.on('error', (err) => reject(new Error(`Error downloading file from '${url}':\\n${err.message}`)));\n+ response.on('error', (err) => {\n+ reject(new Error(`Response error downloading file from '${url}':\\n${err.message}`));\n+ response.unpipe(stream);\n+ stream.destroy();\n+ });\n+ stream.on('error', (err) => reject(new Error(`Pipe error downloading file from '${url}':\\n${err.message}`)));\nstream.on('finish', resolve);\n})\n.on('error', (err) => reject(new Error(`Download error for '${url}':\\n${err.message}`)));\n@@ -781,7 +786,7 @@ async function updateCardbase(ratings = [], basePath = 'private', defaultPath =\n} catch (error) {\nwinston.error('Downloading card data failed:');\nwinston.error(error.message);\n- winston.error('\\nCardbase was not updated');\n+ winston.error('Cardbase was not updated');\nreturn;\n}\n",
        "org_msg": "better error handlers for file download",
        "sim_msg": "assume cb is always supplied",
        "sim_diff": "diff --git a/lib/utils/utils.js b/lib/utils/utils.js @@ -161,7 +161,7 @@ function downloadFile(url, dest, cb) {\nvar file = o_fs.createWriteStream(dest);\n(url.substring(0, 5) === 'https' ? https : http).get(url, function (response) {\nif (response.statusCode !== 200) {\n- if (cb) cb(`Download failed, response code ${response.statusCode}`);\n+ cb(`Download failed, response code ${response.statusCode}`);\nreturn;\n}\nresponse.pipe(file);\n@@ -170,7 +170,7 @@ function downloadFile(url, dest, cb) {\n});\n}).on('error', function (err) {\no_fs.unlink(dest);\n- if (cb) cb(err.message);\n+ cb(err.message);\n});\n}\n",
        "chatgpt_cot": "\"Fix error handling and logging in updatecards.js file to ensure proper error messages and cardbase update status.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -99,7 +99,7 @@ router.post('/add', ensureAuth, async (req, res) => {\nif (cubes.length >= 48) {\nreq.flash(\n'danger',\n- 'Cannot create a cube: Users can only have 24 cubes. Please delete one or more cubes to create new cubes.',\n+ 'Cannot create a cube: Users can only have 48 cubes. Please delete one or more cubes to create new cubes.',\n);\nreturn res.redirect(`/user/view/${req.user.id}`);\n}\n@@ -140,10 +140,10 @@ router.get('/clone/:id', async (req, res) => {\nowner: req.user._id,\n}).lean();\n- if (cubes.length >= 24) {\n+ if (cubes.length >= 48) {\nreq.flash(\n'danger',\n- 'Cannot clone this cube: Users can only have 24 cubes. Please delete one or more cubes to create new cubes.',\n+ 'Cannot clone this cube: Users can only have 48 cubes. Please delete one or more cubes to create new cubes.',\n);\nreturn res.redirect(`/cube/list/${req.params.id}`);\n}\n@@ -1704,6 +1704,9 @@ router.post('/startsealed/:id', body('packs').toInt({ min: 1, max: 16 }), body('\nawait deck.save();\n+ if (!cube.numDecks) {\n+ cube.numDecks = 0;\n+ }\ncube.numDecks += 1;\nawait cube.save();\n@@ -2732,6 +2735,9 @@ router.post('/submitdeck/:id', async (req, res) => {\n});\n}\n+ if (!cube.numDecks) {\n+ cube.numDecks = 0;\n+ }\ncube.numDecks += 1;\nconst userq = User.findById(deck.seats[0].userid);\n@@ -2872,6 +2878,9 @@ router.get('/rebuild/:id/:index', ensureAuth, async (req, res) => {\n},\n];\n+ if (!cube.numDecks) {\n+ cube.numDecks = 0;\n+ }\ncube.numDecks += 1;\nconst userq = User.findById(req.user._id);\n",
        "org_msg": "Fix issue with null numDecks",
        "sim_msg": "Add missing route back in",
        "sim_diff": "diff --git a/app/router.js b/app/router.js @@ -125,6 +125,9 @@ Router.map(function() {\nthis.route('add', {path: '/add/:cloud_id'});\n});\n+ this.route('new', {path: '/add'}, function() {\n+ this.route('index', {path: '/'});\n+ });\nthis.route('host', {path: '/:host_id', resetNamespace: true}, function() {\nthis.route('containers');\n",
        "chatgpt_cot": "Increase cube limit to 48, add numDecks check to prevent NaN, and increment numDecks on cube actions."
    },
    {
        "org_diff": "diff --git a/public/css/editcube.css b/public/css/editcube.css {\nwidth:130px;\n}\n+.clickx\n+{\n+ color:black;\n+ font-weight: bold;\n+ text-decoration:none;\n+}\n+.clickx:hover\n+{\n+ color:red;\n+ font-weight: bold;\n+ text-decoration:none;\n+}\n",
        "org_msg": "Added group context remove\nAdded the ability to remove certain cards from the group modal select.",
        "sim_msg": "match mode toggle to left/right menus",
        "sim_diff": "diff --git a/web/mesh/index.css b/web/mesh/index.css @@ -317,9 +317,10 @@ button.selected:hover {\ntransform: translateX(-50%);\nalign-items: center;\njustify-content: center;\n+ background-color: rgba(255,255,255,0.5);\nborder: 1px solid rgba(0,0,0,0.5);\n- border-radius: 2px;\n- margin-top: 3px;\n+ border-radius: 3px;\n+ margin-top: 2px;\npadding: 3px;\ngap: 2px;\n}\n",
        "chatgpt_cot": "Add styling for clickx class in editcube.css. Set color to black, font-weight to bold, and text-decoration to none. Hover color changes to red."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2872,7 +2872,7 @@ router.get('/api/p1p1/:id/:seed', function(req, res) {\n});\n} else {\nconst pack = {\n- seed: seed,\n+ seed: req.params.seed,\npack: result.pack.map(card => card.name)\n};\nres.status(200).send(pack);\n",
        "org_msg": "Fixing p1p1 seeding",
        "sim_msg": "Fix script injection in 'unknown' parameter",
        "sim_diff": "diff --git a/service/routes/api.js b/service/routes/api.js @@ -64,7 +64,7 @@ router.get(/^\\/v2\\/polyfill(\\.\\w+)(\\.\\w+)?/, (req, res) => {\nstream: true\n};\nif (req.query.unknown) {\n- params.unknown = req.query.unknown;\n+ params.unknown = (req.query.unknown === 'polyfill') ? 'polyfill' : 'ignore';\n}\nif (uaString) {\nparams.uaString = uaString;\n",
        "chatgpt_cot": "Refactor cube_routes.js to use req.params.seed instead of seed variable for consistency and clarity."
    },
    {
        "org_diff": "diff --git a/src/components/ListView.js b/src/components/ListView.js @@ -150,8 +150,6 @@ class ListViewRaw extends Component {\n}\nhandleChange(event) {\n- event.preventDefault();\n-\nconst target = event.target;\nconst value = target.type === 'checkbox' ? target.checked : target.value;\nconst name = target.name;\n@@ -183,12 +181,11 @@ class ListViewRaw extends Component {\n// This breaks React invariants and we should figure out a different way to pass this data around.\n// Currently necessary to get the group context modal to work.\n- for (card of this.props.cards) {\n+ for (const card of this.props.cards) {\ncard.checked = value;\n}\nconst entries = this.props.cards.map(({ index }) => [`tdcheck${index}`, value]);\n- console.log(entries);\nthis.setState(Object.fromEntries(entries));\n}\n@@ -208,7 +205,7 @@ class ListViewRaw extends Component {\n'data-index': index,\nonChange: this.handleChange,\nonBlur: this.handleBlur,\n- [props.type === 'checkbox' ? 'checked' : 'value']: this.state[`td${field}${index}`],\n+ [field === 'check' ? 'checked' : 'value']: this.state[`td${field}${index}`],\n});\nconst rows =\n",
        "org_msg": "Fix list view checkbox issue.",
        "sim_msg": "chore: use appropriate name for event handlers",
        "sim_diff": "diff --git a/components/core/DataView.js b/components/core/DataView.js @@ -263,7 +263,7 @@ export default class DataView extends React.Component {\n_handleCheckScroll = Window.debounce(this._handleScroll, 200);\n- _handleCheckBox = (e) => {\n+ _handleTableCheckBox = (e) => {\nlet checked = this.state.checked;\nlet i = e.target.name;\n@@ -313,7 +313,7 @@ export default class DataView extends React.Component {\n}\n};\n- _handleCheckBoxSelection = (e, i) => {\n+ _handleGridCheckBox = (e, i) => {\ne.stopPropagation();\ne.preventDefault();\n@@ -594,7 +594,7 @@ export default class DataView extends React.Component {\n</Boundary>\n) : null}\n</div>\n- <div onClick={(e) => this._handleCheckBoxSelection(e, i)}>\n+ <div onClick={(e) => this._handleGridCheckBox(e, i)}>\n<CheckBox\nname={i}\nvalue={!!this.state.checked[i]}\n@@ -679,7 +679,7 @@ export default class DataView extends React.Component {\n<CheckBox\nname={index}\nvalue={!!this.state.checked[index]}\n- onChange={this._handleCheckBox}\n+ onChange={this._handleTableCheckBox}\nboxStyle={{ height: 16, width: 16 }}\nstyle={{\nposition: \"relative\",\n",
        "chatgpt_cot": "\"Refactor ListViewRaw component, remove preventDefault from handleChange, and fix iteration issue in handleBlur for better functionality.\""
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -122,7 +122,7 @@ const botRatingAndCombination = (seen, card, pool, overallPool) => {\nlet overallCount = 1;\nif (seen) {\nseenCount = inclusiveCount(combination, seen);\n- overallCount = inclusiveCount(combination, overallPool);\n+ overallCount = inclusiveCount(combination, overallPool) || 1;\n}\nconst openness = seenCount / overallCount;\nconst rating = poolRating * seenCount * openness * COLOR_SCALING_FACTOR[combination.length];\n",
        "org_msg": "Fix edge case of no cards in color combination.",
        "sim_msg": "Improve drafts page layout",
        "sim_diff": "diff --git a/src/post/Write/Drafts.js b/src/post/Write/Drafts.js @@ -26,12 +26,10 @@ let DraftRow = (props) => {\nDraftRow = connect(() => ({}), { deleteDraft })(DraftRow);\nconst DraftList = ({ editor: { draftPosts } }) =>\n- (\n<div className=\"main-panel\">\n<Header />\n- <div className=\"my-3\">\n+ <div className=\"my-3 container container-small\">\n<h1 className=\"text-xs-center\">Drafts</h1>\n- <div className=\"container\">\n{ _.size(draftPosts) === 0 &&\n<h3 className=\"text-xs-center\">\nYou don't have any draft saved.\n@@ -41,8 +39,6 @@ const DraftList = ({ editor: { draftPosts } }) =>\n<DraftRow key={key} data={draft.postData} id={key} />)\n}\n</div>\n- </div>\n- </div>\n- );\n+ </div>;\nexport default connect(state => ({ editor: state.editor }))(DraftList);\n",
        "chatgpt_cot": "\"Fix overallCount calculation in botRatingAndCombination function to prevent division by zero error\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/util.js b/__tests__/serverjs/util.js @@ -23,3 +23,47 @@ test(\"turnToTree returns a valid prefix tree\", () => {\nexpect(Object.keys(result.t).length).toBe(2);\nexpect(Object.keys(result.a).length).toBe(1);\n});\n+\n+test(\"binaryInsert inserts to an empty array\", () => {\n+ var testArray = [];\n+ var initialLength = testArray.length;\n+ var testValue = 1;\n+ util.binaryInsert(testValue, testArray);\n+ expect(testArray.length).toBe(initialLength + 1);\n+ expect(testArray[0]).toBe(testValue);\n+});\n+\n+test(\"binaryInsert inserts new maximum correctly to a sorted array\", () => {\n+ var testArray = [1, 2, 3, 4];\n+ var initialLength = testArray.length;\n+ var testValue = 5;\n+ util.binaryInsert(testValue, testArray);\n+ expect(testArray.length).toBe(initialLength + 1);\n+ expect(testArray[testArray.length - 1]).toBe(testValue);\n+});\n+\n+test(\"binaryInsert inserts new minimum correctly to a sorted array\", () => {\n+ var testArray = [1, 2, 3, 4];\n+ var initialLength = testArray.length;\n+ var testValue = 0;\n+ util.binaryInsert(testValue, testArray);\n+ expect(testArray.length).toBe(initialLength + 1);\n+ expect(testArray[0]).toBe(testValue);\n+});\n+\n+test(\"binaryInsert inserts new median correctly to a sorted array\", () => {\n+ var testArray = [1, 2, 4, 5];\n+ var initialLength = testArray.length;\n+ var testValue = 3;\n+ util.binaryInsert(testValue, testArray);\n+ expect(testArray.length).toBe(initialLength + 1);\n+ expect(testArray[initialLength / 2]).toBe(testValue);\n+});\n+\n+test(\"binaryInsert does not fail when input array is unsorted\", () => {\n+ var testArray = [1, 2, 9, 4];\n+ var initialLength = testArray.length;\n+ var testValue = 5;\n+ util.binaryInsert(testValue, testArray);\n+ expect(testArray.length).toBe(initialLength + 1);\n+});\n\\ No newline at end of file\n",
        "org_msg": "add tests for binaryInsert",
        "sim_msg": "test@method: merge.deep ramda compatible tests",
        "sim_diff": "diff --git a/src/mergeDeep.spec.js b/src/mergeDeep.spec.js @@ -17,7 +17,7 @@ const bBase = {\ntest('', () =>{\nconst result = mergeDeep(aBase,bBase)\nconst curryResult = mergeDeep(aBase)(bBase)\n- const expectedResult = {\n+ const expected = {\n\"age\": 40,\n\"name\": \"evilMe\",\n\"contact\": {\n@@ -27,6 +27,31 @@ test('', () =>{\nsongs: {title: 'Remains the same'}\n}\n- expect(result).toEqual(expectedResult)\n- expect(curryResult).toEqual(expectedResult)\n+ expect(result).toEqual(expected)\n+ expect(curryResult).toEqual(expected)\n+})\n+\n+test('Ramda compatible test 1', () => {\n+ var a = { w: 1, x: 2, y: { z: 3 }};\n+ var b = { a: 4, b: 5, c: { d: 6 }};\n+ const result = mergeDeep(a, b)\n+ const expected = { w: 1, x: 2, y: { z: 3 }, a: 4, b: 5, c: { d: 6 }}\n+\n+ expect(result).toEqual(expected)\n+})\n+\n+test('Ramda compatible test 2', () => {\n+ var a = { a: { b: 1, c: 2 }, y: 0 };\n+ var b = { a: { b: 3, d: 4 }, z: 0 };\n+ const result = mergeDeep(a, b)\n+ const expected = { a: { b: 3, c: 2, d: 4 }, y: 0, z: 0 }\n+\n+ expect(result).toEqual(expected)\n+})\n+\n+test('Ramda compatible test 3', () => {\n+ var a = { w: 1, x: { y: 2 }};\n+ var result = mergeDeep(a, { x: { y: 3 }});\n+ const expected = { w: 1, x: { y: 3 }}\n+ expect(result).toEqual(expected)\n})\n",
        "chatgpt_cot": "\"Add tests for binaryInsert function\""
    },
    {
        "org_diff": "diff --git a/serverjs/util.js b/serverjs/util.js @@ -217,7 +217,7 @@ const exports = {\n} else if (s && character === ',') {\n// not sure what's going on here...\n// eslint-disable-next-line\n- l = ret[++i] = '';\n+ character = ret[++i] = '';\n} else {\nret[i] += character;\n}\n",
        "org_msg": "missed a l->character conversion",
        "sim_msg": "update: prevent rewriting and reduce bytes",
        "sim_diff": "diff --git a/src/utils.js b/src/utils.js @@ -24,7 +24,7 @@ const absFloor = n => (n < 0 ? Math.ceil(n) || 0 : Math.floor(n))\nconst prettyUnit = u => (u && String(u).toLowerCase().replace(/s$/, ''))\n-const isUndefined = s => s === undefined\n+const isUndefined = s => s === void 0 // eslint-disable-line no-void\nexport default {\npadStart,\n",
        "chatgpt_cot": "Fix issue with character assignment in util.js"
    },
    {
        "org_diff": "diff --git a/src/components/MagicMarkdown.js b/src/components/MagicMarkdown.js @@ -15,7 +15,7 @@ const Link = withModal('a', LinkModal);\nconst InnerMarkdown = ({ markdown }) => {\nconst markdownStr = markdown.toString();\nconst split = markdownStr.split(\n- /(\\[.+?\\]\\(.+?\\)|@[a-zA-Z0-9_]+|\\*\\*\\*[^*]+?\\*\\*\\*|\\*\\*[^*]+?\\*\\*|\\*[^*]+?\\*|_[^_]+?_|__[^_]+?__|___[^_]+?___|~~[^~]+?~~|{[wubrgcmtqepxyzWUBRGCMTQEPXYZ\\d/-]+?}|\\[\\[!?[/]?[a-zA-Z ',-|]+?\\]\\]|%%\\d+%%|\\$\\$[^$]+?\\$\\$|\\$\\$\\$[^$]+?\\$\\$\\$|\\n)/gm,\n+ /(\\[.+?\\]\\(.+?\\)|@[a-zA-Z0-9_]+|\\*\\*\\*[^*]+?\\*\\*\\*|\\*\\*[^*]+?\\*\\*|\\*[^*]+?\\*|_[^_]+?_|__[^_]+?__|___[^_]+?___|~~[^~]+?~~|{[wubrgcmtsqepxyzWUBRGCMTSQEPXYZ\\d/-]+?}|\\[\\[!?[/]?[a-zA-Z ',-|]+?\\]\\]|%%\\d+%%|\\$\\$[^$]+?\\$\\$|\\$\\$\\$[^$]+?\\$\\$\\$|\\n)/gm,\n);\nreturn (\n<>\n",
        "org_msg": "Re-added snow symbol",
        "sim_msg": "Update regex to support a wider variety of email addresses.",
        "sim_diff": "diff --git a/src/core/operations/ExtractEmailAddresses.mjs b/src/core/operations/ExtractEmailAddresses.mjs @@ -39,8 +39,8 @@ class ExtractEmailAddresses extends Operation {\n*/\nrun(input, args) {\nconst displayTotal = args[0],\n- // email regex from: https://www.regular-expressions.info/email.html\n- regex = /\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b/ig;\n+ // email regex from: https://www.regextester.com/98066\n+ regex = /(?:[\\u00A0-\\uD7FF\\uE000-\\uFFFF-a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\u00A0-\\uD7FF\\uE000-\\uFFFF-a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[\\u00A0-\\uD7FF\\uE000-\\uFFFF-a-z0-9](?:[\\u00A0-\\uD7FF\\uE000-\\uFFFF-a-z0-9-]*[\\u00A0-\\uD7FF\\uE000-\\uFFFF-a-z0-9])?\\.)+[\\u00A0-\\uD7FF\\uE000-\\uFFFF-a-z0-9](?:[\\u00A0-\\uD7FF\\uE000-\\uFFFF-a-z0-9-]*[\\u00A0-\\uD7FF\\uE000-\\uFFFF-a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/ig;\nreturn search(input, regex, null, displayTotal);\n}\n",
        "chatgpt_cot": "\"Fix markdown parsing regex to include 't' in the character class, resolving issue with parsing certain markdown elements in MagicMarkdown.js\""
    },
    {
        "org_diff": "diff --git a/routes/cube/index.js b/routes/cube/index.js @@ -1252,7 +1252,7 @@ router.post(\nconst bots = draftutil.getDraftBots(params);\nconst format = draftutil.getDraftFormat(params, cube);\n- const draft = new Draft();\n+ let draft = new Draft();\nlet populated = {};\ntry {\npopulated = draftutil.createDraft(\n@@ -1287,6 +1287,44 @@ router.post(\n});\nawait draft.save();\n+\n+ if (req.body.botsOnly) {\n+ draft = await Draft.findById(draft._id).lean();\n+ // insert card details everywhere that needs them\n+ for (const seat of draft.unopenedPacks) {\n+ for (const pack of seat) {\n+ for (const card of pack) {\n+ card.details = carddb.cardFromId(card.cardID);\n+ if (eloOverrideDict[card.details.name_lower]) {\n+ card.details.elo = eloOverrideDict[card.details.name_lower];\n+ }\n+ }\n+ }\n+ }\n+\n+ for (const seat of draft.seats) {\n+ for (const collection of [seat.drafted, seat.sideboard, seat.packbacklog]) {\n+ for (const pack of collection) {\n+ for (const card of pack) {\n+ card.details = carddb.cardFromId(card.cardID);\n+ if (eloOverrideDict[card.details.name_lower]) {\n+ card.details.elo = eloOverrideDict[card.details.name_lower];\n+ }\n+ }\n+ }\n+ }\n+ for (const card of seat.pickorder) {\n+ card.details = carddb.cardFromId(card.cardID);\n+ if (eloOverrideDict[card.details.name_lower]) {\n+ card.details.elo = eloOverrideDict[card.details.name_lower];\n+ }\n+ }\n+ }\n+ return res.status(200).send({\n+ success: 'true',\n+ draft,\n+ });\n+ }\nreturn res.redirect(`/cube/draft/${draft._id}`);\n} catch (err) {\nreturn util.handleRouteError(req, res, err, `/cube/playtest/${encodeURIComponent(req.params.id)}`);\n",
        "org_msg": "Fix draftbot only draft",
        "sim_msg": "improve tests for Draft<T>",
        "sim_diff": "diff --git a/__tests__/types.ts b/__tests__/types.ts @@ -2,7 +2,8 @@ import produce, {\nproduce as produce2,\napplyPatches,\nDraft,\n- Patch\n+ Patch,\n+ DraftTuple\n} from \"../src/immer\"\ninterface State {\n@@ -111,104 +112,142 @@ it(\"can apply patches\", () => {\nconst toDraft = <T>(value: T): Draft<T> => value as any\nconst fromDraft = <T>(draft: Draft<T>): T => draft as any\n-// Finite tuple\n+// Tuple\n{\nlet val: [1, 2]\nval = fromDraft(toDraft(val))\n+ let draft: DraftTuple<typeof val> = toDraft(val)\n+}\n+\n+// Tuple (nested in a tuple)\n+{\n+ let val: [[1, 2]]\n+ val = fromDraft(toDraft(val))\n+ let draft: DraftTuple<typeof val> = toDraft(val)\n+}\n+\n+// Tuple (nested in two readonly arrays)\n+{\n+ let val: ReadonlyArray<ReadonlyArray<[1, 2]>>\n+ val = fromDraft(toDraft(val))\n+ let draft: DraftTuple<[1, 2]>[][] = toDraft(val)\n}\n// Mutable array\n{\nlet val: string[]\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// Readonly array\n{\nlet val: ReadonlyArray<string>\nval = fromDraft(toDraft(val))\n+ let draft: string[] = toDraft(val)\n}\n-// Tuple nested in two readonly arrays\n+// Readonly array (nested in readonly object)\n{\n- let val: ReadonlyArray<ReadonlyArray<[1, 2]>>\n+ let val: {readonly a: ReadonlyArray<string>}\nval = fromDraft(toDraft(val))\n+ let draft: {a: string[]} = toDraft(val)\n}\n// Mutable object\n{\nlet val: {a: 1}\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// Readonly object\n{\nlet val: Readonly<{a: 1}>\nval = fromDraft(toDraft(val))\n+ let draft: {a: 1} = toDraft(val)\n+}\n+\n+// Readonly object (nested in tuple)\n+{\n+ let val: [Readonly<{a: 1}>]\n+ val = fromDraft(toDraft(val))\n+ let draft: DraftTuple<[{a: 1}]> = toDraft(val)\n}\n// Loose function\n{\nlet val: Function\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// Strict function\n{\nlet val: () => void\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// Date instance\n{\nlet val: Date\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// RegExp instance\n{\nlet val: RegExp\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// Boxed primitive\n{\nlet val: Boolean\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// String literal\n{\nlet val: string\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// Any\n{\nlet val: any\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// Never\n{\nlet val: never\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// Numeral\n{\nlet val: 1\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// Union of numerals\n{\nlet val: 1 | 2 | 3\nval = fromDraft(toDraft(val))\n+ let draft: typeof val = toDraft(val)\n}\n// Union of tuple, array, object\n{\nlet val: [0] | ReadonlyArray<string> | Readonly<{a: 1}>\nval = fromDraft(toDraft(val))\n+ let draft: DraftTuple<[0]> | string[] | {a: 1} = toDraft(val)\n}\n",
        "chatgpt_cot": "\"Fix draft creation issue and add card details if botsOnly flag is set in index.js\""
    },
    {
        "org_diff": "diff --git a/.eslintignore b/.eslintignore @@ -17,7 +17,6 @@ src/components/ColorCheck.js\nsrc/components/CompareView.js\nsrc/components/CountTableRow.js\nsrc/components/CubeCompareNavbar.js\n-src/components/CubeListNavbar.js\nsrc/components/CubeOverviewModal.js\nsrc/components/DraggableCard.js\nsrc/components/DynamicFlash.js\n",
        "org_msg": "Fix most eslint issues in CubeListNavbar\nAlso adjust the help text for Import->Paste to make it easier to read",
        "sim_msg": "lint in titles/index.js\nuse `OPPOSITE_SIDE` constants\nuse `shiftSign` result in `maxshift` computation",
        "sim_diff": "diff --git a/src/components/titles/index.js b/src/components/titles/index.js @@ -20,10 +20,7 @@ var Color = require('../color');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar interactConstants = require('../../constants/interactions');\n-module.exports = {\n- draw: draw\n-};\n-\n+var OPPOSITE_SIDE = require('../../constants/alignment').OPPOSITE_SIDE;\nvar numStripRE = / [XY][0-9]* /;\n/**\n@@ -167,16 +164,10 @@ function draw(gd, titleClass, options) {\n// move toward avoid.side (= left, right, top, bottom) if needed\n// can include pad (pixels, default 2)\n- var shift = 0;\n- var backside = {\n- left: 'right',\n- right: 'left',\n- top: 'bottom',\n- bottom: 'top'\n- }[avoid.side];\n- var shiftSign = (['left', 'top'].indexOf(avoid.side) !== -1) ?\n- -1 : 1;\n+ var backside = OPPOSITE_SIDE[avoid.side];\n+ var shiftSign = (avoid.side === 'left' || avoid.side === 'top') ? -1 : 1;\nvar pad = isNumeric(avoid.pad) ? avoid.pad : 2;\n+\nvar titlebb = Drawing.bBox(titleGroup.node());\nvar paperbb = {\nleft: 0,\n@@ -184,12 +175,15 @@ function draw(gd, titleClass, options) {\nright: fullLayout.width,\nbottom: fullLayout.height\n};\n- var maxshift = avoid.maxShift || (\n- (paperbb[avoid.side] - titlebb[avoid.side]) *\n- ((avoid.side === 'left' || avoid.side === 'top') ? -1 : 1));\n+\n+ var maxshift = avoid.maxShift ||\n+ shiftSign * (paperbb[avoid.side] - titlebb[avoid.side]);\n+ var shift = 0;\n+\n// Prevent the title going off the paper\n- if(maxshift < 0) shift = maxshift;\n- else {\n+ if(maxshift < 0) {\n+ shift = maxshift;\n+ } else {\n// so we don't have to offset each avoided element,\n// give the title the opposite offset\nvar offsetLeft = avoid.offsetLeft || 0;\n@@ -211,6 +205,7 @@ function draw(gd, titleClass, options) {\n});\nshift = Math.min(maxshift, shift);\n}\n+\nif(shift > 0 || maxshift < 0) {\nvar shiftTemplate = {\nleft: [-shift, 0],\n@@ -218,8 +213,7 @@ function draw(gd, titleClass, options) {\ntop: [0, -shift],\nbottom: [0, shift]\n}[avoid.side];\n- titleGroup.attr('transform',\n- 'translate(' + shiftTemplate + ')');\n+ titleGroup.attr('transform', 'translate(' + shiftTemplate + ')');\n}\n}\n}\n@@ -265,3 +259,7 @@ function draw(gd, titleClass, options) {\nreturn group;\n}\n+\n+module.exports = {\n+ draw: draw\n+};\n",
        "chatgpt_cot": "Remove CubeListNavbar from .eslintignore"
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -148,16 +148,16 @@ router.post('/lostpassword', [body('email', 'Email is required').isEmail()], fla\nif (!req.validated) {\nres.render('user/lostpassword');\n} else {\n+ const recoveryEmail = req.body.email.toLowerCase()\nPasswordReset.deleteOne(\n{\n- email: req.body.email.toLowerCase(),\n+ email: recoveryEmail,\n},\n() => {\nconst passwordReset = new PasswordReset();\npasswordReset.expires = addMinutes(Date.now(), 15);\n- passwordReset.email = req.body.email;\n+ passwordReset.email = recoveryEmail;\npasswordReset.code = Math.floor(1000000000 + Math.random() * 9000000000);\n-\npasswordReset.save((err2) => {\nif (err2) {\nreq.logger.error(err2);\n@@ -191,7 +191,7 @@ router.post('/lostpassword', [body('email', 'Email is required').isEmail()], fla\nsmtpTransport.close();\n});\n- req.flash('success', 'Password recovery email sent');\n+ req.flash('success', `Password recovery email sent to ${recoveryEmail}`);\nres.redirect('/user/lostpassword');\n}\n});\n@@ -223,10 +223,11 @@ router.post(\nif (!req.validated) {\nres.render('user/passwordreset');\n} else {\n+ const recoveryEmail = req.body.email.toLowerCase()\nPasswordReset.findOne(\n{\ncode: req.body.code,\n- email: req.body.email,\n+ email: recoveryEmail,\n},\n(err2, passwordreset) => {\nif (!passwordreset) {\n@@ -235,7 +236,7 @@ router.post(\n} else {\nUser.findOne(\n{\n- email: req.body.email,\n+ email: recoveryEmail,\n},\n(err3, user) => {\nif (err3) {\n",
        "org_msg": "fix: update password reset to use lowercase emails\nrefactored all references to req.body.email to recoveryEmail and cast to lowercase.\nissue-1516",
        "sim_msg": "fix e2e test - when going back to default password, input current password\nadd test - wrong current password prevents password change",
        "sim_diff": "diff --git a/generators/client/templates/angular/src/test/javascript/e2e/account/_account.spec.ts b/generators/client/templates/angular/src/test/javascript/e2e/account/_account.spec.ts @@ -144,6 +144,31 @@ describe('account', () => {\n});\n});\n+ it('should fail to update password when using incorrect current password', () => {\n+ passwordPage = navBarPage.getPasswordPage();\n+\n+ <%_ if (enableTranslation) { _%>\n+ expect(passwordPage.getTitle()).toMatch(/password.title/);\n+ <%_ } else { _%>\n+ expect(passwordPage.getTitle()).toMatch(/Password for \\[admin\\]/);\n+ <%_ } _%>\n+\n+ passwordPage.setCurrentPassword('wrong_current_password');\n+ passwordPage.setPassword('newpassword');\n+ passwordPage.setConfirmPassword('newpassword');\n+ passwordPage.save();\n+\n+ <%_ if (enableTranslation) { _%>\n+ const expect2 = /password.messages.error/;\n+ <%_ } else { _%>\n+ const expect2 = /An error has occurred! The password could not be changed./;\n+ <%_ } _%>\n+ element.all(by.css('.alert-danger')).first().<%- elementGetter %>.then((value) => {\n+ expect(value).toMatch(expect2);\n+ });\n+ settingsPage = navBarPage.getSettingsPage();\n+ });\n+\nit('should be able to update password', () => {\npasswordPage = navBarPage.getPasswordPage();\n@@ -172,6 +197,7 @@ describe('account', () => {\n// change back to default\nnavBarPage.goToPasswordMenu();\n+ passwordPage.setCurrentPassword('newpassword');\npasswordPage.setPassword('admin');\npasswordPage.setConfirmPassword('admin');\npasswordPage.save();\n",
        "chatgpt_cot": "Fix email case sensitivity issue in users_routes.js for password recovery functionality. Update email comparison and success message to ensure proper functionality."
    },
    {
        "org_diff": "diff --git a/src/components/CubeOverviewModal.js b/src/components/CubeOverviewModal.js @@ -9,6 +9,9 @@ import {\nCardHeader,\nRow,\nCol,\n+ FormGroup,\n+ Label,\n+ Input,\n} from 'reactstrap';\nimport { csrfFetch } from '../util/CSRF';\n@@ -163,6 +166,30 @@ class CubeOverviewModal extends Component {\n</div>\n<br/>\n+ <h6>Category</h6>\n+ <Row>\n+ <Col>\n+ <FormGroup tag=\"fieldset\">\n+ {['Vintage','Legacy','Modern','Pioneer','Standard','Set'].map((label) =>\n+ <FormGroup check key={label}>\n+ <Label check>\n+ <Input type=\"radio\" name={label} />{' '}\n+ {label}\n+ </Label>\n+ </FormGroup>\n+ )}\n+ </FormGroup>\n+ </Col>\n+ <Col>\n+ {['Powered','Unpowered','Pauper','Peasant','Budget','Silver-bordered'].map((label) =>\n+ <div className=\"form-check\" key={label}>\n+ <input className=\"form-check-input\" name={label} type=\"checkbox\" checked={false} onChange={this.handleChange}/>\n+ <label className=\"form-check-label\">{label}</label>\n+ </div>\n+ )}\n+ </Col>\n+ </Row>\n+\n<h6>Image</h6>\n<Row>\n<Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"6\">\n@@ -173,6 +200,8 @@ class CubeOverviewModal extends Component {\n</Col>\n</Row>\n<br/>\n+ <input className=\"form-control\" name=\"name\" type=\"text\" value={cube.name} onChange={this.handleChange}></input>\n+ <br/>\n<h6>Description</h6>\n<TextEntry content={this.state.description} handleChange={this.handleDescriptionChange}/>\n",
        "org_msg": "Added category section",
        "sim_msg": "fix radio component warning",
        "sim_diff": "diff --git a/packages/idyll-components/src/radio.js b/packages/idyll-components/src/radio.js @@ -14,13 +14,15 @@ class Radio extends React.PureComponent {\n}\nrender() {\n+ const { idyll, hasError, updateProps, options, value, ...props } = this.props;\n+\nreturn (\n- <div {...this.props}>\n- {this.props.options.map((d) => {\n+ <div {...props}>\n+ {options.map((d) => {\nif (typeof d === 'string') {\n- return <label><input type=\"radio\" checked={d === this.props.value} onChange={this.onChange} value={d} name={this.id} />{d}</label>;\n+ return <label key={d}><input type=\"radio\" checked={d === value} onChange={this.onChange} value={d} name={this.id} />{d}</label>;\n}\n- return <label><input type=\"radio\" checked={d.value === this.props.value} onChange={this.onChange} value={d.value} name={this.id} />{d.label || d.value}</label>;\n+ return <label key={d.value}><input type=\"radio\" checked={d.value === value} onChange={this.onChange} value={d.value} name={this.id} />{d.label || d.value}</label>;\n})}\n</div>\n);\n",
        "chatgpt_cot": "\"Add form elements for category and image, and input field for name in CubeOverviewModal\""
    },
    {
        "org_diff": "diff --git a/src/components/DecksPickBreakdown.js b/src/components/DecksPickBreakdown.js @@ -58,7 +58,7 @@ const DecksPickBreakdown = ({ draft, seatIndex, deck, defaultIndex }) => {\nfor (let i = start + picks; i < end; i += 1) {\ncardsInPack.push(deck.seats[current].pickorder[i]);\n- if (pack % 2 === 1) {\n+ if (pack % 2 === 0) {\ncurrent += 1;\ncurrent %= draft.initial_state.length;\n} else {\n",
        "org_msg": "fix pick by pick",
        "sim_msg": "Fix onHover/tooltip flickering",
        "sim_diff": "diff --git a/modules/core/src/lib/deck.js b/modules/core/src/lib/deck.js @@ -530,7 +530,7 @@ export default class Deck {\nif (_pickRequest.event) {\n// Perform picking\nconst {result, emptyInfo} = this._pick('pickObject', 'pickObject Time', _pickRequest);\n- const pickedInfo = result[0] || emptyInfo;\n+ const pickedInfo = result.find(info => info.picked) || emptyInfo;\n// Update tooltip\nif (this.props.getTooltip) {\n",
        "chatgpt_cot": "\"Fix logic error in DecksPickBreakdown.js for pack calculation\""
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -587,7 +587,7 @@ router.get('/view/:id', async (req, res) => {\ncubes: cubes,\nloginCallback: '/user/view/' + req.params.id,\nfollowers: user.users_following.length,\n- following: user.users_following.includes(req.user._id),\n+ following: req.user ? user.users_following.includes(req.user._id) : false,\n});\n} catch (err) {\nconsole.log(err);\n@@ -615,7 +615,7 @@ router.get('/notifications', ensureAuth, async (req, res) => {\nreturn res.status(500).send(err);\n}\n});\n-\n+2\nrouter.get('/decks/:userid/:page', async (req, res) => {\ntry {\nconst userid = req.params.userid;\n",
        "org_msg": "Fixed exception with user access",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Fix issue with user following status logic in users_routes.js. Ensure user is authenticated before checking following status."
    },
    {
        "org_diff": "diff --git a/src/utils/Util.js b/src/utils/Util.js @@ -153,8 +153,11 @@ export function isTouchDevice() {\nconst mq = (query) => window.matchMedia(query).matches;\n+ if (\n+ Object.prototype.hasOwnProperty.call(window, 'ontouchstart') ||\n// eslint-disable-next-line no-undef\n- if (window.hasOwnProperty('ontouchstart') || (window.DocumentTouch && document instanceof DocumentTouch)) {\n+ (window.DocumentTouch && document instanceof DocumentTouch)\n+ ) {\nreturn true;\n}\n",
        "org_msg": "Prefer using prototype builtins through Object.prototype",
        "sim_msg": "fix: support pointerEvents",
        "sim_diff": "diff --git a/src/utils/support.js b/src/utils/support.js @@ -7,7 +7,7 @@ const Support = (function Support() {\nreturn !!((window.navigator.maxTouchPoints > 0) || ('ontouchstart' in window) || (window.DocumentTouch && document instanceof window.DocumentTouch));\n}()),\n- pointerEvents: !!(window.navigator.pointerEnabled || window.PointerEvent || ('maxTouchPoints' in window.navigator)),\n+ pointerEvents: !!(window.navigator.pointerEnabled || window.PointerEvent || ('maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints > 0)),\nprefixedPointerEvents: !!window.navigator.msPointerEnabled,\ntransition: (function checkTransition() {\n",
        "chatgpt_cot": "Add isTouchDevice function modification to check for touch device compatibility in Util.js. Fixes touch device detection issue."
    },
    {
        "org_diff": "diff --git a/serverjs/util.js b/serverjs/util.js @@ -68,7 +68,8 @@ function addCardToCube(cube, card_details, idOverride) {\ncolors: card_details.color_identity,\ncmc: card_details.cmc,\ncardID: idOverride === undefined ? card_details._id : idOverride,\n- type: card_details.type\n+ type: card_details.type,\n+ addedTmsp: new Date()\n});\n}\n",
        "org_msg": "set addedTmsp on card save",
        "sim_msg": "set card type bool",
        "sim_diff": "diff --git a/server/game/drawcard.js b/server/game/drawcard.js @@ -24,6 +24,8 @@ class DrawCard extends BaseCard {\nthis.contributesToFavor = true;\nthis.bowed = false;\nthis.inConflict = false;\n+ this.isConflict = false;\n+ this.isDynasty = false;\nthis.readysDuringReadying = true;\nthis.challengeOptions = {\ndoesNotBowAs: {\n@@ -32,6 +34,12 @@ class DrawCard extends BaseCard {\n}\n};\nthis.stealthLimit = 1;\n+\n+ if(cardData.deck === 'conflict') {\n+ this.isConflict = true;\n+ } else if(cardData.deck === 'dynasty') {\n+ this.isDynasty = true;\n+ }\n}\nisLimited() {\n",
        "chatgpt_cot": "Add timestamp to added cards in cube for tracking purposes."
    },
    {
        "org_diff": "diff --git a/serverjs/util.js b/serverjs/util.js @@ -74,7 +74,6 @@ function binaryInsert(value, array, startVal, endVal) {\n}\nif (value < array[start]) {\n- //! !\narray.splice(start, 0, value);\nreturn;\n}\n@@ -206,23 +205,23 @@ const exports = {\nlet i = 0;\nlet p = '';\nlet s = true;\n- for (let l of text) {\n- if (l === '\"') {\n+ for (let character of text) {\n+ if (character === '\"') {\ns = !s;\nif (p === '\"') {\nret[i] += '\"';\n- l = '-';\n+ character = '-';\n} else if (p === '') {\n- l = '-';\n+ character = '-';\n}\n- } else if (s && l === ',') {\n+ } else if (s && character === ',') {\n// not sure what's going on here...\n// eslint-disable-next-line\nl = ret[++i] = '';\n} else {\n- ret[i] += l;\n+ ret[i] += character;\n}\n- p = l;\n+ p = character;\n}\nreturn ret;\n},\n",
        "org_msg": "updating based on qa",
        "sim_msg": "Responses debugging",
        "sim_diff": "diff --git a/lore-ai.js b/lore-ai.js @@ -18,18 +18,22 @@ ${setting}\n# Scene 1\n${\n- characters.map(c => {\n- return `*${c.name.toUpperCase()}: ${c.bio}`;\n+ characters.map((c, i) => {\n+ return `Id: ${c.name.toUpperCase()}#${i+1}\n+Name: ${c.name}\n+Bio: ${c.bio}\n+`;\n}).join('\\n')\n}\n${\nmessages.map(m => {\n- return `*${m.character.name.toUpperCase()}: ${m.message}`;\n+ const characterIndex = characters.indexOf(m.character);\n+ return `*${m.character.name.toUpperCase()}#${characterIndex+1}: ${m.message}`;\n}).join('\\n')\n}\n*${\n- dstCharacter ? `${dstCharacter.name.toUpperCase()}:` : ''\n+ dstCharacter ? `${dstCharacter.name.toUpperCase()}#${characters.indexOf(dstCharacter)+1}:` : ''\n}`;\nclass AICharacter extends EventTarget {\n@@ -98,11 +102,12 @@ class AIScene {\n// const nextCharacterIndex = 1 + Math.floor(Math.random() * (this.characters.length - 1)); // skip over local character\n// const nextCharacter = this.characters[nextCharacterIndex];\nconst response = await this.generate();\n- let match;\n- if (response && (match = response.match(/^([\\s\\S]*?):([\\s\\S]*?)$/))) {\n+ const match = response?.match(/^([^#]+)#([0-9]+):([\\s\\S]*?)$/);\n+ console.log('response match', response, match);\n+ if (match) {\nconst characterName = match[1];\nconst characterNameLowerCase = characterName.toLowerCase();\n- const message = match[2].trim();\n+ const message = match[3].trim();\nconst character = this.characters.find(c => c.name.toLowerCase() === characterNameLowerCase);\nconsole.log('character name', this.characters.map(c => c.name), characterNameLowerCase, !!character);\nif (character) {\n",
        "chatgpt_cot": "Fix compilation issue by replacing variable name \"l\" with \"character\" in binaryInsert and changing the logic of handling quotes in the text."
    },
    {
        "org_diff": "diff --git a/public/js/draft.js b/public/js/draft.js @@ -257,15 +257,13 @@ function addToPicks(card, x, y, cmccol,frompack)\ndraft.pickOrder.push(card._id);\nif(frompack)\n{\n+ passPack();\nfetch(\"/cube/api/draftpickcard/\"+draft.cube, {\nmethod: \"POST\",\nbody: JSON.stringify({'draft_id':draft._id, card}),\nheaders:{\n'Content-Type': 'application/json'\n}\n- }).then(function()\n- {\n- passPack();\n});\n}\n}\n",
        "org_msg": "Issue\nFixed issue where clicking too fast breaks draft",
        "sim_msg": "Tokens cleanup",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -1150,7 +1150,7 @@ const _getTokenHtml = cardData => {\n</div>\n`;\n};\n-(async () => {\n+/* (async () => {\nconst totalObjects = await contract.methods.getNonce().call();\nconst ts = [];\nfor (let i = 1; i <= totalObjects; i++) {\n@@ -1173,7 +1173,7 @@ const _getTokenHtml = cardData => {\n});\n});\n}\n-})();\n+})(); */\n/* const scenes = document.getElementById('scenes');\n(async () => {\nconst res = await fetch(scenesEndpoint);\n",
        "chatgpt_cot": "Refactor addToPicks function in draft.js to improve code readability and remove redundant code for handling draft picks from a pack."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1812,9 +1812,10 @@ router.post(\nensureAuth,\nbody('name', 'Cube name should be between 5 and 100 characters long.').isLength({ min: 5, max: 100 }),\nbody('name', 'Cube name may not use profanity.').custom((value) => !util.has_profanity(value)),\n- body('urlAlias', 'Custom URL must contain only alphanumeric characters or underscores.').isAlphanumeric(),\n+ body('urlAlias', 'Custom URL must contain only alphanumeric characters or underscores.').matches(/[A-Za-z0-9]*/),\nbody('urlAlias', `Custom URL may not be longer than 100 characters.`).isLength({ max: 100 }),\nbody('urlAlias', 'Custom URL may not use profanity.').custom((value) => !util.has_profanity(value)),\n+ jsonValidationErrors,\nutil.wrapAsyncApi(async (req, res) => {\nconst updatedCube = req.body;\n",
        "org_msg": "Fix validation for overview.",
        "sim_msg": "Removed the condition that url input fields must be dirty for validation to occur",
        "sim_diff": "diff --git a/renderer/components/dashboard/URL.js b/renderer/components/dashboard/URL.js @@ -45,6 +45,31 @@ const RemoveButton = styled(Button)`\nconst URL = ({ idx, url, error, onUpdate, onRemove, onKeyEnter }) => {\nconst [dirty, setDirty] = useState(false)\n+\n+ const validateURL = useCallback((input) => {\n+ let hasError = false\n+ let error = ''\n+ const protocolRegex = /^(?:http)s?:\\/\\//i\n+ // Regular expression to test for valid URLs based on\n+ // https://github.com/citizenlab/test-lists/blob/master/scripts/lint-lists.py#L18\n+ const inputRegex = /^(?:http)s?:\\/\\/(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?::\\d+)?(?:\\/?|[/?]\\S+)$/i\n+\n+ if (input.trim() === '') {\n+ hasError = true\n+ error = 'Cannot be empty'\n+ } else if (!protocolRegex.test(input)) {\n+ hasError = true\n+ error = 'Has to start with https:// or http://'\n+ } else if (!inputRegex.test(input)) {\n+ hasError = true\n+ error = 'Not a valid URL format'\n+ }\n+ return {\n+ hasError,\n+ error\n+ }\n+ }, [])\n+\nconst onChange = useCallback((e) => {\nonUpdate(idx, e.target.value)\n@@ -55,8 +80,8 @@ const URL = ({ idx, url, error, onUpdate, onRemove, onKeyEnter }) => {\nonUpdate(idx, e.target.value, hasError, error)\n}\n- dirty && alsoValidate()\n- }, [idx, dirty, onUpdate, validateURL])\n+ alsoValidate()\n+ }, [idx, onUpdate, validateURL])\nconst onDelete = useCallback(() => {\nonRemove(idx)\n@@ -76,30 +101,6 @@ const URL = ({ idx, url, error, onUpdate, onRemove, onKeyEnter }) => {\nonUpdate(idx, e.target.value, hasError, error)\n}, [idx, dirty, validateURL, onUpdate])\n- const validateURL = useCallback((input) => {\n- let hasError = false\n- let error = ''\n- const protocolRegex = /^(?:http)s?:\\/\\//i\n- // Regular expression to test for valid URLs based on\n- // https://github.com/citizenlab/test-lists/blob/master/scripts/lint-lists.py#L18\n- const inputRegex = /^(?:http)s?:\\/\\/(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?::\\d+)?(?:\\/?|[/?]\\S+)$/i\n-\n- if (input.trim() === '') {\n- hasError = true\n- error = 'Cannot be empty'\n- } else if (!protocolRegex.test(input)) {\n- hasError = true\n- error = 'Has to start with https:// or http://'\n- } else if (!inputRegex.test(input)) {\n- hasError = true\n- error = 'Not a valid URL format'\n- }\n- return {\n- hasError,\n- error\n- }\n- }, [])\n-\nreturn (\n<URLBox my={3}>\n<URLInput\n@@ -107,17 +108,18 @@ const URL = ({ idx, url, error, onUpdate, onRemove, onKeyEnter }) => {\nname={idx}\nspellCheck={false}\nplaceholder='https://'\n- value={url}\n+ value={url || ''}\nonChange={onChange}\nonBlur={onBlur}\nonKeyPress={onKeyPress}\nerror={error}\n+ data-testid='url-input'\n/>\n<label htmlFor={idx}>\n<FormattedMessage id='Settings.Websites.CustomURL.URL' />\n</label>\n{onRemove &&\n- <RemoveButton onClick={onDelete}>\n+ <RemoveButton onClick={onDelete} data-testid={`urlRemove${idx}`}>\n<MdRemoveCircle size={32} />\n</RemoveButton>\n}\n",
        "chatgpt_cot": "\"Fix validation error in cube_routes.js by updating urlAlias regex pattern and adding jsonValidationErrors middleware.\""
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -56,6 +56,11 @@ router.get('/notification/:index', ensureAuth, async (req, res) => {\nconst notification = user.notifications.splice(req.params.index, 1)[0];\nawait user.save();\n+ if (!notification) {\n+ req.flash('danger', 'Not Found');\n+ return res.status(401).render('misc/404', {});\n+ }\n+\nreturn res.redirect(notification.url);\n} catch (err) {\nreq.logger.error(err);\n",
        "org_msg": "Fix error with invalid notification state",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Handle case when notification not found in user's notifications array\""
    },
    {
        "org_diff": "diff --git a/src/pages/UserAccountPage.js b/src/pages/UserAccountPage.js @@ -96,7 +96,7 @@ const UserAccountPage = ({ user }) => {\n<CSRFForm method=\"POST\" action=\"/user/updateemail\">\n<FormGroup row>\n<Label for=\"email\" className=\"col-sm-4 col-form-Label\">New Email:</Label>\n- <Input className=\"col-sm-8\" id=\"email\" name=\"email\" type=\"email\" />\n+ <Input className=\"col-sm-8\" id=\"email\" name=\"email\" type=\"email\" defaultValue={user.email} />\n</FormGroup>\n<FormGroup row>\n<Label for=\"emailPassword\" className=\"col-sm-4 col-form-Label\">Password:</Label>\n",
        "org_msg": "Add defaults.",
        "sim_msg": "removed unneccessary check for `authenticated` prop\n(fixing a layout https://github.com/busyorg/busy/pull/852)",
        "sim_diff": "diff --git a/src/app/Sidebar/UserInfo.js b/src/app/Sidebar/UserInfo.js @@ -59,7 +59,7 @@ const UserInfo = ({ intl, authenticated, authenticatedUser, user, ...props }) =>\n</div>\n</div>\n</div>}\n- {(user && authenticated && !isSameUser) && <Action\n+ {(user && !isSameUser) && <Action\nstyle={{ margin: '5px 0' }}\ntext={intl.formatMessage({\nid: 'transfer',\n",
        "chatgpt_cot": "Update UserAccountPage.js to set default value for email input field to user's email address."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -271,7 +271,7 @@ function CSVtoCards(csvString, carddb) {\nfinish: finish || 'Non-foil',\nimgUrl: (imageUrl || null) && imageUrl !== 'undefined' ? imageUrl : null,\nimgBackUrl: (imageBackUrl || null) && imageBackUrl !== 'undefined' ? imageBackUrl : null,\n- tags: tags && tags.length > 0 ? tags.split(';').map((t) => t.strip()) : [],\n+ tags: tags && tags.length > 0 ? tags.split(';').map((t) => t.trim()) : [],\nnotes: notes || '',\nrarity: rarity || null,\ncolorCategory: colorCategory || null,\n",
        "org_msg": "Change strip to trim since that's the defined function.",
        "sim_msg": "Update fetchdata to skip over incomplete data",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -43,12 +43,14 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- var imagesrc = card.pack_cards[0].image_url;\n+ if(card.pack_cards.length > 0 && card.pack_cards[0].image_url) {\n+ var imagesrc = card.pack_cards[0].image_url;\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n+ }\n});\nreturn cards;\n",
        "chatgpt_cot": "Refactor tags.split() method in CSVtoCards to use trim() instead of strip() to handle tag values correctly."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -55,6 +55,22 @@ const ALL_CMCS = Array.from(Array(33).keys())\n.map((x) => (x / 2).toString())\n.concat(['1000000']);\n+const CARD_TYPES = [\n+ 'Creature',\n+ 'Planeswalker',\n+ 'Instant',\n+ 'Sorcery',\n+ 'Artifact',\n+ 'Enchantment',\n+ 'Conspiracy',\n+ 'Contraption',\n+ 'Phenomenon',\n+ 'Plane',\n+ 'Scheme',\n+ 'Vanguard',\n+ 'Land',\n+];\n+\nconst SINGLE_COLOR = ['White', 'Blue', 'Black', 'Red', 'Green'];\nconst GUILDS = ['Azorius', 'Dimir', 'Rakdos', 'Gruul', 'Selesnya', 'Orzhov', 'Izzet', 'Golgari', 'Boros', 'Simic'];\nconst SHARDS_AND_WEDGES = ['Bant', 'Esper', 'Grixis', 'Jund', 'Naya', 'Mardu', 'Temur', 'Abzan', 'Jeskai', 'Sultai'];\n",
        "org_msg": "chore: Add CARD_TYPES constant for Type sorts",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "Add new card types to Sort.js for sorting functionality. Update constants for card types, colors, guilds, and shards/wedges."
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -105,9 +105,10 @@ const AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props\nvalue={values.cmc}\nonChange={onChange}\n/>\n- <hr />\n- <h6>Color:</h6>\n- <InputGroup>\n+ <InputGroup className=\"mb-3\">\n+ <InputGroupAddon addonType=\"prepend\">\n+ <InputGroupText>Color</InputGroupText>\n+ </InputGroupAddon>\n<ColorChecksAddon prefix=\"color\" values={values} onChange={onChange} />\n<CustomInput type=\"select\" id=\"colorOp\" name=\"colorOp\" value={values.colorOp} onChange={onChange}>\n<option value=\"=\">Exactly these colors</option>\n@@ -115,8 +116,10 @@ const AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props\n<option value=\"<=\">At most these colors</option>\n</CustomInput>\n</InputGroup>\n- <hr />\n- <InputGroup>\n+ <InputGroup className=\"mb-3\">\n+ <InputGroupAddon addonType=\"prepend\">\n+ <InputGroupText>Color Identity</InputGroupText>\n+ </InputGroupAddon>\n<ColorChecksAddon prefix=\"identity\" values={values} onChange={onChange} />\n<CustomInput type=\"select\" id=\"identityOp\" name=\"identityOp\" value={values.identityOp} onChange={onChange}>\n<option value=\"=\">Exactly these colors</option>\n@@ -124,7 +127,6 @@ const AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props\n<option value=\"<=\">At most these colors</option>\n</CustomInput>\n</InputGroup>\n- <hr />\n<TextField\nname=\"mana\"\nhumanName=\"Mana Cost\"\n",
        "org_msg": "Fix FilterCollapse.",
        "sim_msg": "Fix layer-browser color picker",
        "sim_diff": "diff --git a/examples/layer-browser/src/components/color-picker.js b/examples/layer-browser/src/components/color-picker.js -/* global document */\nimport React, {PureComponent} from 'react';\n/*\n@@ -48,26 +47,20 @@ export function getColorArray(str) {\n}\nexport default class ColorPicker extends PureComponent {\n- _onClick(color) {\n- const {onChange} = this.props;\n- const input = document.createElement('input');\n- input.type = 'color';\n- input.value = color;\n- input.onchange = () => onChange(getColorArray(input.value));\n- input.onblur = () => document.body.removeChild(input);\n-\n- document.body.appendChild(input);\n- input.click();\n- }\n-\nrender() {\nconst color = getColorHex(this.props.value);\n+ const {onChange} = this.props;\n+\nreturn (\n- <div\n- className=\"color-picker\"\n- style={{background: color}}\n- onClick={this._onClick.bind(this, color)}\n+ <div className=\"color-picker\" style={{background: color}} onClick={() => this._input.click()}>\n+ <input\n+ ref={_input => (this._input = _input)}\n+ onChange={e => onChange(getColorArray(e.target.value))}\n+ type=\"color\"\n+ value={color}\n+ style={{display: 'none'}}\n/>\n+ </div>\n);\n}\n}\n",
        "chatgpt_cot": "\"Add InputGroup to Color and Color Identity with prepend and prepend text for better UI experience.\""
    },
    {
        "org_diff": "diff --git a/package-lock.json b/package-lock.json \"dev\": true\n},\n\"canvas\": {\n- \"version\": \"2.6.1\",\n- \"resolved\": \"https://registry.npmjs.org/canvas/-/canvas-2.6.1.tgz\",\n- \"integrity\": \"sha512-S98rKsPcuhfTcYbtF53UIJhcbgIAK533d1kJKMwsMwAIFgfd58MOyxRud3kktlzWiEkFliaJtvyZCBtud/XVEA==\",\n+ \"version\": \"2.6.0\",\n+ \"resolved\": \"https://registry.npmjs.org/canvas/-/canvas-2.6.0.tgz\",\n+ \"integrity\": \"sha512-bEO9f1ThmbknLPxCa8Es7obPlN9W3stB1bo7njlhOFKIdUTldeTqXCh9YclCPAi2pSQs84XA0jq/QEZXSzgyMw==\",\n\"requires\": {\n\"nan\": \"^2.14.0\",\n\"node-pre-gyp\": \"^0.11.0\",\n",
        "org_msg": "Change canvas version back to 2.6.0.",
        "sim_msg": "fix - bump js-yaml third-party dev dep",
        "sim_diff": "diff --git a/package-lock.json b/package-lock.json \"dev\": true\n},\n\"js-yaml\": {\n- \"version\": \"3.12.0\",\n- \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-3.12.0.tgz\",\n- \"integrity\": \"sha512-PIt2cnwmPfL4hKNwqeiuz4bKfnzHTBv6HyVgjahA6mPLwPDzjDWrplJBMjHUFxku/N3FlmrbyPclad+I+4mJ3A==\",\n+ \"version\": \"3.13.0\",\n+ \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-3.13.0.tgz\",\n+ \"integrity\": \"sha512-pZZoSxcCYco+DIKBTimr67J6Hy+EYGZDY/HCWC+iAEA9h1ByhMXAIVUXMcMFpOCxQ/xjXmPI2MkDL5HRm5eFrQ==\",\n\"requires\": {\n\"argparse\": \"^1.0.7\",\n\"esprima\": \"^4.0.0\"\n",
        "chatgpt_cot": "Update canvas version from 2.6.1 to 2.6.0 in package-lock.json to resolve compatibility issues with other dependencies."
    },
    {
        "org_diff": "diff --git a/src/layouts/CubeLayout.js b/src/layouts/CubeLayout.js @@ -30,11 +30,7 @@ CubeNavItem.defaultProps = {\n};\nconst CubeLayout = ({ cube, canEdit, activeLink, children }) => {\n- const categories =\n- cube.categoryPrefixes && cube.categoryPrefixes.length > 0 ? `${cube.categoryPrefixes.join(' ')} ` : '';\n- const subtitle = cube.overrideCategory\n- ? `${cube.card_count} Card ${categories}${cube.categoryOverride} Cube`\n- : `${cube.card_count} Card ${cube.type} Cube`;\n+ const subtitle = getCubeDescription(cube);\nreturn (\n<CubeContextProvider initialCube={cube} canEdit={canEdit}>\n<div className=\"mb-3\">\n",
        "org_msg": "Fix merge error 2..",
        "sim_msg": "Remove dead peeks constants",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -4489,24 +4489,6 @@ const cubeMesh = (() => {\ncubeMesh.frustumCulled = false;\nscene.add(cubeMesh);\n-const PEEK_FACES = {\n- FRONT: 1,\n- BACK: 2,\n- LEFT: 3,\n- RIGHT: 4,\n- TOP: 5,\n- BOTTOM: 6,\n-};\n-const PEEK_DIRECTIONS = [\n- [new THREE.Vector3(0, 0, 1), PEEK_FACES.FRONT],\n- [new THREE.Vector3(0, 0, -1), PEEK_FACES.BACK],\n- [new THREE.Vector3(-1, 0, 0), PEEK_FACES.LEFT],\n- [new THREE.Vector3(1, 0, 0), PEEK_FACES.RIGHT],\n- [new THREE.Vector3(0, 1, 0), PEEK_FACES.TOP],\n- [new THREE.Vector3(0, -1, 0), PEEK_FACES.BOTTOM],\n-];\n-const PEEK_FACE_INDICES = Int32Array.from([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,255,255,255,255,255,255,255,255,255,255,0,255,5,6,7,8,255,255,255,255,255,255,255,255,255,255,1,5,255,9,10,11,255,255,255,255,255,255,255,255,255,255,2,6,9,255,12,13,255,255,255,255,255,255,255,255,255,255,3,7,10,12,255,14,255,255,255,255,255,255,255,255,255,255,4,8,11,13,14,255]);\n-\nconst velocity = new THREE.Vector3();\nconst lastGrabs = [false, false];\nconst lastAxes = [[0, 0], [0, 0]];\n",
        "chatgpt_cot": "\"Refactor CubeLayout to use getCubeDescription to get subtitle\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -36,6 +36,13 @@ const errorStackTracerFormat = winston.format((info) => {\nreturn info;\n});\n+const timestamped = winston.format((info) => {\n+ if (info.message) {\n+ info.message = `[${new Date(Date.now()).toISOString()}] ${info.message}`;\n+ }\n+ return info;\n+});\n+\nwinston.configure({\nlevel: 'info',\nformat: winston.format.combine(\n@@ -51,7 +58,14 @@ winston.configure({\n//\nnew winston.transports.File({ filename: errorFile.name, level: 'error' }),\nnew winston.transports.File({ filename: combinedFile.name }),\n- new winston.transports.Console(),\n+ new winston.transports.Console({\n+ format: winston.format.combine(\n+ winston.format.splat(), // Necessary to produce the 'meta' property\n+ errorStackTracerFormat(),\n+ timestamped(),\n+ winston.format.simple(),\n+ ),\n+ }),\n],\n});\n@@ -127,7 +141,7 @@ app.use((req, res, next) => {\nmorgan.token('uuid', (req) => req.uuid);\napp.use(\n- morgan('[:date[iso]] :remote-addr :uuid :method :url :status :res[content-length] - :response-time ms', {\n+ morgan(':remote-addr :uuid :method :url :status :res[content-length] - :response-time ms', {\nstream: {\nwrite: (message) => winston.info(message.trim()),\n},\n",
        "org_msg": "Move timestamp only into console logs.",
        "sim_msg": "Pass through manifest.json physics flag",
        "sim_diff": "diff --git a/runtime.js b/runtime.js @@ -567,7 +567,7 @@ const _loadManifestJson = async (file, {files = null} = {}) => {\nconst res = await fetch(srcUrl);\nconst j = await res.json();\n- let {start_url, physics_url} = j;\n+ let {start_url, physics, physics_url} = j;\nconst u = './' + start_url;\nif (/\\.js$/.test(u)) {\n@@ -682,6 +682,7 @@ const _loadManifestJson = async (file, {files = null} = {}) => {\n}, {\nfiles,\nparentUrl: srcUrl,\n+ physics,\nphysics_url,\n});\n}\n",
        "chatgpt_cot": "\"Add timestamp to log messages and fix console transport format in app.js\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/draftutil.test.js b/__tests__/serverjs/draftutil.test.js +var sinon = require(\"sinon\");\n+\nconst methods = require(\"../../serverjs/draftutil\");\n+let CardRating = require('../../models/cardrating');\n+\n+beforeEach(() => {\n+ sinon.stub(CardRating, \"find\");\n+});\n+\n+afterEach(() => {\n+ CardRating.find.restore();\n+});\n+\ntest(\"it can get the correct number of draft bots\", () => {\nconst params = {\nseats: 5\n@@ -49,3 +61,21 @@ test(\"it returns -1 if a tag is not found in a list of cards\", () => {\nexpect(result).toBe(-1);\n});\n+\n+test(\"getCardRatings returns a mapping of card names to values\", () => {\n+ var dummyModel = {\"value\": 1, \"picks\": 1, \"name\": \"Giant Growth\"};\n+ var expected = {};\n+ expected[dummyModel.name] = dummyModel.value;\n+ CardRating.find.yields(null, [dummyModel]);\n+ var callback = sinon.stub();\n+ methods.getCardRatings([], CardRating, callback);\n+ sinon.assert.calledWith(callback, expected)\n+});\n+\n+test(\"getCardRatings returns an empty dict when there are no ratings present \", () => {\n+ var expected = {};\n+ CardRating.find.yields(null, []);\n+ var callback = sinon.stub();\n+ methods.getCardRatings([], CardRating, callback);\n+ sinon.assert.calledWith(callback, expected)\n+});\n",
        "org_msg": "test getCardRatings",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "Add sinon for testing, stub CardRating.find, and add tests for getCardRatings method in draftutil.test.js."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1636,22 +1636,19 @@ router.get('/draft/:id', async function(req, res) {\n});\n// Edit Submit POST Route\n-router.post('/edit/:id', ensureAuth, function(req, res) {\n+router.post('/edit/:id', ensureAuth, async (req, res) => {\n+ try {\nreq.body.blog = sanitize(req.body.blog);\n- Cube.findOne(build_id_query(req.params.id), function(err, cube) {\n+ let cube = await Cube.findOne(build_id_query(req.params.id));\n+\ncube.date_updated = Date.now();\ncube.updated_string = cube.date_updated.toLocaleString('en-US');\n- if (err) {\n- req.flash('danger', 'Server Error');\n- res.redirect('/cube/list/' + req.params.id);\n- } else if (!cube) {\n- req.flash('danger', 'Cube not found');\n- res.redirect('/cube/list/' + req.params.id);\n- } else {\n- var edits = req.body.body.split(';');\n- var removes = new Set();\n- var adds = [];\n- var changelog = '';\n+\n+ const edits = req.body.body.split(';');\n+ const removes = new Set();\n+ const adds = [];\n+ let changelog = '';\n+\nfor (let edit of edits) {\nif (edit.charAt(0) == '+') {\n//add id\n@@ -1694,6 +1691,7 @@ router.post('/edit/:id', ensureAuth, function(req, res) {\nreturn res.redirect('/cube/list/' + req.params.id);\n}\n}\n+\n//need to do numerical sort..\nconst removesArray = [...removes];\nremovesArray.sort((a, b) => a - b);\n@@ -1722,30 +1720,17 @@ router.post('/edit/:id', ensureAuth, function(req, res) {\nblogpost.username = cube.owner_name;\nblogpost.cubename = cube.name;\n- blogpost.save(function(err) {\n- if (err) {\n- console.error(err, req);\n- } else {\ncube = setCubeType(cube, carddb);\n- Cube.updateOne(\n- {\n- _id: cube._id,\n- },\n- cube,\n- function(err) {\n- if (err) {\n- console.error(err, req);\n- } else {\n+\n+ await blogpost.save();\n+ await cube.save();\n+\nreq.flash('success', 'Cube Updated');\nres.redirect(`/cube/list/${req.params.id}?updated=true`);\n- }\n- },\n- );\n- }\n- });\n+ } catch (err) {\n+ util.handleRouteError(res, err, '/cube/list/' + req.params.id);\n}\n});\n-});\n//API routes\nrouter.get('/api/cardnames', function(req, res) {\n@@ -2861,7 +2846,7 @@ router.get('/api/getversions/:id', async (req, res) => {\ntcg.push(card.tcgplayer_id);\n}\n});\n- const price_dict = await GetPrices(pids);\n+ const price_dict = await GetPrices(tcg);\ncards.forEach(function(card, index) {\nif (card.tcgplayer_id) {\nconst card_price_data = price_dict[card.tcgplayer_id];\n",
        "org_msg": "revise edit route",
        "sim_msg": "Allow added/removed to be null for client update",
        "sim_diff": "diff --git a/source/datastore/query/WindowedQuery.js b/source/datastore/query/WindowedQuery.js @@ -615,11 +615,11 @@ const WindowedQuery = Class({\n_normaliseUpdate ( update ) {\nconst list = this._storeKeys;\n- let removedStoreKeys = update.removed;\n+ let removedStoreKeys = update.removed || [];\nlet removedIndexes = mapIndexes( list, removedStoreKeys );\nconst addedStoreKeys = [];\nconst addedIndexes = [];\n- const added = update.added;\n+ const added = update.added || [];\nlet i, j, l;\nsortLinkedArrays( removedIndexes, removedStoreKeys );\n@@ -637,7 +637,9 @@ const WindowedQuery = Class({\nconst truncateAtFirstGap = !!i;\nfor ( i = 0, l = added.length; i < l; i += 1 ) {\n- const { index, storeKey } = added[i];\n+ const item = added[i];\n+ const index = item.index;\n+ const storeKey = item.id;\nj = removedStoreKeys.indexOf( storeKey );\nif ( j > -1 &&\n@@ -915,10 +917,12 @@ const WindowedQuery = Class({\n// Map ids to store keys\nconst toStoreKey = this.get( '_toStoreKey' );\n- update.removed = update.removed.map( toStoreKey );\n- update.added.forEach( item => {\n+ const added = update.added || [];\n+ let removed = update.removed || [];\n+ added.forEach( item => {\nitem.id = toStoreKey( item.id );\n});\n+ update.removed = removed = removed.map( toStoreKey );\nupdate.upToId = update.upToId && toStoreKey( update.upToId );\nif ( !preemptivesLength ) {\n@@ -938,8 +942,8 @@ const WindowedQuery = Class({\nconst normalisedUpdate = {\nremovedIndexes: [],\nremovedStoreKeys: [],\n- addedIndexes: update.added.map( item => item.index ),\n- addedStoreKeys: update.added.map( item => item.id ),\n+ addedIndexes: added.map( item => item.index ),\n+ addedStoreKeys: added.map( item => item.id ),\ntruncateAtFirstGap: false,\ntotal: update.total,\nupToId: update.upToId,\n@@ -951,7 +955,6 @@ const WindowedQuery = Class({\n// compose the result with the preemptive in order to get the\n// original index.\nconst list = this._storeKeys;\n- const removed = update.removed;\nconst removedIndexes = normalisedUpdate.removedIndexes;\nconst removedStoreKeys = normalisedUpdate.removedStoreKeys;\nlet _indexes = [];\n",
        "chatgpt_cot": "\"Fix compilation issue in cube_routes.js due to adding async function in edit route and update save and update methods to use async/await.\""
    },
    {
        "org_diff": "diff --git a/src/components/WithModal.js b/src/components/WithModal.js import React, { useCallback, useState } from 'react';\n-const withModal = (Tag, ModalTag) => ({ children, ...props }) => {\n+const withModal = (Tag, ModalTag) => ({ children, className, modalProps, ...props }) => {\nconst [isOpen, setIsOpen] = useState(false);\nconst toggle = useCallback(\n(event) => {\n+ if (event) {\nevent.preventDefault();\n+ }\nsetIsOpen(!isOpen);\n},\n[isOpen],\n);\nreturn (\n- <Tag {...props} onClick={toggle}>\n+ <>\n+ <Tag {...props} className={className ? `${className} clickable` : 'clickable'} onClick={toggle}>\n{children}\n- <ModalTag isOpen={isOpen} toggle={toggle} />\n</Tag>\n+ <ModalTag isOpen={isOpen} toggle={toggle} {...modalProps} />\n+ </>\n);\n};\n",
        "org_msg": "Cherry-pick withModal changes.",
        "sim_msg": "Adjust stop modal UI based on review comments\nas per: https://github.com/ooni/probe-desktop/pull/156\\#issuecomment-651208424",
        "sim_diff": "diff --git a/renderer/components/home/StopTestModal.js b/renderer/components/home/StopTestModal.js import React from 'react'\nimport PropTypes from 'prop-types'\n-import { Flex, Box, Container, Text, Heading } from 'ooni-components'\n+import { Flex, Box, Container, Text, Heading, Button, Modal } from 'ooni-components'\nimport { FormattedMessage } from 'react-intl'\n+import styled from 'styled-components'\n-import { Modal, YesButton, NoButton } from '../Modal'\n+const StyledModal = styled(Modal)`\n+ border-radius: 8px;\n+ box-shadow: 4px 4px 10px black;\n+`\nconst StopTestModal = ({ show = true, onConfirm = () => {} , onCancel = () => {} }) => {\nreturn (\n- <Modal show={show}>\n+ <StyledModal bg='white' show={show} color='black' closeButton='right' onHideClick={onCancel}>\n<Container p={3}>\n<Flex flexDirection='column'>\n<Text textAlign='center'>\n- <Heading h={5}>\n+ <Heading h={4}>\n<FormattedMessage id='Modal.InterruptTest.Title' />\n</Heading>\n</Text>\n- <Box my={2}>\n+ <Box my={2} px={5}>\n<Text>\n<FormattedMessage id='Modal.InterruptTest.Paragraph' />\n</Text>\n</Box>\n</Flex>\n</Container>\n- <Flex>\n- <YesButton width={1/2} onClick={onConfirm}>\n- <FormattedMessage id='Modal.OK' />\n- </YesButton>\n- <NoButton width={1/2} onClick={onCancel}>\n- <FormattedMessage id='Modal.Cancel' />\n- </NoButton>\n+ <Flex justifyContent='flex-end' my={3}>\n+ <Button mx={3} width={1/3} inverted onClick={onCancel}>\n+ <Text fontWeight='bold'><FormattedMessage id='Modal.Cancel' /></Text>\n+ </Button>\n+ <Button mx={3} width={1/3} onClick={onConfirm}>\n+ <Text fontWeight='bold'><FormattedMessage id='Modal.OK' /></Text>\n+ </Button>\n</Flex>\n- </Modal>\n+ </StyledModal>\n)\n}\n",
        "chatgpt_cot": "Refactor WithModal.js to include modalProps and prevent default event on toggle."
    },
    {
        "org_diff": "diff --git a/src/pages/UserCubePage.js b/src/pages/UserCubePage.js @@ -9,6 +9,7 @@ import DynamicFlash from 'components/DynamicFlash';\nimport Advertisement from 'components/Advertisement';\nimport MainLayout from 'layouts/MainLayout';\nimport RenderToRoot from 'utils/RenderToRoot';\n+import MagicMarkdown from 'components/MagicMarkdown';\nconst UserCubePage = ({ user, owner, followers, following, cubes, loginCallback }) => (\n<MainLayout loginCallback={loginCallback} user={user}>\n@@ -36,18 +37,7 @@ const UserCubePage = ({ user, owner, followers, following, cubes, loginCallback\n</Col>\n)}\n<Col xs={owner.image ? 8 : 12} lg={owner.image ? 9 : 12}>\n- {owner.about ? (\n- owner.about\n- .trim()\n- .split(/[\\r\\n]+/)\n- .map((para, index) => (\n- <p key={/* eslint-disable-line react/no-array-index-key */ index} className=\"my-0\">\n- {para}\n- </p>\n- ))\n- ) : (\n- <em>This user has not yet filled out their about section.</em>\n- )}\n+ <MagicMarkdown markdown={owner.about || '_This user has not yet filled out their about section._'} />\n</Col>\n</Row>\n{user && user.id === owner._id && (\n",
        "org_msg": "Use markdown for user profile page",
        "sim_msg": "Update owner information in the Modules class.",
        "sim_diff": "diff --git a/includes/Core/Modules/Modules.php b/includes/Core/Modules/Modules.php @@ -129,11 +129,15 @@ final class Modules {\n$data[ $module->slug ]['setupComplete'] = $data[ $module->slug ]['active'] && $this->is_module_connected( $module->slug );\n$data[ $module->slug ]['dependencies'] = $this->get_module_dependencies( $module->slug );\n$data[ $module->slug ]['dependants'] = $this->get_module_dependants( $module->slug );\n+ $data[ $module->slug ]['owner'] = null;\n- if ( $module instanceof Module_With_Owner ) {\n+ if ( current_user_can( 'list_users' ) && $module instanceof Module_With_Owner ) {\n$owner_id = $module->get_owner_id();\nif ( $owner_id ) {\n- $data[ $module->slug ]['owner'] = get_the_author_meta( 'display_name', $owner_id );\n+ $data[ $module->slug ]['owner'] = array(\n+ 'id' => $owner_id,\n+ 'login' => get_the_author_meta( 'user_login', $owner_id ),\n+ );\n}\n}\n}\n@@ -824,12 +828,16 @@ final class Modules {\n'connected' => $this->is_module_connected( $module->slug ),\n'dependencies' => $this->get_module_dependencies( $module->slug ),\n'dependants' => $this->get_module_dependants( $module->slug ),\n+ 'owner' => null,\n);\n- if ( $module instanceof Module_With_Owner ) {\n+ if ( current_user_can( 'list_users' ) && $module instanceof Module_With_Owner ) {\n$owner_id = $module->get_owner_id();\nif ( $owner_id ) {\n- $module_data['owner'] = get_the_author_meta( 'display_name', $owner_id );\n+ $module_data['owner'] = array(\n+ 'id' => $owner_id,\n+ 'login' => get_the_author_meta( 'user_login', $owner_id ),\n+ );\n}\n}\n@@ -901,11 +909,21 @@ final class Modules {\n'readonly' => true,\n),\n'owner' => array(\n+ 'type' => 'object',\n+ 'properties' => array(\n+ 'id' => array(\n+ 'type' => 'integer',\n+ 'description' => __( 'Owner ID.', 'google-site-kit' ),\n+ 'readonly' => true,\n+ ),\n+ 'login' => array(\n'type' => 'string',\n- 'description' => __( 'Owner of the module.', 'google-site-kit' ),\n+ 'description' => __( 'Owner login.', 'google-site-kit' ),\n'readonly' => true,\n),\n),\n+ ),\n+ ),\n);\n}\n",
        "chatgpt_cot": "\"Add MagicMarkdown component to render owner's about section, handling cases where the about section is empty or not filled out yet.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1153,7 +1153,7 @@ router.post('/importcubetutor/:id', ensureAuth, body('cubeid').toInt(), flashVal\n}\n});\n-const createDraftForSingleDeck = (deck) => {\n+const createDraftForSingleDeck = async (deck) => {\nlet index = 0;\nconst populatedCards = [];\nfor (const stack of deck.seats[0].deck) {\n@@ -1262,7 +1262,7 @@ router.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\nsideboard: [],\n},\n];\n- deck.draft = createDraftForSingleDeck(deck);\n+ deck.draft = await createDraftForSingleDeck(deck);\nawait deck.save();\nawait Cube.updateOne(\n@@ -1734,7 +1734,7 @@ router.post('/startsealed/:id', body('packs').toInt({ min: 1, max: 16 }), body('\ndeck: pool,\nsideboard: [],\n});\n- deck.draft = createDraftForSingleDeck(deck);\n+ deck.draft = await createDraftForSingleDeck(deck);\nawait deck.save();\n",
        "org_msg": "Fix async issues.",
        "sim_msg": "Import from public decks as well",
        "sim_diff": "diff --git a/client/DeckEditor.jsx b/client/DeckEditor.jsx @@ -238,17 +238,26 @@ class InnerDeckEditor extends React.Component {\nimportDeck() {\n$(findDOMNode(this.refs.modal)).modal('hide');\n- let strainUrl = document.getElementById('strainUrl').value;\n+ let importUrl = document.getElementById('importUrl').value;\nlet apiUrl = 'https://api.fiveringsdb.com/';\n- let path = 'strains';\n+ let strainPath = 'strains';\n+ let deckPath = 'decks';\nlet deckResponse = {};\n- let strainId = String(strainUrl).split('/')[4];\n+ let importId = String(importUrl).split('/')[4];\n+ let selector = String(importUrl).split('/')[3];\n+\n+ let path = '';\n+ if(selector === 'decks') {\n+ path = deckPath;\n+ } else if(selector === 'strains') {\n+ path = strainPath;\n+ }\n$.ajax({\ntype: 'GET',\n- url: apiUrl + path + '/' + strainId,\n+ url: apiUrl + path + '/' + importId,\ndataType: 'json',\nasync: false,\nsuccess: function(data) {\n@@ -256,12 +265,26 @@ class InnerDeckEditor extends React.Component {\n}\n});\n+ let deckClan = '';\n+ let deckAlliance = '';\n+ let deckName = '';\n+ let deckList = '';\n+ let cardList = '';\n+\n+\nif(deckResponse.success) {\nlet deckRecord = deckResponse.record;\n- let deckClan = deckRecord.head.clan;\n- let deckName = deckRecord.head.name;\n- let deckList = deckRecord.head.cards;\n- let cardList = '';\n+ if(selector === 'decks') {\n+ deckClan = deckRecord.primary_clan;\n+ deckAlliance = deckRecord.secondary_clan;\n+ deckName = deckRecord.name;\n+ deckList = deckRecord.cards;\n+ } else if(selector === 'strains') {\n+ deckClan = deckRecord.head.primary_clan;\n+ deckAlliance = deckRecord.head.secondary_clan;\n+ deckName = deckRecord.head.name;\n+ deckList = deckRecord.head.cards;\n+ }\nlet deck = this.copyDeck(this.state.deck);\n@@ -272,12 +295,14 @@ class InnerDeckEditor extends React.Component {\ndeck.faction = this.props.factions['crab'];\n}\n+ if(deckAlliance) {\n+ deck.alliance = this.props.factions[deckAlliance];\n+ } else {\n+ deck.alliance = this.props.factions['crab'];\n+ }\n+\n_.each(deckList, (count, card) => {\ncardList += count + ' ' + this.props.cards[card].name + '\\n';\n- let allianceClan = this.props.cards[card].clan;\n- if(allianceClan !== 'neutral' && allianceClan !== deckClan) {\n- deck.alliance = this.props.factions[this.props.cards[card].clan];\n- }\n});\n//Duplicate onCardListChange to get this working correctly\n@@ -361,7 +386,7 @@ class InnerDeckEditor extends React.Component {\n<h4 className='modal-title'>Provide Permalink</h4>\n</div>\n<div className='modal-body'>\n- <Input name='strainUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n+ <Input name='importUrl' fieldClass='col-sm-9' placeholder='Permalink' type='text' >\n<div className='col-sm-1'>\n<button className='btn btn-default' onClick={ this.importDeck.bind(this) }>Import</button>\n</div>\n",
        "chatgpt_cot": "Add async keyword to createDraftForSingleDeck method to handle asynchronous operations in cube_routes.js. Fixes compilation issue and ensures proper execution of deck creation functions."
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -156,11 +156,13 @@ class FilterCollapse extends Component {\nconst valid = Filter.tokenizeInput(filterInput, tokens);\nif (!valid || !Filter.verifyTokens(tokens)) return;\n+ if (tokens.length > 0) {\nconst filters = [Filter.parseTokens(tokens)];\n// TODO: Copy to advanced filter boxes.\nthis.props.setFilter(filters);\nHash.set('f', filterInput);\n}\n+ }\nhandleChange(event) {\nconst target = event.target;\n",
        "org_msg": "Fix crash with no filter.",
        "sim_msg": "added back arrow on profile pages",
        "sim_diff": "diff --git a/components/core/Filter/Filters.js b/components/core/Filter/Filters.js @@ -217,7 +217,7 @@ function Following({ viewer, onAction, ...props }) {\n* Profile\n* -----------------------------------------------------------------------------------------------*/\n-function Profile({ viewer, data, page, ...props }) {\n+function Profile({ viewer, onAction, data, page, ...props }) {\nif (page.id === \"NAV_SLATE\") {\ndata = data.owner;\n}\n@@ -257,9 +257,20 @@ function Profile({ viewer, data, page, ...props }) {\nconst username = Utilities.getUserDisplayName(data);\nlet { twitterUsername, body } = data;\n+ let backArrow = (\n+ <div style={{ display: \"flex\", alignItems: \"flex-start\", width: \"100%\", marginBottom: 12 }}>\n+ <Link onAction={onAction} href=\"/_/data\">\n+ <div css={Styles.ICON_CONTAINER}>\n+ <SVG.RightArrow height=\"20px\" style={{ transform: \"rotate(180deg)\" }} />\n+ </div>\n+ </Link>\n+ </div>\n+ );\n+\nreturn (\n<FilterSection {...props}>\n<div css={Styles.VERTICAL_CONTAINER_CENTERED} style={{ gap: \"12px\" }}>\n+ {isAuthenticated ? backArrow : null}\n<ProfilePhoto user={data} style={{ borderRadius: \"20px\" }} size={80} />\n<div css={Styles.VERTICAL_CONTAINER_CENTERED} style={{ gap: \"4px\" }}>\n<Typography.H4 color=\"textGrayDark\" style={{ marginTop: 10 }}>\n",
        "chatgpt_cot": "Add condition check for tokens length before setting filters in FilterCollapse component to prevent empty filter submission. Fix potential bug."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2178,7 +2178,7 @@ router.get('/deckbuilder/:id', function(req, res) {\nif (Array.isArray(card)) {\ncard.forEach(function(item, index2) {\nif (item) {\n- item.details = carddb.cardFromId(card.cardID);\n+ item.details = carddb.cardFromId(item.cardID);\nitem.details.display_image = util.getCardImageURL(item);\n}\n});\n",
        "org_msg": "fixed deckbuilder",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "Fix bug in cube_routes.js where the item details were not being properly assigned to the correct cardID, causing incorrect display images."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -183,7 +183,7 @@ test(\"setCubeType correctly sets the type and card_count of its input cube\", ()\n});\ntest(\"sanitize allows the correct tags\", () => {\n- const exampleHtml = \"<html><head></head><body><div>lkgdfsge</div><br/><strong>kjggggsgggg</strong><ol><li>gfgwwerer</li></ol></body></html>\";\n+ const exampleHtml = \"<html><head></head><body><div>lkgdfsge</div><strong>kjggggsgggg</strong><ol><li>gfgwwerer</li></ol></body></html>\";\nconst expected = \"<div>lkgdfsge</div><strong>kjggggsgggg</strong><ol><li>gfgwwerer</li></ol>\";\nconst result = cubefn.sanitize(exampleHtml);\nexpect(result).toBe(expected);\n",
        "org_msg": "remove self-closing br tag from example html in sanitize test\nbr behavior appears inconsistent between local and travis",
        "sim_msg": "Add some basic API functions",
        "sim_diff": "diff --git a/test/boardTests.js b/test/boardTests.js @@ -15,7 +15,7 @@ describe('Board', () => {\n})\nit('should have no capture information', () => {\nlet board = new Board()\n- assert.deepEqual(board.captures, {'-1': 0, '1': 0})\n+ assert.deepEqual(board.captures, [0, 0])\n})\nit('should have no markups and lines', () => {\nlet board = new Board()\n@@ -244,8 +244,8 @@ describe('Board', () => {\nwhite.forEach(x => board.set(x, -1))\nlet move = board.makeMove(1, [3, 1])\n- assert.equal(move.captures[-1], 0)\n- assert.equal(move.captures[1], white.length)\n+ assert.equal(move.captures[1], 0)\n+ assert.equal(move.captures[0], white.length)\nboard = new Board()\n@@ -253,8 +253,8 @@ describe('Board', () => {\nmove = board.makeMove(1, [1, 0])\n- assert.equal(move.captures[-1], 0)\n- assert.equal(move.captures[1], 1)\n+ assert.equal(move.captures[1], 0)\n+ assert.equal(move.captures[0], 1)\n})\nit('should handle suicide correctly', () => {\nlet board = new Board()\n",
        "chatgpt_cot": "Refactor sanitize function to allow specific tags only in cubefn.test.js."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2027,12 +2027,9 @@ router.get('/api/getcardfromcube/:id', function(req, res) {\nrouter.get('/api/cubelist/:id', function(req, res) {\nCube.findOne(build_id_query(req.params.id), function(err, cube) {\n- var cardnames = \"\";\n- cube.cards.forEach(function(item, index) {\n- cardnames += carddb.cardFromId(item.cardID).name + \"\\n\";\n- });\n+ const names = cube.cards.map(card => carddb.cardFromId(card.cardID).name);\nres.contentType('text/plain');\n- res.status(200).send(cardnames);\n+ res.status(200).send(names.join(\"\\n\"));\n});\n});\n",
        "org_msg": "More efficient coding",
        "sim_msg": "Update fetch to look at new image location",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -32,7 +32,9 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.png');\n- var imagesrc = 'bundles/card_images/';\n+ var imagePack = card.pack_cards[0].pack.id;\n+ var imagesrc = 'bundles/card_images/' + imagePack;\n+\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n",
        "chatgpt_cot": "Refactor cube_routes.js to use map and join methods for better readability and efficiency. Fixes issue with concatenating card names in /api/cubelist/:id route."
    },
    {
        "org_diff": "diff --git a/__tests__/routes/cube/download.test.js b/__tests__/routes/cube/download.test.js -const router = require('../../../routes/cube/download');\nconst request = require('supertest');\nconst express = require('express');\n-const app = express();\n-const dbSetup = require('../../helpers/dbTestSetup');\n+const Papa = require('papaparse');\n+const router = require('../../../routes/cube/download');\nconst Cube = require('../../../models/cube');\n-const cubefixture = require('../../../fixtures/examplecube');\n-const { buildIdQuery } = require('../../../serverjs/cubefn');\nconst carddb = require('../../../serverjs/cards');\n+const { buildIdQuery } = require('../../../serverjs/cubefn');\n+const cubefixture = require('../../../fixtures/examplecube');\n+const dbSetup = require('../../helpers/dbTestSetup');\nconst exampleCubeWithName = (name) => {\nconst cube = new Cube(cubefixture.exampleCube);\n@@ -21,6 +21,7 @@ const sanitizedCubeName = 'GalaxyBrainCube';\nconst exampleCube = exampleCubeWithName(cubeName);\nconst cubeID = exampleCube.shortID;\n+const app = express();\napp.use('/', router);\nlet mongoServer;\n@@ -81,7 +82,7 @@ test('csv download', () => {\nconst headerLine =\n'Name,CMC,Type,Color,Set,Collector Number,Rarity,Color Category,Status,Finish,Maybeboard,Image URL,Image Back URL,Tags,Notes,MTGO ID';\nconst faerieGuidemotherLine =\n- '\"Faerie Guidemother\",1,\"Creature - Faerie\",W,\"eld\",\"11\",common,w,Not Owned,Non-foil,false,,,\"New\",\"\",78110,';\n+ '\"Faerie Guidemother\",1,\"Creature - Faerie\",W,\"eld\",\"11\",common,w,Not Owned,Non-foil,false,,,\"New\",\"\",78110';\nreturn request(app)\n.get('/csv/' + cubeID)\n@@ -89,6 +90,10 @@ test('csv download', () => {\n.expect('Content-Type', 'text/plain')\n.expect('Content-disposition', 'attachment; filename=' + sanitizedCubeName + '.csv')\n.expect((res) => {\n+ // Verify CSV format is valid\n+ const parsed = Papa.parse(res.text.trim(), { header: true });\n+ expect(parsed.errors).toEqual([]);\n+\nconst lines = splitText(res.text);\nexpect(lines[0]).toEqual(headerLine);\nexpect(lines[1]).toEqual(faerieGuidemotherLine);\n@@ -127,4 +132,8 @@ test('xmage download', () => {\n});\n});\n-const splitText = (text) => text.trim().split('\\n').map((l) => l.trim());\n+const splitText = (text) =>\n+ text\n+ .trim()\n+ .split('\\n')\n+ .map((l) => l.trim());\n",
        "org_msg": "Use papaparse to verify csv download format",
        "sim_msg": "if HD under min req, set internal storage to 5GB\nCR fixes",
        "sim_diff": "diff --git a/src/agent/block_store_services/block_store_mongo.js b/src/agent/block_store_services/block_store_mongo.js const _ = require('lodash');\nconst mongodb = require('mongodb');\nconst mongo_client = require('../../util/mongo_client');\n+\nconst P = require('../../util/promise');\n-// const RpcError = require('../../rpc/rpc_error');\nconst dbg = require('../../util/debug_module')(__filename);\n+const os_utils = require('../../util/os_utils');\n+const size_utils = require('../../util/size_utils');\nconst buffer_utils = require('../../util/buffer_utils');\nconst BlockStoreBase = require('./block_store_base').BlockStoreBase;\n+\n+const { SERVER_MIN_REQUIREMENTS } = require('../../config');\nconst GRID_FS_BUCKET_NAME = 'mongo_internal_agent';\nconst GRID_FS_BUCKET_NAME_FILES = 'mongo_internal_agent.files';\nconst GRID_FS_BUCKET_NAME_CHUNKS = 'mongo_internal_agent.chunks';\n@@ -22,6 +26,7 @@ class BlockStoreMongo extends BlockStoreBase {\nsuper(options);\nthis.base_path = options.mongo_path;\nthis.blocks_path = this.base_path + '/blocks_tree';\n+ this._STORE_LIMIT = 5 * size_utils.GIGABYTE;\n}\n_gridfs() {\n@@ -57,6 +62,18 @@ class BlockStoreMongo extends BlockStoreBase {\n});\n}\n+ set_mongo_store_limit() {\n+ return os_utils.get_raw_storage()\n+ .then(total => {\n+ dbg.log0(`total disk size ${total}, current used ${this._usage}`);\n+ if (total < SERVER_MIN_REQUIREMENTS.STORAGE_GB * size_utils.GIGABYTE) {\n+ this._STORE_LIMIT = 5 * size_utils.GIGABYTE;\n+ } else {\n+ this._STORE_LIMIT = 30 * size_utils.GIGABYTE;\n+ }\n+ });\n+ }\n+\ninit() {\nreturn mongo_client.instance().connect()\n.then(() => this._gridfs())\n@@ -66,18 +83,19 @@ class BlockStoreMongo extends BlockStoreBase {\nthis._usage = usage_metadata;\ndbg.log0('found usage data usage_data = ', this._usage);\n}\n- }, err => {\n+ })\n+ .then(() => this.set_mongo_store_limit())\n+ .catch(err => {\ndbg.error('got error on init:', err);\n+ throw err;\n});\n}\nget_storage_info() {\n- // Actually will be used 30GB since we have 10GB reserve\n- const GIGABYTE_30 = 30 * 1024 * 1024 * 1024;\nreturn P.resolve(this._get_usage())\n.then(usage => ({\n- total: Math.max(GIGABYTE_30, usage.size),\n- free: Math.max(GIGABYTE_30 - usage.size, 0),\n+ total: Math.max(this._STORE_LIMIT, usage.size),\n+ free: Math.max(this._STORE_LIMIT - usage.size, 0),\nused: usage.size\n}));\n}\n",
        "chatgpt_cot": "\"Add PapaParse library, update cube download test, and fix CSV format validation in cube download test\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1066,7 +1066,7 @@ router.post('/importcubetutor/:id', ensureAuth, async (req, res) => {\n}\n});\n-router.post('/uploaddecklist/:id', ensureAuth, async function(req, res) {\n+router.post('/uploaddecklist/:id', ensureAuth, async (req, res) => {\ntry {\nconst cube = await Cube.findOne(build_id_query(req.params.id));\nif (!cube) {\n@@ -1156,9 +1156,7 @@ router.post('/uploaddecklist/:id', ensureAuth, async function(req, res) {\nreturn res.redirect('/cube/deckbuilder/' + deck._id);\n} catch (err) {\n- console.error(err);\n- req.flash('danger', err.message);\n- res.redirect('/404');\n+ util.handleRouteError(res, err, '/404');\n}\n});\n@@ -1168,16 +1166,15 @@ router.post('/bulkupload/:id', ensureAuth, async function(req, res) {\nif (!cube) {\nreq.flash('danger', 'Cube not found');\nreturn res.status(404).render('misc/404', {});\n- } else if (cube.owner != req.user._id) {\n+ }\n+ if (cube.owner != req.user._id) {\nreq.flash('danger', 'Not Authorized');\nreturn res.redirect('/cube/list/' + req.params.id);\n}\nawait bulkUpload(req, res, req.body.body, cube);\n} catch (err) {\n- console.error(err);\n- req.flash('danger', 'Error making bulk upload');\n- return res.redirect(`/cube/list/${req.params.id}`);\n+ util.handleRouteError(res, err, `/cube/list/${req.params.id}`);\n}\n});\n",
        "org_msg": "revise bulkupload route",
        "sim_msg": "adds case when the upload server is not provided",
        "sim_diff": "diff --git a/common/file-utilities.js b/common/file-utilities.js @@ -120,15 +120,25 @@ export const upload = async ({ file, context, bucketName, routes }) => {\nXHR.send(formData);\n});\n- let res;\n- // TODO(jim): Make this smarter.\n-\nconst storageDealRoute =\n- routes && routes.storageDealUpload\n- ? `${routes.storageDealUpload}/api/deal/`\n- : `/api/data/deal/`;\n- const generalRoute = routes && routes.upload ? `${routes.upload}/api/data/` : \"/api/data/\";\n+ routes && routes.storageDealUpload ? `${routes.storageDealUpload}/api/deal/` : null;\n+ const generalRoute = routes && routes.upload ? `${routes.upload}/api/data/` : null;\n+\n+ if (!storageDealRoute || !generalRoute) {\n+ dispatchCustomEvent({\n+ name: \"create-alert\",\n+ detail: {\n+ alert: { message: \"We could not find our upload server.\" },\n+ },\n+ });\n+\n+ return {\n+ decorator: \"NO_UPLOAD_RESOURCE_URI_ATTACHED\",\n+ error: true,\n+ };\n+ }\n+ let res;\nif (bucketName && bucketName === STAGING_DEAL_BUCKET) {\nres = await _privateUploadMethod(`${storageDealRoute}${file.name}`, file);\n} else {\n@@ -154,7 +164,7 @@ export const upload = async ({ file, context, bucketName, routes }) => {\n},\n});\n- return !res ? { error: \"NO_RESPONSE\" } : res;\n+ return !res ? { decorator: \"NO_RESPONSE_FROM_SERVER\", error: true } : res;\n}\nif (res.data.data.type.startsWith(\"image/\")) {\n",
        "chatgpt_cot": "Refactor route handlers to use arrow functions, handle errors with util function. Fix authorization check and error handling for bulk upload route."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -3393,9 +3393,25 @@ router.post(\ncard.details = details;\nreturn card;\n});\n+ const addPriceAndElo = (cards) => {\n+ for (const card of cards) {\n+ if (card.details.tcgplayer_id) {\n+ if (priceDict[card.details.tcgplayer_id]) {\n+ card.details.price = priceDict[card.details.tcgplayer_id];\n+ }\n+ if (priceDict[`${card.details.tcgplayer_id}_foil`]) {\n+ card.details.price_foil = priceDict[`${card.details.tcgplayer_id}_foil`];\n+ }\n+ }\n+ if (eloDict[card.details.name]) {\n+ card.details.elo = eloDict[card.details.name];\n+ }\n+ }\n+ return cards;\n+ };\nreturn res.status(200).send({\nsuccess: 'true',\n- result: list,\n+ result: addPriceAndElo(list),\n});\n}),\n);\n",
        "org_msg": "add elo and price",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "Add function to add price and elo to cards, fixing missing price and elo data in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/src/components/AgeText.js b/src/components/AgeText.js @@ -41,16 +41,18 @@ class AgeText extends React.Component {\n}\ninMonths(d1, d2) {\n- var d1Y = d1.getFullYear();\n- var d2Y = d2.getFullYear();\n- var d1M = d1.getMonth();\n- var d2M = d2.getMonth();\n+ var t2 = d2.getTime();\n+ var t1 = d1.getTime();\n- return d2M + 12 * d2Y - (d1M + 12 * d1Y);\n+ //365/12 is the average day length of a month, which is close enough\n+ return parseInt((t2 - t1) / (24 * 3600 * 1000 * 365/12));\n}\ninYears(d1, d2) {\n- return d2.getFullYear() - d1.getFullYear();\n+ var t2 = d2.getTime();\n+ var t1 = d1.getTime();\n+\n+ return parseInt((t2 - t1) / (24 * 3600 * 1000 * 365));\n}\nrender() {\n",
        "org_msg": "Fix delta month issue",
        "sim_msg": "Small updates to Date helpers",
        "sim_diff": "diff --git a/src/utils/date.js b/src/utils/date.js @@ -97,7 +97,9 @@ export function adjustDate (date, mod, utc) {\nprefix = `set${utc ? 'UTC' : ''}`\nObject.keys(mod).forEach(key => {\n- const op = key.charAt(0).toUpperCase() + key.slice(1)\n+ const op = key === 'year'\n+ ? 'FullYear'\n+ : key.charAt(0).toUpperCase() + key.slice(1)\nt[`${prefix}${op}`](mod[key])\n})\nreturn t\n@@ -275,6 +277,16 @@ export function daysInMonth (date) {\n}\nexport const formatter = {\n+ // Year: 00, 01, ..., 99\n+ YY (date) {\n+ return pad(date.getFullYear(), 4).substr(2)\n+ },\n+\n+ // Year: 1900, 1901, ..., 2099\n+ YYYY (date) {\n+ return pad(date.getFullYear(), 4)\n+ },\n+\n// Month: 1, 2, ..., 12\nM (date) {\nreturn date.getMonth() + 1\n@@ -285,26 +297,16 @@ export const formatter = {\nreturn pad(date.getMonth() + 1)\n},\n- // Day of week: Sun, Mon, ...\n+ // Month Short Name: Jan, Feb, ...\nMMM (date) {\nreturn this.MMMM(date).slice(0, 3)\n},\n- // Day of week: Sunday, Monday, ...\n+ // Month Name: January, February, ...\nMMMM (date) {\nreturn monthNames[date.getMonth()]\n},\n- // Minute: 0, 1, ..., 59\n- m (date) {\n- return date.getMinutes()\n- },\n-\n- // Minute: 00, 01, ..., 59\n- mm (date) {\n- return pad(date.getMinutes())\n- },\n-\n// Quarter: 1, 2, 3, 4\nQ (date) {\nreturn Math.ceil((date.getMonth() + 1) / 3)\n@@ -365,16 +367,6 @@ export const formatter = {\nreturn pad(getWeekOfYear(date))\n},\n- // Year: 00, 01, ..., 99\n- YY (date) {\n- return pad(date.getFullYear(), 4).substr(2)\n- },\n-\n- // Year: 1900, 1901, ..., 2099\n- YYYY (date) {\n- return pad(date.getFullYear(), 4)\n- },\n-\n// Hour: 0, 1, ... 23\nH (date) {\nreturn date.getHours()\n@@ -402,6 +394,16 @@ export const formatter = {\nreturn pad(this.h(date))\n},\n+ // Minute: 0, 1, ..., 59\n+ m (date) {\n+ return date.getMinutes()\n+ },\n+\n+ // Minute: 00, 01, ..., 59\n+ mm (date) {\n+ return pad(date.getMinutes())\n+ },\n+\n// Second: 0, 1, ..., 59\ns (date) {\nreturn date.getSeconds()\n",
        "chatgpt_cot": "Refactor date calculation methods to use getTime() for better accuracy and readability in AgeText component."
    },
    {
        "org_diff": "diff --git a/models/user.js b/models/user.js @@ -81,4 +81,13 @@ const UserSchema = mongoose.Schema({\n},\n});\n+UserSchema.index({\n+ username_lower: 1,\n+});\n+\n+UserSchema.index({\n+ email: 1,\n+});\n+\n+\nconst User = (module.exports = mongoose.model('User', UserSchema));\n",
        "org_msg": "Optimize all user queries",
        "sim_msg": "Log the repo's url function",
        "sim_diff": "diff --git a/app/models/repo.js b/app/models/repo.js @@ -80,6 +80,8 @@ module.exports = Backbone.Model.extend({\n},\nurl: function() {\n- return config.api + '/repos/' + this.get('owner').login + '/' + this.get('name');\n+ var url = config.api + '/repos/' + this.get('owner').login + '/' + this.get('name');\n+ console.log(url);\n+ return url;\n}\n});\n",
        "chatgpt_cot": "Add indexes for username_lower and email fields in User model."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2731,7 +2731,7 @@ router.get(\nconst cards = cardIds.map((id) => Object.assign({}, carddb.cardFromId(id)));\nconst tcg = [...new Set(cards.map(({ tcgplayer_id }) => tcgplayer_id).filter((tid) => tid))];\nconst names = [...new Set(cards.map(({ name }) => name).filter((name) => name))];\n- const [priceDict, eloDict] = await [GetPrices(tcg), getElo(names, true)];\n+ const [priceDict, eloDict] = await Promise.all([GetPrices(tcg), getElo(names, true)]);\nfor (const card of cards) {\nif (card.tcgplayer_id) {\nconst cardPriceData = priceDict[card.tcgplayer_id];\n",
        "org_msg": "Fix getversions to correctly await promises.",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "Fix asynchronous data fetching for card prices and Elo ratings in cube_routes.js. Use Promise.all for simultaneous retrieval."
    },
    {
        "org_diff": "diff --git a/public/js/autocard.js b/public/js/autocard.js var stopAutocard = false;\n+var autocardTimeout = null;\nfunction getElementPosition(el) {\nvar l = 0, t = 0;\n@@ -100,9 +101,12 @@ function autocard_show_card(card_image, card_flip, show_art_crop, tags) {\n{\n$(document.getElementById(\"autocard_popup2\")).find('img')\n.one('load', function() { // only fill in tags area once the image is done loading\n+ if(autocardTimeout) autocardTimeout = clearTimeout(autocardTimeout);\n+ autocardTimeout = setTimeout( function() {\n$(document.getElementById(\"autocard_popup\")).show();\n$(document.getElementById(\"autocard_popup2\")).show();\n$(document.getElementById(\"autocard_popup_info\")).show();\n+ }, 50 );\n})\n.attr('src', card_flip) // set the image source so it begins fetching\n.each(function() {\n@@ -112,8 +116,11 @@ function autocard_show_card(card_image, card_flip, show_art_crop, tags) {\n}\nelse\n{\n+ if(autocardTimeout) autocardTimeout = clearTimeout(autocardTimeout);\n+ autocardTimeout = setTimeout( function() {\n$(document.getElementById(\"autocard_popup\")).show();\n$(document.getElementById(\"autocard_popup_info\")).show();\n+ }, 50 );\n}\n})\n.attr('src', card_image) // set the image source so it begins fetching\n@@ -129,6 +136,7 @@ function autocard_hide_card() {\ndocument.getElementById(\"autocard_popup_info\").innerHTML = '';\n// clear any load events that haven't fired yet so that they don't fire after the card should be hidden\n+ if(autocardTimeout) autocardTimeout = clearTimeout(autocardTimeout);\n$(document.getElementById(\"autocard_popup\")).find('img').off('load');\n$(document.getElementById(\"autocard_popup2\")).find('img').off('load');\n",
        "org_msg": "add timeout to prevent flicker while image loading",
        "sim_msg": "More card generator debugging",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -31,14 +31,22 @@ const _waitForAllCardFonts = () => Promise.all([\nconsole.warn(err);\n});\n-const _getCanvasBlob = canvas => new Promise(function(resolve, reject) {\n+const _getCanvasBlob = canvas => new Promise((resolve, reject) => {\ncanvas.toBlob(blob => {\nresolve(blob);\n});\n});\n-const _getCanvasUrl = async canvas => {\n+const _getBlobDataUrl = async blob => new Promise((resolve, reject) => {\n+ const fileReader = new FileReader();\n+ fileReader.onload = () => {\n+ resolve(fileReader.result);\n+ };\n+ fileReader.onerror = reject;\n+ fileReader.readAsDataURL(blob);\n+});\n+const _getCanvasDataUrl = async canvas => {\nconst blob = await _getCanvasBlob(canvas);\n- const url = URL.createObjectURL(blob);\n+ const url = await _getBlobDataUrl(blob);\nreturn url;\n};\n@@ -80,12 +88,12 @@ export const generateObjectCard = async ({\nlet objectImage = await screenshotObjectApp({\napp,\n});\n- objectImage = await _getCanvasUrl(objectImage);\n+ objectImage = await _getCanvasDataUrl(objectImage);\nlet minterAvatarPreview = await screenshotAvatarUrl({\nstart_url: `./avatars/4205786437846038737.vrm`,\n});\n- minterAvatarPreview = await _getCanvasUrl(minterAvatarPreview);\n+ minterAvatarPreview = await _getCanvasDataUrl(minterAvatarPreview);\n// _previewImage(minterAvatarPreview, width, height);\nconst minterUsername = 'Scillia';\n@@ -98,7 +106,6 @@ export const generateObjectCard = async ({\nminterUsername,\nminterAvatarPreview,\n});\n- // try {\nconst cardImg = await generateCard({\nstats,\nwidth,\n@@ -110,9 +117,6 @@ export const generateObjectCard = async ({\n});\n_previewImage(cardImg, width, height);\nreturn cardImg;\n- /* } catch (err) {\n- console.warn(err);\n- } */\n};\nexport const generateCard = async ({\n@@ -143,8 +147,16 @@ export const generateCard = async ({\nconst el = svg;\n// name\n+ {\nconst nameEl = el.querySelector('#name');\nnameEl.innerHTML = name;\n+ }\n+\n+ // illustrator name\n+ {\n+ const illustratorNameEl = el.querySelector('#illustrator-name');\n+ illustratorNameEl.innerHTML = minterUsername;\n+ }\n// type icon\nfor (let i = 0; i < types.length; i++) {\n@@ -169,11 +181,19 @@ export const generateCard = async ({\nstatEl.innerHTML = escape(spec.stats[statName] + '');\n});\n- /* {\n- const imageEl = el.querySelector('#Image image');\n- imageEl.setAttribute('xlink:href', objectImage);\n+ // main image\n+ {\n+ const mainImageEl = el.querySelector('#main-image');\n+ mainImageEl.setAttribute('xlink:href', objectImage);\n}\n+\n+ // illustrator image\n{\n+ const illustartorImageEl = el.querySelector('#illustrator-image');\n+ illustartorImageEl.setAttribute('xlink:href', minterAvatarPreview);\n+ }\n+\n+ /* {\nconst lines = description.split('\\n');\nconst descriptionHeaderTextEl = el.querySelector('#description-header-text');\ndescriptionHeaderTextEl.innerHTML = lines[0];\n",
        "chatgpt_cot": "Add timeout to autocard display to prevent popup flickering. Fix potential issue with multiple autocard popups appearing simultaneously."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -2442,6 +2442,8 @@ router.post('/api/draftpickcard/:id', function(req, res) {\nCardRating.findOne({\n'name': req.body.card.details.name\n}, function(err, cardrating) {\n+ if(draft.packs[0][0])\n+ {\nconst cards_per_pack = draft.packs[0][0].length + draft.pickNumber - 1;\nvar rating = (cards_per_pack - draft.packs[0][0].length + 1) / cards_per_pack;\n@@ -2479,6 +2481,14 @@ router.post('/api/draftpickcard/:id', function(req, res) {\nres.status(200).send({\nsuccess: 'true'\n});\n+ }\n+ else\n+ {\n+ //last card of the draft\n+ res.status(200).send({\n+ success: 'true'\n+ });\n+ }\n});\n});\n});\n",
        "org_msg": "Fixed crash due from bad draft state",
        "sim_msg": "Update AdmitDefeat.js\nEvents shouldn't be clickToActivate\nAdmit Defeat doesn't have an honor cost\ncondition needs to be a function",
        "sim_diff": "diff --git a/server/game/cards/01 - Core/AdmitDefeat.js b/server/game/cards/01 - Core/AdmitDefeat.js @@ -3,9 +3,7 @@ const DrawCard = require('../../drawcard.js');\nclass AdmitDefeat extends DrawCard {\nsetupCardAbilities(ability) {\nthis.action({\n- cost: ability.costs.payHonor(1),\n- condition: this.game.currentConflict && this.game.currentConflict.defenders.length === 1,\n- clickToActivate: true,\n+ condition: () => this.game.currentConflict && this.game.currentConflict.defenders.length === 1,\ntarget: {\ncardType: 'character',\ncardCondition: card => this.game.currentConflict.isDefending(card)\n",
        "chatgpt_cot": "Add conditional check for last card of the draft in draftpickcard API to handle the last card of the draft."
    },
    {
        "org_diff": "diff --git a/.env_EXAMPLE b/.env_EXAMPLE @@ -2,11 +2,11 @@ EMAIL_CONFIG_USERNAME=\"\"\nEMAIL_CONFIG_PASSWORD=\"\"\nTCG_PLAYER_PUBLIC_KEY=\"\"\nTCG_PLAYER_PRIVATE_KEY=\"\"\n-SESSION_SECRET=\"\"\n+SESSION_SECRET=\"session_secret\"\nMONGODB_URL=\"mongodb://127.0.0.1:27017/nodecube\"\n-SECRET=\"\"\n+SECRET=\"secret\"\nDBNAME=\"nodecube\"\n-SESSION=\"\"\n+SESSION=\"session\"\nFLASKROOT=\"http://167.172.233.110\"\nPORT=\"5000\"\nHOST=\"http://127.0.0.1:5000\"\n",
        "org_msg": "Update .env_EXAMPLE",
        "sim_msg": "chore: add oath env vars to example config",
        "sim_diff": "diff --git a/.env.example b/.env.example @@ -11,3 +11,9 @@ KEYCLOAK_CLIENT_ID=reaction-next-starterkit\nKEYCLOAK_URL=http://localhost:8080/auth\nKEYCLOAK_REDIRECT_URI=http://localhost:4000/auth\nSTRIPE_PUBLIC_API_KEY=ENTER_STRIPE_PUBLIC_KEY_HERE\n+OAUTH2_AUTH_URL=http://localhost:4444/oauth2/auth\n+OAUTH2_TOKEN_URL=http://hydra.auth.reaction.localhost:4444/oauth2/token\n+OAUTH2_CLIENT_ID=reaction-next-starterkit\n+OAUTH2_CLIENT_SECRET=CHANGEME\n+OAUTH2_REDIRECT_URL=http://localhost:4000/callback\n+PASSPORT_SESSION_SECRET=CHANGEME\n\\ No newline at end of file\n",
        "chatgpt_cot": "Update .env_EXAMPLE with session_secret, secret, and session variables. Set MONGODB_URL to local host and update FLASKROOT and HOST URLs."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -140,14 +140,16 @@ app.get('/', function(req, res) {\nif (req.user) user_id = req.user._id;\nCube.find({\n+ $or: [{\n+ $and: [{\n'card_count': {\n$gt: 200\n- },\n- $or: [{\n- 'isListed': true\n- }, {\n- 'isListed': null\n+ }\n}, {\n+ 'isListed': true\n+ }]\n+ },\n+ {\n'owner': user_id\n}]\n}).sort({\n",
        "org_msg": "excluding other persons private cubes from Recently Updated Cubes list",
        "sim_msg": "Add datastore implementation.",
        "sim_diff": "diff --git a/assets/js/googlesitekit/datastore/user/user-info.js b/assets/js/googlesitekit/datastore/user/user-info.js @@ -37,6 +37,7 @@ const { createRegistrySelector } = Data;\nconst RECEIVE_CONNECT_URL = 'RECEIVE_CONNECT_URL';\nconst RECEIVE_USER_INFO = 'RECEIVE_USER_INFO';\nconst RECEIVE_USER_IS_VERIFIED = 'RECEIVE_USER_IS_VERIFIED';\n+const RECEIVE_USER_INPUT_STATE = 'RECEIVE_USER_INPUT_STATE';\nconst initialState = {\nconnectURL: undefined,\n@@ -110,6 +111,23 @@ export const actions = {\ntype: RECEIVE_USER_IS_VERIFIED,\n};\n},\n+\n+ /**\n+ * Stores the user input state in the datastore.\n+ *\n+ * @since n.e.x.t\n+ * @private\n+ *\n+ * @param {Object} userInputState User input state.\n+ * @return {Object} Redux-style action.\n+ */\n+ receiveUserInputState( userInputState ) {\n+ invariant( userInputState, 'userInputState is required.' );\n+ return {\n+ payload: { userInputState },\n+ type: RECEIVE_USER_INPUT_STATE,\n+ };\n+ },\n};\nexport const controls = {};\n@@ -137,6 +155,13 @@ export const reducer = ( state, { type, payload } ) => {\nverified,\n};\n}\n+ case RECEIVE_USER_INPUT_STATE: {\n+ const { userInputState } = payload;\n+ return {\n+ ...state,\n+ userInputState,\n+ };\n+ }\ndefault: {\nreturn state;\n}\n@@ -189,6 +214,21 @@ export const resolvers = {\nconst { verified } = global._googlesitekitUserData;\nyield actions.receiveUserIsVerified( verified );\n},\n+\n+ *getUserInputState() {\n+ const { select } = yield Data.commonActions.getRegistry();\n+\n+ if ( select( STORE_NAME ).getUserInputState() ) {\n+ return;\n+ }\n+\n+ if ( ! global._googlesitekitUserData ) {\n+ global.console.error( 'Could not load core/user info.' );\n+ return;\n+ }\n+ const { userInputState } = global._googlesitekitUserData;\n+ yield actions.receiveUserInputState( userInputState );\n+ },\n};\nexport const selectors = {\n@@ -320,6 +360,19 @@ export const selectors = {\nreturn verified;\n},\n+ /**\n+ * Gets the user input state.\n+ *\n+ * @since n.e.x.t\n+ *\n+ * @param {Object} state Data store's state.\n+ * @return {string} The user input state.\n+ */\n+ getUserInputState( state ) {\n+ const { userInputState } = state;\n+ return userInputState;\n+ },\n+\n};\nexport default {\n",
        "chatgpt_cot": "Add condition to Cube.find to filter by card count and isListed, and owner."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -44,6 +44,8 @@ const GUILDS = ['Azorius', 'Dimir', 'Rakdos', 'Gruul', 'Selesnya', 'Orzhov', 'Iz\nconst SHARDS = ['Bant', 'Esper', 'Grixis', 'Jund', 'Naya', 'Abzan', 'Jeskai', 'Sultai', 'Mardu', 'Temur'];\nconst FOUR_AND_FIVE_COLOR = ['4c', '5c'];\n+const ELO_DEFAULT = 1200;\n+\nfunction ISODateToYYYYMMDD(dateString) {\nconst locale = 'en-US';\n@@ -450,10 +452,9 @@ function getLabelsRaw(cube, sort) {\nif (sort === 'Elo') {\nlet elos = [];\nfor (const card of cube) {\n- if (card.details.elo) {\n- if (!elos.includes(card.details.elo)) {\n- elos.push(card.details.elo);\n- }\n+ const elo = card.details.elo ?? ELO_DEFAULT;\n+ if (!elos.includes(elo)) {\n+ elos.push(elo);\n}\n}\nelos = elos.sort((x, y) => (x < y ? -1 : 1));\n@@ -732,10 +733,7 @@ export function cardGetLabels(card, sort) {\nreturn ['All'];\n}\nif (sort === 'Elo') {\n- if (card.details.elo) {\n- return [getEloBucket(card.details.elo)];\n- }\n- return [];\n+ return [getEloBucket(card.details.elo ?? ELO_DEFAULT)];\n}\n// Unrecognized sort\nreturn [];\n",
        "org_msg": "added default Elo for cube sort",
        "sim_msg": "Changes to deck for stronghold",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -13,11 +13,12 @@ class Deck {\nvar result = {\nconflictDrawCards: [],\ndynastyDrawCards: [],\n- provinceCards: []\n+ provinceCards: [],\n+ stronghold: []\n};\n//conflict\n- this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ this.eachRepeatedCard(this.data.conflictDrawCards, cardData => {\nif(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\ndrawCard.location = 'conflict draw deck';\n@@ -26,7 +27,7 @@ class Deck {\n});\n//dynasty\n- this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ this.eachRepeatedCard(this.data.dynastyDrawCards, cardData => {\nif(['dynsaty'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\ndrawCard.location = 'dynasty draw deck';\n@@ -42,18 +43,15 @@ class Deck {\n}\n});\n- if(this.data.stronghold) {\n- result.stronghold = new DrawCard(player, _.extend({\n- code: this.data.stronghold.value,\n- type_code: 'stronghold',\n- stronghold_code: this.data.stronghold.value\n- }, this.data.stronghold));\n- } else {\n- result.stronghold = new DrawCard(player, { type_code: 'stronghold' });\n+ this.eachRepeatedCard(this.data.stronghold, cardData => {\n+ if(cardData.type_code === 'stronghold') {\n+ var strongholdCard = this.createCard(StrongholdCard, player, cardData);\n+ strongholdCard.location = 'stronghold deck';\n+ result.stronghold.push(strongholdCard);\n}\n- result.stronghold.moveTo('stronghold');\n+ });\n- result.allCards = [result.stronghold].concat(result.drawCards).concat(result.provinceCards).concat(result.conflictDrawCards).concat(result.dynastyDrawCards);\n+ result.allCards = [result.stronghold].concat(result.provinceCards).concat(result.conflictDrawCards).concat(result.dynastyDrawCards);\nreturn result;\n}\n",
        "chatgpt_cot": "Add default Elo value, simplify Elo sorting logic, and handle missing Elo values in cardGetLabels function in Sort.js."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -310,8 +310,6 @@ test(\"getBasics returns the expected set of basic lands\", () => {\nconst result = cubefn.getBasics(carddb);\nexpect(result).toEqual(expected);\nbasicLands.forEach(function(name) {\n- console.log(result[name].details);\n- console.log(expected[name].details);\nexpect(result[name].details).toEqual(expected[name].details);\n});\n",
        "org_msg": "remove errant console logs",
        "sim_msg": "Better property descriptor test",
        "sim_diff": "diff --git a/__tests__/base.js b/__tests__/base.js @@ -144,13 +144,26 @@ function runBaseTest(name, lib, freeze) {\nexpect(enumerableOnly(nextState.anArray)).toEqual([1, 2, 3, {c: 5}])\n})\n- it(\"should support sorting arrays - 2\", () => {\n+ it(\"should expose property descriptors\", () => {\nconst nextState = immer([], s => {\n+ expect(Object.getOwnPropertyDescriptor(s, 0)).toBe(undefined)\ns.unshift(\"x\")\n+ expect(Object.getOwnPropertyDescriptor(s, 0)).toEqual({\n+ configurable: true,\n+ enumerable: true,\n+ value: \"x\",\n+ writable: true\n+ })\nexpect(s.length).toBe(1)\nexpect(s[0] === \"x\").toBe(true)\n})\nexpect(nextState).toEqual([\"x\"])\n+ expect(Object.getOwnPropertyDescriptor(nextState, 0)).toEqual({\n+ configurable: !freeze,\n+ enumerable: true,\n+ value: \"x\",\n+ writable: !freeze\n+ })\n})\nit(\"should support sorting arrays - 2\", () => {\n",
        "chatgpt_cot": "\"Remove console.log statements and update test for getBasics in cubefn.test.js\""
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -51,13 +51,10 @@ winston.configure({\n//\nnew winston.transports.File({ filename: errorFile.name, level: 'error' }),\nnew winston.transports.File({ filename: combinedFile.name }),\n+ new winston.transports.Console(),\n],\n});\n-if (process.env.NODE_ENV !== 'production') {\n- winston.add(new winston.transports.Console());\n-}\n-\nif (secrets.loggly) {\nwinston.add(\nnew Loggly({\n",
        "org_msg": "Always log to console.",
        "sim_msg": "fix: add redirection for /contact\nref:",
        "sim_diff": "diff --git a/packages/manager/apps/web/client/app/app.module.js b/packages/manager/apps/web/client/app/app.module.js @@ -319,6 +319,7 @@ export default (containerEl, environment) => {\n.constant('URLS_REDIRECTED_TO_DEDICATED', [\nnew RegExp('/useraccount/.*'),\nnew RegExp('/billing/.*'),\n+ new RegExp('/contact/.*'),\n])\n.config(\n/* @ngInject */ (ovhFeatureFlippingProvider) => {\n",
        "chatgpt_cot": "Add Console transport to winston configuration for logging; remove conditional check for NODE_ENV and add Console transport unconditionally."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/util.js b/__tests__/serverjs/util.js @@ -18,7 +18,7 @@ test(\"shuffle returns an array when called with a seed\", () => {\nexpect(result.length).toBe(arrayToShuffle.length);\n});\n-test(\"turnToTree\", () => {\n+test(\"turnToTree returns a valid prefix tree\", () => {\nconst arrayToTree = [\"tes\", \"trail\", \"another\"];\nconst result = util.turnToTree(arrayToTree);\nexpect(Object.keys(result).length).toBe(2);\n",
        "org_msg": "better description for turnToTree test",
        "sim_msg": "add random number tests",
        "sim_diff": "diff --git a/test/util.test.js b/test/util.test.js @@ -43,6 +43,20 @@ describe('util', () => {\nexpect(num).to.equal(0)\n});\n+ describe('multipleOf', () => {\n+\n+ it('can handle whole numbers', () => {\n+ const num = randomNumber({ min: 1, max: 3, multipleOf: 2 });\n+ expect(num).to.equal(2);\n+ });\n+\n+ it('can handle decimal numbers', () => {\n+ const num = randomNumber({ min: 1, max: 3, multipleOf: .5 });\n+ expect(num % .5).to.equal(0);\n+ });\n+\n+ })\n+\n});\n});\n",
        "chatgpt_cot": "\"Modify test function name to reflect the returned data structure, ensuring clarity and consistency in the test suite.\""
    },
    {
        "org_diff": "diff --git a/src/analytics/PlaytestData.js b/src/analytics/PlaytestData.js import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n+import { ListGroupItem } from 'reactstrap';\nimport CardPropType from 'proptypes/CardPropType';\nimport CubeAnalyticPropType from 'proptypes/CubeAnalyticPropType';\n@@ -7,7 +8,23 @@ import CubeAnalyticPropType from 'proptypes/CubeAnalyticPropType';\nimport { compareStrings, SortableTable } from 'components/SortableTable';\nimport { fromEntries } from 'utils/Util';\nimport ErrorBoundary from 'components/ErrorBoundary';\n-import { mainboardRate, pickRate } from 'utils/Card';\n+import { mainboardRate, pickRate, encodeName } from 'utils/Card';\n+\n+import withAutocard from 'components/WithAutocard';\n+\n+const AutocardItem = withAutocard(ListGroupItem);\n+\n+const renderCardLink = (card) => (\n+ <AutocardItem className=\"p-0\" key={card.index} card={card} data-in-modal index={card.index}>\n+ <a href={`/tool/card/${encodeName(card.cardID)}`} target=\"_blank\" rel=\"noopener noreferrer\">\n+ {card.details.name}\n+ </a>\n+ </AutocardItem>\n+);\n+\n+const renderPercent = (val) => {\n+ return <>{parseInt(val * 1000, 10) / 10}%</>;\n+};\nconst PlaytestData = ({ cards: allCards, cubeAnalytics }) => {\nconst cardDict = useMemo(() => fromEntries(allCards.map((card) => [card.details.name.toLowerCase(), card])), [\n@@ -19,7 +36,7 @@ const PlaytestData = ({ cards: allCards, cubeAnalytics }) => {\ncubeAnalytics.cards\n.filter((cardAnalytic) => cardDict[cardAnalytic.cardName])\n.map(({ cardName, elo, mainboards, sideboards, picks, passes }) => ({\n- cardName: cardDict[cardName].details.name,\n+ card: cardDict[cardName],\nelo: Math.round(elo),\nmainboard: mainboardRate({ mainboards, sideboards }),\npickrate: pickRate({ picks, passes }),\n@@ -34,11 +51,17 @@ const PlaytestData = ({ cards: allCards, cubeAnalytics }) => {\n<ErrorBoundary>\n<SortableTable\ncolumnProps={[\n- { key: 'cardName', title: 'Card Name', heading: true, sortable: true },\n+ {\n+ key: 'card',\n+ title: 'Card Name',\n+ heading: true,\n+ sortable: true,\n+ renderFn: renderCardLink,\n+ },\n{ key: 'elo', title: 'Cube Elo', sortable: true, heading: false },\n- { key: 'pickrate', title: 'Pick Rate', sortable: true, heading: false },\n+ { key: 'pickrate', title: 'Pick Rate', sortable: true, heading: false, renderFn: renderPercent },\n{ key: 'picks', title: 'Pick Count', sortable: true, heading: false },\n- { key: 'mainboard', title: 'Mainboard Rate', sortable: true, heading: false },\n+ { key: 'mainboard', title: 'Mainboard Rate', sortable: true, heading: false, renderFn: renderPercent },\n{ key: 'mainboards', title: 'Mainboard Count', sortable: true, heading: false },\n]}\ndata={data}\n",
        "org_msg": "improve table styling",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "\"Add render functions for card links and percentage values in PlaytestData.js, improving the display and user experience for the component.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1713,7 +1713,8 @@ router.post('/edit/:id', ensureAuth, async (req, res) => {\nnewMaybe.splice(maybeIndex, 1);\n}\n}\n- cube.cards = [...cube.cards.filter((card, index) => !removes.has(index)), ...newCards];\n+ // Remove all invalid cards.\n+ cube.cards = [...cube.cards.filter((card, index) => card.cardID && !removes.has(index)), ...newCards];\ncube.maybe = newMaybe;\nconst blogpost = new Blog();\n",
        "org_msg": "Remove invalid cards on edit.",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "\"Fix issue with removing invalid cards in cube edit route\""
    },
    {
        "org_diff": "diff --git a/src/pages/DownTimePage.js b/src/pages/DownTimePage.js import React from 'react';\nimport { Row, Col, Card, CardHeader, CardBody } from 'reactstrap';\n-\n-import DynamicFlash from 'components/DynamicFlash';\n-import MainLayout from 'layouts/MainLayout';\nimport RenderToRoot from 'utils/RenderToRoot';\nconst DownTimePage = () => (\n- <MainLayout>\n- <DynamicFlash />\n- <Card className=\"my-3 mx-4\">\n+ <Col xs=\"12\" md=\"8\" xl=\"5\" style={{ margin: 'auto' }}>\n+ <Row style={{ margin: 'auto' }} width=\"50%\" className=\"mb-5 mt-4\">\n+ <img src=\"/content/logo.png\" alt=\"Cube Cobra logo\" width=\"50%\" style={{ margin: 'auto' }} />\n+ </Row>\n+ <Card>\n<CardHeader>\n<h5>Cube Cobra is currently down for scheduled maintenence.</h5>\n</CardHeader>\n@@ -22,6 +21,7 @@ const DownTimePage = () => (\nFeel free to contact us if you have any issues or concerns. Comments, ideas, and suggestions are always\nwelcome. Here are the easiest ways to get in touch with us:\n</p>\n+\n<Row>\n<Col xs=\"12\" sm=\"4\">\n<strong>Official Twitter</strong>\n@@ -48,7 +48,7 @@ const DownTimePage = () => (\n</Row>\n</CardBody>\n</Card>\n- </MainLayout>\n+ </Col>\n);\nexport default RenderToRoot(DownTimePage);\n",
        "org_msg": "update downtime page",
        "sim_msg": "Replace broken image with original svg",
        "sim_diff": "diff --git a/packages/emergency-response/src/components/App/index.js b/packages/emergency-response/src/components/App/index.js @@ -6,6 +6,7 @@ import React from 'react';\nimport '@hackoregon/component-library/assets/global.styles.css';\nimport '@hackoregon/component-library/assets/vendor/leaflet.css';\n+import firstFiveMinutesTimeline from '../../../assets/emergency-response-5min.svg';\nimport { PageLayout, StoryCard, CivicStoryCard } from '@hackoregon/component-library';\n@@ -101,7 +102,7 @@ function App(props) {\n>\n<img\nstyle={{ maxWidth: '100%' }}\n- src=\"https://s3-us-west-2.amazonaws.com/hacko-emergency-response-staging/emergency-response-5min-lg.png\"\n+ src={firstFiveMinutesTimeline}\nalt=\"Timeline of a fire response\"\n/>\n<p className=\"Description\">\n",
        "chatgpt_cot": "Refactor DownTimePage layout, remove unnecessary components, adjust styling for better user experience."
    },
    {
        "org_diff": "diff --git a/views/landing.pug b/views/landing.pug @@ -33,7 +33,7 @@ block content\na.w-100.centered-max400.btn.btn-success(href='/user/register', role='button') Create Account\na.w-100.mt-2.centered-max400.btn.btn-outline-success(href='/explore', role='button') Explore Cubes\np.mt-3.text-center New to cubing?\n- a.w-100.centered-max400.btn.btn-outline-success(href='https://www.youtube.com/watch?v=TiwPcD1ZjEY', role='button') What is MTG Cube?\n+ a.w-100.centered-max400.btn.btn-outline-success(href='https://www.youtube.com/watch?v=M6Y5w86sUyk', role='button') What is MTG Cube?\na.w-100.mt-2.centered-max400.btn.btn-outline-success(href='https://magic.wizards.com/en/articles/archive/how-build/building-your-first-cube-2016-05-19', role='button') Building Your First Cube\nhr.y-4\np.text-center View the project on\n",
        "org_msg": "Updated with Cultic cube's video",
        "sim_msg": "add a check for undefined cardData",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -26,7 +26,7 @@ class Deck {\n//conflict\nthis.eachRepeatedCard(this.data.conflictCards, cardData => {\n- if(['conflict'].includes(cardData.side)) {\n+ if(cardData && ['conflict'].includes(cardData.side)) {\nvar conflictCard = this.createCard(DrawCard, player, cardData);\nconflictCard.location = 'conflict deck';\nresult.conflictCards.push(conflictCard);\n@@ -35,7 +35,7 @@ class Deck {\n//dynasty\nthis.eachRepeatedCard(this.data.dynastyCards, cardData => {\n- if(['dynasty'].includes(cardData.side)) {\n+ if(cardData && ['dynasty'].includes(cardData.side)) {\nvar dynastyCard = this.createCard(DrawCard, player, cardData);\ndynastyCard.location = 'dynasty deck';\nresult.dynastyCards.push(dynastyCard);\n@@ -43,7 +43,7 @@ class Deck {\n});\nthis.eachRepeatedCard(this.data.provinceCards, cardData => {\n- if(cardData.type === 'province') {\n+ if(cardData && cardData.type === 'province') {\nvar provinceCard = this.createCard(ProvinceCard, player, cardData);\nprovinceCard.location = 'province deck';\nresult.provinceCards.push(provinceCard);\n@@ -51,7 +51,7 @@ class Deck {\n});\nthis.eachRepeatedCard(this.data.stronghold, cardData => {\n- if(cardData.type === 'stronghold') {\n+ if(cardData && cardData.type === 'stronghold') {\nvar strongholdCard = this.createCard(StrongholdCard, player, cardData);\nstrongholdCard.location = '';\nresult.stronghold = strongholdCard;\n@@ -59,7 +59,7 @@ class Deck {\n});\nthis.eachRepeatedCard(this.data.role, cardData => {\n- if(cardData.type === 'role') {\n+ if(cardData && cardData.type === 'role') {\nvar roleCard = this.createCard(RoleCard, player, cardData);\nresult.role = roleCard;\n}\n",
        "chatgpt_cot": "Update YouTube link for \"What is MTG Cube?\" button in landing page view."
    },
    {
        "org_diff": "diff --git a/src/pages/CardPage.js b/src/pages/CardPage.js @@ -221,6 +221,10 @@ const CardPage = ({ user, card, data, versions, related, cubes, loginCallback })\nreturn 0;\n});\n+ const filteredVersions = sortedVersions.filter((version) => {\n+ return version._id != card._id;\n+ });\n+\nreturn (\n<MainLayout loginCallback={loginCallback} user={user}>\n<DynamicFlash />\n@@ -531,6 +535,7 @@ const CardPage = ({ user, card, data, versions, related, cubes, loginCallback })\n<CardHeader>\n<h4>Versions</h4>\n</CardHeader>\n+ {filteredVersions.length > 0 ? (\n<PagedList\npageSize={10}\npageWrap={(element) => (\n@@ -547,7 +552,7 @@ const CardPage = ({ user, card, data, versions, related, cubes, loginCallback })\n<tbody>{element}</tbody>\n</table>\n)}\n- rows={sortedVersions.slice(0).map((version) => (\n+ rows={filteredVersions.slice(0).map((version) => (\n<tr>\n<td>\n<AutocardA\n@@ -565,6 +570,11 @@ const CardPage = ({ user, card, data, versions, related, cubes, loginCallback })\n</tr>\n))}\n/>\n+ ) : (\n+ <CardBody>\n+ <p>No other versions</p>\n+ </CardBody>\n+ )}\n</Card>\n</Col>\n<Col xs=\"12\" sm=\"6\">\n",
        "org_msg": "card versions are filtered to exclude current version",
        "sim_msg": "Update 'card not found' page",
        "sim_diff": "diff --git a/packages/component-library/src/CardDetail/CardDetailPage.js b/packages/component-library/src/CardDetail/CardDetailPage.js @@ -17,11 +17,11 @@ const CardDetailPage = ({ params, CardRegistry }) => {\nreturn (\n<PageLayout>\n+ <section>\n<h1>Card not found</h1>\n- <p>\n- The card you are looking for doesn&apos;t exist.\n- <Link to=\"/cities/portland\">View the Portland Collection</Link>\n- </p>\n+ <p>The card you are looking for doesn&apos;t exist.</p>\n+ <Link to=\"/cards\">Other cards</Link>\n+ </section>\n</PageLayout>\n);\n};\n",
        "chatgpt_cot": "Add filter for versions, display message if no versions found in CardPage."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -827,7 +827,7 @@ router.get('/samplepack/:id', function (req, res) {\n});\n});\n-router.get('/samplepack/:id/:seed', async (req, res) => {\n+router.get('/samplepack/:id/:seed', function (req, res) {\nCube.findById(req.params.id, function(err, cube)\n{\nif (!cube) {\n@@ -867,7 +867,7 @@ router.get('/samplepack/:id/:seed', async (req, res) => {\n});\n});\n-router.get('/samplepackimage/:id/:seed', async (req, res) => {\n+router.get('/samplepackimage/:id/:seed', function (req, res) {\nCube.findById(req.params.id, function(err, cube)\n{\nif (!cube) {\n@@ -3112,7 +3112,7 @@ router.post('/api/draftpick/:id', function(req, res)\n});\n});\n-router.get('/api/p1p1/:id', async (req, res) => {\n+router.get('/api/p1p1/:id', function (req, res) {\ngeneratePack(req.params.id, carddb,false, function(err, seed, pack)\n{\nif(err)\n@@ -3132,7 +3132,7 @@ router.get('/api/p1p1/:id', async (req, res) => {\n});\n});\n-router.get('/api/p1p1/:id/:seed', async (req, res) => {\n+router.get('/api/p1p1/:id/:seed', function(req, res) {\ngeneratePack(req.params.id, carddb, req.params.seed, function(err, seed, pack)\n{\nif(err)\n",
        "org_msg": "Further hotfix",
        "sim_msg": "Working on updating deck validation",
        "sim_diff": "diff --git a/client/deck-validator.js b/client/deck-validator.js @@ -25,15 +25,17 @@ function getStronghold(deck) {\n}\nfunction isCardInReleasedPack(packs, card) { // eslint-disable-line no-unused-vars\n+ let cardPack = card.pack_cards[0].pack.id;\n+ console.log(cardPack);\nlet pack = _.find(packs, pack => {\n- return card.pack_code === pack.code;\n+ return cardPack === pack.id;\n});\nif(!pack) {\nreturn false;\n}\n- let releaseDate = pack.available || pack.date_release;\n+ let releaseDate = pack.available || pack.released_at;\nif(!releaseDate) {\nreturn false;\n@@ -239,7 +241,6 @@ module.exports = function validateDeck(deck, packs) { // eslint-disable-line no-\nisValid = false;\n}\n- /* Ignore Release Status for now\nif(isValid) {\nlet unreleasedCards = _.reject(combined, card => {\nreturn isCardInReleasedPack(packs, card);\n@@ -253,7 +254,6 @@ module.exports = function validateDeck(deck, packs) { // eslint-disable-line no-\n});\n}\n}\n- */\nreturn { status: status, provinceCount: provinceCount, conflictCount: conflictCount, dynastyCount: dynastyCount, extendedStatus: extendedStatus, isValid: isValid };\n};\n",
        "chatgpt_cot": "fix compilation issue by changing async to function in routes/cube_routes.js."
    },
    {
        "org_diff": "diff --git a/.gitignore b/.gitignore private/\n/dist/\n+/.vscode/\n.python-version\n@@ -547,4 +548,3 @@ healthchecksdb\nMigrationBackup/\n# End of https://www.gitignore.io/api/node,komodoedit,webstorm+all,visualstudio,visualstudiocode\n-views/info/temp.pug\n",
        "org_msg": "Add vscode folder to gitignore.",
        "sim_msg": "Updating private cloud redirects",
        "sim_diff": "diff --git a/config/redirects.js b/config/redirects.js @@ -2531,11 +2531,11 @@ module.exports = [\nto: '/private-cloud/migrate-private-cloud-custom-domains'\n},\n{\n- from: ['/private-cloud/onboarding/private-cloud', '/appliance/private-cloud-requirements', '/private-cloud/private-cloud-onboarding/standard-private-cloud-infrastructure-requirements'],\n+ from: ['/private-cloud/onboarding/private-cloud', '/appliance/private-cloud-requirements'],\nto: '/private-cloud/private-cloud-onboarding/standard-private-cloud-infrastructure-requirements'\n},\n{\n- from: '/private/cloud/onboarding/managed-private-cloud/infrastructure',\n+ from: '/private-cloud/onboarding/managed-private-cloud/infrastructure',\nto: '/private-cloud/private-cloud-onboarding/customer-hosted-managed-private-cloud-infrastructure-requirements'\n},\n{\n",
        "chatgpt_cot": "Remove temp.pug file from gitignore and add .vscode/ directory to gitignore to exclude from version control."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/updatecards.test.js b/__tests__/serverjs/updatecards.test.js @@ -6,7 +6,7 @@ const carddb = require('../../serverjs/cards');\nconst examplecards = require('../../fixtures/examplecards');\nconst cardutil = require('../../dist/utils/Card.js');\n-const emptyFixturePath = 'fixtures/cards_small.json';\n+const emptyFixturePath = 'fixtures/empty.json';\nconst cardsFixturePath = 'fixtures/cards_small.json';\nconst convertedExampleCard = {\n",
        "org_msg": "Fix fixture path.",
        "sim_msg": "Changed test to check for name equality instal of name === label, since I can't find where label is used in basecard.js",
        "sim_diff": "diff --git a/test/server/card/basecard.spec.js b/test/server/card/basecard.spec.js @@ -5,9 +5,9 @@ const BaseCard = require('../../../server/game/basecard.js');\ndescribe('BaseCard', function () {\nbeforeEach(function () {\n- this.testCard = { code: '111', label: 'test 1(some pack)', name: 'test 1' };\n- this.limitedCard = { code: '1234', text: 'Limited.' };\n- this.nonLimitedCard = { code: '2222', text: 'Stealth.' };\n+ this.testCard = { id: '111', label: 'test 1(some pack)', name: 'test 1' };\n+ this.limitedCard = { id: '1234', text: 'Limited.' };\n+ this.nonLimitedCard = { id: '2222', text: 'Stealth.' };\nthis.game = jasmine.createSpyObj('game', ['raiseEvent']);\nthis.owner = jasmine.createSpyObj('owner', ['getCardSelectionState']);\nthis.owner.getCardSelectionState.and.returnValue({});\n@@ -60,8 +60,9 @@ describe('BaseCard', function () {\ndescribe('and card is faceup', function() {\nit('should return card data', function(){\n+ // TODO: Come back and check that this.testCard.name shouldn't be this.testCard.label\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -78,7 +79,7 @@ describe('BaseCard', function () {\nit('should return card data', function() {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n@@ -114,7 +115,7 @@ describe('BaseCard', function () {\nit('should return card data', function () {\nexpect(this.summary.uuid).toEqual(this.card.uuid);\n- expect(this.summary.name).toEqual(this.testCard.label);\n+ expect(this.summary.name).toEqual(this.testCard.name);\nexpect(this.summary.code).toEqual(this.testCard.code);\n});\n",
        "chatgpt_cot": "\"Update emptyFixturePath in updatecards.test.js to 'fixtures/empty.json' for better clarity and consistency with file content.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -643,6 +643,16 @@ router.get('/compare/:idA/to/:idB', async (req, res) => {\nconst cubeBq = Cube.findOne(buildIdQuery(idB)).lean();\nconst [cubeA, cubeB] = await Promise.all([cubeAq, cubeBq]);\n+\n+ if (!cubeA) {\n+ req.flash('danger', `Base cube not found: ${idA}`);\n+ return res.status(401).render('misc/404', {});\n+ }\n+ if (!cubeB) {\n+ req.flash('danger', `Comparison cube not found: ${idB}`);\n+ return res.status(401).render('misc/404', {});\n+ }\n+\nconst pids = new Set();\nconst cardNames = new Set();\nconst addDetails = (cards) => {\n",
        "org_msg": "Fix error with invalid cube comparison",
        "sim_msg": "taking out some logs",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js @@ -49,15 +49,11 @@ module.exports = function(server) {\nserver.get(/.*/, function(req, res, next) {\nvar current_hash = config.engine.get('version');\nvar url_arr = req.url.split('/');\n- console.log(current_hash);\n- console.log(url_arr[1])\nif(url_arr[1] != current_hash){\n- console.log('but do I go here');\nurl_arr.splice(1,0, current_hash);\nvar newPath = url_arr.join('/');\nres.redirect(newPath , next);\n} else {\n- console.log(next());\nnext();\n}\n},\n",
        "chatgpt_cot": "Add error handling for cube not found scenarios in compare route."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -29,10 +29,13 @@ function downloadDefaultCards() {\nreturn promise;\n}\n-function updateCardbase() {\n- downloadDefaultCards().then(function() {\n+function updateCardbase(filepath) {\n+ if (filepath === undefined) {\n+ filepath = 'private/cards.json';\n+ }\n+ return module.exports.downloadDefaultCards().then(function() {\nconsole.log(\"Running save\");\n- var contents = fs.readFileSync('private/cards.json');\n+ var contents = fs.readFileSync(filepath);\nvar cards = JSON.parse(contents);\nsaveAllCards(cards);\nconsole.log(\"Finished cardbase update...\");\n@@ -260,5 +263,6 @@ function convertCard(card) {\n}\nmodule.exports = {\n- updateCardbase: updateCardbase\n+ updateCardbase: updateCardbase,\n+ downloadDefaultCards: downloadDefaultCards\n};\n\\ No newline at end of file\n",
        "org_msg": "use module.exports version of downloadDefaultCards to allow mocking in tests\nallow configuring read filepath for testing",
        "sim_msg": "Update fetchdata to skip over incomplete data",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -43,12 +43,14 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- var imagesrc = card.pack_cards[0].image_url;\n+ if(card.pack_cards.length > 0 && card.pack_cards[0].image_url) {\n+ var imagesrc = card.pack_cards[0].image_url;\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n+ }\n});\nreturn cards;\n",
        "chatgpt_cot": "Add filepath parameter to updateCardbase function and add downloadDefaultCards function. Fixes issue with file path and adds new functionality."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1007,12 +1007,14 @@ router.get('/samplepackimage/:id/:seed', async (req, res) => {\nwidth: CARD_WIDTH * 5,\nheight: CARD_HEIGHT * 3,\nCanvas,\n- }).then((image) => {\n+ })\n+ .then((image) => {\nres.writeHead(200, {\n'Content-Type': 'image/png',\n});\nres.end(Buffer.from(image.replace(/^data:image\\/png;base64,/, ''), 'base64'));\n- });\n+ })\n+ .catch((err) => util.handleRouteError(req, res, err, '/404'));\n} catch (err) {\nreturn util.handleRouteError(req, res, err, '/404');\n}\n",
        "org_msg": "Sample pack image error handling",
        "sim_msg": "Update fetch to look at new image location",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -32,7 +32,9 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.png');\n- var imagesrc = 'bundles/card_images/';\n+ var imagePack = card.pack_cards[0].pack.id;\n+ var imagesrc = 'bundles/card_images/' + imagePack;\n+\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n",
        "chatgpt_cot": "\"Add error handling for samplepackimage route to prevent server crash on error\""
    },
    {
        "org_diff": "diff --git a/routes/cube/helper.js b/routes/cube/helper.js @@ -191,7 +191,7 @@ function writeCard(res, card, maybe) {\nres.write(tag);\n});\nres.write(`\",\"${card.notes || ''}\",`);\n- res.write(`${carddb.cardFromId(card.cardID).mtgo_id || ''},`);\n+ res.write(`${carddb.cardFromId(card.cardID).mtgo_id || ''}`);\nres.write('\\r\\n');\n}\n",
        "org_msg": "Remove extra comma at end of CSV line",
        "sim_msg": "Update card types",
        "sim_diff": "diff --git a/server/game/cards/index.js b/server/game/cards/index.js @@ -2,8 +2,9 @@ const _ = require('underscore');\nconst path = require('path');\nconst fs = require('fs');\n-const plots = require('./plots');\n-const locations = require('./locations');\n+const strongholds = require('./strongholds');\n+const provinces = require('./provinces');\n+const holdings = require('./holdings');\nconst characters = require('./characters');\nconst attachments = require('./attachments');\nconst events = require('./events');\n@@ -16,6 +17,6 @@ _.each(fs.readdirSync(path.join(__dirname, 'agendas')), file => {\ncards[card.code] = card;\n});\n-cards = _.extend(cards, plots, locations, characters, attachments, events);\n+cards = _.extend(cards, strongholds, provinces, holdings, characters, attachments, events);\nmodule.exports = cards;\n",
        "chatgpt_cot": "Remove unnecessary comma in writeCard function to fix formatting issue."
    },
    {
        "org_diff": "diff --git a/nearley/values.ne b/nearley/values.ne @@ -48,7 +48,7 @@ rarityOpValue -> anyOperator rarityValue {% ([op, value]) => rarityOperation(op,\nrarityValue -> (\"s\"i | \"special\"i | \"m\"i | \"mythic\"i | \"r\"i | \"rare\"i | \"u\"i | \"uncommon\"i | \"common\"i | \"c\"i) {% ([[rarity]]) => rarity %}\n-alphaNumericValue -> [a-zA-Z]:+ {% ([letters]) => letters.join('').toLowerCase() %}\n+alphaNumericValue -> [a-zA-Z0-9]:+ {% ([letters]) => letters.join('').toLowerCase() %}\nalphaNumericOpValue -> equalityOperator alphaNumericValue {% ([op, value]) => equalityOperation(op, value) %}\n",
        "org_msg": "Allow numbers in alphanumeric values.",
        "sim_msg": "[lib] Update staff.json\nSummary: Usernames:\nTest Plan: N/A\nReviewers: atul, palys-swm\nSubscribers: palys-swm, Adrian, karol-bisztyga, benschac, boristopalov",
        "sim_diff": "diff --git a/lib/facts/staff.json b/lib/facts/staff.json -[\"256\", \"518252\", \"379341\", \"546465\", \"701071\", \"1073697\", \"1081630\", \"1074037\"]\n+[\n+ \"256\",\n+ \"518252\",\n+ \"379341\",\n+ \"546465\",\n+ \"701071\",\n+ \"1081630\",\n+ \"1137719\",\n+ \"1155073\",\n+ \"860633\",\n+ \"1205684\",\n+ \"1157418\"\n+]\n",
        "chatgpt_cot": "Update alphaNumericValue to include numbers in values to ensure proper handling of alphanumeric values in rarity operations."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -69,6 +69,8 @@ function botCardRating(botColors, card) {\nconst isLand = typeLine.indexOf('Land') > -1;\nconst isFetch = !!fetchLands[card.details.name];\n+ // If you add x to a rating you roughly increase the estimated value\n+ // of picking it by a factor of (100 * 10**(x/400)) - 100 percent\nif (isLand) {\nif ((subset || contains) && isFetch) {\nrating += 191; // Increase value of picking by roughly 200%\n@@ -103,6 +105,8 @@ function botCardRating(botColors, card) {\n}\nconst toValue = (elo) => 10 ** (elo / 400);\n+const considerInCombination = (combination) => (card) =>\n+ arrayIsSubset(card.colors ?? card.details.color_identity ?? [], combination);\nconst COLOR_SCALING_FACTOR = [1, 1, 0.75, 0.45, 0.3, 0.2];\nconst botRatingAndCombination = (seen, card, pool, overallPool) => {\n@@ -110,8 +114,10 @@ const botRatingAndCombination = (seen, card, pool, overallPool) => {\nlet bestCombination = [];\nfor (const combination of COLOR_COMBINATIONS) {\nconst poolRating =\n- pool.reduce((w, poolCard) => w + toValue(botCardRating(combination, poolCard)), 0) +\n- (card && toValue(botCardRating(combination, card)));\n+ pool\n+ .filter(considerInCombination(combination))\n+ .reduce((w, poolCard) => w + toValue(poolCard.details.elo ?? 0), 0) +\n+ (card && considerInCombination(combination)(card) ? toValue(card.details.elo ?? 0) : 0);\nlet seenCount = 1;\nlet overallCount = 1;\nif (seen) {\n@@ -140,10 +146,11 @@ function getSortFn(bot) {\n};\n}\n-async function buildDeck(cards, bot) {\n+async function buildDeck(cards) {\nconst nonlands = cards.filter((card) => !card.type_line.toLowerCase().includes('land'));\nconst lands = cards.filter((card) => card.type_line.toLowerCase().includes('land'));\n- const sortFn = getSortFn(bot);\n+ const colors = botColors(null, null, cards, null);\n+ const sortFn = getSortFn(colors);\nnonlands.sort(sortFn);\nlands.sort(sortFn);\n@@ -272,7 +279,7 @@ async function finish() {\ndraft.seats[i].drafted = decks[i].deck;\ndraft.seats[i].sideboard = decks[i].sideboard;\nconst colors = botColors(null, null, draft.seats[i].pickorder, cards);\n- draft.seats[i].bot = colors;\n+ console.log(i, colors);\ndraft.seats[i].name = `Bot ${i + 1}: ${colors.join(', ')}`;\ndraft.seats[i].description = `This deck was drafted by a bot with color preference for ${colors.join('')}.`;\n}\n@@ -288,4 +295,4 @@ async function finish() {\n});\n}\n-export default { init, id, cube, pack, packPickNumber, arrangePicks, pick, finish };\n+export default { init, id, cube, pack, packPickNumber, arrangePicks, botRating, pick, finish };\n",
        "org_msg": "Adjust algorithm and deck building.",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "\"Add botRating function, update buildDeck, and finish functions to include botColors and sortFn. Refactor considerInCombination and botRatingAndCombination to use botColors.\""
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -138,9 +138,9 @@ async function topCards(filter) {\n$size: '$cubes',\n},\n})\n+ .project('cardName cubesLength')\n.sort({ cubesLength: -1 })\n- .limit(4 * MAX_RESULTS)\n- .project('cardName cubesLength');\n+ .limit(4 * MAX_RESULTS);\nconst [ratings, cardData] = await Promise.all([ratingsQ, cardDataQ]);\n",
        "org_msg": "Fix RAM issue.",
        "sim_msg": "Update fetchdata to skip over incomplete data",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -43,12 +43,14 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- var imagesrc = card.pack_cards[0].image_url;\n+ if(card.pack_cards.length > 0 && card.pack_cards[0].image_url) {\n+ var imagesrc = card.pack_cards[0].image_url;\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n+ }\n});\nreturn cards;\n",
        "chatgpt_cot": "\"Refactor topCards function to correctly limit results and project specific fields for better performance and readability.\""
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1301,6 +1301,7 @@ async function bulkUpload(req, res, list, cube) {\nutil.addCardToCube(cube, details);\nadded.push(details);\nchangelog += addCardHtml(details);\n+ }\n} else {\nmissing += `${item}\\n`;\n}\n@@ -1308,7 +1309,6 @@ async function bulkUpload(req, res, list, cube) {\n}\n}\n}\n- }\nawait updateCubeAndBlog(req, res, cube, changelog, added, missing);\n}\n",
        "org_msg": "fix misplaced else",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Add bulk upload functionality to cube routes. \nThe modification adds a new method to handle bulk upload, improving the functionality of the cube routes file."
    },
    {
        "org_diff": "diff --git a/src/components/GroupModal.js b/src/components/GroupModal.js @@ -93,7 +93,12 @@ const GroupModal = ({ cubeID, canEdit, children, ...props }) => {\nevent.stopPropagation();\nconst target = event.currentTarget;\nconst index = target.getAttribute('data-index');\n+\n+ if (cards.length == 1) {\n+ close();\n+ } else {\nsetCardIndices((cards) => cards.filter((c) => c !== parseInt(index)));\n+ }\n});\nconst setTagInput = useCallback((value) =>\n",
        "org_msg": "Group modals now dismiss when last card is removed",
        "sim_msg": "always set full obj for node group labels and anno",
        "sim_diff": "diff --git a/lib/shared/addon/components/node-group-row/component.js b/lib/shared/addon/components/node-group-row/component.js @@ -20,23 +20,11 @@ export default Component.extend({\nediting: equal('mode', 'edit'),\nactions: {\nsetTags(section) {\n- const { model: { tags = {} } } = this;\n-\n- for (let key in section) {\n- tags[key] = section[key];\n- }\n-\n- set(this, 'model.tags', tags);\n+ set(this, 'model.tags', section);\n},\nsetLabels(section) {\n- const { model: { labels = {} } } = this;\n-\n- for (let key in section) {\n- labels[key] = section[key];\n- }\n-\n- set(this, 'model.labels', labels);\n+ set(this, 'model.labels', section);\n},\n},\n",
        "chatgpt_cot": "Add conditional check to close modal if only one card left, otherwise remove card index."
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -11,15 +11,10 @@ var data = {\n_carddict: {}\n};\n-function cardFromId(id) {\n- if (data._carddict[id]) {\n- return data._carddict[id];\n- } else {\n- console.log(\"Could not find: \" + id);\n+function getPlaceholderCard(_id) {\n//placeholder card if we don't find the one due to a scryfall ID update bug\nreturn {\n- // img:\n- _id: id,\n+ _id: _id,\nset: '',\ncollector_number: '',\npromo: false,\n@@ -40,7 +35,15 @@ function cardFromId(id) {\nparsed_cost: [],\ncolorcategory: 'c',\nerror: true\n- };\n+ }\n+}\n+\n+function cardFromId(id) {\n+ if (data._carddict[id]) {\n+ return data._carddict[id];\n+ } else {\n+ console.log(\"Could not find: \" + id);\n+ return getPlaceholderCard(id);\n}\n}\n@@ -52,30 +55,7 @@ function getCardDetails(card) {\nreturn details;\n} else {\nconsole.log(\"Could not find: \" + id);\n- //placeholder card if we don't find the one due to a scryfall ID update bug\n- return {\n- // img:\n- _id: id,\n- set: '',\n- collector_number: '',\n- promo: false,\n- digital: false,\n- full_name: 'Invalid Card',\n- name: 'Invalid Card',\n- name_lower: 'Invalid Card',\n- artist: '',\n- scryfall_uri: '',\n- rarity: '',\n- legalities: {},\n- oracle_text: '',\n- image_normal: 'https://img.scryfall.com/errors/missing.jpg',\n- cmc: 0,\n- type: '',\n- colors: [],\n- color_identity: [],\n- parsed_cost: [],\n- colorcategory: 'c',\n- error: true\n+ return getPlaceholderCard(id);\n};\n}\n}\n",
        "org_msg": "deduplicate placeholder card",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Add getPlaceholderCard method, refactor cardFromId method, and update error handling in cards.js. Fixes scryfall ID update bug and improves code readability."
    },
    {
        "org_diff": "diff --git a/src/pages/CubeBlogPage.js b/src/pages/CubeBlogPage.js @@ -30,7 +30,7 @@ const EditBlogModal = ({ isOpen, toggle, html, setHtml, post }) => {\nconst { cubeID } = useContext(CubeContext);\nconst handleChangeHtml = useCallback((event) => setHtml(event.target.value), []);\nreturn (\n- <Modal isOpen={isOpen} toggle={toggle} labelledBy=\"#blogEditTitle\">\n+ <Modal isOpen={isOpen} toggle={toggle} labelledBy=\"#blogEditTitle\" size=\"lg\">\n<CSRFForm method=\"POST\" action={`/cube/blog/post/${cubeID}`}>\n<ModalHeader toggle={toggle} id=\"blogEditTitle\">\nEdit Blog Post\n",
        "org_msg": "Fix modal size.",
        "sim_msg": "Add Comments component to PostSingle",
        "sim_diff": "diff --git a/src/post/postSingle/PostSingle.js b/src/post/postSingle/PostSingle.js @@ -271,6 +271,7 @@ export default class PostSingle extends Component {\nonShareClick={() => reblog(content.id)}\n/>\n}\n+ <Comments post={content} show />\n</div>\n</div>\n{/* {content.author && !modal &&\n",
        "chatgpt_cot": "Add size attribute to Modal component to set the size of the Modal to large."
    },
    {
        "org_diff": "diff --git a/src/components/TagInput.js b/src/components/TagInput.js @@ -15,7 +15,7 @@ const TagInput = ({ tags, addTag, deleteTag, reorderTag, ...props }) => (\n}}\nhandleDelete={deleteTag}\nhandleDrag={reorderTag}\n- placeholder=\"Tag...\"\n+ placeholder=\"Tag (hit tab)...\"\nmaxLength={24}\nautofocus={false}\n{...props}\n",
        "org_msg": "More informative placeholder for tag input.",
        "sim_msg": "removed hyphens from tags",
        "sim_diff": "diff --git a/components/system/components/Tag.js b/components/system/components/Tag.js @@ -475,7 +475,7 @@ export const Tag = ({\nconst _handleChange = (e) => setValue(e.target.value.toLowerCase());\nconst _handleKeyPress = (e) => {\n- let regex = /[a-z0-9\\s-]/i;\n+ let regex = /[a-z0-9\\s]/i;\nif (e.key === \"Enter\" && value.length) {\n_handleAdd(value);\n",
        "chatgpt_cot": "\"Update TagInput.js to include a new placeholder text and remove autofocus attribute to improve user experience and prevent unwanted focus.\""
    },
    {
        "org_diff": "diff --git a/package-lock.json b/package-lock.json \"integrity\": \"sha1-IsxKNKCrxDlQ9CxkEQJKP2NmtFo=\"\n},\n\"caniuse-lite\": {\n- \"version\": \"1.0.30001159\",\n- \"resolved\": \"https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001159.tgz\",\n- \"integrity\": \"sha512-w9Ph56jOsS8RL20K9cLND3u/+5WASWdhC/PPrf+V3/HsM3uHOavWOR1Xzakbv4Puo/srmPHudkmCRWM7Aq+/UA==\"\n+ \"version\": \"1.0.30001228\",\n+ \"resolved\": \"https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001228.tgz\",\n+ \"integrity\": \"sha512-QQmLOGJ3DEgokHbMSA8cj2a+geXqmnpyOFT0lhQV6P3/YOJvGDEwoedcwxEQ30gJIwIIunHIicunJ2rzK5gB2A==\"\n},\n\"canvas\": {\n\"version\": \"2.6.1\",\n",
        "org_msg": "Update browserlist.",
        "sim_msg": "Add missing comma package-lock.json",
        "sim_diff": "diff --git a/package-lock.json b/package-lock.json \"node_modules/caniuse-lite\": {\n\"version\": \"1.0.30001385\",\n\"resolved\": \"https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001385.tgz\",\n- \"integrity\": \"sha512-MpiCqJGhBkHgpyimE9GWmZTnyHyEEM35u115bD3QBrXpjvL/JgcP8cUhKJshfmg4OtEHFenifcK5sZayEw5tvQ==\"\n+ \"integrity\": \"sha512-MpiCqJGhBkHgpyimE9GWmZTnyHyEEM35u115bD3QBrXpjvL/JgcP8cUhKJshfmg4OtEHFenifcK5sZayEw5tvQ==\",\n\"dev\": true,\n\"funding\": [\n{\n",
        "chatgpt_cot": "Update caniuse-lite version to 1.0.30001228 in package-lock.json."
    },
    {
        "org_diff": "diff --git a/src/cube_overview.js b/src/cube_overview.js @@ -314,7 +314,7 @@ class CubeOverview extends Component {\nCubeOverview.propTypes = {\npost: PropTypes.shape({\n_id: PropTypes.string.isRequired,\n- }).isRequired,\n+ }),\npriceOwned: PropTypes.number,\npricePurchase: PropTypes.number,\nowner: PropTypes.string.isRequired,\n@@ -338,6 +338,7 @@ CubeOverview.propTypes = {\n};\nCubeOverview.defaultProps = {\n+ post: null,\npriceOwned: null,\npricePurchase: null,\nadmin: false,\n",
        "org_msg": "Add default value for post since we don't need it.",
        "sim_msg": "fix: add proptype definition for pageInfo",
        "sim_diff": "diff --git a/src/components/ProductGrid/ProductGrid.js b/src/components/ProductGrid/ProductGrid.js @@ -17,7 +17,15 @@ const styles = () => ({\nexport default class ProductGrid extends Component {\nstatic propTypes = {\ncatalogItems: PropTypes.arrayOf(PropTypes.object),\n- classes: PropTypes.object\n+ classes: PropTypes.object,\n+ pageInfo: PropTypes.shape({\n+ startCursor: PropTypes.string,\n+ endCursor: PropTypes.string,\n+ hasNextPage: PropTypes.bool,\n+ hasPreviousPage: PropTypes.bool,\n+ loadNextPage: PropTypes.func,\n+ loadPreviousPage: PropTypes.func\n+ })\n};\nrenderProduct(edge) {\n",
        "chatgpt_cot": "\"Fix PropTypes for CubeOverview component to resolve compilation issue and set default value for post prop.\""
    },
    {
        "org_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -111,6 +111,14 @@ knowledge of the pull request to perform a review. We also comment on our own\npull requests asking for code review, sometimes even tagging specific\nindividuals from whom we'd like a review.\n+Our pull requests have automated checks run against them, including code style\n+linting and unit tests. When we request reviews on pull requests, we ensure\n+that these checks are passing beforehand. When we add new functionality in a\n+pull request, we also add new tests exercising that functionality in the same\n+pull request. When we fix a bug in a pull request, we also add a unit test or\n+adjust an existing one in the same pull request to prove that the bug has been\n+fixed.\n+\nWhen we notice open pull requests with comments indicating they're ready for\nreview, we review each other's code. The primary goal of our code reviews is\nto ensure that the code does not break existing functionality. Some secondary\n",
        "org_msg": "add note about tests and linting in pull requests",
        "sim_msg": "Fix typo\nthanks in advanced -> thanks in advance",
        "sim_diff": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md @@ -16,7 +16,7 @@ When reporting an issue include information such as:\nThe more information available when we take a look at your issue the more likely we can deal with it in a quick manner.\n## Developing\n-We love pull requests! If you're reading this section thanks in advanced.\n+We love pull requests! If you're reading this section thanks in advance.\nTo help accelerate the review process:\n* Consider adding specs.\n",
        "chatgpt_cot": "\"Add automated checks and tests in pull requests, ensuring code quality and functionality. Also, review and add tests for bug fixes in the same pull request.\""
    },
    {
        "org_diff": "diff --git a/src/components/CardModalForm.js b/src/components/CardModalForm.js @@ -130,8 +130,11 @@ class CardModalFormRaw extends Component {\nqueueRemoveCard() {\n// FIXME: Bring all this state inside React-world.\n+ const { cube } = this.props;\n+ const { index } = this.state;\n+ const card = cube[index];\nchanges.push({\n- remove: this.state.card.details,\n+ remove: card.details,\n});\nupdateCollapse();\n$('#navedit').collapse('show');\n",
        "org_msg": "Fix \"remove from cube\" button.",
        "sim_msg": "Fix card images",
        "sim_diff": "diff --git a/client/GameComponents/Card.jsx b/client/GameComponents/Card.jsx @@ -240,6 +240,8 @@ class Card extends React.Component {\nreturn <div />;\n}\n+ console.log(this.props.card);\n+\nif(this.props.size !== 'normal') {\ncardClass += ' ' + this.props.size;\nimageClass += ' ' + this.props.size;\n@@ -330,7 +332,7 @@ class Card extends React.Component {\ndraggable>\n<div>\n<span className='card-name'>{ this.props.card.name }</span>\n- <img className={ imageClass } src={ '/img/cards/' + (!this.isFacedown() ? (this.props.card.code + '.png') : 'cardback.jpg') } />\n+ <img className={ imageClass } src={ '/img/cards/' + (!this.isFacedown() ? (this.props.card.id + '.jpg') : cardBack) } />\n{ this.showHonor() ? <img className={ honorClass } src={ '/img/' + honorImage } /> : null }\n</div>\n{ this.showCounters() ? <CardCounters counters={ this.getCountersForCard(this.props.card) } /> : null }\n",
        "chatgpt_cot": "\"Refactor queueRemoveCard method to bring state inside React-world and fix remove card details issue in CardModalForm\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -412,7 +412,7 @@ var specialCaseCardsList = {\"Outlaws' Merriment\":[{\n//the cards below are transform cards that are on here due to the way\n//we currently do not populate the oracle text of transform cards.\n\"Arlinn Kord\":[{\n- tokenId: \"88452ed7-1065-41c3-94a6-dc41108c45c1\"\n+ tokenId: \"bd05e304-1a16-436d-a05c-4a38a839759b\"\n}],\n\"Bloodline Keeper\":[{\ntokenId: \"71496671-f7ba-4014-a895-d70a27979db7\"\n@@ -427,7 +427,7 @@ var specialCaseCardsList = {\"Outlaws' Merriment\":[{\ntokenId: \"11d25bde-a303-4b06-a3e1-4ad642deae58\"\n}],\n\"Garruk Relentless\":[{\n- tokenId: \"88452ed7-1065-41c3-94a6-dc41108c45c1\"\n+ tokenId: \"bd05e304-1a16-436d-a05c-4a38a839759b\"\n},{\ntokenId: \"7a49607c-427a-474c-ad77-60cd05844b3c\"\n}],\n@@ -438,7 +438,7 @@ var specialCaseCardsList = {\"Outlaws' Merriment\":[{\ntokenId: \" 94ed2eca-1579-411d-af6f-c7359c65de30\"\n}],\n\"Huntmaster of the Fells\":[{\n- tokenId: \"88452ed7-1065-41c3-94a6-dc41108c45c1\"\n+ tokenId: \"bd05e304-1a16-436d-a05c-4a38a839759b\"\n}],\n\"Legion's Landing\":[{\ntokenId: \"09293ae7-0629-417b-9eda-9bd3f6d8e118\"\n@@ -447,7 +447,7 @@ var specialCaseCardsList = {\"Outlaws' Merriment\":[{\ntokenId: \"8e214f84-01ee-49c1-8801-4e550b5ade5d\"\n}],\n\"Mayor of Avabruck\":[{\n- tokenId: \"94ed2eca-1579-411d-af6f-c7359c65de30\"\n+ tokenId: \"bd05e304-1a16-436d-a05c-4a38a839759b\"\n}],\n\"Nissa, Vastwood Seer\":[{\ntokenId: \"0affd414-f774-48d1-af9e-bff74e58e1ca\"\n",
        "org_msg": "Revised wolf version to not be garruk loyalty one",
        "sim_msg": "prepare draw, province decks",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -11,24 +11,34 @@ class Deck {\nprepare(player) {\nvar result = {\n- conflictdrawCards: [],\n- dynastydrawCards: [],\n+ conflictDrawCards: [],\n+ dynastyDrawCards: [],\nprovinceCards: []\n};\n+ //conflict\nthis.eachRepeatedCard(this.data.drawCards, cardData => {\n- if(['attachment', 'character', 'event', 'location'].includes(cardData.type_code)) {\n+ if(['conflict'].includes(cardData.deck)) {\nvar drawCard = this.createCard(DrawCard, player, cardData);\n- drawCard.location = 'draw deck';\n- result.drawCards.push(drawCard);\n+ drawCard.location = 'conflict draw deck';\n+ result.conflictDrawCards.push(drawCard);\n+ }\n+ });\n+\n+ //dynasty\n+ this.eachRepeatedCard(this.data.drawCards, cardData => {\n+ if(['dynsaty'].includes(cardData.deck)) {\n+ var drawCard = this.createCard(DrawCard, player, cardData);\n+ drawCard.location = 'dynasty draw deck';\n+ result.dynastyDrawCards.push(drawCard);\n}\n});\nthis.eachRepeatedCard(this.data.plotCards, cardData => {\n- if(cardData.type_code === 'plot') {\n- var plotCard = this.createCard(PlotCard, player, cardData);\n- plotCard.location = 'plot deck';\n- result.plotCards.push(plotCard);\n+ if(cardData.type_code === 'province') {\n+ var provinceCard = this.createCard(ProvinceCard, player, cardData);\n+ provinceCard.location = 'province deck';\n+ result.provinceCards.push(provinceCard);\n}\n});\n",
        "chatgpt_cot": "Update token IDs for special case cards in updatecards.js. Fixing incorrect token IDs to ensure proper identification and functionality of specific cards."
    },
    {
        "org_diff": "diff --git a/src/components/Paginate.js b/src/components/Paginate.js +/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\n-class Paginate extends React.Component {\n- constructor(props) {\n- super(props);\n- }\n+const Paginate = ({ pages }) => {\n+ const activePage = pages.filter((page) => page.active)[0].content - 1;\n+ const cubeId = pages[activePage].url.split('/')[3];\n+ const pageLength = pages.length;\n- render() {\n- return (\n+ const smallPagination = (\n<>\n- <hr />\n- <Pagination aria-label=\"Table page\" className=\"mt-3\">\n- {this.props.pages.map((page) => (\n- <PaginationItem active={page.active}>\n+ {pages.map((page, idx) => (\n+ <PaginationItem active={page.active} key={idx}>\n<PaginationLink tag=\"a\" href={page.url}>\n{page.content}\n</PaginationLink>\n</PaginationItem>\n))}\n+ </>\n+ );\n+\n+ const bigPagination = (\n+ <>\n+ {activePage > 1 ? (\n+ <>\n+ <PaginationItem key={1}>\n+ <PaginationLink tag=\"a\" href={`/cube/blog/${cubeId}/0`}>\n+ 1\n+ </PaginationLink>\n+ </PaginationItem>\n+ </>\n+ ) : (\n+ <></>\n+ )}\n+ {activePage > 2 ? (\n+ <>\n+ <PaginationItem disabled key=\"elips\">\n+ <PaginationLink tag=\"a\" href=\"#\">\n+ ...\n+ </PaginationLink>\n+ </PaginationItem>\n+ </>\n+ ) : (\n+ <></>\n+ )}\n+ {activePage === 0 ? (\n+ <></>\n+ ) : (\n+ <PaginationItem key={activePage - 1}>\n+ <PaginationLink tag=\"a\" href={`/cube/blog/${cubeId}/${activePage - 1}`}>\n+ {activePage}\n+ </PaginationLink>\n+ </PaginationItem>\n+ )}\n+ <PaginationItem active key={activePage}>\n+ <PaginationLink tag=\"a\" href={`/cube/blog/${cubeId}/${activePage}`}>\n+ {activePage + 1}\n+ </PaginationLink>\n+ </PaginationItem>\n+ {activePage === pageLength - 1 ? (\n+ <></>\n+ ) : (\n+ <PaginationItem key={activePage + 1}>\n+ <PaginationLink tag=\"a\" href={`/cube/blog/${cubeId}/${activePage + 1}`}>\n+ {activePage + 2}\n+ </PaginationLink>\n+ </PaginationItem>\n+ )}\n+ {activePage < pageLength - 3 ? (\n+ <>\n+ <PaginationItem disabled key=\"elips2\">\n+ <PaginationLink tag=\"a\" href=\"#\">\n+ ...\n+ </PaginationLink>\n+ </PaginationItem>\n+ </>\n+ ) : (\n+ <></>\n+ )}\n+ {activePage < pageLength - 2 ? (\n+ <>\n+ <PaginationItem disabled={activePage === pageLength - 1} key={pageLength - 1}>\n+ <PaginationLink tag=\"a\" href={`/cube/blog/${cubeId}/${pageLength - 1}`}>\n+ {pageLength}\n+ </PaginationLink>\n+ </PaginationItem>\n+ </>\n+ ) : (\n+ <></>\n+ )}\n+ </>\n+ );\n+\n+ return (\n+ <>\n+ <hr />\n+ <Pagination aria-label=\"Table page\" className=\"mt-3\">\n+ <PaginationItem disabled={activePage == 0} key=\"first\">\n+ <PaginationLink tag=\"a\" previous href={`/cube/blog/${cubeId}/${activePage - 1}`} />\n+ </PaginationItem>\n+ {pageLength < 5 ? smallPagination : bigPagination}\n+ <PaginationItem disabled={activePage === pageLength - 1} key=\"last\">\n+ <PaginationLink tag=\"a\" next href={`/cube/blog/${cubeId}/${activePage + 1}`} />\n+ </PaginationItem>\n</Pagination>\n<hr />\n</>\n);\n- }\n-}\n+};\nexport default Paginate;\n",
        "org_msg": "modifying pagination to work with lots of blog pages",
        "sim_msg": "Create next & previous handlers linked to redux.",
        "sim_diff": "diff --git a/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/Pagination.js b/assets/js/modules/idea-hub/components/dashboard/DashboardIdeasWidget/Pagination.js @@ -26,6 +26,7 @@ import { Icon, chevronLeft, chevronRight } from '@wordpress/icons';\n* WordPress dependencies\n*/\nimport { _x, sprintf } from '@wordpress/i18n';\n+import { useCallback } from '@wordpress/element';\n/**\n* Internal dependencies\n@@ -38,13 +39,12 @@ import {\nimport { CORE_UI } from '../../../../../googlesitekit/datastore/ui/constants';\nimport Data from 'googlesitekit-data';\n-const { useSelect } = Data;\n+const { useSelect, useDispatch } = Data;\nconst Pagination = ( { tab } ) => {\n+ const uniqueKey = `idea-hub-page-${ tab }`;\nconst page =\n- useSelect( ( select ) =>\n- select( CORE_UI ).getValue( `idea-hub-page-${ tab }` )\n- ) || 1;\n+ useSelect( ( select ) => select( CORE_UI ).getValue( uniqueKey ) ) || 1;\nconst total = useSelect( ( select ) => {\nif ( tab === 'new-ideas' ) {\n@@ -58,6 +58,20 @@ const Pagination = ( { tab } ) => {\n}\n} );\n+ const { setValue } = useDispatch( CORE_UI );\n+\n+ const handlePrev = useCallback( () => {\n+ if ( page > 1 ) {\n+ setValue( uniqueKey, page - 1 );\n+ }\n+ }, [ page, setValue, uniqueKey ] );\n+\n+ const handleNext = useCallback( () => {\n+ if ( page < Math.ceil( total / IDEA_HUB_IDEAS_PER_PAGE ) ) {\n+ setValue( uniqueKey, page + 1 );\n+ }\n+ }, [ page, setValue, total, uniqueKey ] );\n+\nreturn (\n<div className=\"googlesitekit-idea-hub__pagination\">\n<span className=\"googlesitekit-idea-hub__pagination--legend\">\n@@ -81,13 +95,13 @@ const Pagination = ( { tab } ) => {\n<div className=\"googlesitekit-idea-hub__pagination--buttons\">\n<Button\nicon={ <Icon icon={ chevronLeft } /> }\n- // onClick={ handlePrev }\n+ onClick={ handlePrev }\ndisabled={ page === 1 }\n/>\n<Button\nicon={ <Icon icon={ chevronRight } /> }\n- // onClick={ handleNext }\n- // disabled={ page * IDEA_HUB_IDEAS_PER_PAGE > total }\n+ onClick={ handleNext }\n+ disabled={ page * IDEA_HUB_IDEAS_PER_PAGE > total }\n/>\n</div>\n</div>\n",
        "chatgpt_cot": "Refactor Paginate component to use functional component, improve code readability, and simplify logic for pagination based on active page."
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -204,19 +204,3 @@ test('addAutocard correctly replaces autocard format strings', () => {\nexpect(result).toBe(expected);\n});\n});\n\\ No newline at end of file\n-\n-test('generatePack generates a valid pack of cards', () => {\n- expect.assertions(16);\n- const seed = 1569704729;\n- var exampleCube = JSON.parse(JSON.stringify(cubefixture.exampleCube));\n- Cube.findOne.yields(null, exampleCube);\n- var callback = sinon.stub();\n- var promise = carddb.initializeCardDb(fixturesPath, true);\n- return promise.then(async function() {\n- var argument = await cubefn.generatePack('', carddb, seed);\n- argument.pack.forEach(function(card, index) {\n- expect(card).toEqual(cubefixture.examplePack.pack[index]);\n- });\n- expect(argument.seed).toBe(seed);\n- });\n-});\n",
        "org_msg": "Removed test case",
        "sim_msg": "test invalid format to string",
        "sim_diff": "diff --git a/test/format.test.js b/test/format.test.js @@ -338,6 +338,11 @@ describe('#format', () => {\nexpect(enforcer.format(new Date(iso), schema)).to.equal(iso);\n});\n+ it('symbol', () => {\n+ const s = Symbol('my-symbol');\n+ expect(() => enforcer.format(s, schema)).to.throw(/Cannot convert to string/i);\n+ });\n+\n});\n});\n\\ No newline at end of file\n",
        "chatgpt_cot": "Remove test for generatePack function to improve test coverage and focus on addAutocard functionality in cubefn.test.js."
    },
    {
        "org_diff": "diff --git a/src/components/CubeOverviewModal.js b/src/components/CubeOverviewModal.js @@ -16,11 +16,13 @@ import {\nButton,\n} from 'reactstrap';\n-import { csrfFetch } from '../utils/CSRF';\n-import TagInput from './TagInput';\n-import { TagContextProvider } from './TagContext';\n-import TextEntry from './TextEntry';\n-import AutocompleteInput from './AutocompleteInput';\n+import { csrfFetch } from 'utils/CSRF';\n+\n+import AutocompleteInput from 'components/AutocompleteInput';\n+import LoadingButton from 'components/LoadingButton';\n+import TagInput from 'components/TagInput';\n+import { TagContextProvider } from 'components/TagContext';\n+import TextEntry from 'components/TextEntry';\nclass CubeOverviewModal extends Component {\nconstructor(props) {\n@@ -57,7 +59,8 @@ class CubeOverviewModal extends Component {\nthis.setState({ image_dict: image_json.dict });\n}\n- open() {\n+ open(event) {\n+ event.preventDefault();\nthis.setState({\nisOpen: true,\n});\n@@ -78,7 +81,7 @@ class CubeOverviewModal extends Component {\nthis.setState((prevState) => ({\ncube: {\n...prevState.cube,\n- descriptionhtml: value,\n+ raw_desc: value,\n},\n}));\n}\n@@ -199,6 +202,7 @@ class CubeOverviewModal extends Component {\nvar cube = this.state.cube;\ncube.tags = this.state.tags.map((tag) => tag.text);\n+ cube.descriptionhtml = cube.raw_desc;\nawait csrfFetch('/cube/api/editoverview', {\nmethod: 'POST',\nbody: JSON.stringify(cube),\n@@ -367,11 +371,7 @@ class CubeOverviewModal extends Component {\n<h6>Description</h6>\n<TextEntry\nname=\"blog\"\n- value={\n- cube.descriptionhtml && cube.descriptionhtml !== 'undefined'\n- ? cube.descriptionhtml\n- : cube.description\n- }\n+ value={cube.raw_desc && cube.raw_desc !== 'undefined' ? cube.raw_desc : cube.description}\nonChange={this.handleDescriptionChange}\n/>\n<br />\n@@ -395,9 +395,9 @@ class CubeOverviewModal extends Component {\n<Button color=\"secondary\" onClick={this.close}>\nClose\n</Button>{' '}\n- <Button color=\"success\" onClick={this.handleApply}>\n+ <LoadingButton color=\"success\" onClick={this.handleApply}>\nSave Changes\n- </Button>\n+ </LoadingButton>\n</ModalFooter>\n</form>\n</Modal>\n",
        "org_msg": "Fix several issues with overview description.",
        "sim_msg": "Clean up ray meshes",
        "sim_diff": "diff --git a/vr-ui.js b/vr-ui.js @@ -34,9 +34,12 @@ const makeTextMesh = (text = '', font = './GeosansLight.ttf', fontSize = 1, anch\nreturn textMesh;\n};\n+const rayColor = 0x64b5f6;\nconst makeCubeMesh = () => {\n- const cubeMesh = new THREE.Mesh(new THREE.BoxBufferGeometry(0.05, 0.05, 0.05), new THREE.MeshBasicMaterial({\n- color: 0x0000FF,\n+ const geometry = new THREE.CylinderBufferGeometry(0.005, 0.005, 0.001)\n+ .applyMatrix4(new THREE.Matrix4().makeRotationFromQuaternion(new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 0, -1))));\n+ const cubeMesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n+ color: rayColor,\n}));\ncubeMesh.visible = false;\nreturn cubeMesh;\n@@ -485,7 +488,7 @@ const makeRayMesh = () => {\n.applyMatrix4(new THREE.Matrix4().makeTranslation(0, 1/2, 0))\n.applyMatrix4(new THREE.Matrix4().makeRotationFromQuaternion(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI/2))),\nnew THREE.MeshBasicMaterial({\n- color: 0x64b5f6,\n+ color: rayColor,\n})\n);\nray.frustumCulled = false;\n@@ -1557,8 +1560,9 @@ const makeDetailsMesh = (cubeMesh, onrun, onadd, onremove, onclose) => {\nhighlightMesh.visible = false;\nlet currentAnchor = null;\n- const [{point, uv}] = localIntersections;\n+ const [{point, face, uv, object}] = localIntersections;\ncubeMesh.position.copy(point);\n+ cubeMesh.quaternion.setFromUnitVectors(localVector.set(0, 0, 1), localVector2.copy(face.normal).applyQuaternion(object.quaternion));\ncubeMesh.visible = true;\nlocalVector2D.copy(uv);\n@@ -1676,8 +1680,9 @@ const makeColorsMesh = (cubeMesh, colors, oncolorchange) => {\nhighlightMesh.visible = false;\nlet currentAnchor = null;\n- const [{point, uv}] = localIntersections;\n+ const [{point, face, uv, object}] = localIntersections;\ncubeMesh.position.copy(point);\n+ cubeMesh.quaternion.setFromUnitVectors(localVector.set(0, 0, 1), localVector2.copy(face.normal).applyQuaternion(object.quaternion));\ncubeMesh.visible = true;\nlocalVector2D.copy(uv);\n@@ -1824,8 +1829,9 @@ const makeInventoryMesh = (cubeMesh, onscroll) => {\nhighlightMesh.visible = false;\nlet currentAnchor = null;\n- let [{point, uv}] = localIntersections;\n+ let [{point, face, uv, object}] = localIntersections;\ncubeMesh.position.copy(point);\n+ cubeMesh.quaternion.setFromUnitVectors(localVector.set(0, 0, 1), localVector2.copy(face.normal).applyQuaternion(object.quaternion));\ncubeMesh.visible = true;\nlocalVector2D.copy(uv);\n",
        "chatgpt_cot": "Refactor CubeOverviewModal.js to fix import paths and add event parameter to open method. Update descriptionhtml to raw_desc and use LoadingButton."
    },
    {
        "org_diff": "diff --git a/src/components/EditCollapse.js b/src/components/EditCollapse.js @@ -89,7 +89,7 @@ const EditCollapse = ({ cubeID, ...props }) => {\ncard.details.name.toLowerCase() === (newValue || removeValue).toLowerCase() &&\n!changes.some(\n(change) =>\n- change.remove.index === card.index ||\n+ (change.remove && change.remove.index === card.index) ||\n(Array.isArray(change.replace) && change.replace[0].index === card.index),\n),\n);\n",
        "org_msg": "Fix adding/removing cards simultaneously.",
        "sim_msg": "Tokens cleanup",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -1150,7 +1150,7 @@ const _getTokenHtml = cardData => {\n</div>\n`;\n};\n-(async () => {\n+/* (async () => {\nconst totalObjects = await contract.methods.getNonce().call();\nconst ts = [];\nfor (let i = 1; i <= totalObjects; i++) {\n@@ -1173,7 +1173,7 @@ const _getTokenHtml = cardData => {\n});\n});\n}\n-})();\n+})(); */\n/* const scenes = document.getElementById('scenes');\n(async () => {\nconst res = await fetch(scenesEndpoint);\n",
        "chatgpt_cot": "Fix conditional expression for removing index in EditCollapse component."
    },
    {
        "org_diff": "diff --git a/src/utils/Card.js b/src/utils/Card.js @@ -135,7 +135,7 @@ export const cardNotes = (card) => card.notes;\nexport const cardColorCategory = (card) => card.colorCategory ?? card.details.color_category;\nexport const cardPrice = (card) =>\n- cardFinish() === 'Foil'\n+ cardFinish(card) === 'Foil'\n? card.details.price_foil ?? card.details.price\n: card.details.price ?? card.details.price_foil;\n",
        "org_msg": "Fix issue where card finish was called incorrectly",
        "sim_msg": "Card generator dead argument cleanup",
        "sim_diff": "diff --git a/card-generator.js b/card-generator.js @@ -76,7 +76,7 @@ const _previewImage = (image, width, height) => {\nexport const generateObjectUrlCard = async ({\nstart_url,\nwidth = 300,\n- height = 300,\n+ // height = width,\n}) => {\nconst app = await metaversefile.createAppAsync({\nstart_url,\n@@ -84,13 +84,13 @@ export const generateObjectUrlCard = async ({\nreturn await generateObjectCard({\napp,\nwidth,\n- height,\n+ // height,\n});\n};\nexport const generateObjectCard = async ({\napp,\nwidth = 300,\n- height = 300,\n+ // height = width,\n}) => {\nconst stats = generateStats(app.contentId);\nconst {\n",
        "chatgpt_cot": "Fix cardFinish function to take a parameter and update the conditional statement for determining card price in Card.js file."
    },
    {
        "org_diff": "diff --git a/src/components/EditCollapse.js b/src/components/EditCollapse.js @@ -69,13 +69,13 @@ const EditCollapse = ({ cubeID, ...props }) => {\n} catch (e) {\nconsole.error(e);\n}\n- }, [addChange, addInput]);\n+ }, [addChange, addValue, addInput]);\nconst handleRemoveReplace = useCallback(async (event) => {\nevent.preventDefault();\n- const replace = addVale.length > 0;\n+ const replace = addValue.length > 0;\ntry {\n- const cardOut = await getCard(remove);\n+ const cardOut = await getCard(removeValue);\nif (!cardOut) {\nreturn;\n}\n@@ -96,7 +96,7 @@ const EditCollapse = ({ cubeID, ...props }) => {\n} catch (e) {\nconsole.error(e);\n}\n- }, [addChange, addInput, removeInput]);\n+ }, [addChange, addInput, addValue, removeInput, removeValue]);\nconst handleDiscardAll = useCallback((event) => {\nsetChanges([]);\n",
        "org_msg": "Fix behavior on bad card name.",
        "sim_msg": "Add validation for numeric options",
        "sim_diff": "diff --git a/renderer/components/settings/widgets.js b/renderer/components/settings/widgets.js -import React, { useCallback } from 'react'\n+import React, { useCallback, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport {\nBox,\n@@ -20,6 +20,12 @@ const StyledLabel = styled(Label)`\n}\n`\n+const StyledErrorMessage = styled(Box).attrs({\n+ fontSize: '10px'\n+})`\n+ color: ${props => props.theme.colors.red5};\n+`\n+\nexport const BooleanOption = ({ label, optionKey, disabled = false, ...rest }) => {\nconst [checked, setConfigValue] = useConfig(optionKey)\n@@ -50,14 +56,19 @@ BooleanOption.propTypes = {\n}\nexport const NumberOption = ({ label, optionKey, disabled = false, ...rest}) => {\n- const [value, setConfigValue] = useConfig(optionKey)\n-\n+ const [configValue, setConfigValue] = useConfig(optionKey)\n+ const [value, setValue] = useState(configValue)\n+ const [error, setError] = useState(null)\nconst handleChange = useCallback((event) => {\nconst target = event.target\nif (target.validity.valid) {\nconst newValue = Number(target.value)\nsetConfigValue(newValue)\n+ setError(null)\n+ } else {\n+ setError(target.validationMessage)\n}\n+ setValue(Number(target.value))\n}, [setConfigValue])\nreturn (\n@@ -72,6 +83,7 @@ export const NumberOption = ({ label, optionKey, disabled = false, ...rest}) =>\n/>\n</Box>\n<Box mx={2}>{label}</Box>\n+ {error && <StyledErrorMessage>{error}</StyledErrorMessage>}\n</StyledLabel>\n)\n}\n",
        "chatgpt_cot": "\"Fix compilation issue due to missing variables in EditCollapse component\""
    },
    {
        "org_diff": "diff --git a/nearley/cardFilters.ne b/nearley/cardFilters.ne @@ -168,7 +168,7 @@ isCondition -> \"is\"i isOpValue {% ([, valuePred]) => genericCondition('details',\nnotCondition -> \"not\"i isOpValue {% ([, valuePred]) => negated(genericCondition('details', ({ details }) => details, valuePred)) %}\n-isOpValue -> \":\" isValue {% ([, category]) => (fieldValue, card) => CARD_CATEGORY_DETECTORS[category](fieldValue, card) %}\n+isOpValue -> \":\" isValue {% ([, category]) => CARD_CATEGORY_DETECTORS[category] %}\nisValue -> (\n\"gold\"i | \"twobrid\"i | \"hybrid\"i | \"phyrexian\"i | \"promo\"i | \"digital\"i | \"reasonable\"i | \"dfc\"i | \"mdfc\"i\n",
        "org_msg": "simplified isOpValue",
        "sim_msg": "refactor: includeFilter://h:name",
        "sim_diff": "diff --git a/lib/rules/rules.js b/lib/rules/rules.js @@ -1143,10 +1143,7 @@ function resolveMatchFilter(list) {\n}\n} else {\nvar index = value.indexOf('=');\n- if (index === -1 || !index || index === value.length - 1) {\n- return;\n- }\n- var key = value.substring(0, index).toLowerCase();\n+ var key = (index === -1 ? value : value.substring(0, index)).toLowerCase();\nvar lastIndex = key.length - 1;\nif (key[lastIndex] === '!') {\nkey = key.substring(0, lastIndex);\n@@ -1155,7 +1152,7 @@ function resolveMatchFilter(list) {\n}\nnot = !not;\n}\n- orgVal = value.substring(index + 1);\n+ orgVal = index === -1 ? '' : value.substring(index + 1);\nvalue = { key: key };\nif (pattern = util.toRegExp(orgVal)) {\nvalue.hPattern = pattern;\n@@ -1316,9 +1313,18 @@ function matchFilter(url, filter, req) {\nvar filterHeader = function(headers, filterVal) {\nif (!filterVal || !headers) {\n+ return true;\n+ }\n+ var value = headers[filterVal.key];\n+ if (value == null) {\n+ result = false;\n+ return;\n+ }\n+ if (!value) {\n+ result = !filterVal.value;\nreturn;\n}\n- var value = String(headers[filterVal.key] || '');\n+ value = String(value);\nif (filterVal.hPattern) {\nresult = filterVal.hPattern.test(value);\n} else {\n",
        "chatgpt_cot": "Refactor cardFilters.ne to simplify isOpValue method by removing unnecessary parameters."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -1433,6 +1433,22 @@ router.get('/download/csv/:id', async (req, res) => {\nconst details = carddb.cardFromId(card.cardID);\ncard.details = details;\n}\n+\n+ if (req.query.filter) {\n+ const { filter, err } = filterutil.makeFilter(req.query.filter);\n+ if (err) {\n+ return util.handleRouteError(\n+ req,\n+ res,\n+ 'Error parsing filter.',\n+ `/cube/list/${encodeURIComponent(req.params.id)}`,\n+ );\n+ }\n+ if (filter) {\n+ cube.cards = cube.cards.filter(filter);\n+ }\n+ }\n+\ncube.cards = sortutil.sortForCSVDownload(cube.cards, req.query.primary, req.query.secondary, req.query.tertiary);\nres.setHeader('Content-disposition', `attachment; filename=${cube.name.replace(/\\W/g, '')}.csv`);\n",
        "org_msg": "added filter to csv download route",
        "sim_msg": "Adjusted table",
        "sim_diff": "diff --git a/README.md b/README.md @@ -167,7 +167,7 @@ The component accepts the following props:\n|**`customToolbar`**|function||Render a custom toolbar\n|**`customToolbarSelect`**|function||Render a custom selected rows toolbar. `function(selectedRows, displayData, setSelectedRows) => void`\n|**`download`**|boolean|true|Show/hide download icon from toolbar\n-|**`downloadOptions`**|object|`{filename: 'tableDownload.csv', separator: ','}`|An object of options to change the output of the CSV file:<p><ul><li>`filename`: string</li><li>`separator`: string</li><li>`filterOptions`: object<ul><li>`useDisplayedColumnsOnly`: boolean</li><li>`useDisplayedRowsOnly`: boolean</li></ul></li></ul></p>\n+|**`downloadOptions`**|object|see ->|An object of options to change the output of the CSV file:<p><ul><li>`filename`: string</li><li>`separator`: string</li><li>`filterOptions`: object<ul><li>`useDisplayedColumnsOnly`: boolean</li><li>`useDisplayedRowsOnly`: boolean</li></ul></li></ul></p><p>Default Value:`{filename: 'tableDownload.csv', separator: ','}`</p>\n|**`draggableColumns`**|object|{}|An object of options describing how dragging columns should work. The options are: <p><ul><li>`enabled:boolean`: Indicates if draggable columns are enabled. Defaults to false.</li><li>`transitionTime:number`: The time in milliseconds it takes for columns to swap positions. Defaults to 300.</li></ul></p>To disable the dragging of a particular column, see the \"draggable\" option in the columns options. Dragging a column to a new position updates the columnOrder array and triggers the onColumnOrderChange callback.\n|**`elevation`**|number|4|Shadow depth applied to Paper component.\n|**`enableNestedDataAccess`**|string|\"\"|If provided a non-empty string (ex: \".\"), it will use that value in the column's names to access nested data. For example, given a enableNestedDataAccess value of \".\" and a column name of \"phone.cell\", the column would use the value found in `phone:{cell:\"555-5555\"}`. Any amount of nesting will work. [Example](https://github.com/gregnb/mui-datatables/blob/master/examples/data-as-objects/index.js) demonstrates the functionality.\n",
        "chatgpt_cot": "Add filter functionality to cube download route, allowing users to filter cards before downloading CSV file. Fix handling of filter parsing errors."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -348,22 +348,23 @@ export async function buildDeck(cards, picked, synergies, initialState, basics)\nNKernels(2, 18);\nconst played = createSeen();\naddSeen(played, chosen);\n-\nconst size = Math.min(23 - chosen.length, nonlands.length);\nfor (let i = 0; i < size; i++) {\n// add in new synergy data\n- const scores = [];\n- scores.push(nonlands.map((card) => getPickSynergy(colors, card, played, synergies) + getRating(colors, card)));\n-\nlet best = 0;\n+ let bestScore = -Infinity;\nfor (let j = 1; j < nonlands.length; j++) {\n- if (scores[j] > scores[best]) {\n+ const card = nonlands[j];\n+ const score = getPickSynergy(colors, card, played, synergies) + getRating(colors, card);\n+ if (score > bestScore) {\nbest = j;\n+ bestScore = score;\n}\n}\nconst current = nonlands.splice(best, 1)[0];\naddSeen(played, [current]);\n+ chosen.push(current);\n}\nnonlands = nonlands.filter((c) => !chosen.includes(c));\n} else {\n",
        "org_msg": "Add secondarily chosen cards to chosen.",
        "sim_msg": "Fix ExactlyXCard Selector pretarget bug",
        "sim_diff": "diff --git a/server/game/CardSelectors/ExactlyXCardSelector.js b/server/game/CardSelectors/ExactlyXCardSelector.js @@ -18,9 +18,9 @@ class ExactlyXCardSelector extends BaseCardSelector {\nreturn selectedCards.length === this.numCards;\n}\n- hasEnoughTargets(context) {\n+ hasEnoughTargets(context, pretarget = false) {\nlet numMatchingCards = context.game.allCards.reduce((total, card) => {\n- if(this.canTarget(card, context)) {\n+ if(this.canTarget(card, context, pretarget)) {\nreturn total + 1;\n}\nreturn total;\n",
        "chatgpt_cot": "\"Fix logic issue in buildDeck function, improve card picking algorithm for deck building\""
    },
    {
        "org_diff": "diff --git a/routes/cube/download.js b/routes/cube/download.js @@ -9,8 +9,8 @@ const filterutil = require('../../dist/filtering/FilterCards.js');\nconst carddb = require('../../serverjs/cards.js');\nconst util = require('../../serverjs/util.js');\n-const { buildIdQuery, exportToMtgo } = require('../../serverjs/cubefn.js');\n-const { CSV_HEADER, writeCard } = require('./helper.js')\n+const { buildIdQuery } = require('../../serverjs/cubefn.js');\n+const { writeCard, CSV_HEADER, exportToMtgo } = require('./helper.js')\n// Bring in models\nconst Cube = require('../../models/cube');\n",
        "org_msg": "Fix exportToMtgo import",
        "sim_msg": "missing limit",
        "sim_diff": "diff --git a/server/game/cards/01 - Core/KitsukiInvestigator.js b/server/game/cards/01 - Core/KitsukiInvestigator.js const DrawCard = require('../../drawcard.js');\nclass KitsukiInvestigator extends DrawCard {\n- setupCardAbilities() {\n+ setupCardAbilities(ability) {\nthis.action({\ntitle: 'Look at opponent\\'s hand',\ncondition: () => this.game.currentConflict && this.game.currentConflict.isParticipating(this) && this.game.currentConflict.conflictType === 'political',\n+ limit: ability.limit.perConflict(1),\nhandler: () => {\nthis.game.promptWithHandlerMenu(this.controller, {\nactivePromptTitle: 'Choose card to discard',\n",
        "chatgpt_cot": "Refactor import statements in download.js for better organization. Move exportToMtgo to helper.js. Update dependencies in cube download route."
    },
    {
        "org_diff": "diff --git a/src/utils/draftbots.js b/src/utils/draftbots.js @@ -160,6 +160,8 @@ export const getFixing = (combination, _, card) => {\nconst isLand = typeLine.indexOf('Land') > -1;\nconst isFetch = !!fetchLands[cardName(card)];\nconst hasBasicTypes = basics.filter((basic) => typeLine.toLowerCase().includes(basic.toLowerCase())).length > 1;\n+ const isRainbow = card.oracleText.includes('mana of any color');\n+\nlet score = 1;\n// Guaranteed contains by botRatingAndCombination\nif (isLand || isFetch) {\n@@ -171,18 +173,14 @@ export const getFixing = (combination, _, card) => {\nif (isFetch) {\nscore *= 2;\n}\n-\n- switch (colors.length) {\n- case 0:\n- return 0;\n- case 1:\n- break;\n- case 2:\n+ if (isRainbow) {\n+ score *= 4;\n+ }\n+ if (colors.length === 2) {\nscore *= 2;\n- break;\n- default:\n+ }\n+ if (colors.length === 3) {\nscore *= 2.5;\n- break;\n}\n} else {\nscore *= 0.5 * COLOR_SCALING_FACTOR[combination.length];\n",
        "org_msg": "support rainbow lands",
        "sim_msg": "Don't explode if no class array is empty",
        "sim_diff": "diff --git a/src/module/rules/actions/item/calculate-save-dc.js b/src/module/rules/actions/item/calculate-save-dc.js @@ -21,7 +21,7 @@ export default function (engine) {\nconst ownerKeyAbilityId = actorData?.attributes.keyability;\nconst itemKeyAbilityId = data.ability;\nconst spellbookSpellAbility = actorData?.attributes.spellcasting\n- const classSpellAbility = classes.filter(item => item.key === \"technomancer\" || \"mystic\" || \"witchwarper\" || \"precog\")[0].data.data.spellAbility;\n+ const classSpellAbility = classes.filter(item => item.key === \"technomancer\" || \"mystic\" || \"witchwarper\" || \"precog\")[0]?.data.data.spellAbility;\nconst abilityKey = itemKeyAbilityId || classSpellAbility || spellbookSpellAbility || ownerKeyAbilityId;\nif (abilityKey) {\n",
        "chatgpt_cot": "Add scoring multiplier for rainbow cards in getFixing function in draftbots.js. Fix scoring logic for cards with 2 or 3 colors."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -721,7 +721,7 @@ router.get('/list/:id', async (req, res) => {\n}\nconst pids = new Set();\n- const cardNames = [];\n+ const cardNames = new Set();\nconst addDetails = (cards) => {\ncards.forEach((card, index) => {\ncard.details = {\n@@ -734,7 +734,7 @@ router.get('/list/:id', async (req, res) => {\nif (card.details.tcgplayer_id) {\npids.add(card.details.tcgplayer_id);\n}\n- cardNames.push(card.details.name);\n+ cardNames.add(card.details.name);\n});\nreturn cards;\n};\n@@ -743,7 +743,7 @@ router.get('/list/:id', async (req, res) => {\ncube.maybe = addDetails(cube.maybe);\nconst priceDictQ = GetPrices([...pids]);\n- const eloDictQ = getElo(cardNames, true);\n+ const eloDictQ = getElo([...cardNames], true);\nconst [priceDict, eloDict] = await Promise.all([priceDictQ, eloDictQ]);\nconst addPriceAndElo = (cards) => {\n",
        "org_msg": "Use set for card names as well.",
        "sim_msg": "Fix fetchdata after merge",
        "sim_diff": "diff --git a/server/scripts/fetchdata.js b/server/scripts/fetchdata.js @@ -21,19 +21,18 @@ function apiRequest(path) {\n});\n}\n-function fetchImage(urlPath, id, imagePath, timeout) {\n+function fetchImage(url, id, imagePath, timeout) {\nsetTimeout(function() {\nconsole.log('Downloading image for ' + id);\n- var url = 'https://fiveringsdb.com/' + urlPath + id + '.jpg';\nrequest(url).pipe(fs.createWriteStream(imagePath));\n}, timeout);\n}\n-let db = monk('mongodb://127.0.0.1:27017/throneteki');\n+let db = monk('mongodb://127.0.0.1:27017/ringteki');\nlet cardService = new CardService(db);\nlet fetchCards = apiRequest('cards')\n- .then(cards => cardService.replaceCards(cards))\n+ .then(cards => cardService.replaceCards(cards.records))\n.then(cards => {\nconsole.info(cards.length + ' cards fetched');\n@@ -44,11 +43,11 @@ let fetchCards = apiRequest('cards')\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\n- //var imagePack = card.pack_cards[0].pack.id;\n- //var imagesrc = 'static/cards/' + imagePack + '/';\n+ var imagesrc = card.pack_cards[0].image_url;\n- if(card.imagesrc && !fs.existsSync(imagePath)) {\n- fetchImage(card.imagesrc, card.code, imagePath, i++ * 200);\n+\n+ if(imagesrc && !fs.existsSync(imagePath)) {\n+ fetchImage(imagesrc, card.id, imagePath, i++ * 200);\n}\n});\n@@ -59,7 +58,7 @@ let fetchCards = apiRequest('cards')\n});\nlet fetchPacks = apiRequest('packs')\n- .then(packs => cardService.replacePacks(packs))\n+ .then(packs => cardService.replacePacks(packs.records))\n.then(packs => {\nconsole.info(packs.length + ' packs fetched');\n})\n",
        "chatgpt_cot": "Refactor cardNames to use Set instead of array to improve performance and fix potential duplicate entries in cube_routes.js."
    },
    {
        "org_diff": "diff --git a/src/util/Sort.js b/src/util/Sort.js @@ -570,6 +570,7 @@ export function cardGetLabels(card, sort) {\n} else if (card.details.parsed_cost.some((symbol) => symbol.includes('-p'))) {\nreturn ['Phyrexian'];\n}\n+ return [];\n} else if (sort == 'CNC') {\nreturn typeLine(card)\n.toLowerCase()\n",
        "org_msg": "Fix manacost type sort.",
        "sim_msg": "set inital sort type",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -124,6 +124,7 @@ list.drawList = function() {\n}\n}\n} else {\n+ $('#curr-sort-type').text(config.localization[config.language][config.sort_options[0]])\nfor(var i=0; i<numberOfOptions; i++) {\naddSortOptionDropdownEntry(config.sort_options[i])\n}\n@@ -163,7 +164,7 @@ list.fit_list_height = function() {\nlet addSortOptionDropdownEntry = function(sort_option) {\nlet entry = sortDropdownEntryTemplate({\nsort_by_string: config.localization[config.language].sort_by_label,\n- sorter_label: config.localization[config.language][sort_option]\n+ sorter_label: config.localization[config.language][sort_option],\n})\nvar newEntry = $(entry).appendTo('#sort-menu-entries')\nnewEntry.on(\"click\", () => {\n",
        "chatgpt_cot": "Fix issue with missing return statement in cardGetLabels function in Sort.js file. Added return []; to handle missing condition."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -871,20 +871,23 @@ router.get('/playtest/:id', async (req, res) => {\ndelete cube.decks;\ndelete cube.maybe;\n- // sort titles alphabetically\n- cube.draft_formats.sort((a, b) => a.title.localeCompare(b.title));\n+ let draftFormats = [];\n+ // NOTE: older cubes do not have custom drafts\n+ if (cube.draft_formats) {\n+ draftFormats = cube.draft_formats\n+ .sort((a, b) => a.title.localeCompare(b.title)) // sort titles alphabetically\n+ .map(({ packs, ...format }) => ({\n+ ...format,\n+ packs: JSON.parse(packs),\n+ }));\n+ }\nconst reactProps = {\ncube,\ncubeID: req.params.id,\ncanEdit: user._id.equals(cube.owner),\ndecks,\n- draftFormats: cube.draft_formats\n- ? cube.draft_formats.map(({ packs, ...format }) => ({\n- ...format,\n- packs: JSON.parse(packs),\n- }))\n- : [],\n+ draftFormats: draftFormats,\n};\nres.render('cube/cube_playtest', {\n",
        "org_msg": "Fix undefined cube.draft_formats for old cubes on playtest route",
        "sim_msg": "Replace challengetracker",
        "sim_diff": "diff --git a/server/game/player.js b/server/game/player.js @@ -5,7 +5,7 @@ const DrawCard = require('./drawcard.js');\nconst Deck = require('./deck.js');\nconst AttachmentPrompt = require('./gamesteps/attachmentprompt.js');\nconst BestowPrompt = require('./gamesteps/bestowprompt.js');\n-const ChallengeTracker = require('./challengetracker.js');\n+const ConflictTracker = require('./conflicttracker.js');\nconst PlayableLocation = require('./playablelocation.js');\nconst PlayActionPrompt = require('./gamesteps/playactionprompt.js');\nconst PlayerPromptState = require('./playerpromptstate.js');\n",
        "chatgpt_cot": "\"Refactor cube_routes.js to handle older cubes without custom drafts and sort draft formats alphabetically for better user experience.\""
    },
    {
        "org_diff": "diff --git a/__tests__/serverjs/cubefn.test.js b/__tests__/serverjs/cubefn.test.js @@ -96,7 +96,7 @@ test(\"legalityToInt returns the expected values\", () => {\ntest(\"generate_short_id returns a valid short ID\", async () => {\nvar dummyModel = {\n- \"shortID\": \"abcdef\",\n+ \"shortID\": \"1x\",\n\"urlAlias\": \"a real alias\"\n};\nvar queryMockPromise = new Promise((resolve, reject) => {\n@@ -109,7 +109,7 @@ test(\"generate_short_id returns a valid short ID\", async () => {\nvar initialCubeFind = Cube.find;\nCube.find = queryMock;\nvar result = await cubefn.generate_short_id();\n- expect(result).toBe(false);\n+ expect(result).toBe(\"1y\");\nCube.find = initialCubeFind;\n});\n",
        "org_msg": "fix stub and expected values in generate_short_id test",
        "sim_msg": "Remove arrow function closure from test",
        "sim_diff": "diff --git a/src/utils/__tests__/createUniqueId.test.js b/src/utils/__tests__/createUniqueId.test.js @@ -5,7 +5,7 @@ const createUniqueId = require('../createUniqueId.js');\ndescribe('createUniqueId', () => {\ntest('should be unique', () => {\nconst items = 100000;\n- const set = new Set(Array.from(Array(items)).map(() => createUniqueId()));\n+ const set = new Set(Array.from(Array(items)).map(createUniqueId));\nexpect(set.size).toEqual(items);\n});\n",
        "chatgpt_cot": "\"Fix generate_short_id test to return correct short ID \"1y\" instead of false, update dummyModel shortID value from \"abcdef\" to \"1x\"."
    },
    {
        "org_diff": "diff --git a/models/deck.js b/models/deck.js @@ -24,10 +24,7 @@ Comment.add({\n//data for each seat, human or bot\nconst SeatDeck = {\nbot: [String], //null bot value means human player\n- userid: {\n- type: String,\n- index: true,\n- },\n+ userid: String,\nusername: String,\npickorder: [cardSchema],\nname: String,\n@@ -42,14 +39,8 @@ const SeatDeck = {\n// Deck schema\nlet deckSchema = mongoose.Schema({\n- cube: {\n- type: String,\n- index: true,\n- },\n- date: {\n- type: Date,\n- index: true,\n- },\n+ cube: String,\n+ date: Date,\ncomments: {\ntype: [Comment],\ndefault: [],\n@@ -65,10 +56,13 @@ let deckSchema = mongoose.Schema({\nseats: {\ntype: [SeatDeck],\ndefault: [],\n- index: true,\n},\n});\n+deckSchema.index({\n+ date: -1,\n+})\n+\ndeckSchema.index({\ncube: 1,\ndate: -1,\n",
        "org_msg": "Update deck index",
        "sim_msg": "Remove stronghold from player info",
        "sim_diff": "diff --git a/client/GameBoard.jsx b/client/GameBoard.jsx @@ -387,9 +387,6 @@ export class InnerGameBoard extends React.Component {\n<div className='player-info'>\n<PlayerStats fate={otherPlayer ? otherPlayer.fate : 0} honor={otherPlayer ? otherPlayer.totalHonor : 0} user={otherPlayer ? otherPlayer.user : null} />\n<div className='deck-info'>\n- <div className='deck-type'>\n- <CardCollection className='stronghold province' source='stronghold province' cards={[]} topCard={otherPlayer ? otherPlayer.stronghold : undefined} onMouseOver={this.onMouseOver} onMouseOut={this.onMouseOut} disablePopup />\n- </div>\n{ otherPlayer ? <div className={'first-player-indicator ' + (!thisPlayer.firstPlayer ? '' : 'hidden')}>First player</div> : ''}\n</div>\n</div>\n@@ -418,9 +415,6 @@ export class InnerGameBoard extends React.Component {\nhonor={thisPlayer.totalHonor} isMe={!this.state.spectating} user={thisPlayer.user} />\n<div className='deck-info'>\n<div className={'first-player-indicator ' + (thisPlayer.firstPlayer ? '' : 'hidden')}>First player</div>\n- <div className='deck-type'>\n- <CardCollection className='stronghold province' source='stronghold province' cards={[]} topCard={thisPlayer.stronghold} onMouseOver={this.onMouseOver} onMouseOut={this.onMouseOut} disablePopup onCardClick={this.onFactionCardClick} />\n- </div>\n</div>\n</div>\n</div>\n",
        "chatgpt_cot": "Refactor SeatDeck and deckSchema in models/deck.js for simplicity and clarity, update index and types for cube and date fields."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -122,10 +122,18 @@ function cardIsLegal(card, legality) {\nfunction setCubeType(cube, carddb) {\nlet pauper = true;\n+ let peasant = false;\nlet type = legalityToInt('Standard');\nfor (const card of cube.cards) {\nif (pauper && !['legal', 'banned'].includes(carddb.cardFromId(card.cardID).legalities.Pauper)) {\npauper = false;\n+ peasant = true;\n+ }\n+ if (!pauper && peasant /* && card only at rare or mythic */) {\n+ const rarities = carddb.allVersions(carddb.cardFromId(card.cardID)).map((id) => carddb.cardFromId(id).rarity);\n+ if (!rarities.includes('common') && !rarities.includes('uncommon')) {\n+ peasant = false;\n+ }\n}\nwhile (type > 0 && !cardIsLegal(carddb.cardFromId(card.cardID), intToLegality(type).toLowerCase())) {\ntype -= 1;\n@@ -136,6 +144,9 @@ function setCubeType(cube, carddb) {\nif (pauper) {\ncube.type += ' Pauper';\n}\n+ if (peasant) {\n+ cube.type += ' Peasant';\n+ }\ncube.card_count = cube.cards.length;\nreturn cube;\n}\n",
        "org_msg": "cubes not pauper legal but only contain commons and uncommons auto-assign peasant",
        "sim_msg": "add a check for undefined cardData",
        "sim_diff": "diff --git a/server/game/deck.js b/server/game/deck.js @@ -26,7 +26,7 @@ class Deck {\n//conflict\nthis.eachRepeatedCard(this.data.conflictCards, cardData => {\n- if(['conflict'].includes(cardData.side)) {\n+ if(cardData && ['conflict'].includes(cardData.side)) {\nvar conflictCard = this.createCard(DrawCard, player, cardData);\nconflictCard.location = 'conflict deck';\nresult.conflictCards.push(conflictCard);\n@@ -35,7 +35,7 @@ class Deck {\n//dynasty\nthis.eachRepeatedCard(this.data.dynastyCards, cardData => {\n- if(['dynasty'].includes(cardData.side)) {\n+ if(cardData && ['dynasty'].includes(cardData.side)) {\nvar dynastyCard = this.createCard(DrawCard, player, cardData);\ndynastyCard.location = 'dynasty deck';\nresult.dynastyCards.push(dynastyCard);\n@@ -43,7 +43,7 @@ class Deck {\n});\nthis.eachRepeatedCard(this.data.provinceCards, cardData => {\n- if(cardData.type === 'province') {\n+ if(cardData && cardData.type === 'province') {\nvar provinceCard = this.createCard(ProvinceCard, player, cardData);\nprovinceCard.location = 'province deck';\nresult.provinceCards.push(provinceCard);\n@@ -51,7 +51,7 @@ class Deck {\n});\nthis.eachRepeatedCard(this.data.stronghold, cardData => {\n- if(cardData.type === 'stronghold') {\n+ if(cardData && cardData.type === 'stronghold') {\nvar strongholdCard = this.createCard(StrongholdCard, player, cardData);\nstrongholdCard.location = '';\nresult.stronghold = strongholdCard;\n@@ -59,7 +59,7 @@ class Deck {\n});\nthis.eachRepeatedCard(this.data.role, cardData => {\n- if(cardData.type === 'role') {\n+ if(cardData && cardData.type === 'role') {\nvar roleCard = this.createCard(RoleCard, player, cardData);\nresult.role = roleCard;\n}\n",
        "chatgpt_cot": "\"Add peasant type to cube, fix compilation issue with new type\""
    },
    {
        "org_diff": "diff --git a/src/util/Affiliate.js b/src/util/Affiliate.js @@ -3,13 +3,9 @@ export function getTCGLink(card, isToken) {\nif (card.details.tcgplayer_id) {\ntcgplayerLink += `product/productsearch?id=${card.details.tcgplayer_id}`;\n} else {\n- if(isToken)\n- {\n- tcgplayerLink += `productcatalog/product/show?ProductName=${card.details.name}%20token`;\n- }\n- else\n- {\ntcgplayerLink += `productcatalog/product/show?ProductName=${card.details.name}`;\n+ if (isToken) {\n+ tcgplayerLink += ' Token';\n}\n}\ntcgplayerLink += '&partner=CubeCobra&utm_campaign=affiliate&utm_medium=CubeCobra&utm_source=CubeCobra';\n",
        "org_msg": "fixed per code review",
        "sim_msg": "Update credits with Patreon supporters.",
        "sim_diff": "diff --git a/src/components/client/credits.js b/src/components/client/credits.js @@ -133,6 +133,15 @@ const creditList = [\n</ul>\n),\n},\n+ {\n+ header: \"Patreon Supporters\",\n+ content: (\n+ <ul>\n+ <li>Manuel</li>\n+ <li>bashNinja</li>\n+ </ul>\n+ ),\n+ },\n{\nheader: \"Donors\",\ncontent: (\n",
        "chatgpt_cot": "\"Refactor Affiliate.js to simplify conditional logic and improve readability\""
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -725,6 +725,9 @@ function convertCard(card, isExtra) {\nnewcard.image_normal = card.image_uris.normal;\nnewcard.art_crop = card.image_uris.art_crop;\n}\n+ if (card.card_faces && card.card_faces.length >= 2 && card.card_faces[1].image_uris) {\n+ newcard.image_flip = card.card_faces[1].image_uris.normal;\n+ }\nif (newcard.type.toLowerCase().includes('land')) {\nnewcard.colorcategory = 'l';\n} else if (newcard.color_identity.length == 0) {\n",
        "org_msg": "Fix broken DFC autocards.\nThis requires a cardbase update.",
        "sim_msg": "Update fetch to look at new image location",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -32,7 +32,9 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.png');\n- var imagesrc = 'bundles/card_images/';\n+ var imagePack = card.pack_cards[0].pack.id;\n+ var imagesrc = 'bundles/card_images/' + imagePack;\n+\nif(imagesrc && !fs.existsSync(imagePath)) {\nfetchImage(imagesrc, card.id, imagePath, i++ * 200);\n",
        "chatgpt_cot": "Add new method to handle card flip image and fix color category for land cards."
    },
    {
        "org_diff": "diff --git a/src/components/PagedList.js b/src/components/PagedList.js @@ -6,10 +6,9 @@ import Paginate from 'components/Paginate';\nconst PagedList = ({ pageSize, rows, showBottom, pageWrap }) => {\nconst [page, setPage] = useState(0);\n- const displayRows = rows.slice(page * pageSize, (page + 1) * pageSize);\nconst validPages = [...Array(Math.ceil(rows.length / pageSize)).keys()];\n-\nconst current = Math.min(page, validPages.length - 1);\n+ const displayRows = rows.slice(current * pageSize, (current + 1) * pageSize);\nreturn (\n<>\n",
        "org_msg": "Fix pagination for paged list as well",
        "sim_msg": "fix(QTable): correctly define onUpdate:pagination type so additional event attachment besides v-model to work",
        "sim_diff": "diff --git a/ui/src/components/table/table-pagination.js b/ui/src/components/table/table-pagination.js @@ -26,7 +26,7 @@ export const useTablePaginationProps = {\ndefault: () => [ 5, 7, 10, 15, 20, 25, 50, 0 ]\n},\n- 'onUpdate:pagination': Function\n+ 'onUpdate:pagination': [ Function, Array ]\n}\nexport function useTablePaginationState (vm, getCellValue) {\n",
        "chatgpt_cot": "Refactor PagedList.js to fix displayRows bug\n\nThe code changes involve refactoring the displayRows variable to fix a bug related to pagination in the PagedList component."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -890,7 +890,7 @@ router.get('/samplepackimage/:id/:seed', function(req, res) {\n'Content-Type': 'image/png',\n'Content-Length': image.length\n});\n- res.end(Buffer.from(image.replace(/^data:image\\/png;base64,/, ''), 'base64'));\n+ res.end(Buffer.from(image.replace(/^data:image\\/png;base64,/, ''), 'gzip'));\n});\n}\n});\n",
        "org_msg": "changed encoding to gzip",
        "sim_msg": "Make variant route param optional",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js @@ -2,7 +2,7 @@ const routes = require(\"next-routes\")();\nroutes\n.add(\"shopProduct\", \"/shop/:shopSlug/product/:productSlug\", \"product\")\n- .add(\"product\", \"/product/:productSlug/:variantId\", \"product\")\n+ .add(\"product\", \"/product/:productSlug/:variantId?\", \"product\")\n.add(\"shop\", \"/shop/:shopId/:tag\", \"index\")\n.add(\"tag\", \"/tag/:slug\", \"index\");\n",
        "chatgpt_cot": "Fix response content encoding issue in cube_routes.js. Changed response content encoding from base64 to gzip for samplepackimage route."
    },
    {
        "org_diff": "diff --git a/src/filtering/FuncOperations.js b/src/filtering/FuncOperations.js @@ -38,9 +38,30 @@ export const stringOperation = (op, value) => {\n};\nconst NAME_PLACEHOLDER = '~';\n-const NAME_ALIAS = /\\bthis spell\\b/g;\n+const NAME_ALIAS = /\\b[Tt]his spell\\b/g;\n-const mayContainShorthand = (details) => details.type.includes('Legendary') && details.name.includes(',');\n+const SHORTHAND_OVERRIDES = [\n+ 'Crovax the Cursed',\n+ 'Darigaaz Reincarnated',\n+ 'Gorm the Great',\n+ 'Haktos the Unscarred',\n+ 'Hazoret the Fervent',\n+ 'Phage the Untouchable',\n+ 'Rakdos the Defiler',\n+ 'Rashka the Slayer',\n+ 'Rasputin Dreamweaver',\n+ 'Rubinia Soulsinger',\n+];\n+\n+const getShorthand = (details) => {\n+ if (SHORTHAND_OVERRIDES.includes(details.name)) {\n+ return details.name.split(' ')[0];\n+ }\n+ if (details.type.includes('Legendary') && details.name.includes(',')) {\n+ return details.name.split(',')[0];\n+ }\n+ return undefined;\n+};\nexport const nameStringOperation = (op, value) => {\nconst strOp = stringOperation(op, value);\n@@ -48,9 +69,9 @@ export const nameStringOperation = (op, value) => {\nlet expandedValue = fieldValue\n.replace(new RegExp(card.details.name, 'g'), NAME_PLACEHOLDER)\n.replace(NAME_ALIAS, NAME_PLACEHOLDER);\n- if (mayContainShorthand(card.details)) {\n- const [shortName] = card.details.name.split(',');\n- expandedValue = expandedValue.replace(new RegExp(shortName, 'g'), NAME_PLACEHOLDER);\n+ const shorthand = getShorthand(card.details);\n+ if (shorthand) {\n+ expandedValue = expandedValue.replace(new RegExp(shorthand, 'g'), NAME_PLACEHOLDER);\n}\nreturn strOp(expandedValue);\n};\n",
        "org_msg": "fixed capitalization, handled edge cases",
        "sim_msg": "test(system): fix review",
        "sim_diff": "diff --git a/packages/system/src/overflow.test.js b/packages/system/src/overflow.test.js @@ -24,7 +24,7 @@ describe('overflow', () => {\ndescribe('overflow', () => {\nit('Should return values for overflow prop', () => {\n- const expectedDisplay = css({ overflow: 'scroll' });\n+ const expectedOverflow = css({ overflow: 'scroll' });\nconst ofProp = overflow({ of: 'scroll' });\nconst overflowProp = overflow({ overflow: 'scroll' });\n@@ -33,13 +33,13 @@ describe('overflow', () => {\nconst ofOptions = [ofProp, overflowProp];\n- ofOptions.map(c => expect(c).toStrictEqual(expectedDisplay));\n+ ofOptions.map(c => expect(c).toStrictEqual(expectedOverflow));\n});\n});\ndescribe('overflowX', () => {\nit('Should return values for overflow-x prop', () => {\n- const expectedDisplay = css({ overflowX: 'auto' });\n+ const expectedOverflow = css({ overflowX: 'auto' });\nconst oxProp = overflowX({ ox: 'auto' });\nconst overflowXProp = overflowX({ overflowX: 'auto' });\n@@ -48,13 +48,13 @@ describe('overflow', () => {\nconst oxOptions = [oxProp, overflowXProp];\n- oxOptions.map(c => expect(c).toStrictEqual(expectedDisplay));\n+ oxOptions.map(c => expect(c).toStrictEqual(expectedOverflow));\n});\n});\ndescribe('overflowY', () => {\nit('Should return values for overflow-y prop', () => {\n- const expectedDisplay = css({ overflowY: 'auto' });\n+ const expectedOverflow = css({ overflowY: 'auto' });\nconst oyProp = overflowY({ oy: 'auto' });\nconst overflowYProp = overflowY({ overflowY: 'auto' });\n@@ -63,7 +63,7 @@ describe('overflow', () => {\nconst oyOptions = [oyProp, overflowYProp];\n- oyOptions.map(c => expect(c).toStrictEqual(expectedDisplay));\n+ oyOptions.map(c => expect(c).toStrictEqual(expectedOverflow));\n});\n});\n});\n",
        "chatgpt_cot": "Add shorthand overrides and getShorthand method, update nameAlias regex, refactor nameStringOperation function for better readability and maintainability in FuncOperations.js."
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"react-dom\": \"^16.9.0\",\n\"react-tag-input\": \"^6.4.1\",\n\"reactstrap\": \"^8.0.1\",\n+ \"sinon\": \"^7.4.2\",\n\"terser-webpack-plugin\": \"^2.0.0\",\n\"webpack\": \"^4.39.3\",\n\"webpack-cli\": \"^3.3.8\",\n",
        "org_msg": "depend on sinon for model stubbing",
        "sim_msg": "Upgrade typescript to ^2.8.0\nThis should hopefully fix error in travis build step `npm run check-ts`\nError: node_modules/@types/recompose/index.d.ts(23,47): error TS2304:\nCannot find name 'Exclude'.\nExample build:\nReason: The Exclude keyword used in was added in\nTypescript 2.8\n(https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#predefined-conditional-types).",
        "sim_diff": "diff --git a/package.json b/package.json \"react-dom\": \"^15.3.2\",\n\"rimraf\": \"^2.6.0\",\n\"ts-loader\": \"^2.0.2\",\n- \"typescript\": \"~2.5\",\n+ \"typescript\": \"^2.8.0\",\n\"webpack\": \"^1.14.0\",\n\"webpack-dev-server\": \"^1.16.2\",\n\"webpack-fail-plugin\": \"^1.0.6\"\n",
        "chatgpt_cot": "Add sinon library to package.json for testing purposes."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -68,7 +68,7 @@ if (NODE_ENV === 'production') {\nCubePlaytestPage = require('../dist/pages/CubePlaytestPage').default;\n}\n-const { ensureAuth, csrfProtection, jsonValidationErrors } = require('./middleware');\n+const { ensureAuth, csrfProtection, flashValidationErrors, jsonValidationErrors } = require('./middleware');\nrouter.use(csrfProtection);\n@@ -984,17 +984,13 @@ router.get('/samplepackimage/:id/:seed', async (req, res) => {\n}\n});\n-router.post('/importcubetutor/:id', ensureAuth, async (req, res) => {\n+router.post('/importcubetutor/:id', ensureAuth, body('cubeid').toInt(), flashValidationErrors, async (req, res) => {\ntry {\nconst cube = await Cube.findOne(build_id_query(req.params.id));\nif (cube.owner !== req.user.id) {\nreq.flash('danger', 'Not Authorized');\nreturn res.redirect(`/cube/list/${req.params.id}`);\n}\n- if (!Number.isInteger(req.body.cubeid)) {\n- req.flash('danger', 'Error: Provided ID is not in correct format.');\n- return res.redirect(`/cube/list/${req.params.id}`);\n- }\nconst response = await fetch(`https://www.cubetutor.com/viewcube/${req.body.cubeid}`, {\nheaders: {\n",
        "org_msg": "Fix cubetutor import.",
        "sim_msg": "feat: allow any route to be able to force a full page load",
        "sim_diff": "diff --git a/src/routes.js b/src/routes.js const routes = require(\"next-routes\")();\n+const getConfig = require(\"next/config\").default;\n+\n+if (process.browser) {\n+ const { publicRuntimeConfig } = getConfig();\n+\n+ const wrap = (method) => (route, params, options) => {\n+ const { byName, urls: { as, href } } = routes.findAndGetUrls(route, params);\n+\n+ // Force full page loads\n+ if (!publicRuntimeConfig.enableSPARouting && !options.replace) {\n+ window.location = as;\n+ return as;\n+ }\n+\n+ // History pushstate\n+ return routes.Router[method](href, as, byName ? options : params);\n+ };\n+\n+ // Override router push methods\n+ routes.Router.pushRoute = wrap(\"push\");\n+ routes.Router.replaceRoute = wrap(\"replace\");\n+ routes.Router.prefetchRoute = wrap(\"prefetch\");\n+}\nroutes\n.add(\"home\", \"/\", \"productGrid\")\n",
        "chatgpt_cot": "\"Add flashValidationErrors to importcubetutor route to handle request body validation errors.\""
    },
    {
        "org_diff": "diff --git a/src/filtering/FuncOperations.js b/src/filtering/FuncOperations.js @@ -215,12 +215,12 @@ const canCastWithInfinite = (mana, cost) => {\n};\nexport const castableCostOperation = (op, value) => {\nswitch (op.toString()) {\n- case ':':\ncase '=':\nreturn (fieldValue) => canCastWith(value, convertParsedCost(fieldValue));\ncase '<>':\ncase '!=':\nreturn (fieldValue) => !canCastWith(value, convertParsedCost(fieldValue));\n+ case ':':\ncase '<=':\nreturn (fieldValue) => canCastWithInfinite(value, convertParsedCost(fieldValue));\ncase '>':\n",
        "org_msg": "Have ':' be '<=' for castablewith.",
        "sim_msg": "LambdaFunction constructor rewrite",
        "sim_diff": "diff --git a/src/LambdaFunction.js b/src/LambdaFunction.js @@ -20,6 +20,17 @@ module.exports = class LambdaFunction {\nconst { name, handler } = functionObj\nconst [handlerPath, handlerName] = splitHandlerPathAndName(handler)\n+ const memorySize =\n+ functionObj.memorySize ||\n+ provider.memorySize ||\n+ DEFAULT_LAMBDA_MEMORY_SIZE\n+\n+ const runtime =\n+ functionObj.runtime || provider.runtime || DEFAULT_LAMBDA_RUNTIME\n+\n+ const timeout =\n+ (functionObj.timeout || provider.timeout || DEFAULT_LAMBDA_TIMEOUT) * 1000\n+\nthis._awsRequestId = null\n// merge env settings\n@@ -40,16 +51,12 @@ module.exports = class LambdaFunction {\nthis._handlerName = handlerName\nthis._handlerPath = resolve(servicePath, handlerPath)\nthis._lambdaName = name\n- this._memorySize =\n- functionObj.memorySize ||\n- provider.memorySize ||\n- DEFAULT_LAMBDA_MEMORY_SIZE\n+ this._memorySize = memorySize\nthis._options = options\n- this._runtime = functionObj.runtime || provider.runtime\n+ this._runtime = runtime\nthis._serverlessPath = serverlessPath\nthis._servicePath = servicePath\n- this._timeout =\n- (functionObj.timeout || provider.timeout || DEFAULT_LAMBDA_TIMEOUT) * 1000\n+ this._timeout = timeout\nthis._verifySupportedRuntime()\n}\n@@ -64,16 +71,6 @@ module.exports = class LambdaFunction {\n}\n_verifySupportedRuntime() {\n- // fallback runtime if not specified\n- if (this._runtime == null) {\n- this._runtime = DEFAULT_LAMBDA_RUNTIME\n-\n- // TODO activate log:\n- // serverlessLog(\n- // `Warning: Could not find a 'runtime' for function '${this._functionName}', falling back to default runtime: '${this._runtime}`,\n- // )\n- }\n-\n// print message but keep working (don't error out or exit process)\nif (!supportedRuntimes.has(this._runtime)) {\n// this.printBlankLine(); // TODO\n",
        "chatgpt_cot": "\"Refactor castableCostOperation to handle additional comparison operator ':' and fix comparison logic for cost operations.\""
    },
    {
        "org_diff": "diff --git a/src/components/CurveView.js b/src/components/CurveView.js @@ -17,6 +17,7 @@ const TypeRow = ({ cardType, groups, count, primary }) => (\n<AutocardListGroup\nheading={`${cmc} (${(groups[cmc] || []).length})`}\ncards={groups[cmc] || []}\n+ sort={'Unsorted'}\n/>\n</div>\n)\n",
        "org_msg": "Remove CurveView cmc dividers.",
        "sim_msg": "Remove see also from the library. It's a pain, and always breaks. Closes",
        "sim_diff": "diff --git a/client/src/components/views/Library/index.js b/client/src/components/views/Library/index.js @@ -17,10 +17,6 @@ const SUB = gql`\ntype\ntitle\nimage\n- seeAlso {\n- id\n- title\n- }\ncategories\n}\n}\n@@ -198,7 +194,7 @@ class Library extends Component {\n)}\n</Asset>\n)}\n- <h4>See Also</h4>\n+ {/* <h4>See Also</h4>\n<Card className=\"entry-seeAlso\">\n<CardBody>\n{sEntry &&\n@@ -217,7 +213,7 @@ class Library extends Component {\n</p>\n))}\n</CardBody>\n- </Card>\n+ </Card> */}\n</Col>\n</Row>\n</Col>\n@@ -237,10 +233,6 @@ const QUERY = gql`\ntype\ntitle\nimage\n- seeAlso {\n- id\n- title\n- }\ncategories\n}\n}\n",
        "chatgpt_cot": "Add sorting functionality to CurveView component for better user experience."
    },
    {
        "org_diff": "diff --git a/src/utils/Draft.js b/src/utils/Draft.js @@ -91,7 +91,7 @@ export const calculateBasicCounts = (main, colors) => {\nfor (const card of main) {\nfor (const symbol of ['W', 'U', 'B', 'R', 'G']) {\n- symbols[symbol] += cardDevotion(card, symbol);\n+ symbols[symbol] += cardDevotion(card, symbol) ?? 0;\n}\n}\nconst colorWeights = Object.values(symbols);\n",
        "org_msg": "Fix issue with NaN basics.",
        "sim_msg": "Npc load work",
        "sim_diff": "diff --git a/runtime.js b/runtime.js @@ -24,6 +24,7 @@ import {baseUnit, rarityColors} from './constants.js';\nconst localVector = new THREE.Vector3();\nconst localVector2 = new THREE.Vector3();\n+const localEuler = new THREE.Euler();\nconst localBox = new THREE.Box3();\nconst boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\n@@ -179,14 +180,66 @@ const componentHandlers = {\nload(o, componentIndex, rigAux) {\n(async () => {\nconst npc = await world.addNpc(o.contentId, null, o.position, o.quaternion);\n- /* const npcs = npcManager.getNpcs();\n- const npc = {\n- id: npcManager.getNextId(),\n- contentId: o.contentId,\n- componentIndex,\n- };\n- npcs.push(npc);\n- npcManager.setNpcs(npcs); */\n+\n+ const animations = npc.getAnimations();\n+ const component = npc.getComponents()[componentIndex];\n+ let {idleAnimation = ['idle'], aggroDistance, walkSpeed = 1} = component;\n+ if (idleAnimation) {\n+ if (!Array.isArray(idleAnimation)) {\n+ idleAnimation = [idleAnimation];\n+ }\n+ } else {\n+ idleAnimation = [];\n+ }\n+\n+ const idleAnimationClips = idleAnimation.map(name => animations.find(a => a.name === name)).filter(a => !!a);\n+ console.log('got npc', npc, idleAnimationClips);\n+ if (idleAnimationClips.length > 0) {\n+ // hacks\n+ {\n+ mesh.position.y = 0;\n+ localEuler.setFromQuaternion(mesh.quaternion, 'YXZ');\n+ localEuler.x = 0;\n+ localEuler.z = 0;\n+ mesh.quaternion.setFromEuler(localEuler);\n+ }\n+\n+ const mixer = new THREE.AnimationMixer(mesh);\n+ const idleActions = idleAnimationClips.map(idleAnimationClip => mixer.clipAction(idleAnimationClip));\n+ for (const idleAction of idleActions) {\n+ idleAction.play();\n+ }\n+\n+ npc.addEventListener('frame', e => {\n+ const deltaSeconds = e.data.timeDiff / 1000;\n+ mixer.update(deltaSeconds);\n+ });\n+ }\n+\n+ const smoothVelocity = new THREE.Vector3();\n+ npc.addEventListener('frame', e => {\n+ const {timeDiff} = e.data;\n+ const speed = 0.003;\n+ timeDiff *= 1000;\n+\n+ const head = this.rig.model.isVrm ? this.rig.modelBones.Head : this.rig.model;\n+ const position = head.getWorldPosition(localVector);\n+ position.y = 0;\n+ const distance = mesh.position.distanceTo(position);\n+ const minDistance = 1;\n+ let moveDelta;\n+ if (distance > minDistance) {\n+ const direction = position.clone().sub(mesh.position).normalize();\n+ const maxMoveDistance = distance - minDistance;\n+ const moveDistance = Math.min(speed * timeDiff, maxMoveDistance);\n+ moveDelta = direction.clone().multiplyScalar(moveDistance);\n+ mesh.position.add(moveDelta);\n+ mesh.quaternion.slerp(new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 0, 1), direction), 0.1);\n+ } else {\n+ moveDelta = new THREE.Vector3();\n+ }\n+ smoothVelocity.lerp(moveDelta, 0.3);\n+ });\n})();\nreturn () => {\n/* let npcs = npcManager.getNpcs();\n",
        "chatgpt_cot": "\"Fix potential null value in calculateBasicCounts function in Draft.js\""
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -53,10 +53,6 @@ const FOUR_COLOR_MAP = {\nWUBR: 'Non-Green',\n};\n-const ALL_CMCS = Array.from(Array(33).keys())\n- .map((x) => (x / 2).toString())\n- .concat(['1000000']);\n-\nconst CARD_TYPES = [\n'Creature',\n'Planeswalker',\n@@ -147,6 +143,7 @@ export const SORTS = [\n'Artist',\n'Mana Value',\n'Mana Value 2',\n+ 'Mana Value Full',\n'Color Category',\n'Color Category Full',\n'Color Count',\n@@ -233,6 +230,14 @@ function getEloBucket(elo) {\nreturn `${bucketFloor}-${bucketFloor + 49}`;\n}\n+function cmcToNumber(card) {\n+ const cmc = cardCmc(card);\n+ if (typeof cmc !== 'number') {\n+ return cmc.indexOf('.') > -1 ? parseFloat(cmc) : parseInt(cmc, 10);\n+ }\n+ return cmc;\n+}\n+\nfunction getLabelsRaw(cube, sort, showOther) {\nlet ret = [];\n@@ -256,8 +261,9 @@ function getLabelsRaw(cube, sort, showOther) {\n} else if (sort === 'Mana Value 2') {\nret = ['0-1', '2', '3', '4', '5', '6', '7+'];\n} else if (sort === 'Mana Value Full') {\n- // All CMCs from 0-16, with halves included, plus Gleemax at 1,000,000.\n- ret = ALL_CMCS;\n+ // All unique CMCs of cards in the cube, rounded to a half-integer\n+ ret = cube.map((card) => Math.round(cmcToNumber(card) * 2) / 2);\n+ ret = [...new Set(ret)].sort((a, b) => a - b).map((n) => n.toString());\n} else if (sort === 'Color') {\nret = ['White', 'Blue', 'Black', 'Red', 'Green', 'Colorless'];\n} else if (sort === 'Type') {\n@@ -420,14 +426,6 @@ function getLabelsRaw(cube, sort, showOther) {\nreturn showOther ? [...ret, ' Other '] : ret;\n}\n-function cmcToNumber(card) {\n- const cmc = cardCmc(card);\n- if (typeof cmc !== 'number') {\n- return cmc.indexOf('.') > -1 ? parseFloat(cmc) : parseInt(cmc, 10);\n- }\n- return cmc;\n-}\n-\nexport function cardGetLabels(card, sort, showOther) {\nlet ret = [];\n/* Start of sort options */\n",
        "org_msg": "added mana value full sort",
        "sim_msg": "test/helpers/deckbuilder works correctly",
        "sim_diff": "diff --git a/test/helpers/deckbuilder.js b/test/helpers/deckbuilder.js @@ -2,26 +2,24 @@ const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\n-const {matchCardByNameAndPack} = require('./cardutil.js');\n-\n-const PathToSubModulePacks = path.join(__dirname, '../../fiveringsdb-data/PackCard');\n+const CardDbRootDirectory = path.join(__dirname, '../../fiveringsdb-data');\nclass DeckBuilder {\nconstructor() {\n- this.cards = this.loadCards(PathToSubModulePacks);\n+ this.cards = this.loadCards(CardDbRootDirectory);\n}\nloadCards(directory) {\n- var cards = {};\n-\n- var jsonPacks = fs.readdirSync(directory).filter(file => file.endsWith('.json'));\n-\n- _.each(jsonPacks, file => {\n- var cardsInPack = require(path.join(PathToSubModulePacks, file));\n+ const cards = {};\n+ const cardFiles = fs.readdirSync(path.join(directory, 'Card'))\n+ .filter(file => file.endsWith('.json'));\n- _.each(cardsInPack, card => {\n- cards[card.code] = card;\n- });\n+ _.each(cardFiles, file => {\n+ let card = require(path.join(directory, 'Card', file));\n+ if(card.length !== 1) {\n+ throw new Error('Multiple card versions found');\n+ }\n+ cards[card[0].id] = card[0];\n});\nreturn cards;\n@@ -31,10 +29,10 @@ class DeckBuilder {\nvar cardCounts = {};\n_.each(cardLabels, label => {\nvar cardData = this.getCard(label);\n- if(cardCounts[cardData.code]) {\n- cardCounts[cardData.code].count++;\n+ if(cardCounts[cardData.id]) {\n+ cardCounts[cardData.id].count++;\n} else {\n- cardCounts[cardData.code] = {\n+ cardCounts[cardData.id] = {\ncount: 1,\ncard: cardData\n};\n@@ -43,28 +41,19 @@ class DeckBuilder {\nreturn {\nfaction: { value: faction },\n- drawCards: _.filter(cardCounts, cardCount => ['character', 'holding', 'attachment', 'event'].includes(cardCount.card.type)),\n- provinceCards: _.filter(cardCounts, cardCount => cardCount.card.type === 'province')\n+ conflictCards: _.filter(cardCounts, count => count.card.side === 'conflict'),\n+ dynastyCards: _.filter(cardCounts, count => count.card.side === 'dynasty'),\n+ provinceCards: _.filter(cardCounts, count => count.card.type === 'province'),\n+ stronghold: _.filter(cardCounts, count => count.card.type === 'stronghold')[0]\n};\n}\n- getCard(codeOrLabelOrName) {\n- if(this.cards[codeOrLabelOrName]) {\n- return this.cards[codeOrLabelOrName];\n- }\n-\n- var cardsByName = _.filter(this.cards, matchCardByNameAndPack(codeOrLabelOrName));\n-\n- if(cardsByName.length === 0) {\n- throw new Error(`Unable to find any card matching ${codeOrLabelOrName}`);\n- }\n-\n- if(cardsByName.length > 1) {\n- var matchingLabels = _.map(cardsByName, card => `${card.name} (${card.pack_code})`).join('\\n');\n- throw new Error(`Multiple cards match the name ${codeOrLabelOrName}. Use one of these instead:\\n${matchingLabels}`);\n+ getCard(id) {\n+ if(this.cards[id]) {\n+ return this.cards[id];\n}\n- return cardsByName[0];\n+ throw new Error(`Unable to find any card matching ${id}`);\n}\n}\n",
        "chatgpt_cot": "Remove redundant code, add new function for converting CMC to number, and update sort options for Mana Value Full."
    },
    {
        "org_diff": "diff --git a/serverjs/cubefn.js b/serverjs/cubefn.js @@ -46,7 +46,7 @@ async function generateShortId() {\nmax += 1;\nnewId = util.toBase36(max);\n- isGoodId = !util.has_profanity(newId) && !shortIds.includes(newId) && !urlAliases.includes(newId);\n+ isGoodId = !util.hasProfanity(newId) && !shortIds.includes(newId) && !urlAliases.includes(newId);\n}\nreturn newId;\n",
        "org_msg": "has_profanity -> hasProfanity",
        "sim_msg": "fixed private slate redirect issue",
        "sim_diff": "diff --git a/server.js b/server.js @@ -302,6 +302,7 @@ app.prepare().then(async () => {\nconst id = Utilities.getIdFromCookie(req);\nconst shouldViewerRedirect = await ViewerManager.shouldRedirect({ id });\nif (shouldViewerRedirect) {\n+ console.log(\"redirect\");\nreturn res.redirect(\n`/_${Strings.createQueryParams({\nscene: \"NAV_SLATE\",\n@@ -324,7 +325,10 @@ app.prepare().then(async () => {\nreturn res.redirect(\"/404\");\n}\n- if (!slate.data.public) {\n+ console.log(slate.data.public);\n+ console.log(slate.data.ownerId);\n+ console.log(id);\n+ if (!slate.data.public && slate.data.ownerId !== id) {\nreturn res.redirect(\"/403\");\n}\n@@ -391,7 +395,7 @@ app.prepare().then(async () => {\nreturn res.redirect(\"/404\");\n}\n- if (!slate.data.public) {\n+ if (!slate.data.public && slate.data.ownerId !== id) {\nreturn res.redirect(\"/403\");\n}\n",
        "chatgpt_cot": "\"Refactor generateShortId function to use camelCase for hasProfanity method and fix comparison logic for checking if newId is a good id.\""
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -45,11 +45,11 @@ const SHARD_AND_WEDGE_MAP = {\n};\nconst FOUR_COLOR_MAP = {\n- UBRG: 'Not-White',\n- WBRG: 'Not-Blue',\n- WURG: 'Not-Black',\n- WUBG: 'Not-Red',\n- WUBR: 'Not-Green',\n+ UBRG: 'Non-White',\n+ WBRG: 'Non-Blue',\n+ WURG: 'Non-Black',\n+ WUBG: 'Non-Red',\n+ WUBR: 'Non-Green',\n};\nconst ALL_CMCS = Array.from(Array(33).keys())\n@@ -75,7 +75,7 @@ const CARD_TYPES = [\nconst SINGLE_COLOR = ['White', 'Blue', 'Black', 'Red', 'Green'];\nconst GUILDS = ['Azorius', 'Dimir', 'Rakdos', 'Gruul', 'Selesnya', 'Orzhov', 'Izzet', 'Golgari', 'Boros', 'Simic'];\nconst SHARDS_AND_WEDGES = ['Bant', 'Esper', 'Grixis', 'Jund', 'Naya', 'Mardu', 'Temur', 'Abzan', 'Jeskai', 'Sultai'];\n-const FOUR_AND_FIVE_COLOR = ['Not-White', 'Not-Blue', 'Not-Black', 'Not-Red', 'Not-Green', 'Five Color'];\n+const FOUR_AND_FIVE_COLOR = ['Non-White', 'Non-Blue', 'Non-Black', 'Non-Red', 'Non-Green', 'Five Color'];\nconst ELO_DEFAULT = 1200;\n",
        "org_msg": "fix 4c sort labels",
        "sim_msg": "[Docs] Add blueGrey color colors",
        "sim_diff": "diff --git a/src/styles/colors.js b/src/styles/colors.js @@ -337,3 +337,16 @@ export const grey = {\nA700: '#616161',\ncontrastDefaultColor: 'dark',\n};\n+\n+export const blueGrey = {\n+ 50: '#eceff1',\n+ 100: '#cfd8dc',\n+ 200: '#b0bec5',\n+ 300: '#90a4ae',\n+ 400: '#78909c',\n+ 500: '#607d8b',\n+ 600: '#546e7a',\n+ 700: '#455a64',\n+ 800: '#37474f',\n+ 900: '#263238',\n+};\n",
        "chatgpt_cot": "Change color mapping from \"Not\" to \"Non\" and update color arrays to reflect the change for consistency and clarity."
    },
    {
        "org_diff": "diff --git a/routes/users_routes.js b/routes/users_routes.js @@ -4,6 +4,7 @@ const bcrypt = require('bcryptjs');\nconst passport = require('passport');\nconst mailer = require('nodemailer');\n+// eslint-disable-next-line import/no-unresolved\nconst emailconfig = require('../../cubecobrasecrets/email');\nconst util = require('../serverjs/util.js');\n",
        "org_msg": "Disable import checking for config.",
        "sim_msg": "routes/index.js linting complete",
        "sim_diff": "diff --git a/routes/index.js b/routes/index.js var fs = require(\"fs\");\nvar path = require(\"path\");\nvar log = require(\"../log\").logger(\"routes\");\n-var restify = require(\"restify\");\n-var util = require(\"../util\");\n-var authentication = require(\"../authentication\");\nvar config = require(\"../config\");\nvar getStaticServeFunction = require(\"../static\");\n@@ -12,13 +9,13 @@ module.exports = function (server) {\nvar routeDir = __dirname;\nvar files = fs.readdirSync(routeDir);\nfiles.forEach(function (file) {\n- filePath = path.resolve(\"./\", routeDir, file);\n+ var filePath = path.resolve(\"./\", routeDir, file);\nif (\npath.extname(filePath) == \".js\" &&\npath.basename(filePath) != \"index.js\"\n) {\ntry {\n- routes = require(filePath);\n+ var routes = require(filePath);\nif (typeof routes == \"function\") {\nroutes(server);\nlog.debug(' Loaded routes from \"' + filePath + '\"');\n",
        "chatgpt_cot": "Add import for email configuration to resolve eslint error in users_routes.js."
    },
    {
        "org_diff": "diff --git a/src/components/CardModal.js b/src/components/CardModal.js @@ -165,15 +165,15 @@ const CardModal = ({\n<span className=\"d-sm-none\">Remove</span>\n</Button>\n)}\n- <Button color=\"secondary\" href={card.details.scryfall_uri}>\n+ <Button color=\"secondary\" href={card.details.scryfall_uri} target=\"_blank\">\n<span className=\"d-none d-sm-inline\">View on Scryfall</span>\n<span className=\"d-sm-none\">Scryfall</span>\n</Button>\n- <Button color=\"secondary\" href={'/tool/card/' + card.cardID}>\n+ <Button color=\"secondary\" href={'/tool/card/' + card.cardID} target=\"_blank\">\n<span className=\"d-none d-sm-inline\">View card analytics</span>\n<span className=\"d-sm-none\">Analytics</span>\n</Button>\n- <Button color=\"secondary\" href={Affiliate.getTCGLink(card)}>\n+ <Button color=\"secondary\" href={Affiliate.getTCGLink(card)} target=\"_blank\">\nBuy\n</Button>\n{!disabled && (\n",
        "org_msg": "open card modal links in new tab",
        "sim_msg": "added numberoflines to eventcard",
        "sim_diff": "diff --git a/src/components/EventCard.js b/src/components/EventCard.js @@ -58,7 +58,7 @@ const EventCard = ({\n{timeDisplay}\n</Text>\n<View style={styles.eventNameContainer}>\n- <Text type=\"h3\" style={styles.eventName}>\n+ <Text type=\"h3\" style={styles.eventName} numberOfLines={2}>\n{name}\n</Text>\n</View>\n",
        "chatgpt_cot": "Add target=\"_blank\" attribute to all href links in CardModal for better user experience."
    },
    {
        "org_diff": "diff --git a/public/js/autocard.js b/public/js/autocard.js @@ -13,20 +13,6 @@ function getTagColorClass(tag) {\n}\n}\n-function getElementPosition(el) {\n- var l = 0,\n- t = 0;\n- while (el.offsetParent) {\n- l += el.offsetLeft;\n- t += el.offsetTop;\n- el = el.offsetParent;\n- }\n- return {\n- left: l,\n- top: t,\n- };\n-}\n-\nconst autocardEnterListeners = new Map();\nconst autocardLeaveListeners = new Map();\nfunction autocard_init(classname) {\n@@ -78,13 +64,17 @@ document.onmousemove = function(e) {\nif (rightPixelSpace > leftPixelSpace) {\n// display on right\n- autocardPopup.style.left = 5 + x_offset + 'px';\n+ autocardPopup.style.left = Math.max(self.pageXOffset, 5 + x_offset) + 'px';\nautocardPopup.style.right = null;\n} else {\n// display on left\n- autocardPopup.style.right = window.innerWidth + 5 - x_offset + 'px';\n+ autocardPopup.style.right = Math.max(window.innerWidth + 5 - x_offset, 0) + 'px';\nautocardPopup.style.left = null;\n}\n+ if (autocardPopup.offsetHeight > window.innerHeight) {\n+ autocardPopup.style.top = self.pageYOffset + 'px';\n+ autocardPopup.style.bottom = null;\n+ } else {\nif (bottomPixelSpace > topPixelSpace) {\n// display on bottom\nautocardPopup.style.top = 5 + y_offset + 'px';\n@@ -94,6 +84,7 @@ document.onmousemove = function(e) {\nautocardPopup.style.bottom = window.innerHeight + 5 - y_offset + 'px';\nautocardPopup.style.top = null;\n}\n+ }\n};\nconst autocardLoadListeners = {};\n",
        "org_msg": "Fix partially-off-screen cards.",
        "sim_msg": "[FIX] sap.m.TabStrip: focus navigation in the tabs works properly\nBCP:",
        "sim_diff": "diff --git a/src/sap.m/src/sap/m/TabStrip.js b/src/sap.m/src/sap/m/TabStrip.js @@ -23,6 +23,7 @@ sap.ui.define([\n'./TabStripRenderer',\n\"sap/base/Log\",\n\"sap/ui/thirdparty/jquery\",\n+ \"sap/ui/events/KeyCodes\",\n// jQuery Plugin \"control\"\n\"sap/ui/dom/jquery/control\",\n// jQuery Plugin \"scrollLeftRTL\"\n@@ -48,7 +49,8 @@ function(\nSelectListRenderer,\nTabStripRenderer,\nLog,\n- jQuery\n+ jQuery,\n+ KeyCodes\n) {\n\"use strict\";\n@@ -420,6 +422,13 @@ function(\nreturn bScrollNeeded;\n};\n+ TabStrip.prototype.onkeyup = function (oEvent){\n+ if (oEvent && oEvent.keyCode === KeyCodes.ARROW_LEFT || oEvent.keyCode === KeyCodes.ARROW_RIGHT) {\n+ var oTarget = jQuery(oEvent.target).control(0);\n+ this._scrollIntoView(oTarget, 500);\n+ }\n+ };\n+\nTabStrip.prototype._handleOverflowButtons = function() {\nvar oTabsDomRef = this.getDomRef(\"tabs\"),\noTabsContainerDomRef = this.getDomRef(\"tabsContainer\"),\n@@ -598,6 +607,8 @@ function(\nTabStrip.prototype._scrollIntoView = function (oItem, iDuration) {\nvar $tabs = this.$(\"tabs\"),\n$item = oItem.$(),\n+ iLeftButtonWidth = this.$(\"leftOverflowButtons\") ? this.$(\"leftOverflowButtons\").width() : 0,\n+ iRigtButtonWidth = this.$(\"rightOverflowButtons\") ? this.$(\"rightOverflowButtons\").width() : 0,\niTabsPaddingWidth = $tabs.innerWidth() - $tabs.width(),\niItemWidth = $item.outerWidth(true),\niItemPosLeft = $item.position().left - iTabsPaddingWidth / 2,\n@@ -607,22 +618,20 @@ function(\niNewScrollLeft = iScrollLeft;\n// check if item is outside of viewport\n- if (iItemPosLeft < 0 || iItemPosLeft > iContainerWidth - iItemWidth) {\n-\n+ if (iItemPosLeft < iLeftButtonWidth || iItemPosLeft + iRigtButtonWidth > iContainerWidth - iItemWidth) {\nif (this._bRtl && Device.browser.firefox) {\n- if (iItemPosLeft < 0) { // right side: make this the last item\n- iNewScrollLeft += iItemPosLeft + iItemWidth - iContainerWidth;\n+ if (iItemPosLeft > iLeftButtonWidth) { // right side: make this the last item\n+ iNewScrollLeft += iItemPosLeft + iItemWidth - iContainerWidth + iRigtButtonWidth;\n} else { // left side: make this the first item\n- iNewScrollLeft += iItemPosLeft;\n+ iNewScrollLeft += iItemPosLeft - iLeftButtonWidth;\n}\n} else {\n- if (iItemPosLeft < 0) { // left side: make this the first item\n- iNewScrollLeft += iItemPosLeft;\n+ if (iItemPosLeft < iLeftButtonWidth) { // left side: make this the first item\n+ iNewScrollLeft += iItemPosLeft - iRigtButtonWidth;\n} else { // right side: make this the last item\n- iNewScrollLeft += iItemPosLeft + iItemWidth - iContainerWidth;\n+ iNewScrollLeft += iItemPosLeft + iItemWidth - iContainerWidth + iLeftButtonWidth;\n}\n}\n-\n// store current scroll state to set it after re-rendering\nthis._iCurrentScrollLeft = iNewScrollLeft;\nthis._oScroller.scrollTo(iNewScrollLeft, 0, iDuration);\n",
        "chatgpt_cot": "Refactor autocard.js for better positioning and handling of popup display based on window size and content height. Fix potential display issues and improve user experience."
    },
    {
        "org_diff": "diff --git a/src/utils/Sort.js b/src/utils/Sort.js @@ -353,7 +353,7 @@ function getLabelsRaw(cube, sort) {\nreturn ['Gold', 'Hybrid', 'Phyrexian'];\n} else if (sort == 'Creature/Non-Creature') {\nreturn ['Creature', 'Non-Creature'];\n- } else if (['Price USD', 'Price USD Foil'].includes(sort)) {\n+ } else if (['Price', 'Price USD', 'Price USD Foil'].includes(sort)) {\nconst labels = [];\nfor (let i = 0; i <= price_buckets.length; i++) {\nlabels.push(price_bucket_label(i, '$'));\n@@ -663,7 +663,7 @@ export function cardGetLabels(card, sort) {\nreturn [];\n} else if (sort == 'Creature/Non-Creature') {\nreturn typeLine(card).toLowerCase().includes('creature') ? ['Creature'] : ['Non-Creature'];\n- } else if (sort == 'Price USD') {\n+ } else if (sort == 'Price USD' || sort == 'Price') {\nvar price = card.details.prices.usd ?? card.details.prices.usd_foil;\nif (price) {\n//fence post first and last term\n",
        "org_msg": "Fix price default sort",
        "sim_msg": "Fixing an issue caused by resolving conflicts before merging",
        "sim_diff": "diff --git a/vis/js/list.js b/vis/js/list.js @@ -104,7 +104,7 @@ list.drawList = function() {\nshow_list: config.localization[config.language].show_list,\nfilter_dropdown: config.filter_menu_dropdown,\nfilter_by_label: config.localization[config.language].filter_by_label,\n- items: config.localization[config.language].items\n+ items: config.localization[config.language].items,\ndropdown: config.sort_menu_dropdown,\nsort_by_label: config.localization[config.language].sort_by_label,\n});\n",
        "chatgpt_cot": "\"Fix compilation issue in Sort.js by adding 'Price' to the condition to resolve the compilation problem related to 'Price' in the Sort.js file.\""
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -344,7 +344,7 @@ class FilterCollapse extends Component {\nhandleReset() {\nthis.setState({ filterInput: '' });\n- this.props.setFilter([], '');\n+ this.props.setFilter(null, '');\n}\nrender() {\n",
        "org_msg": "Fix reset filter button.",
        "sim_msg": "fix (galleryContainer): apply layout styles over stateStyles",
        "sim_diff": "diff --git a/pro-gallery-renderer/src/components/gallery/galleryContainer.js b/pro-gallery-renderer/src/components/gallery/galleryContainer.js @@ -875,7 +875,7 @@ export class GalleryContainer extends React.Component {\ngetStyleParamsState() {\nlet wixStyles = {};\n- let stateStyles = Object.assign({}, this.props.styles || {}, this.props.behaviour || {}, this.newProps.styles || {}, this.newProps.behaviour || {}, window.styles || {}, window.behaviour || {});\n+ const stateStyles = Object.assign({}, this.props.styles || {}, this.props.behaviour || {}, this.newProps.styles || {}, this.newProps.behaviour || {}, window.styles || {}, window.behaviour || {});\nfunction canSet(wixParam, stateParam) {\n// wixStyles => Styles arrived directly from wix\n@@ -935,7 +935,7 @@ export class GalleryContainer extends React.Component {\nconsole.log('Using galleryType for defaults', wixStyles);\n}\n- stateStyles = Object.assign({}, this.getStyleByGalleryType(String(galleryLayoutV1), wixStyles.gallerySize), stateStyles); //legacy layouts\n+ Object.assign(stateStyles, this.getStyleByGalleryType(String(galleryLayoutV1), wixStyles.gallerySize)); //legacy layouts\nstateStyles.layoutsVersion = 1;\nconst selectedLayoutVars = ['galleryType', 'galleryThumbnailsAlignment', 'magicLayoutSeed', 'imageResize', 'isVertical', 'scrollDirection', 'enableInfiniteScroll'];\nstateStyles.selectedLayout = selectedLayoutVars.map(key => String(wixStyles[key])).join('|');\n@@ -944,7 +944,7 @@ export class GalleryContainer extends React.Component {\nif (utils.isVerbose()) { //todo yoshi\nconsole.log('Using galleryLayout for defaults', wixStyles);\n}\n- stateStyles = Object.assign({}, this.getStyleByLayout(wixStyles, galleryLayoutV2), stateStyles); //legacy layouts\n+ Object.assign(stateStyles, this.getStyleByLayout(wixStyles, galleryLayoutV2)); //legacy layouts\nconst selectedLayoutVars = ['galleryLayout', 'galleryThumbnailsAlignment', 'magicLayoutSeed', 'imageResize', 'isVertical', 'scrollDirection', 'enableInfiniteScroll'];\nstateStyles.selectedLayout = selectedLayoutVars.map(key => String(wixStyles[key])).join('|');\nstateStyles.layoutsVersion = 2;\n",
        "chatgpt_cot": "\"Refactor setFilter method to accept null instead of empty array\""
    },
    {
        "org_diff": "diff --git a/routes/tools_routes.js b/routes/tools_routes.js @@ -19,7 +19,7 @@ function matchingCards(filter) {\n}\nfunction makeFilter(filterText) {\n- if (filterText.trim() === '') {\n+ if (!filterText || filterText.trim() === '') {\nreturn { err: false, filter: [] };\n}\n@@ -68,11 +68,6 @@ function topCards(filter, res) {\n}\nrouter.get('/api/topcards', (req, res) => {\n- if (typeof req.query.f === 'undefined') {\n- res.sendStatus(400);\n- return;\n- }\n-\nconst { err, filter } = makeFilter(req.query.f);\nif (err) {\nres.sendStatus(400);\n",
        "org_msg": "Fix root link.",
        "sim_msg": "refactor: filter by header",
        "sim_diff": "diff --git a/lib/rules/rules.js b/lib/rules/rules.js @@ -728,9 +728,11 @@ function resolveMatchFilter(list) {\nif (index === -1 || !index || index === value.length - 1) {\nreturn;\n}\n+ var orgVal = value.substring(index + 1).toLowerCase();\nvalue = {\nkey: value.substring(0, index).toLowerCase(),\n- value: util.encodeURIComponent(value.substring(index + 1).toLowerCase())\n+ orgVal: orgVal,\n+ value: util.encodeURIComponent(orgVal)\n};\n}\nfilter = { not: not };\n@@ -825,7 +827,7 @@ function matchFilter(url, filter, options) {\n}\nif (filter.header && options.headers) {\nvar value = String(options.headers[filter.header.key] || '').toLowerCase();\n- result = value.indexOf(filter.header.value) !== -1;\n+ result = value.indexOf(filter.header.value) !== -1 || value.indexOf(filter.header.orgVal) !== -1;\n}\n}\nreturn result == null ? false : (filter.not ? !result : result);\n",
        "chatgpt_cot": "Refactor makeFilter to handle empty filterText, remove unnecessary check in topCards route."
    },
    {
        "org_diff": "diff --git a/src/pages/BrowsePackagesPage.js b/src/pages/BrowsePackagesPage.js @@ -45,7 +45,7 @@ const BrowsePackagesPage = ({ user, loginCallback }) => {\nconst [alerts, setAlerts] = useState([]);\nconst [page, setPage] = useQueryParam('p', 0);\nconst [filter, setFilter] = useQueryParam('f', '');\n- const [filterTemp, setFilterTemp] = useState(filter);\n+ const [filterTemp, setFilterTemp] = useState('');\nconst [sort, setSort] = useQueryParam('s', 'votes');\nconst [sortDirection, setSortDirection] = useQueryParam('d', '-1');\nconst [selectedTab, setSelectedTab] = useQueryParam('tab', '0');\n@@ -82,7 +82,7 @@ const BrowsePackagesPage = ({ user, loginCallback }) => {\n}\nreturn [];\n};\n- fetchData();\n+ fetchData().then(() => setFilterTemp(filter));\n}, [filter, page, sort, sortDirection, selectedTab, refresh, setRefresh]);\nreturn (\n",
        "org_msg": "set initial filterTemp properly",
        "sim_msg": "New package adding model",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -2629,8 +2629,7 @@ const _makePackageHtml = p => `\n</div>\n</div>\n`;\n-const _addPackageFromHash = async (dataHash, matrix) => {\n- const p = await XRPackage.download(dataHash);\n+const _addPackage = async (p, matrix) => {\nif (matrix) {\np.setMatrix(matrix);\n}\n@@ -2653,8 +2652,9 @@ const _bindPackage = (pE, pJ) => {\n_startPackageDrag(e, {name, dataHash, iconHash});\n});\nconst addButton = pE.querySelector('.add-button');\n- addButton.addEventListener('click', () => {\n- _addPackageFromHash(dataHash);\n+ addButton.addEventListener('click', async () => {\n+ const p = await XRPackage.download(dataHash);\n+ await _addPackage(p);\n});\nconst wearButton = pE.querySelector('.wear-button');\nwearButton.addEventListener('click', () => {\n@@ -2714,7 +2714,8 @@ pe.domElement.addEventListener('drop', async e => {\nnew THREE.Vector3(1, 1, 1)\n)\n- await _addPackageFromHash(dataHash, localMatrix);\n+ const p = await XRPackage.download(dataHash);\n+ await _addPackage(p, localMatrix);\n}\n}\n});\n@@ -3157,8 +3158,7 @@ const _handleUrl = async u => {\n.then(res => res.arrayBuffer());\nconst p = new XRPackage(new Uint8Array(arrayBuffer));\n- await p.waitForLoad();\n- await pe.add(p);\n+ await _addPackage(p);\n} else if (q.i) { // index\nconst metadataHash = await contract.methods.getMetadata(parseInt(q.i, 10), 'hash').call();\nconst metadata = await fetch(`${apiHost}/${metadataHash}`)\n@@ -3169,7 +3169,7 @@ const _handleUrl = async u => {\n.then(res => res.arrayBuffer());\nconst p = new XRPackage(new Uint8Array(arrayBuffer));\n- await pe.add(p);\n+ await _addPackage(p);\n} else if (q.u) { // url\nconst arrayBuffer = await fetch(q.u)\n.then(res => res.arrayBuffer());\n@@ -3178,7 +3178,7 @@ const _handleUrl = async u => {\nawait pe.add(p);\n} else if (q.h) { // hash\nconst p = await XRPackage.download(q.h);\n- await pe.add(p);\n+ await _addPackage(p);\n} else {\nconst w = q.w || null;\n_enterWorld(w);\n",
        "chatgpt_cot": "\"Fix filterTemp state initialization issue in BrowsePackagesPage.js\""
    },
    {
        "org_diff": "diff --git a/src/components/ChangelistContext.js b/src/components/ChangelistContext.js @@ -13,13 +13,13 @@ export const ChangelistContextProvider = ({ cubeID, setOpenCollapse, initialChan\nconst removeInputRef = useRef();\nuseEffect(() => {\n- if (Query.get('updated', false) === 'true') {\n- Query.del('updated');\n- setChanges([]);\n+ if (noSave || !cubeID) {\nreturn;\n}\n- if (typeof cubeID === 'undefined') {\n+ if (Query.get('updated', false) === 'true') {\n+ Query.del('updated');\n+ setChanges([]);\nreturn;\n}\n",
        "org_msg": "Fix interaction of stored changes + bulk upload page.",
        "sim_msg": "[Site] fix components changelog",
        "sim_diff": "diff --git a/website/client/components/ChangelogByComponent.js b/website/client/components/ChangelogByComponent.js @@ -37,14 +37,14 @@ class ChangelogByComponent extends React.Component {\nswitch (section.props.children) {\ncase 'Added':\nlabel = (\n- <TagStyled size=\"l\" theme=\"#00BC98\">\n+ <TagStyled size=\"l\" theme=\"#9ef2c9\" color=\"#007c65\">\n{section}\n</TagStyled>\n);\nbreak;\ncase 'Fixed':\nlabel = (\n- <TagStyled size=\"l\" theme=\"#0070CC\">\n+ <TagStyled size=\"l\" theme=\"#c4e5fe\" color=\"#006dca\">\n{section}\n</TagStyled>\n);\n@@ -53,7 +53,7 @@ class ChangelogByComponent extends React.Component {\ncase 'Removed':\ncase 'Deprecated':\nlabel = (\n- <TagStyled size=\"l\" theme=\"#FF622D\">\n+ <TagStyled size=\"l\" theme=\"#ffdca2\" color=\"#c33909\">\n{section}\n</TagStyled>\n);\n@@ -61,7 +61,7 @@ class ChangelogByComponent extends React.Component {\ncase 'BREAK':\ncase 'Security':\nlabel = (\n- <TagStyled size=\"l\" theme=\"#F71939\">\n+ <TagStyled size=\"l\" theme=\"#ffd7df\" color=\"#d1002f\">\n{section}\n</TagStyled>\n);\n",
        "chatgpt_cot": "\"Fix issue with handling updated query parameter and setChanges\""
    },
    {
        "org_diff": "diff --git a/package.json b/package.json \"private\": true,\n\"main\": \"app.js\",\n\"scripts\": {\n- \"beautify\": \"prettier --write {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js' webpack.'*'.js\",\n+ \"beautify\": \"npm run prettier\",\n+ \"prettier\": \"prettier --write {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js' webpack.'*'.js\",\n\"lint\": \"prettier --check {__tests__,fixtures,models,one_shot_scripts,public,routes,serverjs,src,views}'/**/*.js'\",\n\"nodemon\": \"nodemon --ignore src --ignore public\",\n\"webpack-dev-server\": \"webpack-dev-server --config webpack.dev.js\",\n",
        "org_msg": "Add \"prettier\" alias for npm script.",
        "sim_msg": "Do not lint layout.worker.bundled.js",
        "sim_diff": "diff --git a/package.json b/package.json \"prepare\": \"lerna run --stream --sort prepublishOnly\",\n\"prettier-comment\": \"https://github.com/yarnpkg/yarn/issues/6300\",\n\"prettier\":\n- \"./node_modules/prettier/bin-prettier.js --write '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n+ \"./node_modules/prettier/bin-prettier.js --write '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(layout.worker.bundled|react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n\"prettier-lint\":\n- \"./node_modules/prettier/bin-prettier.js --list-different '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n+ \"./node_modules/prettier/bin-prettier.js --list-different '{.,scripts}/*.{js,json,md,ts,tsx}' 'packages/*/{src,demo/src}/**/!(layout.worker.bundled|react-vis).{css,js,json,md,ts,tsx}' 'packages/*/*.{css,js,json,md,ts,tsx}'\",\n\"test\": \"lerna run test\",\n\"tsc-lint\": \"tsc\",\n\"tsc-lint-debug\": \"tsc --listFiles\",\n",
        "chatgpt_cot": "Refactor beautify script in package.json for better organization and readability. Updated prettier command and added npm run prettier script."
    },
    {
        "org_diff": "diff --git a/src/components/AnalyticsTable.js b/src/components/AnalyticsTable.js @@ -31,7 +31,7 @@ const HeaderCell = ({ children, ...props }) => (\n</th>\n);\nconst RegularCell = ({ children, ...props }) => <td {...props}>{children}</td>;\n-RegularCell.propTypes = { children: PropTypes.shape({}).isRequired };\n+RegularCell.propTypes = { children: PropTypes.node.isRequired };\nHeaderCell.propTypes = { children: PropTypes.shape({}).isRequired };\nconst AnalyticsTable = ({ data }) => (\n",
        "org_msg": "Use the correct propTypes for children.",
        "sim_msg": "Fix table cell proptype",
        "sim_diff": "diff --git a/src/specimens/Table.js b/src/specimens/Table.js @@ -53,7 +53,7 @@ const Cell = ({ value, style }) => {\n};\nCell.propTypes = {\n- value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n+ value: PropTypes.node,\nstyle: PropTypes.object.isRequired\n};\n@@ -65,7 +65,11 @@ HeadingCell.propTypes = Cell.propTypes;\nclass Table extends React.Component {\nrender() {\n- const { columns, rows, catalog: { theme } } = this.props;\n+ const {\n+ columns,\n+ rows,\n+ catalog: { theme }\n+ } = this.props;\nconst { cell, container, table, head, tableRow } = getStyle(theme);\nconst tableKeys = columns\n",
        "chatgpt_cot": "Update PropTypes for RegularCell to fix prop type validation issue."
    },
    {
        "org_diff": "diff --git a/serverjs/cards.js b/serverjs/cards.js @@ -75,12 +75,12 @@ function loadJSONFile(filename, attribute) {\nfunction registerFileWatcher(filename, attribute) {\nfs.watchFile(filename, (curr, prev) => {\n- console.log('File Changed: imagedict');\n+ console.log('File Changed: ' + filename);\nloadJSONFile(filename, attribute)\n});\n}\n-function initializeCardDb(dataRoot) {\n+function initializeCardDb(dataRoot, skipWatchers) {\nif (dataRoot === undefined) {\ndataRoot = \"private\";\n}\n@@ -99,8 +99,10 @@ function initializeCardDb(dataRoot) {\nfilepath = dataRoot + '/' + filename;\nattribute = fileToAttribute[filename];\npromises.push(loadJSONFile(filepath, attribute));\n+ if (skipWatchers !== true) {\nregisterFileWatcher(filepath, attribute);\n}\n+ }\nreturn Promise.all(promises);\n}\n",
        "org_msg": "make file watcher registration optional in initcarddb",
        "sim_msg": "Update location of card images",
        "sim_diff": "diff --git a/server/fetchdata.js b/server/fetchdata.js @@ -34,7 +34,7 @@ request.get(apiUrl + 'cards', function(error, res, body) {\ncards.forEach(function(card) {\nvar imagePath = path.join(imageDir, card.id + '.jpg');\nvar imagePack = card.pack_cards[0].pack.id;\n- var imagesrc = 'bundles/card_images/' + imagePack + '/';\n+ var imagesrc = 'static/cards/' + imagePack + '/';\nif(imagesrc && !fs.existsSync(imagePath)) {\n",
        "chatgpt_cot": "Fix file watcher logging and add option to skip watchers in initializeCardDb function in cards.js."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js var canEdit = $('#edittoken').val();\n-var listGranularity = 50;\n-var listPosition = 0;\nvar changes = [];\n-var sorts = [];\n-var filters = [];\n-var show_tag_colors = $('#hideTagColors').val() !== 'true';\n-var urlFilterText = '';\nfunction getCsrfToken() {\nconst meta = document.querySelector('meta[name=\"csrf-token\"]');\n",
        "org_msg": "Delete more dead code.",
        "sim_msg": "Add function to parse URL for a post id",
        "sim_diff": "diff --git a/lib/common.js b/lib/common.js -/* =====================\n+/**\n* jQuery Helper Plugins\n- * ===================== */\n+ */\njQuery.getCachedScript = function(url, callback) {\nreturn $.ajax({\nurl: url,\n@@ -127,4 +127,19 @@ function hasInvalidIds() {\n+/**\n+ * Parse URL for a post id\n+ */\n+function getPostId(url) {\n+ const a = url.match(/#\\d+$/g);\n+ if(a.length) return a[0].replace(/\\D/g, '');\n+\n+ const b = url.match(/\\/\\d+\\/?/g);\n+ if(b.length) return b[b.length - 1].replace(/\\D/g, '');\n+\n+ return null;\n+}\n+\n+\n+\n// EOF\n",
        "chatgpt_cot": "Remove unused variables and update csrf token retrieval method in editcube.js."
    },
    {
        "org_diff": "diff --git a/public/js/editcube.js b/public/js/editcube.js @@ -153,7 +153,7 @@ if (canEdit) {\nupdated.type_line = val;\n}\nval = [];\n- ['W', 'U', 'B', 'R', 'G'].forEach(function(color, index) {\n+ ['W', 'U', 'B', 'R', 'G', 'C'].forEach(function(color, index) {\nif ($('#groupContextModalCheckbox' + color).prop('checked')) {\nval.push(color);\n}\n",
        "org_msg": "re-add missing C",
        "sim_msg": "Thing object rendering debugging",
        "sim_diff": "diff --git a/edit.js b/edit.js @@ -59,6 +59,7 @@ const redColorHex = new THREE.Color(0xef5350).multiplyScalar(2).getHex();\nconst baseHeight = PARCEL_SIZE/2-10;\nconst thingTextureSize = 4096;\n+const objectTextureSize = 512;\nconst localVector = new THREE.Vector3();\nconst localVector2 = new THREE.Vector3();\n@@ -2807,12 +2808,53 @@ const geometryWorker = (() => {\nconst thingTexture = new THREE.DataTexture(\nnull,\n- thingTextureSize, thingTextureSize,\n- THREE.RGBAFormat, THREE.UnsignedByteType, THREE.UVMapping, THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping, THREE.NearestFilter, THREE.NearestFilter\n+ thingTextureSize, thingTextureSize/* ,\n+ THREE.RGBAFormat, THREE.UnsignedByteType, THREE.UVMapping, THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping, THREE.NearestFilter, THREE.NearestFilter */\n);\n- const material = new THREE.MeshBasicMaterial({\n- color: 0xFFFFFF,\n+ const material = new THREE.ShaderMaterial({\n+ uniforms: {\n+ map: {\n+ type: 't',\n+ value: thingTexture,\n+ needsUpdate: true,\n+ },\n+ },\n+ vertexShader: `\\\n+ precision highp float;\n+ precision highp int;\n+\n+ attribute float atlasUv;\n+ // attribute float skyLight;\n+ // attribute float torchLight;\n+\n+ varying vec2 vUv;\n+ // varying float vSkyLight;\n+ // varying float vTorchLight;\n+\n+ void main() {\n+ vUv = (atlasUv + uv) * ${(objectTextureSize/thingTextureSize).toFixed(8)};\n+ vec3 p = position;\n+ gl_Position = projectionMatrix * modelViewMatrix * vec4(p, 1.0);\n+ // vSkyLight = skyLight/8.0;\n+ // vTorchLight = torchLight/8.0;\n+ }\n+ `,\n+ fragmentShader: `\\\n+ precision highp float;\n+ precision highp int;\n+\n+ uniform sampler2D map;\n+ varying vec2 vUv;\n+ // varying float vSkyLight;\n+ // varying float vTorchLight;\n+\n+ void main() {\n+ gl_FragColor = texture2D(map, vUv);\n+ }\n+ `,\n+ side: THREE.DoubleSide,\n+ transparent: true\n});\nconst mesh = new THREE.Mesh(geometry, [material]);\nmesh.frustumCulled = false;\n@@ -2842,7 +2884,7 @@ const geometryWorker = (() => {\nrenderer.geometries.update(geometry);\n};\nmesh.updateTexture = data => {\n- thingTexture.image = data;\n+ thingTexture.image.data = data;\nthingTexture.needsUpdate = true;\n/* const canvas = document.createElement('canvas'); // XXX\n",
        "chatgpt_cot": "Add color 'C' to color selection in editcube.js for group context modal checkboxes."
    },
    {
        "org_diff": "diff --git a/src/components/FilterCollapse.js b/src/components/FilterCollapse.js @@ -76,8 +76,8 @@ const AdvancedFilterModal = ({ isOpen, toggle, apply, values, onChange, ...props\n<InputGroupText>Status</InputGroupText>\n</InputGroupAddon>\n<Input type=\"select\" name=\"status\" value={values.status} onChange={onChange}>\n- {['', '\\\"Not Owned\\\"', 'Ordered', 'Owned', '\\\"Premium Owned\\\"'].map(status =>\n- <option key={ status }>{status.replace(/[\"\"]+/g, '')}</option>\n+ {['', 'Not Owned', 'Ordered', 'Owned', 'Premium Owned'].map(status =>\n+ <option key={ status }>{status}</option>\n)}\n</Input>\n</InputGroup>\n@@ -131,6 +131,10 @@ class FilterCollapse extends Component {\nconst tokens = [];\nfor (const name of allFields) {\nif (this.state[name]) {\n+ if (name == \"status\")\n+ {\n+ this.state[name] = \"\\\"\" + this.state[name] + \"\\\"\";\n+ }\nconst op = numFields.includes(name) ? (this.state[name + 'Op'] || '=') : ':';\ntokens.push(name + op + this.state[name]);\n}\n",
        "org_msg": "Change the fix into the apply",
        "sim_msg": "[Site] update example for Select filtering",
        "sim_diff": "diff --git a/website/docs/components/select/examples/filtering.js b/website/docs/components/select/examples/filtering.js @@ -16,7 +16,14 @@ export default () => {\n<Select placeholder=\"Select value\">\n<Select.Trigger />\n<Select.Popper>\n- <InputSearch value={filter} onChange={setFilter} placeholder=\"Search\" />\n+ <InputSearch\n+ value={filter}\n+ onChange={setFilter}\n+ placeholder=\"Search\"\n+ onKeyDown={(e) => {\n+ e.key === ' ' && e.stopPropagation();\n+ }}\n+ />\n<Select.List hMax={'224px'}>\n{filteredOptions.length ? (\nfilteredOptions.map(({ value }) => (\n",
        "chatgpt_cot": "\"Fix formatting and add quotes to status in FilterCollapse.js\""
    },
    {
        "org_diff": "diff --git a/views/layout.pug b/views/layout.pug @@ -27,7 +27,8 @@ html\nscript(src='/jquery-ui/jquery-ui.min.js')\nbody\nnav.navbar.navbar-expand-md.navbar-dark.bg-dark\n- .text-truncate\n+ .d-flex.flex-row.flex-nowrap.justify-content-between(style='flex: 1 1 auto; min-width: 0')\n+ .overflow-hidden\na(href='/')\nimg(src=\"/content/banner.png\" style='height: 45px; margin: 0 0' alt=\"Cube Cobra: a site for Magic: the Gathering Cubing\")\nbutton.navbar-toggler(type='button', data-toggle='collapse', data-target='#navbar', aria-controls='navbar', aria-expanded='false', aria-label='Toggle navigation')\n",
        "org_msg": "Clip logo on small screens.",
        "sim_msg": "Swapped 3.3.7, 4.0.0-beta posistions, added info panel",
        "sim_diff": "diff --git a/views/index.pug b/views/index.pug @@ -2,11 +2,11 @@ extends layout\nblock content\nh2.text-center=title\n- h3.text-center='v' + config.bootstrap4[0].version\n+ h3.text-center='v' + config.bootstrap[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].stylesheet\n- - var sri = config.bootstrap4[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].stylesheet\n+ - var sri = config.bootstrap[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -20,9 +20,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap4[0].javascript\n- - var sri = config.bootstrap4[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap[0].javascript\n+ - var sri = config.bootstrap[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n@@ -35,12 +35,21 @@ block content\nspan.help-block Click to copy\ninclude _partials/jscode.pug\n+ hr\n+ .panel.panel-info\n+ .panel-heading\n+ h3.panel-title Info\n+ .panel-body\n+ | Bootstrap 4 is currently in Beta release and should be treated as such. For details check out\n+ a(href='https://blog.getbootstrap.com/2017/08/10/bootstrap-4-beta/', target='_blank', rel='noopener').\n+ the Bootstrap 4 Beta announcement\n+ | .\n- h3.text-center='v' + config.bootstrap[0].version\n+ h3.text-center='v' + config.bootstrap4[0].version\n.well\n- - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].stylesheet\n- - var sri = config.bootstrap[0].stylesheetSri\n+ - var name = 'quickstartCSS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].stylesheet\n+ - var sri = config.bootstrap4[0].stylesheetSri\n- var formId = name + '_form'\n.form-group\n@@ -54,9 +63,9 @@ block content\ninclude _partials/csscode.pug\n- - var name = 'quickstartJS'.toLowerCase() + config.bootstrap[0].version.replace(/\\./g, '_')\n- - var file = config.bootstrap[0].javascript\n- - var sri = config.bootstrap[0].javascriptSri\n+ - var name = 'quickstartJS'.toLowerCase() + config.bootstrap4[0].version.replace(/\\./g, '_')\n+ - var file = config.bootstrap4[0].javascript\n+ - var sri = config.bootstrap4[0].javascriptSri\n- var formId = name + '_form'\n.form-group\n",
        "chatgpt_cot": "Update layout.pug to fix navbar display issue and improve responsiveness. Added flexbox classes to navbar for better alignment and overflow handling."
    },
    {
        "org_diff": "diff --git a/src/pages/MarkdownPage.js b/src/pages/MarkdownPage.js @@ -741,7 +741,7 @@ const MarkdownPage = ({ user, loginCallback }) => (\n<Card>\n<CardHeader>Result</CardHeader>\n<CardBody>\n- <MagicMarkdown markdown={`>>> Centered Image: [[!Hexdrinker]] <<<`} />\n+ <MagicMarkdown markdown={`>>> Centered Card: [[!Hexdrinker]] <<<`} />\n</CardBody>\n</Card>\n</Col>\n",
        "org_msg": "Fixed typo in markdown docs",
        "sim_msg": "allow yaml frontmatter parsing",
        "sim_diff": "diff --git a/src/components/Widgets/Markdown/unified.js b/src/components/Widgets/Markdown/unified.js @@ -446,11 +446,6 @@ const remarkImagesToText = () => {\nexport const markdownToRemark = markdown => {\nconst parsed = unified()\n.use(markdownToRemarkPlugin, { fences: true, pedantic: true, footnotes: true, commonmark: true })\n- .use(function() {\n- const { blockMethods } = this.Parser.prototype;\n- // Remove the yaml tokenizer, as the rich text editor doesn't support frontmatter\n- blockMethods.splice(blockMethods.indexOf('yamlFrontMatter'), 1);\n- })\n.parse(markdown);\nconst result = unified()\n",
        "chatgpt_cot": "Update MagicMarkdown to center card instead of image on MarkdownPage."
    },
    {
        "org_diff": "diff --git a/serverjs/updatecards.js b/serverjs/updatecards.js @@ -191,7 +191,7 @@ const specialCaseCardsList = {\n],\n\"Jace, Vryn's Prodigy\": [\n{\n- tokenId: '458e37b1-a849-41ae-b63c-3e09ffd814e4'\n+ tokenId: '458e37b1-a849-41ae-b63c-3e09ffd814e4',\n},\n],\n\"Legion's Landing\": [\n",
        "org_msg": "Beautiful tokenId line\nfixes Ran beautifier to clear up build error",
        "sim_msg": "Add ZOMB to the token list",
        "sim_diff": "diff --git a/token-list/tokenlist.json b/token-list/tokenlist.json {\n\"name\": \"DeFi Token List\",\n- \"timestamp\": \"2020-10-12T04:36:40.310Z\",\n+ \"timestamp\": \"2020-10-12T04:45:20.788Z\",\n\"version\": {\n\"major\": 1,\n- \"minor\": 5858,\n+ \"minor\": 5859,\n\"patch\": 0\n},\n\"keywords\": [\n\"symbol\": \"yCRAFT\",\n\"address\": \"0x48b3EE9F06EaFDd61eAF7d044d5E737de6fb4dbF\",\n\"decimals\": 18\n+ },\n+ {\n+ \"chainId\": 1,\n+ \"name\": \"Antique Zombie Shards\",\n+ \"symbol\": \"ZOMB\",\n+ \"address\": \"0x78175901e9B04090Bf3B3D3cB7f91CA986fb1aF6\",\n+ \"decimals\": 18\n}\n]\n}\n\\ No newline at end of file\n",
        "chatgpt_cot": "Add missing comma in tokenId for 'Jace, Vryn's Prodigy' in updatecards.js."
    },
    {
        "org_diff": "diff --git a/routes/cube_routes.js b/routes/cube_routes.js @@ -160,9 +160,7 @@ router.get('/clone/:id', async (req, res) => {\nreq.flash('success', 'Cube Cloned');\nreturn res.redirect('/cube/overview/' + cube.shortID);\n} catch (err) {\n- console.error(err);\n- req.flash('danger', err);\n- return res.redirect('/cube/list/' + req.params.id);\n+ util.handleRouteError(res, err, '/cube/list/' + req.params.id);\n}\n});\n@@ -354,11 +352,6 @@ router.post(\nrouter.post('/feature/:id', ensureAuth, async (req, res) => {\ntry {\n- if (!req.user._id) {\n- req.flash('danger', 'Not Authorized');\n- return res.redirect('/cube/overview/' + req.params.id);\n- }\n-\nconst user = await User.findById(req.user._id);\nif (!util.isAdmin(user)) {\nreq.flash('danger', 'Not Authorized');\n@@ -377,43 +370,31 @@ router.post('/feature/:id', ensureAuth, async (req, res) => {\nreq.flash('success', 'Cube updated successfully.');\nreturn res.redirect('/cube/overview/' + req.params.id);\n} catch (err) {\n- req.flash('danger', 'Server Error');\n- return res.redirect('/cube/overview/' + req.params.id);\n+ util.handleRouteError(res, err, '/cube/overview/' + req.params.id);\n}\n});\n-router.post('/unfeature/:id', ensureAuth, function(req, res) {\n- if (!req.user._id) {\n- req.flash('danger', 'Not Authorized');\n- res.redirect('/cube/overview/' + req.params.id);\n- } else {\n- User.findById(req.user._id, function(err, user) {\n+router.post('/unfeature/:id', ensureAuth, async (req, res) => {\n+ try {\n+ const user = await User.findById(req.user._id);\nif (!util.isAdmin(user)) {\nreq.flash('danger', 'Not Authorized');\n- res.redirect('/cube/overview/' + req.params.id);\n- } else {\n- Cube.findOne(build_id_query(req.params.id), function(err, cube) {\n- if (err) {\n- req.flash('danger', 'Server Error');\n- res.redirect('/cube/overview/' + req.params.id);\n- } else if (!cube) {\n+ return res.redirect('/cube/overview/' + req.params.id);\n+ }\n+\n+ const cube = await Cube.findOne(build_id_query(req.params.id));\n+ if (!cube) {\nreq.flash('danger', 'Cube not found');\n- res.redirect('/cube/overview/' + req.params.id);\n- } else {\n+ return res.redirect('/cube/overview/' + req.params.id);\n+ }\n+\ncube.isFeatured = false;\n- cube.save(function(err) {\n- if (err) {\n- req.flash('danger', 'Server Error');\n- res.redirect('/cube/overview/' + req.params.id);\n- } else {\n+ await cube.save();\n+\nreq.flash('success', 'Cube updated successfully.');\n- res.redirect('/cube/overview/' + req.params.id);\n- }\n- });\n- }\n- });\n- }\n- });\n+ return res.redirect('/cube/overview/' + req.params.id);\n+ } catch (err) {\n+ util.handleRouteError(res, err, '/cube/overview/' + req.params.id);\n}\n});\n",
        "org_msg": "Revised feature/unfeature routes",
        "sim_msg": "Rename 'protected' middleware to 'secured'",
        "sim_diff": "diff --git a/articles/quickstart/webapp/nodejs/01-login.md b/articles/quickstart/webapp/nodejs/01-login.md @@ -170,15 +170,15 @@ This tutorial implements logout by closing the local user session. After logging\n### Middleware to protect routes\n-Create a `protected` middleware to protect routes and ensure they are only accessible if logged in.\n+Create a `secured` middleware to protect routes and ensure they are only accessible if logged in.\nIf the user is not logged in, the requested route will be stored in the session and the user will be redirected to the login page. Upon successful login, the user will be redirected to the previously requested URL (see callback route above).\n```js\n-// lib/middleware/protected.js\n+// lib/middleware/secured.js\nmodule.exports = function() {\n- return function protected(req, res, next) {\n+ return function secured(req, res, next) {\nif (req.user) { return next(); }\nreq.session.returnTo = req.originalUrl;\nres.redirect('/login');\n@@ -188,17 +188,17 @@ module.exports = function() {\n### Create the user profile route\n-The `/user` route (the user's profile) should only be accessible if the user is logged in. Use the protected middleware to secure the route.\n+The `/user` route (the user's profile) should only be accessible if the user is logged in. Use the secured middleware to secure the route.\n```js\n// routes/users.js\nvar express = require('express');\n-var protected = require('../lib/middleware/protected');\n+var secured = require('../lib/middleware/secured');\nvar router = express.Router();\n/* GET user profile. */\n-router.get('/user', protected(), function(req, res, next) {\n+router.get('/user', secured(), function(req, res, next) {\nconst { _raw, _json, ...userProfile } = req.user;\nres.render('user', {\nuserProfile: JSON.stringify(userProfile, null, 2),\n@@ -309,6 +309,6 @@ block content\n## See it in action\n-Install the dependencies, start your app and point your browser to [http://localhost:3000](http://localhost:3000). Follow the **Log In** link to log in or sign up to your Auth0 tenant. Upon successful login or signup, you should be redirected to the user's profile page.\n+Install the dependencies, svtart your app and point your browser to [http://localhost:3000](http://localhost:3000). Follow the **Log In** link to log in or sign up to your Auth0 tenant. Upon successful login or signup, you should be redirected to the user's profile page.\n![login page](/media/articles/web/hosted-login.png)\n",
        "chatgpt_cot": "Refactor error handling in cube_routes.js, using util.handleRouteError for consistency and readability, improving code maintainability and reducing duplication."
    },
    {
        "org_diff": "diff --git a/app.js b/app.js @@ -63,8 +63,6 @@ if (process.env.NODE_ENV !== 'production') {\nwinston.info(`Logging to ${errorFile.name} and ${combinedFile.name}`);\n-carddb.initializeCardDb();\n-\n// Connect db\nmongoose.connect(mongosecrets.connectionString, {\nuseCreateIndex: true,\n@@ -200,7 +198,9 @@ schedule.scheduleJob('0 0 * * *', () => {\nupdatedb.updateCardbase();\n});\n-// Start server\n+// Start server after carddb is initialized.\n+carddb.initializeCardDb().then(() => {\nhttp.createServer(app).listen(5000, 'localhost', () => {\n- winston.info('server started on port 5000...');\n+ winston.info('Server started on port 5000...');\n+ });\n});\n",
        "org_msg": "Start app only when carddb initialized.",
        "sim_msg": "fix: show 7 accounts per page",
        "sim_diff": "diff --git a/src/common/app/index.js b/src/common/app/index.js @@ -292,8 +292,8 @@ const loadHDWalletsOperation = (page = 0) => async (dispatch, getState) => {\ntry {\nconst wallets = await walletService.getHDWalletAccounts(\nselectSeed(getState()),\n- page * 10,\n- 10\n+ page * 6,\n+ 6\n);\nawait dispatch(appActions.setHardwareWalletsAction(wallets));\nawait dispatch(appActions.setWalletType('local'));\n",
        "chatgpt_cot": "\"Fix server start after carddb initialization, remove redundant method call, and update logging message for server start.\""
    },
    {
        "org_diff": "diff --git a/routes/root.js b/routes/root.js @@ -324,6 +324,10 @@ router.get('/search/:id', (req, res) => {\nlet page = parseInt(rawSplit[1], 10);\nlet query = {};\nconst terms = [];\n+\n+ function regexEscape(input) {\n+ return input.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\n+ }\nrawQueries.forEach((searchExpression) => {\nlet field;\nlet filter;\n@@ -332,11 +336,12 @@ router.get('/search/:id', (req, res) => {\nif (searchExpression.includes('=')) {\n[field, filter] = searchExpression.split('=');\n- searchRegex = new RegExp(`^${filter}$`, 'i');\n+ const escapedFilter = regexEscape(filter);\n+ searchRegex = new RegExp(`^${escapedFilter}$`, 'i');\nexpressionTerm = 'is exactly';\n} else if (searchExpression.includes('~')) {\n[field, filter] = searchExpression.split('~');\n- searchRegex = new RegExp(filter, 'i');\n+ searchRegex = new RegExp(regexEscape(filter), 'i');\nexpressionTerm = 'contains';\n}\n",
        "org_msg": "255 Escape special characters used in regex",
        "sim_msg": "Improve term highlighting matches and query term detection",
        "sim_diff": "diff --git a/vis/js/io.js b/vis/js/io.js @@ -411,8 +411,8 @@ IO.prototype = {\nhighlightTerms: function(full_string, term_array) {\nlet result_string = full_string;\nfor (let term of term_array) {\n- let re = new RegExp(\"(^|\\\\s)(\" + term + \")(\\\\s|$)\" ,\"gi\");\n- result_string = result_string.replace(re, \" <span class=\\\"query_term_highlight\\\">$2</span> \");\n+ let re = new RegExp(\"\\\\b(\" + term + \")\\\\b\" ,\"gi\");\n+ result_string = result_string.replace(re, \" <span class=\\\"query_term_highlight\\\">$1</span>\");\n}\nreturn result_string;\n},\n@@ -436,7 +436,7 @@ IO.prototype = {\n//Remove phrases, and, or, +, -, (, ) from query string\nlet query_wt_phrases = full_query.replace(match_query, \" \");\n- let query_wt_rest = query_wt_phrases.replace(/(^|\\s)and\\s/g, \" \").replace(/(^|\\s)or\\s/g, \" \").replace(/(^|\\s)-/g, \" \").replace(/\\+|\\(|\\)/g, \" \")\n+ let query_wt_rest = query_wt_phrases.replace(/\\band\\b|\\bor\\b|\\(|\\)/g, \"\").replace(/(^|\\s)-|\\+/g, \" \");\nterm_array = term_array.concat(query_wt_rest.trim().replace(/\\s+/g, \" \").split(\" \"));\n",
        "chatgpt_cot": "Add regexEscape function for escaping special characters in search filter, improving search functionality and preventing regex errors."
    },
    {
        "org_diff": "diff --git a/src/components/CubeOverviewModal.js b/src/components/CubeOverviewModal.js @@ -131,6 +131,32 @@ class CubeOverviewModal extends Component {\n}\n}))\nbreak;\n+ case 'category':\n+ var value = e.target.value;\n+ this.setState(prevState => ({\n+ cube: {\n+ ...prevState.cube,\n+ categoryOverride: value,\n+ }\n+ }))\n+ break;\n+ case 'category_prefix':\n+ var value = e.target.checked;\n+ var id = e.target.value;\n+ var prefixes = this.state.cube.categoryPrefixes;\n+\n+ if(prefixes.includes(id) && !value) {\n+ prefixes = prefixes.filter(function(e) { return e !== id });\n+ } else if(!prefixes.includes(id) && value) {\n+ prefixes.push(id);\n+ }\n+ this.setState(prevState => ({\n+ cube: {\n+ ...prevState.cube,\n+ categoryPrefixes: prefixes,\n+ }\n+ }))\n+ break;\n}\n}\n@@ -180,13 +206,20 @@ class CubeOverviewModal extends Component {\n<br/>\n<h6>Category</h6>\n+\n+ <input className=\"form-control\" name=\"name\" type=\"text\" disabled value={cube.overrideCategory ?\n+ cube.card_count + ' Card ' + cube.categoryPrefixes.join(' ') + ' ' + cube.categoryOverride + ' Cube'\n+ :\n+ cube.card_count + ' Card ' + cube.type + ' Cube'\n+ }/>\n+\n<Row>\n<Col>\n<FormGroup tag=\"fieldset\">\n- {['Vintage','Legacy','Modern','Pioneer','Standard','Set'].map((label) =>\n+ {['Vintage','Legacy+','Legacy','Modern','Pioneer','Standard','Set'].map((label) =>\n<FormGroup check key={label}>\n<Label check>\n- <Input type=\"radio\" name='category' value={label} disabled={cube.overrideCategory ? false : true} checked={cube.categoryOverride == label}/>{' '}\n+ <Input type=\"radio\" name='category' value={label} disabled={cube.overrideCategory ? false : true} checked={cube.categoryOverride == label} onChange={this.handleChange}/>{' '}\n{label}\n</Label>\n</FormGroup>\n@@ -196,7 +229,7 @@ class CubeOverviewModal extends Component {\n<Col>\n{['Powered','Unpowered','Pauper','Peasant','Budget','Silver-bordered'].map((label) =>\n<div className=\"form-check\" key={label}>\n- <input className=\"form-check-input\" name='category_check' value={label} type=\"checkbox\" checked={cube.categoryPrefixes.includes(label)} onChange={this.handleChange} disabled={cube.overrideCategory ? false : true}/>\n+ <input className=\"form-check-input\" name='category_prefix' value={label} type=\"checkbox\" checked={cube.categoryPrefixes.includes(label)} onChange={this.handleChange} disabled={cube.overrideCategory ? false : true}/>\n<label className=\"form-check-label\">{label}</label>\n</div>\n)}\n",
        "org_msg": "Added category preview",
        "sim_msg": "fix radio component warning",
        "sim_diff": "diff --git a/packages/idyll-components/src/radio.js b/packages/idyll-components/src/radio.js @@ -14,13 +14,15 @@ class Radio extends React.PureComponent {\n}\nrender() {\n+ const { idyll, hasError, updateProps, options, value, ...props } = this.props;\n+\nreturn (\n- <div {...this.props}>\n- {this.props.options.map((d) => {\n+ <div {...props}>\n+ {options.map((d) => {\nif (typeof d === 'string') {\n- return <label><input type=\"radio\" checked={d === this.props.value} onChange={this.onChange} value={d} name={this.id} />{d}</label>;\n+ return <label key={d}><input type=\"radio\" checked={d === value} onChange={this.onChange} value={d} name={this.id} />{d}</label>;\n}\n- return <label><input type=\"radio\" checked={d.value === this.props.value} onChange={this.onChange} value={d.value} name={this.id} />{d.label || d.value}</label>;\n+ return <label key={d.value}><input type=\"radio\" checked={d.value === value} onChange={this.onChange} value={d.value} name={this.id} />{d.label || d.value}</label>;\n})}\n</div>\n);\n",
        "chatgpt_cot": "Add functionality to handle category and category prefixes in CubeOverviewModal component. Fix radio button and checkbox handling."
    }
]