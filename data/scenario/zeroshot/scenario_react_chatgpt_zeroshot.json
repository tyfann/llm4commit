[
    {
        "diff": "diff --git a/packages/react-devtools-shared/src/utils.js b/a/packages/react-devtools-shared/src/utils.js @@ -23,9 +23,23 @@ import {\n   Suspense,\n } from 'react-is';\n import {\n+  REACT_CONSUMER_TYPE,\n+  REACT_CONTEXT_TYPE,\n+  REACT_FORWARD_REF_TYPE,\n+  REACT_FRAGMENT_TYPE,\n+  REACT_LAZY_TYPE,\n+  REACT_LEGACY_ELEMENT_TYPE,\n+  REACT_MEMO_TYPE,\n+  REACT_PORTAL_TYPE,\n+  REACT_PROFILER_TYPE,\n+  REACT_PROVIDER_TYPE,\n+  REACT_STRICT_MODE_TYPE,\n+  REACT_SUSPENSE_LIST_TYPE,\n   REACT_SUSPENSE_LIST_TYPE as SuspenseList,\n+  REACT_SUSPENSE_TYPE,\n   REACT_TRACING_MARKER_TYPE as TracingMarker,\n } from 'shared/ReactSymbols';\n+import {enableRenderableContext} from 'shared/ReactFeatureFlags';\n import {\n   TREE_OPERATION_ADD,\n   TREE_OPERATION_REMOVE,\n@@ -695,10 +709,57 @@ export function getDataType(data: Object): DataType {\n   }\n }\n \n+// Fork of packages/react-is/src/ReactIs.js:30, but with legacy element type\n+// Which has been changed in https://github.com/facebook/react/pull/28813\n+function typeOfWithLegacyElementSymbol(object: any): mixed {\n+  if (typeof object === 'object' && object !== null) {\n+    const $$typeof = object.$$typeof;\n+    switch ($$typeof) {\n+      case REACT_LEGACY_ELEMENT_TYPE:\n+        const type = object.type;\n+\n+        switch (type) {\n+          case REACT_FRAGMENT_TYPE:\n+          case REACT_PROFILER_TYPE:\n+          case REACT_STRICT_MODE_TYPE:\n+          case REACT_SUSPENSE_TYPE:\n+          case REACT_SUSPENSE_LIST_TYPE:\n+            return type;\n+          default:\n+            const $$typeofType = type && type.$$typeof;\n+\n+            switch ($$typeofType) {\n+              case REACT_CONTEXT_TYPE:\n+              case REACT_FORWARD_REF_TYPE:\n+              case REACT_LAZY_TYPE:\n+              case REACT_MEMO_TYPE:\n+                return $$typeofType;\n+              case REACT_CONSUMER_TYPE:\n+                if (enableRenderableContext) {\n+                  return $$typeofType;\n+                }\n+              // Fall through\n+              case REACT_PROVIDER_TYPE:\n+                if (!enableRenderableContext) {\n+                  return $$typeofType;\n+                }\n+              // Fall through\n+              default:\n+                return $$typeof;\n+            }\n+        }\n+      case REACT_PORTAL_TYPE:\n+        return $$typeof;\n+    }\n+  }\n+\n+  return undefined;\n+}\n+\n export function getDisplayNameForReactElement(\n   element: React$Element<any>,\n ): string | null {\n-  const elementType = typeOf(element);\n+  const elementType = typeOf(element) || typeOfWithLegacyElementSymbol(element);\n   switch (elementType) {\n     case ContextConsumer:\n       return 'ContextConsumer';",
        "date": "2024-05-07T15:38:43Z",
        "chatgpt": "Add support for legacy element type in getDisplayNameForReactElement function",
        "msg": "fix[react-devtools]: add backwards compat with legacy element type symbol (#28982)\n\nFollow-up to https://github.com/facebook/react/pull/28813.\r\n\r\nRDT is using `typeOf` from `react-is` to determine the element display\r\nname, I've forked an implementation of this method, but will be using\r\nlegacy element symbol."
    },
    {
        "diff": "diff --git a/scripts/jest/setupTests.js b/a/scripts/jest/setupTests.js @@ -206,44 +206,55 @@ if (process.env.REACT_CLASS_EQUIVALENCE_TEST) {\n   };\n \n   const gatedErrorMessage = 'Gated test was expected to fail, but it passed.';\n-  global._test_gate = (gateFn, testName, callback) => {\n+  global._test_gate = (gateFn, testName, callback, timeoutMS) => {\n     let shouldPass;\n     try {\n       const flags = getTestFlags();\n       shouldPass = gateFn(flags);\n     } catch (e) {\n-      test(testName, () => {\n-        throw e;\n-      });\n+      test(\n+        testName,\n+        () => {\n+          throw e;\n+        },\n+        timeoutMS\n+      );\n       return;\n     }\n     if (shouldPass) {\n-      test(testName, callback);\n+      test(testName, callback, timeoutMS);\n     } else {\n       const error = new Error(gatedErrorMessage);\n       Error.captureStackTrace(error, global._test_gate);\n       test(`[GATED, SHOULD FAIL] ${testName}`, () =>\n-        expectTestToFail(callback, error));\n+        expectTestToFail(callback, error, timeoutMS));\n     }\n   };\n-  global._test_gate_focus = (gateFn, testName, callback) => {\n+  global._test_gate_focus = (gateFn, testName, callback, timeoutMS) => {\n     let shouldPass;\n     try {\n       const flags = getTestFlags();\n       shouldPass = gateFn(flags);\n     } catch (e) {\n-      test.only(testName, () => {\n-        throw e;\n-      });\n+      test.only(\n+        testName,\n+        () => {\n+          throw e;\n+        },\n+        timeoutMS\n+      );\n       return;\n     }\n     if (shouldPass) {\n-      test.only(testName, callback);\n+      test.only(testName, callback, timeoutMS);\n     } else {\n       const error = new Error(gatedErrorMessage);\n       Error.captureStackTrace(error, global._test_gate_focus);\n-      test.only(`[GATED, SHOULD FAIL] ${testName}`, () =>\n-        expectTestToFail(callback, error));\n+      test.only(\n+        `[GATED, SHOULD FAIL] ${testName}`,\n+        () => expectTestToFail(callback, error),\n+        timeoutMS\n+      );\n     }\n   };\n ",
        "date": "2024-05-07T15:15:39Z",
        "chatgpt": "Refactor global _test_gate and _test_gate_focus to accept timeoutMS parameter",
        "msg": "Allow specifying timeout in tests via third argument (#29006)"
    },
    {
        "diff": "diff --git a/scripts/rollup/bundles.js b/a/scripts/rollup/bundles.js @@ -884,7 +884,7 @@ const bundles = [\n   /******* Reconciler Constants *******/\n   {\n     moduleType: RENDERER_UTILS,\n-    bundleTypes: [NODE_DEV, NODE_PROD],\n+    bundleTypes: [NODE_DEV, NODE_PROD, FB_WWW_DEV, FB_WWW_PROD],\n     entry: 'react-reconciler/constants',\n     global: 'ReactReconcilerConstants',\n     minifyWithProdErrorCodes: true,",
        "date": "2024-05-06T15:32:43Z",
        "chatgpt": "Add FB_WWW_DEV and FB_WWW_PROD bundle types to renderer utils module",
        "msg": "Add FB build for ReactReconcilerConstants (#29003)\n\nIn order to integrate the `react-reconciler` build created in #28880\r\nwith third party libraries, we need to have matching\r\n`react-reconciler/constants` to go with it."
    },
    {
        "diff": "diff --git a/.github/workflows/commit_artifacts.yml b/a/.github/workflows/commit_artifacts.yml @@ -145,15 +145,15 @@ jobs:\n         run: |\n           BASE_FOLDER='compiled-rn/facebook-fbsource/xplat/js'\n           mkdir -p ${BASE_FOLDER}/react-native-github/Libraries/Renderer/\n-          mkdir -p ${BASE_FOLDER}/RKJSModules/vendor/{scheduler,react,react-is,react-test-renderer}/\n+          mkdir -p ${BASE_FOLDER}/RKJSModules/vendor/react/{scheduler,react,react-is,react-test-renderer}/\n \n           # Move React Native renderer \n           mv build/react-native/implementations/ $BASE_FOLDER/react-native-github/Libraries/Renderer/\n           mv build/react-native/shims/ $BASE_FOLDER/react-native-github/Libraries/Renderer/\n-          mv build/facebook-react-native/scheduler/cjs/ $BASE_FOLDER/RKJSModules/vendor/scheduler/\n-          mv build/facebook-react-native/react/cjs/ $BASE_FOLDER/RKJSModules/vendor/react/\n-          mv build/facebook-react-native/react-is/cjs/ $BASE_FOLDER/RKJSModules/vendor/react-is/\n-          mv build/facebook-react-native/react-test-renderer/cjs/ $BASE_FOLDER/RKJSModules/vendor/react-test-renderer/\n+          mv build/facebook-react-native/scheduler/cjs/ $BASE_FOLDER/RKJSModules/vendor/react/scheduler/\n+          mv build/facebook-react-native/react/cjs/ $BASE_FOLDER/RKJSModules/vendor/react/react/\n+          mv build/facebook-react-native/react-is/cjs/ $BASE_FOLDER/RKJSModules/vendor/react/react-is/\n+          mv build/facebook-react-native/react-test-renderer/cjs/ $BASE_FOLDER/RKJSModules/vendor/react/react-test-renderer/\n \n           # Delete OSS renderer. OSS renderer is synced through internal script.\n           RENDERER_FOLDER=$BASE_FOLDER/react-native-github/Libraries/Renderer/implementations/",
        "date": "2024-05-03T22:46:43Z",
        "chatgpt": "Refactor folder structure for React Native renderer and scheduler modules.",
        "msg": "Update `compiled-rn` destination paths to `vendor/react` (#28989)\n\nI'm changing the destination paths in fbsource from `vendor/*` to\r\n`vendor/react/*`."
    },
    {
        "diff": "diff --git a/scripts/rollup/wrappers.js b/a/scripts/rollup/wrappers.js @@ -1,7 +1,5 @@\n 'use strict';\n \n-const {resolve} = require('path');\n-const {readFileSync} = require('fs');\n const {signFile, getSigningToken} = require('signedsource');\n const {bundleTypes, moduleTypes} = require('./bundles');\n \n@@ -30,19 +28,25 @@ const {RECONCILER} = moduleTypes;\n \n const USE_STRICT_HEADER_REGEX = /'use strict';\\n+/;\n \n-function registerInternalModuleStart(globalName) {\n-  const path = resolve(__dirname, 'wrappers', 'registerInternalModuleBegin.js');\n-  const file = readFileSync(path);\n-  return String(file).trim();\n+function wrapWithRegisterInternalModule(source) {\n+  return `\\\n+'use strict';\n+if (\n+  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n+  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n+    'function'\n+) {\n+  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n }\n-\n-function registerInternalModuleStop(globalName) {\n-  const path = resolve(__dirname, 'wrappers', 'registerInternalModuleEnd.js');\n-  const file = readFileSync(path);\n-\n-  // Remove the 'use strict' directive from the footer.\n-  // This directive is only meaningful when it is the first statement in a file or function.\n-  return String(file).replace(USE_STRICT_HEADER_REGEX, '').trim();\n+${source}\n+if (\n+  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n+  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n+    'function'\n+) {\n+  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n+}\n+`;\n }\n \n const license = ` * Copyright (c) Meta Platforms, Inc. and affiliates.\n@@ -496,11 +500,7 @@ function wrapWithTopLevelDefinitions(\n \n         // Certain DEV and Profiling bundles should self-register their own module boundaries with DevTools.\n         // This allows the Timeline to de-emphasize (dim) internal stack frames.\n-        source = `\n-          ${registerInternalModuleStart(globalName)}\n-          ${source}\n-          ${registerInternalModuleStop(globalName)}\n-        `;\n+        source = wrapWithRegisterInternalModule(source);\n         break;\n     }\n   }",
        "date": "2024-05-03T18:08:10Z",
        "chatgpt": "Refactor wrappers.js to use a new function for registering internal modules with DevTools",
        "msg": "Bundle config: inline internal hook wrapper (#28978)\n\nBundle config: inline internal hook wrapper\r\n\r\nInstead of reading this wrapper from 2 files for \"start\" and \"end\" and\r\nthen string modifying the templates, just inline them like the other\r\nwrappers in this file."
    },
    {
        "diff": "diff --git a/.github/workflows/commit_artifacts.yml b/a/.github/workflows/commit_artifacts.yml @@ -210,42 +210,6 @@ jobs:\n           commit_user_email: ${{ github.actor }}@users.noreply.github.com\n           create_branch: true\n \n-  commit_fbsource_artifacts_external_repo:\n-    needs: download_artifacts\n-    runs-on: ubuntu-latest\n-    if: ${{ (github.ref == 'refs/heads/main' && needs.download_artifacts.outputs.fbsource_branch_count == '0') || github.ref == 'refs/heads/meta-fbsource' }}\n-    steps:\n-      - uses: actions/checkout@v4\n-        with:\n-          ref: main\n-          repository: facebook/react-fbsource-import\n-          token: ${{secrets.FBSOURCE_SYNC_PUSH_TOKEN}}\n-      - name: Ensure clean directory\n-        run: rm -rf compiled-rn\n-      - uses: actions/download-artifact@v3\n-        with:\n-          name: compiled-rn\n-          path: compiled-rn/\n-      - run: git status -u\n-      - name: Check if only the REVISION file has changed\n-        id: check_should_commit\n-        run: |\n-          if git status --porcelain | grep -qv '/REVISION$'; then\n-            echo \"should_commit=true\" >> \"$GITHUB_OUTPUT\"\n-          else\n-            echo \"should_commit=false\" >> \"$GITHUB_OUTPUT\"\n-          fi\n-      - name: Commit changes to branch\n-        if: steps.check_should_commit.outputs.should_commit == 'true'\n-        uses: stefanzweifel/git-auto-commit-action@v4\n-        with:\n-          commit_message: |\n-            ${{ github.event.head_commit.message }}\n-\n-            DiffTrain build for commit https://github.com/facebook/react/commit/${{ github.sha }}.\n-          commit_user_name: ${{ github.actor }}\n-          commit_user_email: ${{ github.actor }}@users.noreply.github.com\n-\n   commit_fbsource_artifacts:\n     needs: download_artifacts\n     if: ${{ (github.ref == 'refs/heads/main' && needs.download_artifacts.outputs.fbsource_branch_count == '0') || github.ref == 'refs/heads/meta-fbsource' }}",
        "date": "2024-05-03T18:01:53Z",
        "chatgpt": "Refactor commit_fbsource_artifacts_external_repo job. Remove unnecessary steps and update commit message.",
        "msg": "Stop committing resources to an external repo (#28963)\n\nThis has been integrated into this repo (`builds/facebook-fbsource`) so\r\nwe no longer need the extra repo"
    },
    {
        "diff": "diff --git a/packages/react-devtools-fusebox/src/frontend.js b/a/packages/react-devtools-fusebox/src/frontend.js @@ -62,6 +62,7 @@ export function initialize(\n       store={store}\n       showTabBar={true}\n       warnIfLegacyBackendDetected={true}\n+      enabledInspectedElementContextMenu={true}\n     />,\n   );\n }",
        "date": "2024-05-03T16:33:21Z",
        "chatgpt": "Add enabledInspectedElementContextMenu prop to initialize function",
        "msg": "[DevTools] Enable inspected element context menu in Fusebox (#28972)\n\n## Summary\r\n\r\nEnables the inspected element context menu in React Native DevTools\r\n(Fusebox).\r\n\r\n## How did you test this change?\r\n\r\n1. `yarn build` in `react-devtools-fusebox`\r\n2. Copy artifacts to rn-chrome-devtools-frontend\r\n3. Manually test the context menu\r\n\r\n\r\nhttps://github.com/facebook/react/assets/2246565/b35cc20f-8d67-43b0-b863-7731e10fffac\r\n\r\nNOTE: The serialised values sometimes expose React internals (e.g. Hook\r\ndata structures instead of just the values), but that seems to be a\r\nproblem equally on web, so I'm going for native<->web parity here."
    },
    {
        "diff": "diff --git a/.circleci/config.yml b/a/.circleci/config.yml @@ -228,6 +228,13 @@ jobs:\n           command: ./scripts/circleci/pack_and_store_devtools_artifacts.sh\n       - store_artifacts:\n           path: ./build/devtools.tgz\n+      # Simplifies getting the extension for local testing\n+      - store_artifacts:\n+          path: ./build/devtools/chrome-extension.zip\n+          destination: react-devtools-chrome-extension.zip\n+      - store_artifacts:\n+          path: ./build/devtools/firefox-extension.zip\n+          destination: react-devtools-firefox-extension.zip\n \n   run_devtools_e2e_tests:\n     docker: *docker",
        "date": "2024-05-02T19:47:18Z",
        "chatgpt": "\"Add storing of Chrome and Firefox extension artifacts for local testing\"",
        "msg": "Devtools: Streamline getting extension from branch (#28975)"
    },
    {
        "diff": "diff --git a/dangerfile.js b/a/dangerfile.js @@ -44,7 +44,9 @@ const CRITICAL_ARTIFACT_PATHS = new Set([\n   // We always report changes to these bundles, even if the change is\n   // insignificant or non-existent.\n   'oss-stable/react-dom/cjs/react-dom.production.js',\n+  'oss-stable/react-dom/cjs/react-dom-client.production.js',\n   'oss-experimental/react-dom/cjs/react-dom.production.js',\n+  'oss-experimental/react-dom/cjs/react-dom-client.production.js',\n   'facebook-www/ReactDOM-prod.classic.js',\n   'facebook-www/ReactDOM-prod.modern.js',\n ]);",
        "date": "2024-05-02T14:39:10Z",
        "chatgpt": "Add critical artifact paths for react-dom-client.production.js",
        "msg": "[Tooling] Update critical artifact list (#28966)\n\nWhen a React PR is opened CI will report large size changes. But for\r\ncritical packages like react-dom it reports always. In React 19 we moved\r\nthe build for react-dom the client reconciler from react-dom to\r\nreact-dom/client\r\n\r\nThis change adds react-dom-client artifacts for stable and oss channels\r\nsince that is originally what was being tracked. But since\r\nreact-dom/client always imports react-dom I left the original react-dom\r\npackages as critical as well. They are small but it would be good to\r\nkeep an eye on them"
    },
    {
        "diff": "diff --git a/packages/react-native-renderer/src/__tests__/ReactNativeAttributePayload-test.internal.js b/a/packages/react-native-renderer/src/__tests__/ReactNativeAttributePayload-test.internal.js @@ -204,6 +204,19 @@ describe('ReactNativeAttributePayload', () => {\n     ).toEqual({foo: null}); // this should ideally be null. heuristic.\n   });\n \n+  it('handles attributes defined multiple times', () => {\n+    const validAttributes = {foo: true, style: {foo: true}};\n+    expect(diff({}, {foo: 4, style: {foo: 2}}, validAttributes)).toEqual({\n+      foo: 2,\n+    });\n+    expect(diff({foo: 4}, {style: {foo: 2}}, validAttributes)).toEqual({\n+      foo: 2,\n+    });\n+    expect(diff({style: {foo: 2}}, {foo: 4}, validAttributes)).toEqual({\n+      foo: 4,\n+    });\n+  });\n+\n   // Function properties are just markers to native that events should be sent.\n   it('should convert functions to booleans', () => {\n     // Note that if the property changes from one function to another, we don't",
        "date": "2024-04-30T02:57:32Z",
        "chatgpt": "\"Handle attributes defined multiple times\"",
        "msg": "[react-native] Add unit test to ReactNativeAttributePayload (#28955)\n\n## Summary\r\n\r\nI'm looking at cleaning up some unnecessary manual property flattening\r\nin React Native and wanted to verify this behaviour is working as\r\nexpected, where properties from nested objects will always overwrite\r\nproperties from the base object.\r\n\r\n## How did you test this change?\r\n\r\nUnit tests"
    },
    {
        "diff": "diff --git a/packages/react/npm/jsx-dev-runtime.react-server.js b/a/packages/react/npm/jsx-dev-runtime.react-server.js @@ -1,7 +1,7 @@\n 'use strict';\n \n if (process.env.NODE_ENV === 'production') {\n-  module.exports = require('./cjs/react-jsx-dev-runtime.react-server.production.min.js');\n+  module.exports = require('./cjs/react-jsx-dev-runtime.react-server.production.js');\n } else {\n   module.exports = require('./cjs/react-jsx-dev-runtime.react-server.development.js');\n }",
        "date": "2024-04-27T20:25:25Z",
        "chatgpt": "Update jsx-dev-runtime.react-server.js to use non-minified production version",
        "msg": "Import correct prod version of jsx-dev-runtime for react-server (#28939)"
    },
    {
        "diff": "diff --git a/CHANGELOG.md b/a/CHANGELOG.md @@ -1,3 +1,7 @@\n+## 18.3.1 (April 26, 2024)\n+\n+- Export `act` from `react` [f1338f](https://github.com/facebook/react/commit/f1338f8080abd1386454a10bbf93d67bfe37ce85)\n+\n ## 18.3.0 (April 25, 2024)\n \n This release is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19.",
        "date": "2024-04-26T20:03:03Z",
        "chatgpt": "Add export of `act` from `react` in version 18.3.1",
        "msg": "Add changelog for 18.3.1 (#28932)"
    },
    {
        "diff": "diff --git a/CHANGELOG.md b/a/CHANGELOG.md @@ -1,3 +1,24 @@\n+## 18.3.0 (April 25, 2024)\n+\n+This release is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19.\n+\n+Read the [React 19 Upgrade Guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more info.\n+\n+### React\n+\n+- Allow writing to `this.refs` to support string ref codemod [909071](https://github.com/facebook/react/commit/9090712fd3ca4e1099e1f92e67933c2cb4f32552)\n+- Warn for deprecated `findDOMNode` outside StrictMode [c3b283](https://github.com/facebook/react/commit/c3b283964108b0e8dbcf1f9eb2e7e67815e39dfb)\n+- Warn for deprecated `test-utils` methods [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)\n+- Warn for deprecated Legacy Context outside StrictMode [415ee0](https://github.com/facebook/react/commit/415ee0e6ea0fe3e288e65868df2e3241143d5f7f)\n+- Warn for deprecated string refs outside StrictMode [#25383](https://github.com/facebook/react/pull/25383)\n+- Warn for deprecated `defaultProps` for function components [#25699](https://github.com/facebook/react/pull/25699)\n+- Warn when spreading `key` [#25697](https://github.com/facebook/react/pull/25697)\n+- Warn when using `act` from `test-utils` [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)\n+\n+### React DOM\n+- Warn for deprecated `unmountComponentAtNode` [8a015b](https://github.com/facebook/react/commit/8a015b68cc060079878e426610e64e86fb328f8d)\n+- Warn for deprecated `renderToStaticNodeStream` [#28874](https://github.com/facebook/react/pull/28874)\n+\n ## 18.2.0 (June 14, 2022)\n \n ### React DOM",
        "date": "2024-04-26T16:45:08Z",
        "chatgpt": "Add warnings for deprecated APIs and other changes needed for React 19 upgrade. Read the React 19 Upgrade Guide for more info.",
        "msg": "Add changelog for 18.3 (#28929)\n\nFixes https://github.com/facebook/react/issues/28924"
    },
    {
        "diff": "diff --git a/packages/react-reconciler/README.md b/a/packages/react-reconciler/README.md @@ -318,6 +318,30 @@ Same as `unhideInstance`, but for nodes created by `createTextInstance`.\n \n This method should mutate the `container` root node and remove all children from it.\n \n+#### `maySuspendCommit(type, props)`\n+\n+This method is called during render to determine if the Host Component type and props require some kind of loading process to complete before committing an update.\n+\n+#### `preloadInstance(type, props)`\n+\n+This method may be called during render if the Host Component type and props might suspend a commit. It can be used to initiate any work that might shorten the duration of a suspended commit.\n+\n+#### `startSuspendingCommit()`\n+\n+This method is called just before the commit phase. Use it to set up any necessary state while any Host Components that might suspend this commit are evaluated to determine if the commit must be suspended.\n+\n+#### `suspendInstance(type, props)`\n+\n+This method is called after `startSuspendingCommit` for each Host Component that indicated it might suspend a commit.\n+\n+#### `waitForCommitToBeReady()`\n+\n+This method is called after all `suspendInstance` calls are complete.\n+\n+Return `null` if the commit can happen immediately.\n+\n+Return `(initiateCommit: Function) => Function` if the commit must be suspended. The argument to this callback will initiate the commit when called. The return value is a cancellation function that the Reconciler can use to abort the commit.\n+\n ### Persistence Methods\n \n If you use the persistent mode instead of the mutation mode, you would still need the \"Core Methods\". However, instead of the Mutation Methods above you will implement a different set of methods that performs cloning nodes and replacing them at the root level. You can find a list of them in the \"Persistence\" section [listed in this file](https://github.com/facebook/react/blob/main/packages/react-reconciler/src/forks/ReactFiberConfig.custom.js). File an issue if you need help.",
        "date": "2024-04-25T13:37:55Z",
        "chatgpt": "Add new methods for handling commit suspension and readiness in the React reconciler. Also, update information about persistence methods.",
        "msg": "Add descriptions of new methods to the react-reconciler readme (#28750)\n\nAdd new reconciler methods since last breaking change to the README\r\nbased on usage and comments.\r\n\r\n---------\r\n\r\nCo-authored-by: Josh Story <josh.c.story@gmail.com>"
    },
    {
        "diff": "diff --git a/packages/react/src/jsx/ReactJSXElement.js b/a/packages/react/src/jsx/ReactJSXElement.js @@ -738,9 +738,7 @@ export function createElement(type, config, children) {\n         console.warn(\n           'Your app (or one of its dependencies) is using an outdated JSX ' +\n             'transform. Update to the modern JSX transform for ' +\n-            'faster performance: ' +\n-            // TODO: Create a short link for this\n-            'https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html',\n+            'faster performance: https://react.dev/link/new-jsx-transform',\n         );\n       }\n     }",
        "date": "2024-04-24T13:32:11Z",
        "chatgpt": "Update JSX transform warning message with new link.",
        "msg": "Create short link for jsx warning (#28899)\n\nShort link created in https://github.com/reactjs/react.dev/pull/6772"
    },
    {
        "diff": "diff --git a/packages/react/src/__tests__/ReactProfilerComponent-test.internal.js b/a/packages/react/src/__tests__/ReactProfilerComponent-test.internal.js @@ -19,19 +19,13 @@ function loadModules({\n   enableProfilerTimer = true,\n   enableProfilerCommitHooks = true,\n   enableProfilerNestedUpdatePhase = true,\n-  enableProfilerNestedUpdateScheduledHook = false,\n-  replayFailedUnitOfWorkWithInvokeGuardedCallback = false,\n } = {}) {\n   ReactFeatureFlags = require('shared/ReactFeatureFlags');\n \n   ReactFeatureFlags.enableProfilerTimer = enableProfilerTimer;\n   ReactFeatureFlags.enableProfilerCommitHooks = enableProfilerCommitHooks;\n   ReactFeatureFlags.enableProfilerNestedUpdatePhase =\n     enableProfilerNestedUpdatePhase;\n-  ReactFeatureFlags.enableProfilerNestedUpdateScheduledHook =\n-    enableProfilerNestedUpdateScheduledHook;\n-  ReactFeatureFlags.replayFailedUnitOfWorkWithInvokeGuardedCallback =\n-    replayFailedUnitOfWorkWithInvokeGuardedCallback;\n \n   React = require('react');\n   ReactDOMClient = require('react-dom/client');",
        "date": "2024-04-22T19:35:11Z",
        "chatgpt": "Remove unused profiler flags and replayFailedUnitOfWorkWithInvokeGuardedCallback flag from ReactProfilerComponent-test internal test.",
        "msg": "Cleanup `replayFailedUnitOfWorkWithInvokeGuardedCallback`and `enableProfilerNestedUpdateScheduledHook` (#28891)"
    },
    {
        "diff": "diff --git a/scripts/rollup/bundles.js b/a/scripts/rollup/bundles.js @@ -879,9 +879,7 @@ const bundles = [\n \n   /******* React Cache (experimental, old) *******/\n   {\n-    // This is only used by our own tests.\n-    // We can delete it later.\n-    bundleTypes: [NODE_DEV, NODE_PROD],\n+    bundleTypes: [NODE_DEV, NODE_PROD, FB_WWW_DEV, FB_WWW_PROD],\n     moduleType: ISOMORPHIC,\n     entry: 'react-cache',\n     global: 'ReactCacheOld',",
        "date": "2024-04-18T21:26:03Z",
        "chatgpt": "\"Add support for FB_WWW_DEV and FB_WWW_PROD in React Cache bundle\"",
        "msg": "Add missing bundle types for ReactCacheOld (#28860)\n\nAdd missing bundle types for ReactCacheOld\r\n\r\nThese are used at FB and we need to update them for the SecretInternals\r\nupdate."
    },
    {
        "diff": "diff --git a/.github/workflows/commit_artifacts.yml b/a/.github/workflows/commit_artifacts.yml @@ -210,7 +210,7 @@ jobs:\n           commit_user_email: ${{ github.actor }}@users.noreply.github.com\n           create_branch: true\n \n-  commit_fbsource_artifacts:\n+  commit_fbsource_artifacts_external_repo:\n     needs: download_artifacts\n     runs-on: ubuntu-latest\n     if: ${{ (github.ref == 'refs/heads/main' && needs.download_artifacts.outputs.fbsource_branch_count == '0') || github.ref == 'refs/heads/meta-fbsource' }}\n@@ -245,3 +245,39 @@ jobs:\n             DiffTrain build for commit https://github.com/facebook/react/commit/${{ github.sha }}.\n           commit_user_name: ${{ github.actor }}\n           commit_user_email: ${{ github.actor }}@users.noreply.github.com\n+\n+  commit_fbsource_artifacts:\n+    needs: download_artifacts\n+    if: ${{ (github.ref == 'refs/heads/main' && needs.download_artifacts.outputs.fbsource_branch_count == '0') || github.ref == 'refs/heads/meta-fbsource' }}\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v4\n+        with:\n+          ref: builds/facebook-fbsource\n+      - name: Ensure clean directory\n+        run: rm -rf compiled\n+      - uses: actions/download-artifact@v3\n+        with:\n+          name: compiled-rn\n+          path: compiled-rn/\n+      - run: git status -u\n+      - name: Check if only the REVISION file has changed\n+        id: check_should_commit\n+        run: |\n+          if git status --porcelain | grep -qv '/REVISION$'; then\n+            echo \"should_commit=true\" >> \"$GITHUB_OUTPUT\"\n+          else\n+            echo \"should_commit=false\" >> \"$GITHUB_OUTPUT\"\n+          fi\n+      - name: Commit changes to branch\n+        if: steps.check_should_commit.outputs.should_commit == 'true'\n+        uses: stefanzweifel/git-auto-commit-action@v4\n+        with:\n+          commit_message: |\n+            ${{ github.event.head_commit.message }}\n+\n+            DiffTrain build for commit https://github.com/facebook/react/commit/${{ github.sha }}.\n+          branch: builds/facebook-fbsource\n+          commit_user_name: ${{ github.actor }}\n+          commit_user_email: ${{ github.actor }}@users.noreply.github.com\n+          create_branch: true",
        "date": "2024-04-18T19:08:52Z",
        "chatgpt": "Add external repository for committing fbsource artifacts and update commit_fbsource_artifacts workflow.",
        "msg": "Write Diff Train import branch to this repo (#28869)\n\nFor fbsource we've historically used a separate repo for imports due to\r\ninternal limitations in Diff Train. Those have been lifted so we can now\r\ncommit this branch here and then we can import from this repo (and get\r\nrid of the other repo)"
    },
    {
        "diff": "diff --git a/packages/react-reconciler/src/ReactFiberCompleteWork.js b/a/packages/react-reconciler/src/ReactFiberCompleteWork.js @@ -329,7 +329,6 @@ function appendAllChildrenToContainer(\n     // children to find all the terminal nodes.\n     let node = workInProgress.child;\n     while (node !== null) {\n-      // eslint-disable-next-line no-labels\n       if (node.tag === HostComponent) {\n         let instance = node.stateNode;\n         if (needsVisibilityToggle && isHidden) {",
        "date": "2024-04-18T15:49:55Z",
        "chatgpt": "Remove eslint-disable-next-line no-labels from appendAllChildrenToContainer function",
        "msg": "delete useless eslint-disable-next-line (#28859)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->"
    },
    {
        "diff": "diff --git a/packages/react-native-renderer/src/ReactNativeTypes.js b/a/packages/react-native-renderer/src/ReactNativeTypes.js @@ -174,6 +174,25 @@ export type TouchedViewDataAtPoint = $ReadOnly<{\n   ...InspectorData,\n }>;\n \n+export type RenderRootOptions = {\n+  onUncaughtError?: (\n+    error: mixed,\n+    errorInfo: {+componentStack?: ?string},\n+  ) => void,\n+  onCaughtError?: (\n+    error: mixed,\n+    errorInfo: {\n+      +componentStack?: ?string,\n+      // $FlowFixMe[unclear-type] unknown props and state.\n+      +errorBoundary?: ?React$Component<any, any>,\n+    },\n+  ) => void,\n+  onRecoverableError?: (\n+    error: mixed,\n+    errorInfo: {+componentStack?: ?string},\n+  ) => void,\n+};\n+\n /**\n  * Flat ReactNative renderer bundles are too big for Flow to parse efficiently.\n  * Provide minimal Flow typing for the high-level RN API and call it a day.\n@@ -202,6 +221,7 @@ export type ReactNativeType = {\n     element: Element<ElementType>,\n     containerTag: number,\n     callback: ?() => void,\n+    options: ?RenderRootOptions,\n   ): ?ElementRef<ElementType>,\n   unmountComponentAtNode(containerTag: number): void,\n   unmountComponentAtNodeAndRemoveContainer(containerTag: number): void,\n@@ -215,24 +235,6 @@ export opaque type InternalInstanceHandle = mixed;\n type PublicInstance = mixed;\n type PublicTextInstance = mixed;\n \n-export type RenderRootOptions = {\n-  onUncaughtError?: (\n-    error: mixed,\n-    errorInfo: {+componentStack?: ?string},\n-  ) => void,\n-  onCaughtError?: (\n-    error: mixed,\n-    errorInfo: {\n-      +componentStack?: ?string,\n-      +errorBoundary?: ?React$Component<any, any>,\n-    },\n-  ) => void,\n-  onRecoverableError?: (\n-    error: mixed,\n-    errorInfo: {+componentStack?: ?string},\n-  ) => void,\n-};\n-\n export type ReactFabricType = {\n   findHostInstance_DEPRECATED<TElementType: ElementType>(\n     componentOrHandle: ?(ElementRef<TElementType> | number),",
        "date": "2024-04-17T18:56:43Z",
        "chatgpt": "Add RenderRootOptions type and options property to ReactNativeType.",
        "msg": "Update ReactNativeTypes for root options (part 2) (#28857)\n\nForgot to push a change before mergin\r\nhttps://github.com/facebook/react/pull/28850"
    },
    {
        "diff": "diff --git a/packages/internal-test-utils/__tests__/ReactInternalTestUtils-test.js b/a/packages/internal-test-utils/__tests__/ReactInternalTestUtils-test.js @@ -2146,7 +2146,7 @@ describe('ReactInternalTestUtils console assertions', () => {\n         - Expected errors\n         + Received errors\n \n-        - This is a complete different message that happens to start with \"T\"\n+        - This is a completely different message that happens to start with \"T\"\n         + Message that happens to contain a \"T\" <component stack>\"\n       `);\n     });",
        "date": "2024-04-17T18:04:22Z",
        "chatgpt": "Fix typo in error message in ReactInternalTestUtils-test.js",
        "msg": "Complete the typo fix (#28856)"
    },
    {
        "diff": "diff --git a/packages/shared/ReactFeatureFlags.js b/a/packages/shared/ReactFeatureFlags.js @@ -116,8 +116,6 @@ export const alwaysThrottleRetries = true;\n \n export const passChildrenWhenCloningPersistedNodes = false;\n \n-export const enableUseDeferredValueInitialArg = __EXPERIMENTAL__;\n-\n export const enableServerComponentLogs = __EXPERIMENTAL__;\n \n /**\n@@ -191,6 +189,9 @@ export const disableDOMTestUtils = true;\n // Make <Context> equivalent to <Context.Provider> instead of <Context.Consumer>\n export const enableRenderableContext = true;\n \n+// Enables the `initialValue` option for `useDeferredValue`\n+export const enableUseDeferredValueInitialArg = true;\n+\n // -----------------------------------------------------------------------------\n // Chopping Block\n //",
        "date": "2024-04-16T16:12:32Z",
        "chatgpt": "\"Enable useDeferredValueInitialArg and remove experimental flag\"",
        "msg": "Move enableUseDeferredValueInitialArg to canary (#28818)\n\nPer team discussion, this upgrades the `initialValue` argument for\r\n`useDeferredValue` from experimental to canary.\r\n\r\n- Original implementation PR:\r\nhttps://github.com/facebook/react/pull/27500\r\n- API documentation PR: https://github.com/reactjs/react.dev/pull/6747\r\n\r\nI left it disabled at Meta for now in case there's old code somewhere\r\nthat is still passing an `options` object as the second argument."
    },
    {
        "diff": "diff --git a/packages/react-server/src/ReactServerStreamConfigBun.js b/a/packages/react-server/src/ReactServerStreamConfigBun.js @@ -13,6 +13,7 @@ type BunReadableStreamController = ReadableStreamController & {\n   end(): mixed,\n   write(data: Chunk | BinaryChunk): void,\n   error(error: Error): void,\n+  flush?: () => void,\n };\n export type Destination = BunReadableStreamController;\n \n@@ -25,8 +26,12 @@ export function scheduleWork(callback: () => void) {\n }\n \n export function flushBuffered(destination: Destination) {\n-  // WHATWG Streams do not yet have a way to flush the underlying\n-  // transform streams. https://github.com/whatwg/streams/issues/960\n+  // Bun direct streams provide a flush function.\n+  // If we don't have any more data to send right now.\n+  // Flush whatever is in the buffer to the wire.\n+  if (typeof destination.flush === 'function') {\n+    destination.flush();\n+  }\n }\n \n export function beginWriting(destination: Destination) {}",
        "date": "2024-04-15T15:25:08Z",
        "chatgpt": "Add flush function to BunReadableStreamController and use it in flushBuffered function.",
        "msg": "Flush direct streams in Bun (#28837)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\nThe ReadableStreamController for [direct\r\nstreams](https://bun.sh/docs/api/streams#direct-readablestream) in Bun\r\nsupports a flush() method to flush all buffered items to its underlying\r\nsink.\r\n\r\nWithout manually calling flush(), all buffered items are only flushed to\r\nthe underlying sink when the stream is closed. This behavior causes the\r\nshell rendered against Suspense boundaries never to be flushed to the\r\nunderlying sink.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nA lot of changes to the test runner will need to be made in order to\r\nsupport the Bun runtime. A separate test was manually run in order to\r\nensure that the changes made are correct.\r\n\r\nThe test works by sanity-checking that the shell rendered against\r\nSuspense boundaries are emitted first in the stream.\r\n\r\nThis test was written and run on Bun v1.1.3.\r\n\r\n```ts\r\nimport { Suspense } from \"react\";\r\nimport { renderToReadableStream } from \"react-dom/server\";\r\n\r\nif (!import.meta.resolveSync(\"react-dom/server\").endsWith(\"server.bun.js\")) {\r\n  throw new Error(\"react-dom/server is not the correct version:\\n  \" + import.meta.resolveSync(\"react-dom/server\"));\r\n}\r\n\r\nconst A = async () => {\r\n  await new Promise(resolve => setImmediate(resolve));\r\n  return <div>hi</div>;\r\n};\r\n\r\nconst B = async () => {\r\n  return (\r\n    <Suspense fallback={<div>loading</div>}>\r\n      <A />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nconst stream = await renderToReadableStream(<B />);\r\n\r\nlet text = \"\";\r\nlet count = 0;\r\nfor await (const chunk of stream) {\r\n  text += new TextDecoder().decode(chunk);\r\n  count++;\r\n}\r\n\r\nif (\r\n  text !==\r\n  `<!--$?--><template id=\"B:0\"></template><div>loading</div><!--/$--><div hidden id=\"S:0\"><div>hi</div></div><script>$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data=\"$!\",a.setAttribute(\"data-dgst\",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if(\"/$\"===d)if(0===f)break;else f--;else\"$\"!==d&&\"$?\"!==d&&\"$!\"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data=\"$\"}b._reactRetry&&b._reactRetry()}};$RC(\"B:0\",\"S:0\")</script>`\r\n) {\r\n  throw new Error(\"unexpected output\");\r\n}\r\nif (count !== 2) {\r\n  throw new Error(\"expected 2 chunks from react ssr stream\");\r\n}\r\n```"
    },
    {
        "diff": "diff --git a/packages/react-devtools-shared/src/devtools/cache.js b/a/packages/react-devtools-shared/src/devtools/cache.js @@ -59,19 +59,30 @@ const Pending = 0;\n const Resolved = 1;\n const Rejected = 2;\n \n-const ReactSharedInternals = (React: any)\n-  .__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\n-\n-function readContext(Context: ReactContext<null>) {\n-  const dispatcher = ReactSharedInternals.H;\n-  if (dispatcher === null) {\n-    throw new Error(\n-      'react-cache: read and preload may only be called from within a ' +\n-        \"component's render. They are not supported in event handlers or \" +\n-        'lifecycle methods.',\n-    );\n-  }\n-  return dispatcher.readContext(Context);\n+let readContext;\n+if (typeof React.use === 'function') {\n+  readContext = function (Context: ReactContext<null>) {\n+    return React.use(Context);\n+  };\n+} else if (\n+  typeof (React: any).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ===\n+  'object'\n+) {\n+  const ReactCurrentDispatcher = (React: any)\n+    .__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;\n+  readContext = function (Context: ReactContext<null>) {\n+    const dispatcher = ReactCurrentDispatcher.current;\n+    if (dispatcher === null) {\n+      throw new Error(\n+        'react-cache: read and preload may only be called from within a ' +\n+          \"component's render. They are not supported in event handlers or \" +\n+          'lifecycle methods.',\n+      );\n+    }\n+    return dispatcher.readContext(Context);\n+  };\n+} else {\n+  throw new Error('react-cache: Unsupported React version');\n }\n \n const CacheContext = createContext(null);",
        "date": "2024-04-15T12:03:29Z",
        "chatgpt": "Refactor readContext function to support different versions of React.",
        "msg": "Use use() in the Cache if available (#28793)\n\nThis is a follow up to\r\nhttps://github.com/facebook/react/pull/28789#discussion_r1557232202\r\n\r\nRevert to use the old readContext detection if not to support older\r\nReact.\r\n\r\nI haven't actually tested this. Just opening as a suggestion."
    },
    {
        "diff": "diff --git a/packages/react-reconciler/src/ReactFiberClassComponent.js b/a/packages/react-reconciler/src/ReactFiberClassComponent.js @@ -1274,7 +1274,7 @@ export function resolveClassComponentProps(\n     // We may have already copied the props object above to remove ref. If so,\n     // we can modify that. Otherwise, copy the props object with Object.assign.\n     if (newProps === baseProps) {\n-      newProps = assign({}, newProps, baseProps);\n+      newProps = assign({}, newProps);\n     }\n     // Taken from old JSX runtime, where this used to live.\n     for (const propName in defaultProps) {",
        "date": "2024-04-12T19:55:51Z",
        "chatgpt": "\"Refactor resolveClassComponentProps to remove unnecessary assignment of baseProps in ReactFiberClassComponent.js\"",
        "msg": "Remove redundant props assign (#28829)"
    },
    {
        "diff": "diff --git a/scripts/rollup/bundles.js b/a/scripts/rollup/bundles.js @@ -293,7 +293,6 @@ const bundles = [\n     bundleTypes: __EXPERIMENTAL__ ? [FB_WWW_DEV, FB_WWW_PROD] : [],\n     moduleType: RENDERER,\n     entry: 'react-server-dom-fb/src/ReactDOMServerFB.js',\n-    condition: 'react-server',\n     global: 'ReactDOMServerStreaming',\n     minifyWithProdErrorCodes: false,\n     wrapWithModuleBoundaries: false,",
        "date": "2024-04-12T19:53:41Z",
        "chatgpt": "Remove condition 'react-server' from ReactDOMServerFB bundle configuration",
        "msg": "Fix mistaken \"react-server\" condition (#28835)\n\nThis is a Fizz server."
    },
    {
        "diff": "diff --git a/packages/react-devtools-fusebox/src/frontend.js b/a/packages/react-devtools-fusebox/src/frontend.js @@ -13,7 +13,10 @@ import Bridge from 'react-devtools-shared/src/bridge';\n import Store from 'react-devtools-shared/src/devtools/store';\n import DevTools from 'react-devtools-shared/src/devtools/views/DevTools';\n \n-import type {Wall} from 'react-devtools-shared/src/frontend/types';\n+import type {\n+  BrowserTheme,\n+  Wall,\n+} from 'react-devtools-shared/src/frontend/types';\n import type {FrontendBridge} from 'react-devtools-shared/src/bridge';\n \n type Config = {\n@@ -42,18 +45,20 @@ export function createStore(bridge: FrontendBridge, config?: Config): Store {\n type InitializationOptions = {\n   bridge: FrontendBridge,\n   store: Store,\n+  theme?: BrowserTheme,\n };\n \n export function initialize(\n   contentWindow: Element | Document,\n   options: InitializationOptions,\n ): void {\n-  const {bridge, store} = options;\n+  const {bridge, store, theme = 'light'} = options;\n   const root = createRoot(contentWindow);\n \n   root.render(\n     <DevTools\n       bridge={bridge}\n+      browserTheme={theme}\n       store={store}\n       showTabBar={true}\n       warnIfLegacyBackendDetected={true}",
        "date": "2024-04-12T16:26:37Z",
        "chatgpt": "Add theme option to initialize function",
        "msg": "feat[devtools-fusebox]: support theme option (#28832)\n\nSupport propagating theme from Chrome DevTools frontend, the field is\r\noptional.\r\n\r\nNext step, which is out of scope of this project and general improvement\r\nfor React DevTools: teach RDT to listen to theme changes and if the\r\ntheme preference is set to `auto` in settings, update the theme\r\naccordingly with the browser devtools."
    },
    {
        "diff": "diff --git a/scripts/release/publish-commands/publish-to-npm.js b/a/scripts/release/publish-commands/publish-to-npm.js @@ -19,7 +19,7 @@ const run = async ({cwd, dry, tags, ci}, packageName, otp) => {\n   // But for now the easiest way is just to ask if this is expected.\n   const {status} = spawnSync('npm', ['view', `${packageName}@${version}`]);\n   const packageExists = status === 0;\n-  if (!packageExists) {\n+  if (packageExists) {\n     console.log(\n       theme`{package ${packageName}} {version ${version}} has already been published.`\n     );",
        "date": "2024-04-11T16:28:10Z",
        "chatgpt": "Fix condition to check if package exists before publishing",
        "msg": "Fix nightly release job for real (#28825)"
    },
    {
        "diff": "diff --git a/scripts/release/publish-commands/publish-to-npm.js b/a/scripts/release/publish-commands/publish-to-npm.js @@ -2,10 +2,11 @@\n \n 'use strict';\n \n+const {spawnSync} = require('child_process');\n const {exec} = require('child-process-promise');\n const {readJsonSync} = require('fs-extra');\n const {join} = require('path');\n-const {confirm, execRead} = require('../utils');\n+const {confirm} = require('../utils');\n const theme = require('../theme');\n \n const run = async ({cwd, dry, tags, ci}, packageName, otp) => {\n@@ -16,8 +17,9 @@ const run = async ({cwd, dry, tags, ci}, packageName, otp) => {\n   // If so we might be resuming from a previous run.\n   // We could infer this by comparing the build-info.json,\n   // But for now the easiest way is just to ask if this is expected.\n-  const info = await execRead(`npm view ${packageName}@${version}`);\n-  if (info) {\n+  const {status} = spawnSync('npm', ['view', `${packageName}@${version}`]);\n+  const packageExists = status === 0;\n+  if (!packageExists) {\n     console.log(\n       theme`{package ${packageName}} {version ${version}} has already been published.`\n     );",
        "date": "2024-04-11T16:08:13Z",
        "chatgpt": "refactor(publish-to-npm): Change npm view to use spawnSync",
        "msg": "Fix nightly release job (#28824)"
    },
    {
        "diff": "diff --git a/packages/react-reconciler/src/__tests__/ReactSuspenseFuzz-test.internal.js b/a/packages/react-reconciler/src/__tests__/ReactSuspenseFuzz-test.internal.js @@ -115,24 +115,19 @@ describe('ReactSuspenseFuzz', () => {\n               setTimeout(() => {\n                 cache.set(fullText, fullText);\n                 pendingTasks.delete(task);\n-                Scheduler.log(task.label);\n                 resolve();\n               }, delay);\n             },\n           };\n           cache.set(fullText, thenable);\n-          Scheduler.log(`Suspended! [${fullText}]`);\n           throw thenable;\n         } else if (typeof resolvedText.then === 'function') {\n-          const thenable = resolvedText;\n-          Scheduler.log(`Suspended! [${fullText}]`);\n-          throw thenable;\n+          throw resolvedText;\n         }\n       } else {\n         resolvedText = fullText;\n       }\n \n-      Scheduler.log(resolvedText);\n       return resolvedText;\n     }\n ",
        "date": "2024-04-10T15:40:22Z",
        "chatgpt": "Remove unnecessary Scheduler.log calls and simplify error handling in ReactSuspenseFuzz-test.internal.js",
        "msg": "Remove Scheduler.log from ReactSuspenseFuzz-test (#28812)\n\nThese test don't `assertLog` or `waitFor` so we don't need to\r\n`Scheduler.log`. Ideally we would, but since they're fuzzers it's a bit\r\ndifficult to know what the expected log is from the helper.\r\n\r\nSince this doesn't regress current test behavior, we can improve them\r\nafter this to unblock https://github.com/facebook/react/pull/28737"
    },
    {
        "diff": "diff --git a/packages/react-reconciler/src/__tests__/useEffectEvent-test.js b/a/packages/react-reconciler/src/__tests__/useEffectEvent-test.js @@ -742,7 +742,7 @@ describe('useEffectEvent', () => {\n     await act(() =>\n       ReactNoop.render(<ChatRoom roomId=\"general\" theme=\"light\" />),\n     );\n-    await act(() => jest.runAllTimers());\n+\n     assertLog(['Welcome to the general room!', 'Connected! theme: light']);\n     expect(ReactNoop).toMatchRenderedOutput(\n       <span prop=\"Welcome to the general room!\" />,\n@@ -752,20 +752,17 @@ describe('useEffectEvent', () => {\n     await act(() =>\n       ReactNoop.render(<ChatRoom roomId=\"music\" theme=\"light\" />),\n     );\n-    await act(() => jest.runAllTimers());\n     assertLog([\n       'Welcome to the music room!',\n       // should trigger a reconnect\n       'Connected! theme: light',\n     ]);\n-\n     expect(ReactNoop).toMatchRenderedOutput(\n       <span prop=\"Welcome to the music room!\" />,\n     );\n \n     // change theme only\n     await act(() => ReactNoop.render(<ChatRoom roomId=\"music\" theme=\"dark\" />));\n-    await act(() => jest.runAllTimers());\n     // should not trigger a reconnect\n     assertLog(['Welcome to the music room!']);\n     expect(ReactNoop).toMatchRenderedOutput(\n@@ -776,7 +773,6 @@ describe('useEffectEvent', () => {\n     await act(() =>\n       ReactNoop.render(<ChatRoom roomId=\"travel\" theme=\"dark\" />),\n     );\n-    await act(() => jest.runAllTimers());\n     assertLog([\n       'Welcome to the travel room!',\n       // should trigger a reconnect",
        "date": "2024-04-10T14:34:34Z",
        "chatgpt": "Remove unnecessary calls to jest.runAllTimers() in useEffectEvent-test.js",
        "msg": "[tests] assertLog before act in useEffectEvent (#28763)\n\nFixes tests blocking https://github.com/facebook/react/pull/28737"
    },
    {
        "diff": "diff --git a/packages/react-reconciler/src/__tests__/ReactUse-test.js b/a/packages/react-reconciler/src/__tests__/ReactUse-test.js @@ -663,6 +663,8 @@ describe('ReactUse', () => {\n     }\n \n     const root1 = ReactNoop.createRoot();\n+    assertLog(['Async text requested [Hi]']);\n+\n     await act(() => {\n       root1.render(<Suspense fallback={<Text text=\"Loading...\" />} />);\n     });\n@@ -677,7 +679,7 @@ describe('ReactUse', () => {\n         );\n       });\n     });\n-    assertLog(['Async text requested [Hi]']);\n+    assertLog([]);\n \n     // While we're waiting for the first root's data to resolve, a second\n     // root renders.",
        "date": "2024-04-10T14:34:27Z",
        "chatgpt": "\"Add assertion for async text request and update assertLog in ReactUse-test.js\"",
        "msg": "[tests] assertLog before act in ReactUse (#28762)\n\nFixes tests blocking https://github.com/facebook/react/pull/28737"
    },
    {
        "diff": "diff --git a/packages/react-dom/src/__tests__/ReactUpdates-test.js b/a/packages/react-dom/src/__tests__/ReactUpdates-test.js @@ -1900,6 +1900,8 @@ describe('ReactUpdates', () => {\n       await act(() => {\n         root.render(<Terminating />);\n       });\n+\n+      assertLog(Array.from({length: LIMIT + 1}, (_, k) => k));\n       expect(container.textContent).toBe('50');\n       await act(() => {\n         _setStep(0);",
        "date": "2024-04-10T14:34:11Z",
        "chatgpt": "Add assertLog to ReactUpdates-test.js",
        "msg": "[tests] assertLog before act in ReactUpdates (#28760)\n\nFixes tests blocking https://github.com/facebook/react/pull/28737"
    },
    {
        "diff": "diff --git a/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js b/a/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js @@ -1114,14 +1114,16 @@ describe('ReactDOMServerSelectiveHydration', () => {\n       // Outer was hydrated earlier\n       OuterTestUtils.assertLog([]);\n \n+      // First Inner Mouse Enter fires then Outer Mouse Enter\n+      assertLog(['Inner Mouse Enter', 'Outer Mouse Enter']);\n+\n       await act(() => {\n         Scheduler.unstable_flushAllWithoutAsserting();\n         OuterScheduler.unstable_flushAllWithoutAsserting();\n         InnerScheduler.unstable_flushAllWithoutAsserting();\n       });\n \n-      // First Inner Mouse Enter fires then Outer Mouse Enter\n-      assertLog(['Inner Mouse Enter', 'Outer Mouse Enter']);\n+      assertLog([]);\n     });\n   });\n ",
        "date": "2024-04-10T14:34:02Z",
        "chatgpt": "\"Add test for Inner and Outer Mouse Enter events firing sequentially\"",
        "msg": "[tests] assertLog before act in ReactDOMServerSelectiveHydration (#28759)\n\nFixes tests blocking https://github.com/facebook/react/pull/28737"
    },
    {
        "diff": "diff --git a/packages/react-dom/src/__tests__/ReactCompositeComponentState-test.js b/a/packages/react-dom/src/__tests__/ReactCompositeComponentState-test.js @@ -152,21 +152,6 @@ describe('ReactCompositeComponent-state', () => {\n       root.render(<TestComponent />);\n     });\n \n-    await act(() => {\n-      root.render(<TestComponent nextColor=\"green\" />);\n-    });\n-\n-    await act(() => {\n-      testComponentInstance.setFavoriteColor('blue');\n-    });\n-    await act(() => {\n-      testComponentInstance.forceUpdate(\n-        testComponentInstance.peekAtCallback('forceUpdate'),\n-      );\n-    });\n-\n-    root.unmount();\n-\n     assertLog([\n       // there is no state when getInitialState() is called\n       'getInitialState undefined',\n@@ -198,6 +183,13 @@ describe('ReactCompositeComponent-state', () => {\n       'componentDidUpdate-prevState orange',\n       'setState-yellow yellow',\n       'commit yellow',\n+    ]);\n+\n+    await act(() => {\n+      root.render(<TestComponent nextColor=\"green\" />);\n+    });\n+\n+    assertLog([\n       'componentWillReceiveProps-start yellow',\n       // setState({color:'green'}) only enqueues a pending state.\n       'componentWillReceiveProps-end yellow',\n@@ -216,6 +208,13 @@ describe('ReactCompositeComponent-state', () => {\n       'componentDidUpdate-prevState yellow',\n       'setState-receiveProps green',\n       'commit green',\n+    ]);\n+\n+    await act(() => {\n+      testComponentInstance.setFavoriteColor('blue');\n+    });\n+\n+    assertLog([\n       // setFavoriteColor('blue')\n       'shouldComponentUpdate-currentState green',\n       'shouldComponentUpdate-nextState blue',\n@@ -226,6 +225,13 @@ describe('ReactCompositeComponent-state', () => {\n       'componentDidUpdate-prevState green',\n       'setFavoriteColor blue',\n       'commit blue',\n+    ]);\n+    await act(() => {\n+      testComponentInstance.forceUpdate(\n+        testComponentInstance.peekAtCallback('forceUpdate'),\n+      );\n+    });\n+    assertLog([\n       // forceUpdate()\n       'componentWillUpdate-currentState blue',\n       'componentWillUpdate-nextState blue',\n@@ -234,7 +240,12 @@ describe('ReactCompositeComponent-state', () => {\n       'componentDidUpdate-prevState blue',\n       'forceUpdate blue',\n       'commit blue',\n-      // unmountComponent()\n+    ]);\n+\n+    root.unmount();\n+\n+    assertLog([\n+      // unmount()\n       // state is available within `componentWillUnmount()`\n       'componentWillUnmount blue',\n     ]);\n@@ -375,13 +386,13 @@ describe('ReactCompositeComponent-state', () => {\n     await act(() => {\n       root.render(<Parent />);\n     });\n+\n+    assertLog(['parent render one', 'child render one']);\n     await act(() => {\n       root.render(<Parent />);\n     });\n \n     assertLog([\n-      'parent render one',\n-      'child render one',\n       'parent render one',\n       'child componentWillReceiveProps one',\n       'child componentWillReceiveProps done one',",
        "date": "2024-04-10T14:33:51Z",
        "chatgpt": "Refactored state management in ReactCompositeComponentState-test.js",
        "msg": "[tests] assertLog before act in ReactCompositeComponentState (#28758)\n\nFixes tests blocking https://github.com/facebook/react/pull/28737"
    },
    {
        "diff": "diff --git a/.github/workflows/commit_artifacts.yml b/a/.github/workflows/commit_artifacts.yml @@ -132,7 +132,7 @@ jobs:\n             ./compiled/facebook-www/eslint-plugin-react-hooks.js\n \n           # Move unstable_server-external-runtime.js into facebook-www\n-          mv build/oss-stable/react-dom/unstable_server-external-runtime.js \\\n+          mv build/oss-experimental/react-dom/unstable_server-external-runtime.js \\\n             ./compiled/facebook-www/unstable_server-external-runtime.js\n \n           # Move react-refresh-babel.development.js into babel-plugin-react-refresh",
        "date": "2024-04-09T21:05:18Z",
        "chatgpt": "Move unstable_server-external-runtime.js to experimental build directory",
        "msg": "Attempt to fix diff syncing for Meta (#28801)\n\n#28796 broke Meta's PR syncing tool, hoping this fixes it"
    },
    {
        "diff": "diff --git a/.circleci/config.yml b/a/.circleci/config.yml @@ -2,7 +2,7 @@ version: 2.1\n \n aliases:\n   - &docker\n-    - image: cimg/openjdk:18.0-node\n+    - image: cimg/node:18.20.1-browsers\n \n   - &environment\n     TZ: /usr/share/zoneinfo/America/Los_Angeles\n@@ -246,8 +246,7 @@ jobs:\n           command: ./scripts/circleci/run_devtools_e2e_tests.js\n \n   run_fixtures_flight_tests:\n-    docker:\n-      - image: cimg/openjdk:20.0-node\n+    docker: *docker\n     environment: *environment\n     steps:\n       - checkout",
        "date": "2024-04-09T14:02:22Z",
        "chatgpt": "Update Docker image in CircleCI config to use cimg/node:18.20.1-browsers for better compatibility and performance. Also, refactor run_fixtures_flight_tests job to use the &docker and &environment aliases for consistency.",
        "msg": "CI: Run with Node.js 18.20 (#28774)"
    },
    {
        "diff": "diff --git a/.github/workflows/stale.yml b/a/.github/workflows/stale.yml @@ -2,8 +2,8 @@\n name: 'Manage stale issues and PRs'\n on:\n   schedule:\n-    # Run daily at 2AM\n-    - cron: '0 2 * * *'\n+    # Run hourly\n+    - cron: '0 * * * *'\n \n jobs:\n   stale:\n@@ -16,7 +16,7 @@ jobs:\n           days-before-stale: 90\n           # Number of days of inactivity before a stale issue or PR is closed\n           days-before-close: 7\n-          # Number of issues or PRs to process per day\n+          # API calls per run\n           operations-per-run: 100\n \n           # --- Issues ---\n@@ -43,4 +43,4 @@ jobs:\n           close-pr-message: >\n             Closing this pull request after a prolonged period of inactivity. If this issue is still present in the latest release, please ask for this pull request to be reopened. Thank you!\n           # PRs with these labels will never be considered stale\n-          exempt-pr-labels: \"Partner,React Core Team,Resolution: Backlog,Type: Bug,Type: Discussion,Type: Needs Investigation,Type: Regression,Type: Feature Request,Type: Enhancement\"\n\\ No newline at end of file\n+          exempt-pr-labels: \"Partner,React Core Team,Resolution: Backlog,Type: Bug,Type: Discussion,Type: Needs Investigation,Type: Regression,Type: Feature Request,Type: Enhancement\"",
        "date": "2024-04-09T13:21:20Z",
        "chatgpt": "Update schedule in stale workflow to run hourly and adjust operations-per-run to be API calls per run.",
        "msg": "Run stale job hourly (#28769)"
    },
    {
        "diff": "diff --git a/packages/react-dom/package.json b/a/packages/react-dom/package.json @@ -25,23 +25,28 @@\n   \"files\": [\n     \"LICENSE\",\n     \"README.md\",\n-    \"index.js\",\n     \"client.js\",\n+    \"client.react-server.js\",\n+    \"index.js\",\n     \"profiling.js\",\n-    \"server.js\",\n+    \"profiling.react-server.js\",\n+    \"react-dom.react-server.js\",\n+    \"server-rendering-stub.js\",\n     \"server.browser.js\",\n+    \"server.bun.js\",\n     \"server.edge.js\",\n+    \"server.js\",\n     \"server.node.js\",\n-    \"server.bun.js\",\n-    \"static.js\",\n+    \"server.react-server.js\",\n     \"static.browser.js\",\n     \"static.edge.js\",\n+    \"static.js\",\n     \"static.node.js\",\n-    \"server-rendering-stub.js\",\n+    \"static.react-server.js\",\n     \"test-utils.js\",\n     \"unstable_testing.js\",\n+    \"unstable_testing.react-server.js\",\n     \"unstable_server-external-runtime.js\",\n-    \"react-dom.react-server.js\",\n     \"cjs/\",\n     \"umd/\"\n   ],",
        "date": "2024-04-08T22:49:18Z",
        "chatgpt": "Update package.json to include new server and static files for react-server integration.",
        "msg": "[DOM] Fix package.json files for #28784 (#28785)\n\nMissed some files for the react-server disallow client change in #28784"
    },
    {
        "diff": "diff --git a/packages/react-dom/package.json b/a/packages/react-dom/package.json @@ -50,8 +50,12 @@\n       \"react-server\": \"./react-dom.react-server.js\",\n       \"default\": \"./index.js\"\n     },\n-    \"./client\": \"./client.js\",\n+    \"./client\": {\n+      \"react-server\": \"./client.react-server.js\",\n+      \"default\": \"./client.js\"\n+    },\n     \"./server\": {\n+      \"react-server\": \"./server.react-server.js\",\n       \"workerd\": \"./server.edge.js\",\n       \"bun\": \"./server.bun.js\",\n       \"deno\": \"./server.browser.js\",\n@@ -61,11 +65,24 @@\n       \"edge-light\": \"./server.edge.js\",\n       \"default\": \"./server.node.js\"\n     },\n-    \"./server.browser\": \"./server.browser.js\",\n-    \"./server.bun\": \"./server.bun.js\",\n-    \"./server.edge\": \"./server.edge.js\",\n-    \"./server.node\": \"./server.node.js\",\n+    \"./server.browser\": {\n+      \"react-server\": \"./server.react-server.js\",\n+      \"default\": \"./server.browser.js\"\n+    },\n+    \"./server.bun\": {\n+      \"react-server\": \"./server.react-server.js\",\n+      \"default\": \"./server.bun.js\"\n+    },\n+    \"./server.edge\": {\n+      \"react-server\": \"./server.react-server.js\",\n+      \"default\": \"./server.edge.js\"\n+    },\n+    \"./server.node\": {\n+      \"react-server\": \"./server.react-server.js\",\n+      \"default\": \"./server.node.js\"\n+    },\n     \"./static\": {\n+      \"react-server\": \"./static.react-server.js\",\n       \"workerd\": \"./static.edge.js\",\n       \"deno\": \"./static.browser.js\",\n       \"worker\": \"./static.browser.js\",\n@@ -74,13 +91,28 @@\n       \"edge-light\": \"./static.edge.js\",\n       \"default\": \"./static.node.js\"\n     },\n-    \"./static.browser\": \"./static.browser.js\",\n-    \"./static.edge\": \"./static.edge.js\",\n-    \"./static.node\": \"./static.node.js\",\n+    \"./static.browser\": {\n+      \"react-server\": \"./static.react-server.js\",\n+      \"default\": \"./static.browser.js\"\n+    },\n+    \"./static.edge\": {\n+      \"react-server\": \"./static.react-server.js\",\n+      \"default\": \"./static.edge.js\"\n+    },\n+    \"./static.node\": {\n+      \"react-server\": \"./static.react-server.js\",\n+      \"default\": \"./static.node.js\"\n+    },\n     \"./server-rendering-stub\": \"./server-rendering-stub.js\",\n-    \"./profiling\": \"./profiling.js\",\n+    \"./profiling\": {\n+      \"react-server\": \"./profiling.react-server.js\",\n+      \"default\": \"./profiling.js\"\n+    },\n     \"./test-utils\": \"./test-utils.js\",\n-    \"./unstable_testing\": \"./unstable_testing.js\",\n+    \"./unstable_testing\": {\n+      \"react-server\": \"./unstable_testing.react-server.js\",\n+      \"default\": \"./unstable_testing.js\"\n+    },\n     \"./unstable_server-external-runtime\": \"./unstable_server-external-runtime.js\",\n     \"./src/*\": \"./src/*\",\n     \"./package.json\": \"./package.json\"",
        "date": "2024-04-08T22:37:06Z",
        "chatgpt": "Refactor package.json to include react-server configuration for client, server, static, profiling, and unstable_testing directories.",
        "msg": "[DOM] disallow client entrypoints with react-server condition (#28784)\n\n`react-server` precludes loading code that expects to be run in a client\r\ncontext. This includes react-dom/client react-dom/server\r\nreact-dom/unstable_testing react-dom/profiling and react-dom/static\r\n\r\nThis update makes importing any of these client only entrypoints an\r\nerror"
    },
    {
        "diff": "diff --git a/packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js b/a/packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js @@ -2417,9 +2417,15 @@ export function getResource(\n       return null;\n     }\n     case 'script': {\n-      if (typeof pendingProps.src === 'string' && pendingProps.async === true) {\n-        const scriptProps: ScriptProps = pendingProps;\n-        const key = getScriptKey(scriptProps.src);\n+      const async = pendingProps.async;\n+      const src = pendingProps.src;\n+      if (\n+        typeof src === 'string' &&\n+        async &&\n+        typeof async !== 'function' &&\n+        typeof async !== 'symbol'\n+      ) {\n+        const key = getScriptKey(src);\n         const scripts = getResourcesFromRoot(resourceRoot).hoistableScripts;\n \n         let resource = scripts.get(key);\n@@ -3065,16 +3071,20 @@ export function isHostHoistableType(\n       }\n     }\n     case 'script': {\n+      const isAsync =\n+        props.async &&\n+        typeof props.async !== 'function' &&\n+        typeof props.async !== 'symbol';\n       if (\n-        props.async !== true ||\n+        !isAsync ||\n         props.onLoad ||\n         props.onError ||\n-        typeof props.src !== 'string' ||\n-        !props.src\n+        !props.src ||\n+        typeof props.src !== 'string'\n       ) {\n         if (__DEV__) {\n           if (outsideHostContainerContext) {\n-            if (props.async !== true) {\n+            if (!isAsync) {\n               console.error(\n                 'Cannot render a sync or defer <script> outside the main document without knowing its order.' +\n                   ' Try adding async=\"\" or moving it into the root <head> tag.',",
        "date": "2024-04-08T21:26:58Z",
        "chatgpt": "Refactor script async attribute handling",
        "msg": "[Float] treat `props.async` in Float consistent with the rest of react-dom (#26760)\n\nTreat async (boolean prop) consistently with Float. Previously float\r\nchecked if `props.async === true` (or not true) but the rest of\r\nreact-dom considers anything truthy that isn't a function or symbol as\r\n`true`. This PR normalizes the Float behavior."
    },
    {
        "diff": "diff --git a/packages/react-dom-bindings/src/events/ReactDOMEventReplaying.js b/a/packages/react-dom-bindings/src/events/ReactDOMEventReplaying.js @@ -38,7 +38,7 @@ import {isHigherEventPriority} from 'react-reconciler/src/ReactEventPriorities';\n import {isRootDehydrated} from 'react-reconciler/src/ReactFiberShellHydration';\n import {dispatchReplayedFormAction} from './plugins/FormActionEventPlugin';\n import {\n-  getCurrentUpdatePriority,\n+  resolveUpdatePriority,\n   runWithPriority as attemptHydrationAtPriority,\n } from '../client/ReactDOMUpdatePriority';\n \n@@ -333,10 +333,7 @@ function attemptExplicitHydrationTarget(\n }\n \n export function queueExplicitHydrationTarget(target: Node): void {\n-  // TODO: This will read the priority if it's dispatched by the React\n-  // event system but not native events. Should read window.event.type, like\n-  // we do for updates (getCurrentEventPriority).\n-  const updatePriority = getCurrentUpdatePriority();\n+  const updatePriority = resolveUpdatePriority();\n   const queuedTarget: QueuedHydrationTarget = {\n     blockedOn: null,\n     target: target,",
        "date": "2024-04-08T21:05:17Z",
        "chatgpt": "Refactor getCurrentUpdatePriority to resolveUpdatePriority in ReactDOMEventReplaying",
        "msg": "[Fiber] Use real event priority for hydration scheduling (#28765)\n\nStacked on #28751 \r\n\r\nHistorically explicit hydration scheduling used the reconciler's update\r\npriority to schedule the hydration. There was a lingering todo to switch\r\nto using event priority in the absence of an explicit update priority.\r\nThis change updates the hydration priority by referring to the event\r\npriority if no update priority is set"
    },
    {
        "diff": "diff --git a/packages/react/src/jsx/ReactJSXElement.js b/a/packages/react/src/jsx/ReactJSXElement.js @@ -364,12 +364,8 @@ export function jsxProd(type, config, maybeKey) {\n     // because in V8 it will deopt the object to dictionary mode.\n     props = {};\n     for (const propName in config) {\n-      if (\n-        hasOwnProperty.call(config, propName) &&\n-        // Skip over reserved prop names\n-        propName !== 'key' &&\n-        (enableRefAsProp || propName !== 'ref')\n-      ) {\n+      // Skip over reserved prop names\n+      if (propName !== 'key' && (enableRefAsProp || propName !== 'ref')) {\n         if (enableRefAsProp && !disableStringRefs && propName === 'ref') {\n           props.ref = coerceStringRef(\n             config[propName],\n@@ -603,12 +599,8 @@ export function jsxDEV(type, config, maybeKey, isStaticChildren, source, self) {\n       // because in V8 it will deopt the object to dictionary mode.\n       props = {};\n       for (const propName in config) {\n-        if (\n-          hasOwnProperty.call(config, propName) &&\n-          // Skip over reserved prop names\n-          propName !== 'key' &&\n-          (enableRefAsProp || propName !== 'ref')\n-        ) {\n+        // Skip over reserved prop names\n+        if (propName !== 'key' && (enableRefAsProp || propName !== 'ref')) {\n           if (enableRefAsProp && !disableStringRefs && propName === 'ref') {\n             props.ref = coerceStringRef(\n               config[propName],",
        "date": "2024-04-08T15:12:40Z",
        "chatgpt": "Refactor jsxProd and jsxDEV to skip over reserved prop names.",
        "msg": "jsx: Remove unnecessary hasOwnProperty check (#28775)\n\nFollow up to #28768.\r\n\r\nThe modern JSX runtime (`jsx`) does not need to check if each prop is a\r\ndirect property with `hasOwnProperty` because the compiler always passes\r\na plain object.\r\n\r\nI'll leave the check in the old JSX runtime (`createElement`) since that\r\none can be called manually with any kind of object, and if there were\r\nold user code that relied on this for some reason, it would be using\r\nthat runtime."
    },
    {
        "diff": "diff --git a/fixtures/nesting/README.md b/a/fixtures/nesting/README.md @@ -68,7 +68,7 @@ We will use three different `package.json`s: one for non-React code at the root,\n - **`src/legacy/package.json`**: This is where we declare the `react` and `react-dom`  dependencies for the \"legacy\" trees. In this demo, we're using React 16.8 (although, as noted above, we could downgrade it further below). This is **also** where we specify any third-party libraries that use React. For example, we include `react-router` and `react-redux` in this example. \n - **`src/modern/package.json`**: This is where we declare the `react` and `react-dom`  dependencies for the \"modern\" trees. In this demo, we're using React 17. Here, we also specify third-party dependencies that use React and are used from the modern part of our app. This is why we *also* have `react-router` and `react-redux` in this file. (Their versions don't strictly have to match their `legacy` counterparts, but features that rely on context may require workarounds if they differ.)\n \n-The `scripts` in the root `package.json` are set up so that when you run `npm install` in it, it also runs `npm intall` in both `src/legacy` and `src/modern` folders.\n+The `scripts` in the root `package.json` are set up so that when you run `npm install` in it, it also runs `npm install` in both `src/legacy` and `src/modern` folders.\n \n **Note:** This demo is set up to use a few third-party dependencies (React Router and Redux). These are not essential, and you can remove them from the demo. They are included so we can show how to make them work with this approach.\n ",
        "date": "2024-04-06T17:11:19Z",
        "chatgpt": "Update root package.json to run npm install in legacy and modern folders",
        "msg": "docs: fix typo in fixtures/nesting/README.md (#27507)"
    },
    {
        "diff": "diff --git a/.github/workflows/stale.yml b/a/.github/workflows/stale.yml @@ -16,8 +16,8 @@ jobs:\n           days-before-stale: 90\n           # Number of days of inactivity before a stale issue or PR is closed\n           days-before-close: 7\n-          # Tmp dry run setup to test new config\n-          debug-only: 'true'\n+          # Number of issues or PRs to process per day\n+          operations-per-run: 100\n \n           # --- Issues ---\n           stale-issue-label: \"Resolution: Stale\"\n@@ -30,7 +30,7 @@ jobs:\n           close-issue-message: >\n             Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please create a new issue with up-to-date information. Thank you!\n           # Issues with these labels will never be considered stale\n-          exempt-issue-labels: \"Partner,React Core Team,Resolution: Backlog,Type: Bug,Type: Discussion,Type: Needs Investigation,Type: Regression,Type: Feature Request\"\n+          exempt-issue-labels: \"Partner,React Core Team,Resolution: Backlog,Type: Bug,Type: Discussion,Type: Needs Investigation,Type: Regression,Type: Feature Request,Type: Enhancement\"\n \n           # --- PRs ---\n           stale-pr-label: \"Resolution: Stale\"\n@@ -43,4 +43,4 @@ jobs:\n           close-pr-message: >\n             Closing this pull request after a prolonged period of inactivity. If this issue is still present in the latest release, please ask for this pull request to be reopened. Thank you!\n           # PRs with these labels will never be considered stale\n-          exempt-pr-labels: \"Partner,React Core Team,Resolution: Backlog,Type: Bug,Type: Discussion,Type: Needs Investigation,Type: Regression,Type: Feature Request\"\n\\ No newline at end of file\n+          exempt-pr-labels: \"Partner,React Core Team,Resolution: Backlog,Type: Bug,Type: Discussion,Type: Needs Investigation,Type: Regression,Type: Feature Request,Type: Enhancement\"\n\\ No newline at end of file",
        "date": "2024-04-04T14:27:29Z",
        "chatgpt": "Update operations-per-run value and add Type: Enhancement to exempt labels.",
        "msg": "Enable stale action (#28729)\n\nFollows #28695\r\n\r\nNow that the action has run successfully in debug mode\r\n([logs](https://github.com/facebook/react/actions/runs/8532177618/job/23372921455#step:2:35)),\r\nlet's enable it to persist changes.\r\n\r\nAlso changes the number of operations per run from the default of 30 to\r\n100 since we have a large backlog of issues and PRs to work through.\r\n\r\nFinally adds enhancement label as exempt from stale."
    },
    {
        "diff": "diff --git a/packages/react-server/src/ReactFizzServer.js b/a/packages/react-server/src/ReactFizzServer.js @@ -842,7 +842,7 @@ function encodeErrorForBoundary(\n       ? 'Switched to client rendering because the server rendering aborted due to:\\n\\n'\n       : 'Switched to client rendering because the server rendering errored:\\n\\n';\n     boundary.errorMessage = prefix + message;\n-    boundary.errorStack = stack;\n+    boundary.errorStack = stack !== null ? prefix + stack : null;\n     boundary.errorComponentStack = thrownInfo.componentStack;\n   }\n }",
        "date": "2024-04-04T01:52:54Z",
        "chatgpt": "Refactor errorStack assignment in encodeErrorForBoundary function",
        "msg": "Emit Server Error Prefix in the .stack Property Too (#28738)\n\nFollow up to #28684.\r\n\r\nV8 includes the message in the stack and printed errors include just the\r\nstack property which is assumed to contain the message. Without this,\r\nthe prefix doesn't get printed in the console.\r\n\r\n<img width=\"578\" alt=\"Screenshot 2024-04-03 at 6 32 04\u202fPM\"\r\nsrc=\"https://github.com/facebook/react/assets/63648/d98a2db4-6ebc-4805-b669-59f449dfd21f\">\r\n\r\nA possible alternative would be to use a nested error with a `cause`\r\nlike #28736 but that would need some more involved serializing since\r\nthis prefix is coming from the server. Perhaps as a separate attribute."
    },
    {
        "diff": "diff --git a/packages/react-server/src/ReactFizzServer.js b/a/packages/react-server/src/ReactFizzServer.js @@ -1390,21 +1390,52 @@ function finishClassComponent(\n   task.keyPath = prevKeyPath;\n }\n \n+export function resolveClassComponentProps(\n+  Component: any,\n+  baseProps: Object,\n+): Object {\n+  let newProps = baseProps;\n+\n+  // TODO: This is where defaultProps should be resolved, too.\n+\n+  if (enableRefAsProp) {\n+    // Remove ref from the props object, if it exists.\n+    if ('ref' in newProps) {\n+      newProps = assign({}, newProps);\n+      delete newProps.ref;\n+    }\n+  }\n+\n+  return newProps;\n+}\n+\n function renderClassComponent(\n   request: Request,\n   task: Task,\n   keyPath: KeyNode,\n   Component: any,\n   props: any,\n ): void {\n+  const resolvedProps = resolveClassComponentProps(Component, props);\n   const previousComponentStack = task.componentStack;\n   task.componentStack = createClassComponentStack(task, Component);\n   const maskedContext = !disableLegacyContext\n     ? getMaskedContext(Component, task.legacyContext)\n     : undefined;\n-  const instance = constructClassInstance(Component, props, maskedContext);\n-  mountClassInstance(instance, Component, props, maskedContext);\n-  finishClassComponent(request, task, keyPath, instance, Component, props);\n+  const instance = constructClassInstance(\n+    Component,\n+    resolvedProps,\n+    maskedContext,\n+  );\n+  mountClassInstance(instance, Component, resolvedProps, maskedContext);\n+  finishClassComponent(\n+    request,\n+    task,\n+    keyPath,\n+    instance,\n+    Component,\n+    resolvedProps,\n+  );\n   task.componentStack = previousComponentStack;\n }\n ",
        "date": "2024-04-03T16:55:57Z",
        "chatgpt": "\"Add resolveClassComponentProps function and update renderClassComponent to use resolved props\"",
        "msg": "Classes consume ref prop during SSR, too (#28731)\n\nSame as #28719 but for SSR."
    },
    {
        "diff": "diff --git a/packages/react-test-renderer/README.md b/a/packages/react-test-renderer/README.md @@ -1,12 +1,26 @@\n-# `react-test-renderer`\n+# `react-test-renderer` (DEPRECATED)\n+\n+## Deprecation notice\n+\n+`react-test-renderer` is deprecated and no longer maintained. It will be removed in a future version. As of React 19, you will see a console warning when invoking `ReactTestRenderer.create()`.\n+\n+### React Testing\n+\n+This library creates a contrived environment and its APIs encourage introspection on React's internals, which may change without notice causing broken tests. It is instead recommended to use browser-based environments such as jsdom and standard DOM APIs for your assertions.\n+\n+The React team recommends [`@testing-library/react`](https://testing-library.com/docs/react-testing-library/intro) as a modern alternative that uses standard APIs, avoids internals, and [promotes best practices](https://testing-library.com/docs/guiding-principles).\n+\n+### React Native Testing\n+\n+The React team recommends @testing-library/react-native as a replacement for `react-test-renderer` for native integration tests. This React Native testing-library variant follows the same API design as described above and promotes better testing patterns.\n+\n+## Documentation\n \n This package provides an experimental React renderer that can be used to render React components to pure JavaScript objects, without depending on the DOM or a native mobile environment.\n \n Essentially, this package makes it easy to grab a snapshot of the \"DOM tree\" rendered by a React DOM or React Native component without using a browser or jsdom.\n \n-Documentation:\n-\n-[https://reactjs.org/docs/test-renderer.html](https://reactjs.org/docs/test-renderer.html)\n+Documentation: [https://reactjs.org/docs/test-renderer.html](https://reactjs.org/docs/test-renderer.html)\n \n Usage:\n ",
        "date": "2024-04-02T15:41:31Z",
        "chatgpt": "Deprecate react-test-renderer and recommend @testing-library/react as a modern alternative for testing.",
        "msg": "Update RTR readme (#28705)"
    },
    {
        "diff": "diff --git a/packages/react-devtools-shell/src/app/ElementTypes/index.js b/a/packages/react-devtools-shell/src/app/ElementTypes/index.js @@ -60,17 +60,15 @@ export default function ElementTypes(): React.Node {\n           <Context.Consumer>{(value: $FlowFixMe) => null}</Context.Consumer>\n         </Context.Provider>\n         <StrictMode>\n-          <Cache>\n-            <Suspense fallback={<div>Loading...</div>}>\n-              <ClassComponent />\n-              <FunctionComponent />\n-              <MemoFunctionComponent />\n-              <ForwardRefComponent />\n-              <ForwardRefComponentWithAnonymousFunction />\n-              <ForwardRefComponentWithCustomDisplayName />\n-              <LazyComponent />\n-            </Suspense>\n-          </Cache>\n+          <Suspense fallback={<div>Loading...</div>}>\n+            <ClassComponent />\n+            <FunctionComponent />\n+            <MemoFunctionComponent />\n+            <ForwardRefComponent />\n+            <ForwardRefComponentWithAnonymousFunction />\n+            <ForwardRefComponentWithCustomDisplayName />\n+            <LazyComponent />\n+          </Suspense>\n         </StrictMode>\n       </Fragment>\n     </Profiler>",
        "date": "2024-04-02T15:13:15Z",
        "chatgpt": "Refactor ElementTypes to use Suspense directly instead of wrapping with Cache component.",
        "msg": "Remove reference to deleted <Cache> in un-linted file (#28715)\n\nI missed this in #28698 bc the file isn't linted"
    },
    {
        "diff": "diff --git a/.nvmrc b/a/.nvmrc @@ -1 +1 @@\n-v16.19.1\n+v18.20.0",
        "date": "2024-04-02T14:04:19Z",
        "chatgpt": "Update Node.js version to v18.20.0",
        "msg": "Bump nvmrc to Node.js v18 (#28707)\n\nBump nvmrc to Node.js v18\r\n\r\nNode.js v16 is long deprecated, seems like for v20 there's some more\r\nstuff to fix."
    },
    {
        "diff": "diff --git a/scripts/rollup/forks.js b/a/scripts/rollup/forks.js @@ -153,10 +153,7 @@ const forks = Object.freeze({\n           case RN_FB_DEV:\n           case RN_FB_PROD:\n           case RN_FB_PROFILING:\n-          case RN_OSS_DEV:\n-          case RN_OSS_PROD:\n-          case RN_OSS_PROFILING:\n-            return './packages/shared/forks/ReactFeatureFlags.test-renderer.native.js';\n+            return './packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js';\n           case FB_WWW_DEV:\n           case FB_WWW_PROD:\n           case FB_WWW_PROFILING:",
        "date": "2024-04-01T14:56:28Z",
        "chatgpt": "Refactor ReactFeatureFlags.test-renderer.native.js to ReactFeatureFlags.test-renderer.native-fb.js for FB forks.",
        "msg": "Clarify RTR native feature flags are fb specific (#28679)\n\nMake it more clear that these flags aren't used in RN OSS.\r\n- Rename\r\n`packages/shared/forks/ReactFeatureFlags.test-renderer.native.js` to\r\n`packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js`\r\n- Remove RN OSS build cases consuming the feature flags since there is\r\nno RN OSS RTR build."
    },
    {
        "diff": "diff --git a/packages/eslint-plugin-react-hooks/README.md b/a/packages/eslint-plugin-react-hooks/README.md @@ -1,8 +1,8 @@\n # `eslint-plugin-react-hooks`\n \n-This ESLint plugin enforces the [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html).\n+This ESLint plugin enforces the [Rules of Hooks](https://react.dev/reference/rules/rules-of-hooks).\n \n-It is a part of the [Hooks API](https://reactjs.org/docs/hooks-intro.html) for React.\n+It is a part of the [Hooks API](https://react.dev/reference/react/hooks) for React.\n \n ## Installation\n \n@@ -68,7 +68,7 @@ We suggest to use this option **very sparingly, if at all**. Generally saying, w\n \n ## Valid and Invalid Examples\n \n-Please refer to the [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html) documentation and the [Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#what-exactly-do-the-lint-rules-enforce) to learn more about this rule.\n+Please refer to the [Rules of Hooks](https://react.dev/reference/rules/rules-of-hooks) documentation to learn more about this rule.\n \n ## License\n ",
        "date": "2024-04-01T14:52:34Z",
        "chatgpt": "Update links in README.md to use react.dev domain.",
        "msg": "[ESLint] Update README links to react.dev (#28692)\n\nUpdate ESLint plugin README to redirect to https://react.dev for more\r\ndetails (instead of legacy docs)"
    },
    {
        "diff": "diff --git a/packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.js b/a/packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.js @@ -50,6 +50,35 @@ describe('ReactTestRenderer', () => {\n     expect(errors[1].message.includes('indexOf is not a function')).toBe(true);\n   });\n \n+  test('find element by prop with suspended content', async () => {\n+    const neverResolve = new Promise(() => {});\n+\n+    function TestComp({foo}) {\n+      if (foo === 'one') {\n+        throw neverResolve;\n+      } else {\n+        return null;\n+      }\n+    }\n+\n+    const tree = await act(() =>\n+      ReactTestRenderer.create(\n+        <div>\n+          <React.Suspense fallback={null}>\n+            <TestComp foo=\"one\" />\n+          </React.Suspense>\n+          <TestComp foo=\"two\" />\n+        </div>,\n+      ),\n+    );\n+\n+    expect(\n+      tree.root.find(item => {\n+        return item.props.foo === 'two';\n+      }),\n+    ).toBeDefined();\n+  });\n+\n   describe('timed out Suspense hidden subtrees should not be observable via toJSON', () => {\n     let AsyncText;\n     let PendingResources;",
        "date": "2024-03-29T18:01:45Z",
        "chatgpt": "Add test to find element by prop with suspended content",
        "msg": "Test for ReactTestRenderer (#28674)\n\nThis is a repro for a breakage that #28672 would introduce for legacy\r\nsync rendering."
    },
    {
        "diff": "diff --git a/packages/react-dom-bindings/src/shared/isUnitlessNumber.js b/a/packages/react-dom-bindings/src/shared/isUnitlessNumber.js @@ -46,6 +46,7 @@ const unitlessNumbers = new Set([\n   'tabSize',\n   'widows',\n   'zIndex',\n+  'zoom',\n   'fillOpacity', // SVG-related properties\n   'floodOpacity',\n   'stopOpacity',\n@@ -60,6 +61,7 @@ const unitlessNumbers = new Set([\n   'MozLineClamp',\n   'msAnimationIterationCount',\n   'msFlex',\n+  'msZoom',\n   'msFlexGrow',\n   'msFlexNegative',\n   'msFlexOrder',",
        "date": "2024-03-29T17:39:12Z",
        "chatgpt": "Add 'zoom' and 'msZoom' to unitlessNumbers list",
        "msg": "Revert \"Remove zoom from special cases list\" (#28673)\n\nReverts facebook/react#26631\r\n\r\nThis got specced: https://github.com/w3c/csswg-drafts/pull/9699\r\n\r\nI left msZoom because it seems plausible someone will still be using it\r\nfor backwards compat."
    },
    {
        "diff": "diff --git a/packages/shared/forks/ReactFeatureFlags.native-oss.js b/a/packages/shared/forks/ReactFeatureFlags.native-oss.js @@ -52,7 +52,6 @@ export const enableCacheElement = __NEXT_RN_MAJOR__;\n export const enableTaint = __NEXT_RN_MAJOR__;\n export const enableUnifiedSyncLane = __NEXT_RN_MAJOR__;\n export const enableFizzExternalRuntime = __NEXT_RN_MAJOR__; // DOM-only\n-export const disableJavaScriptURLs = __NEXT_RN_MAJOR__; // DOM-only\n export const enableBinaryFlight = __NEXT_RN_MAJOR__; // DOM-only\n export const enableCustomElementPropertySupport = __NEXT_RN_MAJOR__; // DOM-only\n export const enableServerComponentKeys = __NEXT_RN_MAJOR__;",
        "date": "2024-03-27T13:53:42Z",
        "chatgpt": "Remove disableJavaScriptURLs feature flag",
        "msg": "Remove orphaned disableJavaScriptURLs reference (#28660)"
    },
    {
        "diff": "diff --git a/packages/react-dom-bindings/src/shared/isUnitlessNumber.js b/a/packages/react-dom-bindings/src/shared/isUnitlessNumber.js @@ -46,7 +46,6 @@ const unitlessNumbers = new Set([\n   'tabSize',\n   'widows',\n   'zIndex',\n-  'zoom',\n   'fillOpacity', // SVG-related properties\n   'floodOpacity',\n   'stopOpacity',\n@@ -61,7 +60,6 @@ const unitlessNumbers = new Set([\n   'MozLineClamp',\n   'msAnimationIterationCount',\n   'msFlex',\n-  'msZoom',\n   'msFlexGrow',\n   'msFlexNegative',\n   'msFlexOrder',",
        "date": "2024-03-26T21:19:02Z",
        "chatgpt": "Remove unitless number 'zoom' and 'msZoom' from the set",
        "msg": "Remove zoom from special cases list (#26631)\n\nLooks like [it's getting removed\r\nanyway](https://groups.google.com/a/chromium.org/g/blink-dev/c/V7q43bgutbo/m/-7jneTl8CQAJ?pli=1).\r\n\r\nMaybe should wait for a major though."
    },
    {
        "diff": "diff --git a/packages/react-dom/src/client/ReactDOMLegacy.js b/a/packages/react-dom/src/client/ReactDOMLegacy.js @@ -396,6 +396,14 @@ export function unstable_renderSubtreeIntoContainer(\n }\n \n export function unmountComponentAtNode(container: Container): boolean {\n+  if (disableLegacyMode) {\n+    if (__DEV__) {\n+      console.error(\n+        'unmountComponentAtNode is no longer supported in React 18. Use root.unmount() instead.',\n+      );\n+    }\n+    throw new Error('ReactDOM: Unsupported Legacy Mode API.');\n+  }\n   if (!isValidContainerLegacy(container)) {\n     throw new Error('Target container is not a DOM element.');\n   }",
        "date": "2024-03-26T20:32:43Z",
        "chatgpt": "Refactor unmountComponentAtNode to throw error in case of unsupported legacy mode API usage",
        "msg": "Remove unmountComponentAtNode outside of legacy mode (#28650)"
    },
    {
        "diff": "diff --git a/CHANGELOG-canary.md b/a/CHANGELOG-canary.md @@ -1,3 +1,8 @@\n+## March 22, 2024 (18.3.0-canary-670811593-20240322)\n+\n+## React\n+- Added `useActionState` to replace `useFormState` and added `pending` value ([#28491](https://github.com/facebook/react/pull/28491)).\n+\n ## October 5, 2023 (18.3.0-canary-546178f91-20231005)\n \n ### React",
        "date": "2024-03-26T17:15:08Z",
        "chatgpt": "Add useActionState to replace useFormState and add pending value (#28491)",
        "msg": "Add useActionState to CHANGELOG-canary.md (#28632)\n\nCo-authored-by: S\u00e9bastien Lorber <slorber@users.noreply.github.com>"
    },
    {
        "diff": "diff --git a/scripts/rollup/build-all-release-channels.js b/a/scripts/rollup/build-all-release-channels.js @@ -158,18 +158,16 @@ function processStable(buildDir) {\n   }\n \n   if (fs.existsSync(buildDir + '/facebook-www')) {\n-    const hash = crypto.createHash('sha1');\n     for (const fileName of fs.readdirSync(buildDir + '/facebook-www').sort()) {\n       const filePath = buildDir + '/facebook-www/' + fileName;\n       const stats = fs.statSync(filePath);\n       if (!stats.isDirectory()) {\n-        hash.update(fs.readFileSync(filePath));\n         fs.renameSync(filePath, filePath.replace('.js', '.classic.js'));\n       }\n     }\n     updatePlaceholderReactVersionInCompiledArtifacts(\n       buildDir + '/facebook-www',\n-      ReactVersion + '-www-classic-' + hash.digest('hex').slice(0, 8)\n+      ReactVersion + '-www-classic-%FILEHASH%'\n     );\n   }\n \n@@ -224,18 +222,16 @@ function processExperimental(buildDir, version) {\n   }\n \n   if (fs.existsSync(buildDir + '/facebook-www')) {\n-    const hash = crypto.createHash('sha1');\n     for (const fileName of fs.readdirSync(buildDir + '/facebook-www').sort()) {\n       const filePath = buildDir + '/facebook-www/' + fileName;\n       const stats = fs.statSync(filePath);\n       if (!stats.isDirectory()) {\n-        hash.update(fs.readFileSync(filePath));\n         fs.renameSync(filePath, filePath.replace('.js', '.modern.js'));\n       }\n     }\n     updatePlaceholderReactVersionInCompiledArtifacts(\n       buildDir + '/facebook-www',\n-      ReactVersion + '-www-modern-' + hash.digest('hex').slice(0, 8)\n+      ReactVersion + '-www-modern-%FILEHASH%'\n     );\n   }\n ",
        "date": "2024-03-26T16:13:46Z",
        "chatgpt": "Refactor build-all-release-channels.js to update file naming and placeholder React version in compiled artifacts.",
        "msg": "Switch facebook-www build version to file content hash (#28633)\n\nUnifies the React version string pattern with RN just to simplify the\r\nbuild script a tiny bit and not have 2 mechanisms for the Meta-internal\r\nbuild."
    },
    {
        "diff": "diff --git a/packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js b/a/packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js @@ -289,6 +289,59 @@ describe('ReactSuspense', () => {\n     expect(container.textContent).toEqual('AB');\n   });\n \n+  it('pushes out siblings that render faster than throttle', async () => {\n+    function Foo() {\n+      Scheduler.log('Foo');\n+      return (\n+        <Suspense fallback={<Text text=\"Loading...\" />}>\n+          <AsyncText text=\"A\" ms={290} />\n+          <Suspense fallback={<Text text=\"Loading more...\" />}>\n+            <AsyncText text=\"B\" ms={30} />\n+          </Suspense>\n+        </Suspense>\n+      );\n+    }\n+\n+    setTimeout(async () => {\n+      // TODO: this is dumb, but AsyncText isn't timer based after the act changes.\n+      // Pretend that this is the start of the sibling suspending.\n+      // In a real test, the timer would start when we render B.\n+      setTimeout(async () => {\n+        resolveText('B');\n+      }, 30);\n+\n+      resolveText('A');\n+    }, 290);\n+\n+    // Render an empty shell\n+    const root = ReactTestRenderer.create(<Foo />, {\n+      isConcurrent: true,\n+    });\n+\n+    await waitForAll(['Foo', 'Suspend! [A]', 'Loading...']);\n+    expect(root).toMatchRenderedOutput('Loading...');\n+\n+    // Now resolve A\n+    jest.advanceTimersByTime(290);\n+    await waitFor(['A']);\n+    expect(root).toMatchRenderedOutput('Loading...');\n+\n+    // B starts loading. Parent boundary is in throttle.\n+    // Still shows parent loading under throttle\n+    jest.advanceTimersByTime(10);\n+    await waitForAll(['Suspend! [B]', 'Loading more...']);\n+    expect(root).toMatchRenderedOutput('Loading...');\n+\n+    // !! B could have finished before the throttle, but we show a fallback.\n+    // !! Pushing out the 30ms fetch for B to 300ms.\n+    jest.advanceTimersByTime(300);\n+    await waitFor(['B']);\n+    expect(root).toMatchRenderedOutput('ALoading more...');\n+\n+    await act(() => {});\n+    expect(root).toMatchRenderedOutput('AB');\n+  });\n+\n   it('does not throttle fallback committing for too long', async () => {\n     function Foo() {\n       Scheduler.log('Foo');",
        "date": "2024-03-26T04:02:46Z",
        "chatgpt": "Add test for pushing out siblings that render faster than throttle",
        "msg": "Add test for throttling suspended siblings (#28361)\n\n# Overview\r\n\r\nAdds a test to show the combination of the new throttling behavior and\r\nnot pre-rendering siblings results in pushing out content that could\r\nhave rendered much faster.\r\n\r\n- Without the new throttling, the sibling content would render in 30ms.\r\n- Without removing pre-rendering, the sibling content would render in\r\n0ms.\r\n- With both, the sibling content takes 600ms.\r\n\r\n## Example\r\n\r\n\r\nhttps://github.com/facebook/react/assets/2440089/abd62dc4-93f9-4b7b-a5aa-b795827c1a3a"
    },
    {
        "diff": "diff --git a/yarn.lock b/a/yarn.lock @@ -15791,9 +15791,9 @@ webpack-cli@^5.1.1:\n     webpack-merge \"^5.7.3\"\n \n webpack-dev-middleware@^5.3.1:\n-  version \"5.3.3\"\n-  resolved \"https://registry.yarnpkg.com/webpack-dev-middleware/-/webpack-dev-middleware-5.3.3.tgz#efae67c2793908e7311f1d9b06f2a08dcc97e51f\"\n-  integrity sha512-hj5CYrY0bZLB+eTO+x/j67Pkrquiy7kWepMHmUMoPsmcUaeEnQJqFzHJOyxgWlq746/wUuA64p9ta34Kyb01pA==\n+  version \"5.3.4\"\n+  resolved \"https://registry.yarnpkg.com/webpack-dev-middleware/-/webpack-dev-middleware-5.3.4.tgz#eb7b39281cbce10e104eb2b8bf2b63fce49a3517\"\n+  integrity sha512-BVdTqhhs+0IfoeAf7EoH5WE+exCmqGerHfDM0IL096Px60Tq2Mn9MAbnaGUe6HiMa41KMCYF19gyzZmBcq/o4Q==\n   dependencies:\n     colorette \"^2.0.10\"\n     memfs \"^3.4.3\"",
        "date": "2024-03-25T17:36:03Z",
        "chatgpt": "Update webpack-dev-middleware to version 5.3.4",
        "msg": "Bump webpack-dev-middleware from 5.3.3 to 5.3.4 (#28621)\n\nBumps\r\n[webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware)\r\nfrom 5.3.3 to 5.3.4.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/webpack/webpack-dev-middleware/releases\">webpack-dev-middleware's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>v5.3.4</h2>\r\n<h3><a\r\nhref=\"https://github.com/webpack/webpack-dev-middleware/compare/v5.3.3...v5.3.4\">5.3.4</a>\r\n(2024-03-20)</h3>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>security:</strong> do not allow to read files above (<a\r\nhref=\"https://redirect.github.com/webpack/webpack-dev-middleware/issues/1779\">#1779</a>)\r\n(<a\r\nhref=\"https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132\">189c4ac</a>)</li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/webpack/webpack-dev-middleware/blob/v5.3.4/CHANGELOG.md\">webpack-dev-middleware's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h3><a\r\nhref=\"https://github.com/webpack/webpack-dev-middleware/compare/v5.3.3...v5.3.4\">5.3.4</a>\r\n(2024-03-20)</h3>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>security:</strong> do not allow to read files above (<a\r\nhref=\"https://redirect.github.com/webpack/webpack-dev-middleware/issues/1779\">#1779</a>)\r\n(<a\r\nhref=\"https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132\">189c4ac</a>)</li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/webpack/webpack-dev-middleware/commit/86071ead69e946ada25497d3e281923e885229a4\"><code>86071ea</code></a>\r\nchore(release): 5.3.4</li>\r\n<li><a\r\nhref=\"https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132\"><code>189c4ac</code></a>\r\nfix(security): do not allow to read files above (<a\r\nhref=\"https://redirect.github.com/webpack/webpack-dev-middleware/issues/1779\">#1779</a>)</li>\r\n<li>See full diff in <a\r\nhref=\"https://github.com/webpack/webpack-dev-middleware/compare/v5.3.3...v5.3.4\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-middleware&package-manager=npm_and_yarn&previous-version=5.3.3&new-version=5.3.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    },
    {
        "diff": "diff --git a/packages/react-devtools-shell/src/app/InspectableElements/Contexts.js b/a/packages/react-devtools-shell/src/app/InspectableElements/Contexts.js @@ -273,15 +273,46 @@ class ModernClassContextConsumerWithUpdates extends Component<any> {\n   }\n }\n \n+type LegacyContextState = {\n+  supportsLegacyContext: boolean,\n+};\n+class LegacyContext extends React.Component {\n+  state: LegacyContextState = {supportsLegacyContext: true};\n+\n+  static getDerivedStateFromError(error: any): LegacyContextState {\n+    return {supportsLegacyContext: false};\n+  }\n+\n+  componentDidCatch(error: any, info: any) {\n+    console.info(\n+      'Assuming legacy context is not supported in this React version due to: ',\n+      error,\n+      info,\n+    );\n+  }\n+\n+  render(): React.Node {\n+    if (!this.state.supportsLegacyContext) {\n+      return <p>This version of React does not support legacy context.</p>;\n+    }\n+\n+    return (\n+      <React.Fragment>\n+        <LegacyContextProvider>\n+          <LegacyContextConsumer />\n+        </LegacyContextProvider>\n+        <LegacyContextProviderWithUpdates />\n+      </React.Fragment>\n+    );\n+  }\n+}\n+\n export default function Contexts(): React.Node {\n   return (\n     <div>\n       <h1>Contexts</h1>\n       <ul>\n-        <LegacyContextProvider>\n-          <LegacyContextConsumer />\n-        </LegacyContextProvider>\n-        <LegacyContextProviderWithUpdates />\n+        <LegacyContext />\n         <ModernContext.Provider value={contextData}>\n           <ModernContext.Consumer>\n             {(value: $FlowFixMe) =>",
        "date": "2024-03-25T13:30:08Z",
        "chatgpt": "Add legacy context component to inspectable elements.",
        "msg": "Guard against legacy context not being supported in DevTools fixture (#28596)"
    },
    {
        "diff": "diff --git a/.github/stale.yml b/a/.github/stale.yml @@ -12,6 +12,7 @@ exemptLabels:\n   - \"Type: Discussion\"\n   - \"Type: Needs Investigation\"\n   - \"Type: Regression\"\n+  - \"Type: Feature Request\"\n # Label to use when marking an issue as stale\n staleLabel: \"Resolution: Stale\"\n issues:",
        "date": "2024-03-24T16:48:12Z",
        "chatgpt": "Add \"Type: Feature Request\" to exemptLabels in stale.yml",
        "msg": "Add Type: Feature Request to stalebot ignore (#28625)\n\nPrevent issues like https://github.com/facebook/react/issues/12525 from\r\nclosing due to inactivity."
    },
    {
        "diff": "diff --git a/scripts/rollup/build-all-release-channels.js b/a/scripts/rollup/build-all-release-channels.js @@ -239,6 +239,18 @@ function processExperimental(buildDir, version) {\n     );\n   }\n \n+  [\n+    buildDir + '/react-native/implementations/',\n+    buildDir + '/facebook-react-native/',\n+  ].forEach(reactNativeBuildDir => {\n+    if (fs.existsSync(reactNativeBuildDir)) {\n+      updatePlaceholderReactVersionInCompiledArtifacts(\n+        reactNativeBuildDir,\n+        ReactVersion + '-' + canaryChannelLabel + '-%FILEHASH%'\n+      );\n+    }\n+  });\n+\n   // Update remaining placeholders with canary channel version\n   updatePlaceholderReactVersionInCompiledArtifacts(\n     buildDir,",
        "date": "2024-03-19T21:50:24Z",
        "chatgpt": "\"Update React version placeholders in compiled artifacts for canary channel\"",
        "msg": "Also apply content hash for experimental files (#28590)\n\nAlso apply content hash for experimental files\r\n\r\nIn #28582 I missed that experimental files have a copy of this build\r\nfunction setting the version strings."
    },
    {
        "diff": "diff --git a/scripts/rollup/build-all-release-channels.js b/a/scripts/rollup/build-all-release-channels.js @@ -173,25 +173,17 @@ function processStable(buildDir) {\n     );\n   }\n \n-  const reactNativeBuildDir = buildDir + '/react-native/implementations/';\n-  if (fs.existsSync(reactNativeBuildDir)) {\n-    const hash = crypto.createHash('sha1');\n-    for (const fileName of fs.readdirSync(reactNativeBuildDir).sort()) {\n-      const filePath = reactNativeBuildDir + fileName;\n-      const stats = fs.statSync(filePath);\n-      if (!stats.isDirectory()) {\n-        hash.update(fs.readFileSync(filePath));\n-      }\n+  [\n+    buildDir + '/react-native/implementations/',\n+    buildDir + '/facebook-react-native/',\n+  ].forEach(reactNativeBuildDir => {\n+    if (fs.existsSync(reactNativeBuildDir)) {\n+      updatePlaceholderReactVersionInCompiledArtifacts(\n+        reactNativeBuildDir,\n+        ReactVersion + '-' + canaryChannelLabel + '-%FILEHASH%'\n+      );\n     }\n-    updatePlaceholderReactVersionInCompiledArtifacts(\n-      reactNativeBuildDir,\n-      ReactVersion +\n-        '-' +\n-        canaryChannelLabel +\n-        '-' +\n-        hash.digest('hex').slice(0, 8)\n-    );\n-  }\n+  });\n \n   // Update remaining placeholders with canary channel version\n   updatePlaceholderReactVersionInCompiledArtifacts(\n@@ -362,9 +354,11 @@ function updatePlaceholderReactVersionInCompiledArtifacts(\n \n   for (const artifactFilename of artifactFilenames) {\n     const originalText = fs.readFileSync(artifactFilename, 'utf8');\n+    const fileHash = crypto.createHash('sha1');\n+    fileHash.update(originalText);\n     const replacedText = originalText.replaceAll(\n       PLACEHOLDER_REACT_VERSION,\n-      newVersion\n+      newVersion.replace(/%FILEHASH%/g, fileHash.digest('hex').slice(0, 8))\n     );\n     fs.writeFileSync(artifactFilename, replacedText);\n   }",
        "date": "2024-03-19T20:16:34Z",
        "chatgpt": "Refactor build-all-release-channels.js to update React version placeholders with canary channel label and file hash.",
        "msg": "Change to content hash for RN canary VERSION strings (#28582)\n\nWith this change, the different files in RN will have *different*\r\nhashes. This replaces the git hash and means that the file content\r\n(including version) is only updated when the rest of the file content\r\nactually changes. This should remove \"noop\" changes that need to be\r\nsynced that only update the version string.\r\n\r\nA difference to the www implementation here is (and I'd be looking at\r\nupdating www as well if this lands well) that each file has an\r\nindividual hash instead of a combined content hash. This further reduces\r\nthe number of updated files and I couldn't find a reason we need to have\r\nthese in sync. The best I can gather is that this hash is used so folks\r\ndon't directly compare version string and make future updates harder."
    },
    {
        "diff": "diff --git a/packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js b/a/packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js @@ -1244,7 +1244,7 @@ describe('ReactHooksInspectionIntegration', () => {\n         <Context.Provider value=\"provided\">\n           <Foo />\n         </Context.Provider>,\n-        {isConcurrent: true},\n+        {unstable_isConcurrent: true},\n       );\n     });\n     let childFiber = renderer.root.findByType(Foo)._currentFiber();",
        "date": "2024-03-18T17:15:23Z",
        "chatgpt": "Fix unstable_isConcurrent prop in ReactHooksInspectionIntegration-test",
        "msg": "Fix ReactHooksInspectionIntegration-test (#28577)\n\nResolve conflict between #28508 and #28546"
    },
    {
        "diff": "diff --git a/fixtures/ssr/yarn.lock b/a/fixtures/ssr/yarn.lock @@ -2771,9 +2771,9 @@ flatten@^1.0.2:\n   integrity sha512-dVsPA/UwQ8+2uoFe5GHtiBMu48dWLTdsuEd7CKGlZlD78r1TTWBvDuFaFGKCo/ZfEr95Uk56vZoX86OsHkUeIg==\n \n follow-redirects@^1.0.0:\n-  version \"1.15.4\"\n-  resolved \"https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.15.4.tgz#cdc7d308bf6493126b17ea2191ea0ccf3e535adf\"\n-  integrity sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw==\n+  version \"1.15.6\"\n+  resolved \"https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.15.6.tgz#7f815c0cda4249c74ff09e95ef97c23b5fd0399b\"\n+  integrity sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==\n \n for-in@^1.0.1, for-in@^1.0.2:\n   version \"1.0.2\"",
        "date": "2024-03-18T15:59:57Z",
        "chatgpt": "Update follow-redirects package to version 1.15.6",
        "msg": "Bump follow-redirects from 1.15.4 to 1.15.6 in /fixtures/ssr (#28571)\n\nBumps\r\n[follow-redirects](https://github.com/follow-redirects/follow-redirects)\r\nfrom 1.15.4 to 1.15.6.\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/35a517c5861d79dc8bff7db8626013d20b711b06\"><code>35a517c</code></a>\r\nRelease version 1.15.6 of the npm package.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b\"><code>c4f847f</code></a>\r\nDrop Proxy-Authorization across hosts.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/8526b4a1b2ab3a2e4044299377df623a661caa76\"><code>8526b4a</code></a>\r\nUse GitHub for disclosure.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/b1677ce00110ee50dc5da576751d39b281fc4944\"><code>b1677ce</code></a>\r\nRelease version 1.15.5 of the npm package.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/d8914f7982403ea096b39bd594a00ee9d3b7e224\"><code>d8914f7</code></a>\r\nPreserve fragment in responseUrl.</li>\r\n<li>See full diff in <a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/compare/v1.15.4...v1.15.6\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.15.4&new-version=1.15.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    },
    {
        "diff": "diff --git a/fixtures/concurrent/time-slicing/yarn.lock b/a/fixtures/concurrent/time-slicing/yarn.lock @@ -3372,9 +3372,9 @@ flatten@^1.0.2:\n   integrity sha512-dVsPA/UwQ8+2uoFe5GHtiBMu48dWLTdsuEd7CKGlZlD78r1TTWBvDuFaFGKCo/ZfEr95Uk56vZoX86OsHkUeIg==\n \n follow-redirects@^1.0.0:\n-  version \"1.15.4\"\n-  resolved \"https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.15.4.tgz#cdc7d308bf6493126b17ea2191ea0ccf3e535adf\"\n-  integrity sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw==\n+  version \"1.15.6\"\n+  resolved \"https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.15.6.tgz#7f815c0cda4249c74ff09e95ef97c23b5fd0399b\"\n+  integrity sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==\n \n for-in@^1.0.1, for-in@^1.0.2:\n   version \"1.0.2\"",
        "date": "2024-03-18T15:56:04Z",
        "chatgpt": "Update follow-redirects package to version 1.15.6",
        "msg": "Bump follow-redirects from 1.15.4 to 1.15.6 in /fixtures/concurrent/time-slicing (#28572)\n\nBumps\r\n[follow-redirects](https://github.com/follow-redirects/follow-redirects)\r\nfrom 1.15.4 to 1.15.6.\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/35a517c5861d79dc8bff7db8626013d20b711b06\"><code>35a517c</code></a>\r\nRelease version 1.15.6 of the npm package.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b\"><code>c4f847f</code></a>\r\nDrop Proxy-Authorization across hosts.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/8526b4a1b2ab3a2e4044299377df623a661caa76\"><code>8526b4a</code></a>\r\nUse GitHub for disclosure.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/b1677ce00110ee50dc5da576751d39b281fc4944\"><code>b1677ce</code></a>\r\nRelease version 1.15.5 of the npm package.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/d8914f7982403ea096b39bd594a00ee9d3b7e224\"><code>d8914f7</code></a>\r\nPreserve fragment in responseUrl.</li>\r\n<li>See full diff in <a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/compare/v1.15.4...v1.15.6\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.15.4&new-version=1.15.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    },
    {
        "diff": "diff --git a/fixtures/dom/yarn.lock b/a/fixtures/dom/yarn.lock @@ -3366,9 +3366,9 @@ flatten@^1.0.2:\n   integrity sha512-dVsPA/UwQ8+2uoFe5GHtiBMu48dWLTdsuEd7CKGlZlD78r1TTWBvDuFaFGKCo/ZfEr95Uk56vZoX86OsHkUeIg==\n \n follow-redirects@^1.0.0:\n-  version \"1.13.0\"\n-  resolved \"https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.13.0.tgz#b42e8d93a2a7eea5ed88633676d6597bc8e384db\"\n-  integrity sha512-aq6gF1BEKje4a9i9+5jimNFIpq4Q1WiwBToeRK5NvZBd/TRsmW8BsJfOEGkr76TbOyPVD3OVDN910EcUNtRYEA==\n+  version \"1.15.6\"\n+  resolved \"https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.15.6.tgz#7f815c0cda4249c74ff09e95ef97c23b5fd0399b\"\n+  integrity sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==\n \n for-in@^1.0.1, for-in@^1.0.2:\n   version \"1.0.2\"",
        "date": "2024-03-18T15:55:56Z",
        "chatgpt": "Update follow-redirects package to version 1.15.6",
        "msg": "Bump follow-redirects from 1.13.0 to 1.15.6 in /fixtures/dom (#28560)\n\nBumps\r\n[follow-redirects](https://github.com/follow-redirects/follow-redirects)\r\nfrom 1.13.0 to 1.15.6.\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/35a517c5861d79dc8bff7db8626013d20b711b06\"><code>35a517c</code></a>\r\nRelease version 1.15.6 of the npm package.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b\"><code>c4f847f</code></a>\r\nDrop Proxy-Authorization across hosts.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/8526b4a1b2ab3a2e4044299377df623a661caa76\"><code>8526b4a</code></a>\r\nUse GitHub for disclosure.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/b1677ce00110ee50dc5da576751d39b281fc4944\"><code>b1677ce</code></a>\r\nRelease version 1.15.5 of the npm package.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/d8914f7982403ea096b39bd594a00ee9d3b7e224\"><code>d8914f7</code></a>\r\nPreserve fragment in responseUrl.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/65858205e59f1e23c9bf173348a7a7cbb8ac47f5\"><code>6585820</code></a>\r\nRelease version 1.15.4 of the npm package.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/7a6567e16dfa9ad18a70bfe91784c28653fbf19d\"><code>7a6567e</code></a>\r\nDisallow bracketed hostnames.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/05629af696588b90d64e738bc2e809a97a5f92fc\"><code>05629af</code></a>\r\nPrefer native URL instead of deprecated url.parse.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/1cba8e85fa73f563a439fe460cf028688e4358df\"><code>1cba8e8</code></a>\r\nPrefer native URL instead of legacy url.resolve.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/72bc2a4229bc18dc9fbd57c60579713e6264cb92\"><code>72bc2a4</code></a>\r\nSimplify _processResponse error handling.</li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/compare/v1.13.0...v1.15.6\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.13.0&new-version=1.15.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    },
    {
        "diff": "diff --git a/yarn.lock b/a/yarn.lock @@ -6997,7 +6997,6 @@ eslint-plugin-no-unsanitized@3.1.2:\n \n \"eslint-plugin-react-internal@link:./scripts/eslint-rules\":\n   version \"0.0.0\"\n-  uid \"\"\n \n eslint-plugin-react@^6.7.1:\n   version \"6.10.3\"\n@@ -7977,9 +7976,9 @@ fluent-syntax@0.13.0:\n   integrity sha512-0Bk1AsliuYB550zr4JV9AYhsETsD3ELXUQzdXGJfIc1Ni/ukAfBdQInDhVMYJUaT2QxoamNslwkYF7MlOrPUwg==\n \n follow-redirects@^1.0.0:\n-  version \"1.15.4\"\n-  resolved \"https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.15.4.tgz#cdc7d308bf6493126b17ea2191ea0ccf3e535adf\"\n-  integrity sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw==\n+  version \"1.15.6\"\n+  resolved \"https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.15.6.tgz#7f815c0cda4249c74ff09e95ef97c23b5fd0399b\"\n+  integrity sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==\n \n for-in@^1.0.2:\n   version \"1.0.2\"",
        "date": "2024-03-18T15:49:53Z",
        "chatgpt": "Update follow-redirects package to version 1.15.6",
        "msg": "Bump follow-redirects from 1.15.4 to 1.15.6 (#28573)\n\nBumps\r\n[follow-redirects](https://github.com/follow-redirects/follow-redirects)\r\nfrom 1.15.4 to 1.15.6.\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/35a517c5861d79dc8bff7db8626013d20b711b06\"><code>35a517c</code></a>\r\nRelease version 1.15.6 of the npm package.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b\"><code>c4f847f</code></a>\r\nDrop Proxy-Authorization across hosts.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/8526b4a1b2ab3a2e4044299377df623a661caa76\"><code>8526b4a</code></a>\r\nUse GitHub for disclosure.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/b1677ce00110ee50dc5da576751d39b281fc4944\"><code>b1677ce</code></a>\r\nRelease version 1.15.5 of the npm package.</li>\r\n<li><a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/commit/d8914f7982403ea096b39bd594a00ee9d3b7e224\"><code>d8914f7</code></a>\r\nPreserve fragment in responseUrl.</li>\r\n<li>See full diff in <a\r\nhref=\"https://github.com/follow-redirects/follow-redirects/compare/v1.15.4...v1.15.6\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.15.4&new-version=1.15.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    },
    {
        "diff": "diff --git a/packages/scheduler/src/__tests__/Scheduler-test.js b/a/packages/scheduler/src/__tests__/Scheduler-test.js @@ -247,7 +247,8 @@ describe('SchedulerBrowser', () => {\n     });\n     runtime.assertLog(['Post Message']);\n     cancelCallback(task);\n-    runtime.assertLog([]);\n+    runtime.fireMessageEvent();\n+    runtime.assertLog(['Message Event']);\n   });\n \n   it('throws when a task errors then continues in a new event', () => {",
        "date": "2024-03-15T20:21:46Z",
        "chatgpt": "Add message event handling in Scheduler-test.js",
        "msg": "Fix log assertion in cancels tasks in Scheduler-test (#28562)"
    },
    {
        "diff": "diff --git a/packages/shared/forks/ReactFeatureFlags.native-oss.js b/a/packages/shared/forks/ReactFeatureFlags.native-oss.js @@ -10,6 +10,13 @@\n import typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\n import typeof * as ExportsType from './ReactFeatureFlags.native-oss';\n \n+// -----------------------------------------------------------------------------\n+// Ready for next major.\n+//\n+// Alias __NEXT_MAJOR__ to false for easier skimming.\n+// -----------------------------------------------------------------------------\n+const __NEXT_MAJOR__ = false;\n+\n export const debugRenderPhaseSideEffectsForStrictMode = __DEV__;\n export const enableDebugTracing = false;\n export const enableAsyncDebugInfo = false;\n@@ -18,7 +25,7 @@ export const enableProfilerTimer = __PROFILE__;\n export const enableProfilerCommitHooks = __PROFILE__;\n export const enableProfilerNestedUpdatePhase = __PROFILE__;\n export const enableUpdaterTracking = __PROFILE__;\n-export const enableCache = true;\n+export const enableCache = __NEXT_MAJOR__;\n export const enableLegacyCache = false;\n export const enableCacheElement = true;\n export const enableFetchInstrumentation = false;",
        "date": "2024-03-15T18:02:46Z",
        "chatgpt": "\"Update ReactFeatureFlags.native-oss.js for next major release\"",
        "msg": "Revert rollout state of enableCache in React Native to next major only (#28565)\n\n## Summary\r\n\r\nWe're working on enabling the use of microtasks in React Native by\r\ndefault when using the new architecture. To enable this we need to\r\nsynchronize the RN renderers from React, but doing this causes an error\r\nbecause the renderers now rely on an object defined in\r\n`React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED`\r\n(`ReactCurrentCache`) that's hasn't been released as a stable version\r\nyet (cache).\r\n\r\nThis reverts the change done in #28519 to avoid enabling the cache API\r\nin RN until we release a new version of React in npm.\r\n\r\n## How did you test this change?\r\n\r\nManually built the RN renderer, copied it to the RN repository and\r\ntested e2e in RNTester."
    },
    {
        "diff": "diff --git a/packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js b/a/packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js @@ -7774,6 +7774,16 @@ const testsTypescript = {\n         }\n       `,\n     },\n+    {\n+      code: normalizeIndent`\n+        function useMyThing<T>(): void {\n+          useEffect(() => {\n+            let foo: T;\n+            console.log(foo);\n+          }, []);\n+        }\n+      `,\n+    },\n   ],\n   invalid: [\n     {",
        "date": "2024-03-14T14:41:37Z",
        "chatgpt": "Add useMyThing function with generic type and useEffect with empty dependency array.",
        "msg": "Add passing exhaustive-deps test for type parameters in TypeScript (#20432)"
    },
    {
        "diff": "diff --git a/packages/react-dom/src/__tests__/refs-destruction-test.js b/a/packages/react-dom/src/__tests__/refs-destruction-test.js @@ -12,7 +12,6 @@\n let React;\n let ReactDOM;\n let ReactDOMClient;\n-let ReactTestUtils;\n let TestComponent;\n let act;\n let theInnerDivRef;\n@@ -25,7 +24,6 @@ describe('refs-destruction', () => {\n     React = require('react');\n     ReactDOM = require('react-dom');\n     ReactDOMClient = require('react-dom/client');\n-    ReactTestUtils = require('react-dom/test-utils');\n     act = require('internal-test-utils').act;\n \n     class ClassComponent extends React.Component {\n@@ -75,7 +73,7 @@ describe('refs-destruction', () => {\n       root.render(<TestComponent />);\n     });\n \n-    expect(ReactTestUtils.isDOMComponent(theInnerDivRef.current)).toBe(true);\n+    expect(theInnerDivRef.current).toBeInstanceOf(Element);\n     expect(theInnerClassComponentRef.current).toBeTruthy();\n \n     root.unmount();\n@@ -91,7 +89,7 @@ describe('refs-destruction', () => {\n       root.render(<TestComponent />);\n     });\n \n-    expect(ReactTestUtils.isDOMComponent(theInnerDivRef.current)).toBe(true);\n+    expect(theInnerDivRef.current).toBeInstanceOf(Element);\n     expect(theInnerClassComponentRef.current).toBeTruthy();\n \n     await act(async () => {\n@@ -109,7 +107,7 @@ describe('refs-destruction', () => {\n       root.render(<TestComponent />);\n     });\n \n-    expect(ReactTestUtils.isDOMComponent(theInnerDivRef.current)).toBe(true);\n+    expect(theInnerDivRef.current).toBeInstanceOf(Element);\n     expect(theInnerClassComponentRef.current).toBeTruthy();\n \n     await act(async () => {",
        "date": "2024-03-11T21:11:40Z",
        "chatgpt": "Refactor refs-destruction test to use Element instanceof check",
        "msg": "Remove ReactTestUtils from refs-destruction-test (#28532)\n\n```diff\r\n-expect(ReactTestUtils.isDOMComponent(maybeElement)).toBe(true);\r\n+expect(maybeElement).toBeInstanceOf(Element);\r\n```\r\n\r\nIt's not equivalent since `isDOMComponent` checks `maybeElement.nodeType\r\n=== Element.ELEMENT_NODE && !!maybeElement.tagName` but `instanceof`\r\ncheck seems sufficient here. Checking `nodeType` is mostly for\r\ncross-realm checks and checking falsy `tagName` seems like a check\r\nspecifically for incomplete DOM implementations because tagName can't be\r\nempty by spec I believe."
    },
    {
        "diff": "diff --git a/packages/react-debug-tools/src/__tests__/ReactDevToolsHooksIntegration-test.js b/a/packages/react-debug-tools/src/__tests__/ReactDevToolsHooksIntegration-test.js @@ -43,7 +43,7 @@ describe('React hooks DevTools integration', () => {\n     const InternalTestUtils = require('internal-test-utils');\n     waitForAll = InternalTestUtils.waitForAll;\n \n-    act = ReactTestRenderer.act;\n+    act = require('internal-test-utils').act;\n   });\n \n   it('should support editing useState hooks', async () => {\n@@ -55,7 +55,12 @@ describe('React hooks DevTools integration', () => {\n       return <div>count:{count}</div>;\n     }\n \n-    const renderer = ReactTestRenderer.create(<MyComponent />);\n+    let renderer;\n+    await act(() => {\n+      renderer = ReactTestRenderer.create(<MyComponent />, {\n+        unstable_isConcurrent: true,\n+      });\n+    });\n     expect(renderer.toJSON()).toEqual({\n       type: 'div',\n       props: {},\n@@ -107,7 +112,12 @@ describe('React hooks DevTools integration', () => {\n       );\n     }\n \n-    const renderer = ReactTestRenderer.create(<MyComponent />);\n+    let renderer;\n+    await act(() => {\n+      renderer = ReactTestRenderer.create(<MyComponent />, {\n+        unstable_isConcurrent: true,\n+      });\n+    });\n     expect(renderer.toJSON()).toEqual({\n       type: 'div',\n       props: {},\n@@ -155,7 +165,12 @@ describe('React hooks DevTools integration', () => {\n       return <div>count:{count}</div>;\n     }\n \n-    const renderer = ReactTestRenderer.create(<MyComponent />);\n+    let renderer;\n+    await act(() => {\n+      renderer = ReactTestRenderer.create(<MyComponent />, {\n+        unstable_isConcurrent: true,\n+      });\n+    });\n     expect(renderer.toJSON()).toEqual({\n       type: 'div',\n       props: {},\n@@ -192,14 +207,17 @@ describe('React hooks DevTools integration', () => {\n     function MyComponent() {\n       return 'Done';\n     }\n-\n-    const renderer = ReactTestRenderer.create(\n-      <div>\n-        <React.Suspense fallback={'Loading'}>\n-          <MyComponent />\n-        </React.Suspense>\n-      </div>,\n-    );\n+    let renderer;\n+    await act(() => {\n+      renderer = ReactTestRenderer.create(\n+        <div>\n+          <React.Suspense fallback={'Loading'}>\n+            <MyComponent />\n+          </React.Suspense>\n+        </div>,\n+        {unstable_isConcurrent: true},\n+      );\n+    });\n     const fiber = renderer.root._currentFiber().child;\n     if (__DEV__) {\n       // First render was locked\n@@ -236,7 +254,6 @@ describe('React hooks DevTools integration', () => {\n     }\n   });\n \n-  // @gate __DEV__\n   it('should support overriding suspense in concurrent mode', async () => {\n     if (__DEV__) {\n       // Lock the first render\n@@ -254,7 +271,7 @@ describe('React hooks DevTools integration', () => {\n             <MyComponent />\n           </React.Suspense>\n         </div>,\n-        {isConcurrent: true},\n+        {unstable_isConcurrent: true},\n       ),\n     );\n ",
        "date": "2024-03-11T19:06:35Z",
        "chatgpt": "Refactor ReactDevToolsHooksIntegration-test.js to use internal-test-utils for act function",
        "msg": "Concurrent rendering in ReactDevToolsHooksIntegration-test (#28522)\n\n## Summary\r\n\r\nWe need to unblock flipping the default for RTR to be concurrent\r\nrendering. Update ReactDevToolsHooksIntegration-test to use\r\n`unstable_isConcurrent` in place.\r\n\r\n## How did you test this change?\r\n\r\n`yarn test\r\npackages/react-debug-tools/src/__tests__/ReactDevToolsHooksIntegration-test.js`"
    },
    {
        "diff": "diff --git a/packages/react-debug-tools/src/__tests__/ReactHooksInspection-test.js b/a/packages/react-debug-tools/src/__tests__/ReactHooksInspection-test.js @@ -584,24 +584,29 @@ describe('ReactHooksInspection', () => {\n       return <div>{value}</div>;\n     }\n     const tree = ReactDebugTools.inspectHooks(Foo, {});\n-    expect(normalizeSourceLoc(tree)).toMatchInlineSnapshot(`\n-      [\n-        {\n-          \"debugInfo\": null,\n-          \"hookSource\": {\n-            \"columnNumber\": 0,\n-            \"fileName\": \"**\",\n-            \"functionName\": \"Foo\",\n-            \"lineNumber\": 0,\n-          },\n-          \"id\": null,\n-          \"isStateEditable\": false,\n-          \"name\": \"Unresolved\",\n-          \"subHooks\": [],\n-          \"value\": Promise {},\n+    const results = normalizeSourceLoc(tree);\n+    expect(results).toHaveLength(1);\n+    expect(results[0]).toMatchInlineSnapshot(\n+      {\n+        value: expect.any(Promise),\n+      },\n+      `\n+      {\n+        \"debugInfo\": null,\n+        \"hookSource\": {\n+          \"columnNumber\": 0,\n+          \"fileName\": \"**\",\n+          \"functionName\": \"Foo\",\n+          \"lineNumber\": 0,\n         },\n-      ]\n-    `);\n+        \"id\": null,\n+        \"isStateEditable\": false,\n+        \"name\": \"Unresolved\",\n+        \"subHooks\": [],\n+        \"value\": Any<Promise>,\n+      }\n+    `,\n+    );\n   });\n \n   describe('useDebugValue', () => {",
        "date": "2024-03-07T19:22:42Z",
        "chatgpt": "\"Refactor ReactHooksInspection-test.js to improve readability and add test coverage for normalizeSourceLoc function\"",
        "msg": "Fix ReactHooksInspection-test.js (#28520)\n\n## Summary\r\n\r\nCurrently, `ReactHooksInspection-test.js` fails because something is\r\npolluting the resulting `Promise` with symbol properties. This changes\r\nthe unit test to be more resilient to such symbol properties.\r\n\r\n## How did you test this change?\r\n\r\nRan the following successfully:\r\n\r\n```\r\n$ yarn test\r\n```"
    },
    {
        "diff": "diff --git a/packages/react-devtools-inline/__tests__/__e2e__/components.test.js b/a/packages/react-devtools-inline/__tests__/__e2e__/components.test.js @@ -59,7 +59,7 @@ test.describe('Components', () => {\n     const isEditableValue = semver.gte(config.use.react_version, '16.8.0');\n \n     // Then read the inspected values.\n-    const [propName, propValue, sourceText] = await page.evaluate(\n+    const [propName, propValue] = await page.evaluate(\n       isEditable => {\n         const {createTestNameSelector, findAllNodes} =\n           window.REACT_DOM_DEVTOOLS;\n@@ -85,21 +85,41 @@ test.describe('Components', () => {\n           createTestNameSelector('InspectedElementPropsTree'),\n           createTestNameSelector(selectorValue),\n         ])[0];\n-        const source = findAllNodes(container, [\n-          createTestNameSelector('InspectedElementView-Source'),\n-        ])[0];\n         const value = isEditable.value\n           ? valueElement.value\n           : valueElement.innerText;\n \n-        return [name, value, source.innerText];\n+        return [name, value];\n       },\n       {name: isEditableName, value: isEditableValue}\n     );\n \n     expect(propName).toBe('label');\n     expect(propValue).toBe('\"one\"');\n-    expect(sourceText).toMatch(/e2e-app[a-zA-Z]*\\.js/);\n+  });\n+\n+  test('Should allow inspecting source of the element', async () => {\n+    // Source inspection is available only in modern renderer.\n+    runOnlyForReactRange('>=16.8');\n+\n+    // Select the first list item in DevTools.\n+    await devToolsUtils.selectElement(page, 'ListItem', 'List\\nApp');\n+\n+    // Then read the inspected values.\n+    const sourceText = await page.evaluate(() => {\n+      const {createTestNameSelector, findAllNodes} = window.REACT_DOM_DEVTOOLS;\n+      const container = document.getElementById('devtools');\n+\n+      const source = findAllNodes(container, [\n+        createTestNameSelector('InspectedElementView-Source'),\n+      ])[0];\n+\n+      return source.innerText;\n+    });\n+\n+    // If React version is specified, the e2e-regression.html page will be used\n+    // If not, then e2e.html, see playwright.config.js, how url is constructed\n+    expect(sourceText).toMatch(/e2e-app[\\-a-zA-Z]*\\.js/);\n   });\n \n   test('should allow props to be edited', async () => {",
        "date": "2024-03-07T17:59:37Z",
        "chatgpt": "Refactor source inspection in components.test.js and add test for inspecting source of the element",
        "msg": "fix[devtools/e2e]: fixed source inspection in e2e tests (#28518)\n\nDevTools e2e tests started to fail after landing\r\nhttps://github.com/facebook/react/pull/28471:\r\n-\r\nhttps://app.circleci.com/pipelines/github/facebook/react/50984/workflows/a7be25ed-9547-40e9-87bd-b14d9d2e87da/jobs/798270\r\n-\r\nhttps://app.circleci.com/pipelines/github/facebook/react/50984/workflows/a7be25ed-9547-40e9-87bd-b14d9d2e87da/jobs/798275\r\n-\r\nhttps://app.circleci.com/pipelines/github/facebook/react/50984/workflows/a7be25ed-9547-40e9-87bd-b14d9d2e87da/jobs/798271\r\n-\r\nhttps://app.circleci.com/pipelines/github/facebook/react/50984/workflows/a7be25ed-9547-40e9-87bd-b14d9d2e87da/jobs/798274\r\n-\r\nhttps://app.circleci.com/pipelines/github/facebook/react/50984/workflows/a7be25ed-9547-40e9-87bd-b14d9d2e87da/jobs/798269\r\n\r\nThere are 2 reasons for that:\r\n1. Versions 16.0 and 16.5 use legacy renderer, which doesn't support\r\nsource inspection by design:\r\n\r\nhttps://github.com/facebook/react/blob/850fac4915864a487e7cb9ecae8a75dbac144174/packages/react-devtools-shared/src/backend/legacy/renderer.js#L831\r\n\r\nThe corresponding e2e test is now gated for versions >=16.8\r\n2. For other versions (>=16.8), the source is actually\r\n`e2e-app-regression.js`, because these regression tests open a different\r\npage (not the one we open for tests against React from source)\r\n\r\nhttps://github.com/facebook/react/blob/850fac4915864a487e7cb9ecae8a75dbac144174/packages/react-devtools-inline/playwright.config.js#L15-L17"
    },
    {
        "diff": "diff --git a/README.md b/a/README.md @@ -36,7 +36,7 @@ The documentation is divided into several sections:\n * [Where to Get Support](https://react.dev/community)\n * [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)\n \n-You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).\n+You can improve it by sending pull requests to [this repository](https://github.com/reactjs/react.dev).\n \n ## Examples\n ",
        "date": "2024-03-06T23:20:57Z",
        "chatgpt": "Update repository link in README.md",
        "msg": "Link to reactjs/react.dev repo instead of reactjs/reactjs.org  (#28493)"
    },
    {
        "diff": "diff --git a/packages/react-reconciler/src/ReactChildFiber.js b/a/packages/react-reconciler/src/ReactChildFiber.js @@ -438,7 +438,6 @@ function createChildReconciler(\n   }\n \n   function mapRemainingChildren(\n-    returnFiber: Fiber,\n     currentFirstChild: Fiber,\n   ): Map<string | number, Fiber> {\n     // Add the remaining children to a temporary map so that we can find them by\n@@ -1194,7 +1193,7 @@ function createChildReconciler(\n     }\n \n     // Add all children to a key map for quick lookups.\n-    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n+    const existingChildren = mapRemainingChildren(oldFiber);\n \n     // Keep scanning and use the map to restore deleted items as moves.\n     for (; newIdx < newChildren.length; newIdx++) {\n@@ -1404,7 +1403,7 @@ function createChildReconciler(\n     }\n \n     // Add all children to a key map for quick lookups.\n-    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n+    const existingChildren = mapRemainingChildren(oldFiber);\n \n     // Keep scanning and use the map to restore deleted items as moves.\n     for (; !step.done; newIdx++, step = newChildren.next()) {",
        "date": "2024-03-06T19:02:51Z",
        "chatgpt": "Refactor mapRemainingChildren function to remove unnecessary parameter.",
        "msg": "Remove unused returnFiber (#28504)\n\nThere is no use of `returnFiber` here, it can be removed."
    },
    {
        "diff": "diff --git a/.circleci/config.yml b/a/.circleci/config.yml @@ -97,6 +97,16 @@ jobs:\n       - setup_node_modules\n       - run: node ./scripts/tasks/flow-ci\n \n+\n+  yarn_flags:\n+    docker: *docker\n+    environment: *environment\n+\n+    steps:\n+      - checkout\n+      - setup_node_modules\n+      - run: yarn flags\n+\n   scrape_warning_messages:\n     docker: *docker\n     environment: *environment\n@@ -447,6 +457,11 @@ workflows:\n   build_and_test:\n     unless: << pipeline.parameters.prerelease_commit_sha >>\n     jobs:\n+      - yarn_flags:\n+          filters:\n+            branches:\n+              ignore:\n+                - builds/facebook-www\n       - yarn_flow:\n           filters:\n             branches:",
        "date": "2024-02-27T23:12:53Z",
        "chatgpt": "Add yarn_flags job to CircleCI config.",
        "msg": "Run `yarn flags` in CI (#28345)"
    },
    {
        "diff": "diff --git a/packages/react-dom/src/__tests__/ReactDOMServerIntegrationLegacyContextDisabled-test.internal.js b/a/packages/react-dom/src/__tests__/ReactDOMServerIntegrationLegacyContextDisabled-test.internal.js @@ -13,28 +13,29 @@\n const ReactDOMServerIntegrationUtils = require('./utils/ReactDOMServerIntegrationTestUtils');\n \n let React;\n-let ReactDOM;\n+let ReactDOMClient;\n let ReactFeatureFlags;\n let ReactDOMServer;\n \n function initModules() {\n   // Reset warning cache.\n   jest.resetModules();\n   React = require('react');\n-  ReactDOM = require('react-dom');\n+  ReactDOMClient = require('react-dom/client');\n   ReactDOMServer = require('react-dom/server');\n \n   ReactFeatureFlags = require('shared/ReactFeatureFlags');\n   ReactFeatureFlags.disableLegacyContext = true;\n \n   // Make them available to the helpers.\n   return {\n-    ReactDOM,\n+    ReactDOMClient,\n     ReactDOMServer,\n   };\n }\n \n-const {resetModules, itRenders} = ReactDOMServerIntegrationUtils(initModules);\n+const {resetModules, itRenders, clientRenderOnBadMarkup} =\n+  ReactDOMServerIntegrationUtils(initModules);\n \n function formatValue(val) {\n   if (val === null) {\n@@ -104,7 +105,7 @@ describe('ReactDOMServerIntegrationLegacyContextDisabled', () => {\n           <RegularFn />\n         </span>\n       </LegacyProvider>,\n-      3,\n+      render === clientRenderOnBadMarkup ? 6 : 3,\n     );\n     expect(e.textContent).toBe('{}undefinedundefined');\n     expect(lifecycleContextLog).toEqual([]);",
        "date": "2024-02-26T20:55:23Z",
        "chatgpt": "Refactor ReactDOM import to ReactDOMClient in ReactDOMServerIntegrationLegacyContextDisabled-test.internal.js",
        "msg": "Convert ReactDOMServerIntegrationLegacyContextDisabled to createRoot (#28448)"
    },
    {
        "diff": "diff --git a/packages/react-dom/src/__tests__/ReactDOMServerIntegrationLegacyContext-test.js b/a/packages/react-dom/src/__tests__/ReactDOMServerIntegrationLegacyContext-test.js @@ -14,26 +14,30 @@ const ReactDOMServerIntegrationUtils = require('./utils/ReactDOMServerIntegratio\n \n let PropTypes;\n let React;\n-let ReactDOM;\n+let ReactDOMClient;\n let ReactDOMServer;\n \n function initModules() {\n   // Reset warning cache.\n   jest.resetModules();\n   PropTypes = require('prop-types');\n   React = require('react');\n-  ReactDOM = require('react-dom');\n+  ReactDOMClient = require('react-dom/client');\n   ReactDOMServer = require('react-dom/server');\n \n   // Make them available to the helpers.\n   return {\n-    ReactDOM,\n+    ReactDOMClient,\n     ReactDOMServer,\n   };\n }\n \n-const {resetModules, itRenders, itThrowsWhenRendering} =\n-  ReactDOMServerIntegrationUtils(initModules);\n+const {\n+  resetModules,\n+  itRenders,\n+  itThrowsWhenRendering,\n+  clientRenderOnBadMarkup,\n+} = ReactDOMServerIntegrationUtils(initModules);\n \n describe('ReactDOMServerIntegration', () => {\n   beforeEach(() => {\n@@ -272,7 +276,10 @@ describe('ReactDOMServerIntegration', () => {\n             return {foo: 'bar'};\n           }\n         }\n-        const e = await render(<ForgetfulParent />, 1);\n+        const e = await render(\n+          <ForgetfulParent />,\n+          render === clientRenderOnBadMarkup ? 4 : 1,\n+        );\n         expect(e.textContent).toBe('nope');\n       },\n     );",
        "date": "2024-02-26T20:55:03Z",
        "chatgpt": "\"Update ReactDOMClient in ReactDOMServerIntegrationLegacyContext-test.js\"",
        "msg": "Convert ReactDOMServerIntegrationLegacyContext to createRoot (#28449)"
    },
    {
        "diff": "diff --git a/scripts/flow/xplat.js b/a/scripts/flow/xplat.js @@ -9,6 +9,7 @@\n \n declare module 'ReactNativeInternalFeatureFlags' {\n   declare export var alwaysThrottleRetries: boolean;\n+  declare export var enableComponentStackLocations: boolean;\n   declare export var enableDeferRootSchedulingToMicrotask: boolean;\n   declare export var enableUseRefAccessWarning: boolean;\n   declare export var passChildrenWhenCloningPersistedNodes: boolean;",
        "date": "2024-02-22T23:58:12Z",
        "chatgpt": "Add enableComponentStackLocations flag to ReactNativeInternalFeatureFlags module",
        "msg": "Add `enableComponentStackLocations` to `ReactNativeInternalFeatureFlags` libdef (#28424)\n\n## Summary\r\n\r\nFixing something I accidentally broke this in\r\nhttps://github.com/facebook/react/commit/25dbb3556ee9802c18f45c278abf3c33711237eb.\r\n\r\n## How did you test this change?\r\n\r\nRan the following successfully:\r\n\r\n```\r\n$ yarn flow dom-node\r\n```"
    },
    {
        "diff": "diff --git a/packages/react-devtools-shared/src/devtools/views/Components/Tree.js b/a/packages/react-devtools-shared/src/devtools/views/Components/Tree.js @@ -538,7 +538,7 @@ function updateIndentationSizeVar(\n }\n \n // $FlowFixMe[missing-local-annot]\n-function InnerElementType({children, style, ...rest}) {\n+function InnerElementType({children, style}) {\n   const {ownerID} = useContext(TreeStateContext);\n \n   const cachedChildWidths = useMemo<WeakMap<HTMLElement, number>>(\n@@ -586,11 +586,7 @@ function InnerElementType({children, style, ...rest}) {\n   // A lot of options were considered; this seemed the one that requires the least code.\n   // See https://github.com/bvaughn/react-devtools-experimental/issues/9\n   return (\n-    <div\n-      className={styles.InnerElementType}\n-      ref={divRef}\n-      style={style}\n-      {...rest}>\n+    <div className={styles.InnerElementType} ref={divRef} style={style}>\n       <SelectedTreeHighlight />\n       {children}\n     </div>",
        "date": "2024-02-22T19:18:30Z",
        "chatgpt": "Refactor InnerElementType component to remove unnecessary props.",
        "msg": "fix[devtools]: fixed Tree indentation logic after updating react-windows (#28421)\n\nForward-fixing the indentation after landing\r\nhttps://github.com/facebook/react/pull/28408. Could potentially be\r\nrelated to `ref` changes in `react`, but haven't validated yet.\r\n\r\nHaven't occured while testing the previous PR, but reproduced while\r\ntesting the https://github.com/facebook/react/pull/28418, for which I've\r\nrebuilt all dependencies, including `react`.\r\n\r\nThis change basically removes the props passing from original parent,\r\n`rest` should include only `ref`:\r\nhttps://github.com/bvaughn/react-window/blob/efad3d8909753fd74aad7c47dc902b26f0919651/src/createListComponent.js#L382"
    },
    {
        "diff": "diff --git a/packages/react-reconciler/src/ReactInternalTypes.js b/a/packages/react-reconciler/src/ReactInternalTypes.js @@ -157,12 +157,6 @@ export type Fiber = {\n   subtreeFlags: Flags,\n   deletions: Array<Fiber> | null,\n \n-  // The first and last fiber with side-effect within this subtree. This allows\n-  // us to reuse a slice of the linked list when we reuse the work done within\n-  // this fiber.\n-  firstEffect: Fiber | null,\n-  lastEffect: Fiber | null,\n-\n   lanes: Lanes,\n   childLanes: Lanes,\n ",
        "date": "2024-02-21T11:17:21Z",
        "chatgpt": "Remove firstEffect and lastEffect from Fiber type",
        "msg": "refactor: remove dead types of fiber (#28405)\n\nThe properties `firstEffect` and `lastEffect` of the Fiber are currently\r\nnot being used and are considered to be dead code, and can be removed."
    },
    {
        "diff": "diff --git a/packages/react/src/__tests__/ReactCreateRef-test.js b/a/packages/react/src/__tests__/ReactCreateRef-test.js @@ -10,14 +10,16 @@\n 'use strict';\n \n let React;\n-let ReactTestRenderer;\n+let ReactDOM;\n+let ReactDOMClient;\n \n describe('ReactCreateRef', () => {\n   beforeEach(() => {\n     jest.resetModules();\n \n     React = require('react');\n-    ReactTestRenderer = require('react-test-renderer');\n+    ReactDOM = require('react-dom');\n+    ReactDOMClient = require('react-dom/client');\n   });\n \n   it('should warn in dev if an invalid ref object is provided', () => {\n@@ -31,12 +33,15 @@ describe('ReactCreateRef', () => {\n       }\n     }\n \n+    const root = ReactDOMClient.createRoot(document.createElement('div'));\n     expect(() =>\n-      ReactTestRenderer.create(\n-        <Wrapper>\n-          <div ref={{}} />\n-        </Wrapper>,\n-      ),\n+      ReactDOM.flushSync(() => {\n+        root.render(\n+          <Wrapper>\n+            <div ref={{}} />\n+          </Wrapper>,\n+        );\n+      }),\n     ).toErrorDev(\n       'Unexpected ref object provided for div. ' +\n         'Use either a ref-setter function or React.createRef().\\n' +\n@@ -45,11 +50,13 @@ describe('ReactCreateRef', () => {\n     );\n \n     expect(() =>\n-      ReactTestRenderer.create(\n-        <Wrapper>\n-          <ExampleComponent ref={{}} />\n-        </Wrapper>,\n-      ),\n+      ReactDOM.flushSync(() => {\n+        root.render(\n+          <Wrapper>\n+            <ExampleComponent ref={{}} />\n+          </Wrapper>,\n+        );\n+      }),\n     ).toErrorDev(\n       'Unexpected ref object provided for ExampleComponent. ' +\n         'Use either a ref-setter function or React.createRef().\\n' +",
        "date": "2024-02-20T22:49:51Z",
        "chatgpt": "Refactor ReactCreateRef-test.js to use ReactDOM and ReactDOMClient instead of ReactTestRenderer.",
        "msg": "Remove RTR from ReactCreateRef-test (#28386)\n\n## Summary\r\n\r\nCleaning up internal usage of ReactTestRenderer\r\n\r\n## How did you test this change?\r\n\r\n`yarn test packages/react/src/__tests__/ReactCreateRef-test.js`"
    },
    {
        "diff": "diff --git a/.github/workflows/commit_artifacts.yml b/a/.github/workflows/commit_artifacts.yml @@ -11,7 +11,7 @@ jobs:\n       www_branch_count: ${{ steps.check_branches.outputs.www_branch_count }}\n       fbsource_branch_count: ${{ steps.check_branches.outputs.fbsource_branch_count }}\n     steps:\n-      - uses: actions/checkout@v3\n+      - uses: actions/checkout@v4\n       - name: \"Check branches\"\n         id: check_branches\n         run: |\n@@ -179,7 +179,7 @@ jobs:\n     if: ${{ (github.ref == 'refs/heads/main' && needs.download_artifacts.outputs.www_branch_count == '0') || github.ref == 'refs/heads/meta-www' }}\n     runs-on: ubuntu-latest\n     steps:\n-      - uses: actions/checkout@v3\n+      - uses: actions/checkout@v4\n         with:\n           ref: builds/facebook-www\n       - name: Ensure clean directory\n@@ -215,7 +215,7 @@ jobs:\n     runs-on: ubuntu-latest\n     if: ${{ (github.ref == 'refs/heads/main' && needs.download_artifacts.outputs.fbsource_branch_count == '0') || github.ref == 'refs/heads/meta-fbsource' }}\n     steps:\n-      - uses: actions/checkout@v3\n+      - uses: actions/checkout@v4\n         with:\n           ref: main\n           repository: facebook/react-fbsource-import",
        "date": "2024-02-20T21:46:43Z",
        "chatgpt": "Update actions/checkout to v4 in commit_artifacts.yml workflow",
        "msg": "Bump actions/checkout (#28383)"
    },
    {
        "diff": "diff --git a/packages/react-reconciler/src/ReactInternalTypes.js b/a/packages/react-reconciler/src/ReactInternalTypes.js @@ -157,9 +157,6 @@ export type Fiber = {\n   subtreeFlags: Flags,\n   deletions: Array<Fiber> | null,\n \n-  // Singly linked list fast path to the next fiber with side-effects.\n-  nextEffect: Fiber | null,\n-\n   // The first and last fiber with side-effect within this subtree. This allows\n   // us to reuse a slice of the linked list when we reuse the work done within\n   // this fiber.",
        "date": "2024-02-20T19:31:15Z",
        "chatgpt": "Remove nextEffect property from Fiber type",
        "msg": "refactor: remove dead code of fiber (#28389)\n\nThe `nextEffect` property of the `fiber` is currently not being used and\r\nhas become dead code. It can be safely removed."
    },
    {
        "diff": "diff --git a/packages/react-dom/src/__tests__/ReactDOMInput-test.js b/a/packages/react-dom/src/__tests__/ReactDOMInput-test.js @@ -1707,7 +1707,7 @@ describe('ReactDOMInput', () => {\n     assertInputTrackingIsCurrent(container);\n   });\n \n-  it('should control radio buttons if the tree updates during render', () => {\n+  it('should control radio buttons if the tree updates during render in legacy mode', async () => {\n     container.remove();\n     container = document.createElement('div');\n     document.body.appendChild(container);",
        "date": "2024-02-20T15:52:49Z",
        "chatgpt": "Update control of radio buttons during render in legacy mode",
        "msg": "Annotate legacy mode tests in ReactDOMInput (#28333)"
    },
    {
        "diff": "diff --git a/packages/react/src/__tests__/ReactJSXTransformIntegration-test.js b/a/packages/react/src/__tests__/ReactJSXTransformIntegration-test.js @@ -11,7 +11,6 @@\n \n let React;\n let ReactDOMClient;\n-let ReactTestUtils;\n let act;\n \n // TODO: Historically this module was used to confirm that the JSX transform\n@@ -30,7 +29,6 @@ describe('ReactJSXTransformIntegration', () => {\n \n     React = require('react');\n     ReactDOMClient = require('react-dom/client');\n-    ReactTestUtils = require('react-dom/test-utils');\n     act = require('internal-test-utils').act;\n \n     Component = class extends React.Component {\n@@ -213,22 +211,34 @@ describe('ReactJSXTransformIntegration', () => {\n     expect(instance.props.fruit).toBe('persimmon');\n   });\n \n-  it('should normalize props with default values', () => {\n+  it('should normalize props with default values', async () => {\n     class NormalizingComponent extends React.Component {\n       render() {\n         return <span>{this.props.prop}</span>;\n       }\n     }\n     NormalizingComponent.defaultProps = {prop: 'testKey'};\n \n-    const instance = ReactTestUtils.renderIntoDocument(\n-      <NormalizingComponent />,\n-    );\n+    let container = document.createElement('div');\n+    let root = ReactDOMClient.createRoot(container);\n+    let instance;\n+    await act(() => {\n+      root.render(\n+        <NormalizingComponent ref={current => (instance = current)} />,\n+      );\n+    });\n+\n     expect(instance.props.prop).toBe('testKey');\n \n-    const inst2 = ReactTestUtils.renderIntoDocument(\n-      <NormalizingComponent prop={null} />,\n-    );\n+    container = document.createElement('div');\n+    root = ReactDOMClient.createRoot(container);\n+    let inst2;\n+    await act(() => {\n+      root.render(\n+        <NormalizingComponent prop={null} ref={current => (inst2 = current)} />,\n+      );\n+    });\n+\n     expect(inst2.props.prop).toBe(null);\n   });\n });",
        "date": "2024-02-20T15:50:52Z",
        "chatgpt": "Refactor ReactJSXTransformIntegration-test.js to use async/await and ReactDOMClient instead of ReactTestUtils",
        "msg": "Remove ReactTestUtils from ReactJSXTransformIntegration (#28338)"
    },
    {
        "diff": "diff --git a/scripts/jest/setupTests.js b/a/scripts/jest/setupTests.js @@ -241,7 +241,7 @@ if (process.env.REACT_CLASS_EQUIVALENCE_TEST) {\n     global.Error = ErrorProxy;\n   }\n \n-  const expectTestToFail = async (callback, errorMsg) => {\n+  const expectTestToFail = async (callback, error) => {\n     if (callback.length > 0) {\n       throw Error(\n         'Gated test helpers do not support the `done` callback. Return a ' +\n@@ -261,12 +261,12 @@ if (process.env.REACT_CLASS_EQUIVALENCE_TEST) {\n       // `afterEach` like we normally do. `afterEach` is too late because if it\n       // throws, we won't have captured it.\n       flushAllUnexpectedConsoleCalls();\n-    } catch (error) {\n+    } catch (testError) {\n       // Failed as expected\n       resetAllUnexpectedConsoleCalls();\n       return;\n     }\n-    throw Error(errorMsg);\n+    throw error;\n   };\n \n   const gatedErrorMessage = 'Gated test was expected to fail, but it passed.';\n@@ -284,8 +284,10 @@ if (process.env.REACT_CLASS_EQUIVALENCE_TEST) {\n     if (shouldPass) {\n       test(testName, callback);\n     } else {\n+      const error = new Error(gatedErrorMessage);\n+      Error.captureStackTrace(error, global._test_gate);\n       test(`[GATED, SHOULD FAIL] ${testName}`, () =>\n-        expectTestToFail(callback, gatedErrorMessage));\n+        expectTestToFail(callback, error));\n     }\n   };\n   global._test_gate_focus = (gateFn, testName, callback) => {\n@@ -302,8 +304,10 @@ if (process.env.REACT_CLASS_EQUIVALENCE_TEST) {\n     if (shouldPass) {\n       test.only(testName, callback);\n     } else {\n+      const error = new Error(gatedErrorMessage);\n+      Error.captureStackTrace(error, global._test_gate_focus);\n       test.only(`[GATED, SHOULD FAIL] ${testName}`, () =>\n-        expectTestToFail(callback, gatedErrorMessage));\n+        expectTestToFail(callback, error));\n     }\n   };\n ",
        "date": "2024-02-18T17:17:02Z",
        "chatgpt": "Refactor error handling in test helper function",
        "msg": "Improve stack trace when gated test fails (#28374)"
    },
    {
        "diff": "diff --git a/scripts/flags/flags.js b/a/scripts/flags/flags.js @@ -318,11 +318,15 @@ for (const flag of allFlagsUniqueFlags) {\n let sorted = table;\n if (isDiff || argv.sort) {\n   const sortChannel = argToHeader(isDiff ? argv.diff[0] : argv.sort);\n-  sorted = Object.fromEntries(\n-    Object.entries(table).sort(([, rowA], [, rowB]) =>\n-      rowB[sortChannel].toString().localeCompare(rowA[sortChannel])\n-    )\n-  );\n+  const sortBy =\n+    sortChannel === 'flag'\n+      ? ([flagA], [flagB]) => {\n+          return flagA.localeCompare(flagB);\n+        }\n+      : ([, rowA], [, rowB]) => {\n+          return rowB[sortChannel].toString().localeCompare(rowA[sortChannel]);\n+        };\n+  sorted = Object.fromEntries(Object.entries(table).sort(sortBy));\n }\n \n if (argv.csv) {",
        "date": "2024-02-17T14:28:35Z",
        "chatgpt": "Refactored sorting logic in flags.js for better readability and maintainability.",
        "msg": "Fix crash running `yarn flags --sort flag` (#28344)"
    },
    {
        "diff": "diff --git a/packages/react-dom/src/__tests__/ReactDOMSingletonComponents-test.js b/a/packages/react-dom/src/__tests__/ReactDOMSingletonComponents-test.js @@ -996,17 +996,17 @@ describe('ReactDOM HostSingleton', () => {\n   });\n \n   // https://github.com/facebook/react/issues/26128\n-  it('(#26128) does not throw when rendering at body', async () => {\n+  it('(#26128) does not throw when rendering at body in legacy mode', async () => {\n     ReactDOM.render(<div />, document.body);\n   });\n \n   // https://github.com/facebook/react/issues/26128\n-  it('(#26128) does not throw when rendering at <html>', async () => {\n+  it('(#26128) does not throw when rendering at <html> in legacy mode', async () => {\n     ReactDOM.render(<body />, document.documentElement);\n   });\n \n   // https://github.com/facebook/react/issues/26128\n-  it('(#26128) does not throw when rendering at document', async () => {\n+  it('(#26128) does not throw when rendering at document in legacy mode', async () => {\n     ReactDOM.render(<html />, document);\n   });\n });",
        "date": "2024-02-17T14:28:18Z",
        "chatgpt": "Fix rendering at body, <html>, and document in legacy mode (#26128)",
        "msg": "Annotate legacy mode test in ReactDOMSingletonComponents (#28339)\n\nThese are mainly regression tests for legacy root."
    },
    {
        "diff": "diff --git a/fixtures/flight/server/global.js b/a/fixtures/flight/server/global.js @@ -37,6 +37,7 @@ const React = require('react');\n \n const {renderToPipeableStream} = require('react-dom/server');\n const {createFromNodeStream} = require('react-server-dom-webpack/client');\n+const {PassThrough} = require('stream');\n \n const app = express();\n \n@@ -146,34 +147,33 @@ app.all('/', async function (req, res, next) {\n       // so we start by consuming the RSC payload. This needs a module\n       // map that reverse engineers the client-side path to the SSR path.\n \n-      // This is a bad hack to set the form state after SSR has started. It works\n-      // because we block the root component until we have the form state and\n-      // any form that reads it necessarily will come later. It also only works\n-      // because the formstate type is an object which may change in the future\n-      const lazyFormState = [];\n-\n-      let cachedResult = null;\n-      async function getRootAndFormState() {\n-        const {root, formState} = await createFromNodeStream(\n-          rscResponse,\n-          ssrManifest\n-        );\n-        // We shouldn't be assuming formState is an object type but at the moment\n-        // we have no way of setting the form state from within the render\n-        Object.assign(lazyFormState, formState);\n-        return root;\n-      }\n+      // We need to get the formState before we start rendering but we also\n+      // need to run the Flight client inside the render to get all the preloads.\n+      // The API is ambivalent about what's the right one so we need two for now.\n+\n+      // Tee the response into two streams so that we can do both.\n+      const rscResponse1 = new PassThrough();\n+      const rscResponse2 = new PassThrough();\n+\n+      rscResponse.pipe(rscResponse1);\n+      rscResponse.pipe(rscResponse2);\n+\n+      const {formState} = await createFromNodeStream(rscResponse1, ssrManifest);\n+      rscResponse1.end();\n+\n+      let cachedResult;\n       let Root = () => {\n         if (!cachedResult) {\n-          cachedResult = getRootAndFormState();\n+          // Read this stream inside the render.\n+          cachedResult = createFromNodeStream(rscResponse2, ssrManifest);\n         }\n-        return React.use(cachedResult);\n+        return React.use(cachedResult).root;\n       };\n       // Render it into HTML by resolving the client components\n       res.set('Content-type', 'text/html');\n       const {pipe} = renderToPipeableStream(React.createElement(Root), {\n         bootstrapScripts: mainJSChunks,\n-        formState: lazyFormState,\n+        formState: formState,\n       });\n       pipe(res);\n     } catch (e) {",
        "date": "2024-02-16T23:25:09Z",
        "chatgpt": "Refactor code to handle formState and Flight client rendering in SSR process",
        "msg": "Consume the RSC stream twice in the Flight fixture (#28353)\n\nWe have an unresolved conflict where the Flight client wants to execute\r\ninside Fizz to emit side-effects like preloads (which can be early) into\r\nthat stream. However, the FormState API requires the state to be passed\r\nat the root, so if you're getting that through the RSC payload it's a\r\nCatch 22.\r\n\r\n#27314 used a hack to mutate the form state array to fill it in later,\r\nbut that doesn't actually work because it's not always an array. It's\r\nsometimes null like if there wasn't a POST. This lead to a bunch of\r\nhydration errors - which doesn't have the best error message for this\r\ncase neither. It probably should error with something that specifies\r\nthat it's form state.\r\n\r\nThis fixes it by teeing the stream into two streams and consuming it\r\nwith two Flight clients. One to read the form state and one to emit\r\nside-effects and read the root."
    },
    {
        "diff": "diff --git a/scripts/rollup/build.js b/a/scripts/rollup/build.js @@ -575,6 +575,9 @@ function getPlugins(\n           sourcemapAfterClosure.sources = [preMinifiedFilename];\n           sourcemapAfterClosure.file = filename;\n \n+          // All our code is considered \"third-party\" and should be ignored by default.\n+          sourcemapAfterClosure.ignoreList = [0];\n+\n           // We'll write the pre-minified source to disk as a separate file.\n           // Because it sits on disk, there's no need to have it in the `sourcesContent` array.\n           // That also makes the file easier to read, and available for use by scripts.",
        "date": "2024-02-13T17:54:06Z",
        "chatgpt": "Add sourcemap ignore list for third-party code.",
        "msg": "Add ignoreList to our source maps (#28310)\n\nAll our sources are considered third party and should be hidden in stack\r\ntraces unless expanded. Our internals aren't actionable anyway.\r\n\r\nThis doesn't really do much without tooling that actually forwards this\r\nto new generated source maps, in which case they probably just add them\r\nto ignorelist anyway."
    },
    {
        "diff": "diff --git a/packages/react-devtools-shared/src/devtools/views/hooks.js b/a/packages/react-devtools-shared/src/devtools/views/hooks.js @@ -219,15 +219,18 @@ export function useModalDismissSignal(\n       return () => {};\n     }\n \n-    const handleDocumentKeyDown = (event: any) => {\n+    const handleRootNodeKeyDown = (event: KeyboardEvent) => {\n       if (event.key === 'Escape') {\n         dismissCallback();\n       }\n     };\n \n-    const handleDocumentClick = (event: any) => {\n+    const handleRootNodeClick: MouseEventHandler = event => {\n       if (\n         modalRef.current !== null &&\n+        /* $FlowExpectedError[incompatible-call] Instead of dealing with possibly multiple realms\n+         and multiple Node references to comply with Flow (e.g. checking with `event.target instanceof Node`)\n+         just delegate it to contains call */\n         !modalRef.current.contains(event.target)\n       ) {\n         event.stopPropagation();\n@@ -237,7 +240,7 @@ export function useModalDismissSignal(\n       }\n     };\n \n-    let ownerDocument = null;\n+    let modalRootNode = null;\n \n     // Delay until after the current call stack is empty,\n     // in case this effect is being run while an event is currently bubbling.\n@@ -248,12 +251,12 @@ export function useModalDismissSignal(\n       // It's important to listen to the ownerDocument to support the browser extension.\n       // Here we use portals to render individual tabs (e.g. Profiler),\n       // and the root document might belong to a different window.\n-      const div = modalRef.current;\n-      if (div != null) {\n-        ownerDocument = div.ownerDocument;\n-        ownerDocument.addEventListener('keydown', handleDocumentKeyDown);\n+      const modalDOMElement = modalRef.current;\n+      if (modalDOMElement != null) {\n+        modalRootNode = modalDOMElement.getRootNode();\n+        modalRootNode.addEventListener('keydown', handleRootNodeKeyDown);\n         if (dismissOnClickOutside) {\n-          ownerDocument.addEventListener('click', handleDocumentClick, true);\n+          modalRootNode.addEventListener('click', handleRootNodeClick, true);\n         }\n       }\n     }, 0);\n@@ -263,9 +266,9 @@ export function useModalDismissSignal(\n         clearTimeout(timeoutID);\n       }\n \n-      if (ownerDocument !== null) {\n-        ownerDocument.removeEventListener('keydown', handleDocumentKeyDown);\n-        ownerDocument.removeEventListener('click', handleDocumentClick, true);\n+      if (modalRootNode !== null) {\n+        modalRootNode.removeEventListener('keydown', handleRootNodeKeyDown);\n+        modalRootNode.removeEventListener('click', handleRootNodeClick, true);\n       }\n     };\n   }, [modalRef, dismissCallback, dismissOnClickOutside]);",
        "date": "2024-02-12T16:56:28Z",
        "chatgpt": "Refactor useModalDismissSignal to handle root node events instead of document events.",
        "msg": "fix[devtools/useModalDismissSignal]: use getRootNode for shadow root case support (#28145)\n\nIn our custom implementation for handling modals dismiss signal, we use\r\nelement's `ownerDocument` field, which expectedly doesn't work well with\r\nshadow root. Now using\r\n[`getRootNode`](https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode)\r\ninstead of `ownerDocument` to support shadow root case.\r\n\r\nWithout this, if RDT Frontend is hosted inside the shadow root, the\r\nmodal gets closed after any click, including on the buttons hosted by\r\nmodal:\r\n\r\nhttps://github.com/facebook/react/blob/00d42ac3542179c55f936f395ede7abaeb5900a3/packages/react-devtools-shared/src/devtools/views/hooks.js#L228-L238\r\n\r\nTest plan:\r\n- Modals work as expected for Chrome DevTools integration\r\n- Modals work as expected at every other surfaces: browser extension,\r\nelectron wrapper for RN, inline version for web"
    },
    {
        "diff": "diff --git a/packages/react/package.json b/a/packages/react/package.json @@ -15,6 +15,7 @@\n     \"cjs/\",\n     \"umd/\",\n     \"jsx-runtime.js\",\n+    \"jsx-runtime.react-server.js\",\n     \"jsx-dev-runtime.js\",\n     \"react.react-server.js\"\n   ],",
        "date": "2024-02-11T03:19:30Z",
        "chatgpt": "Add jsx-runtime.react-server.js to package.json",
        "msg": "Add jsx-runtime.react-server.js to file allowlist (#28301)\n\nhttps://github.com/facebook/react/pull/28217 doesn't work without this\r\nsince it's not included in the files list.\r\n\r\nSee https://github.com/dai-shi/waku/pull/467#issuecomment-1936965080.\r\n\r\nThis should fix that."
    },
    {
        "diff": "diff --git a/packages/react-server/src/ReactFlightServer.js b/a/packages/react-server/src/ReactFlightServer.js @@ -1192,12 +1192,16 @@ function renderModelDestructive(\n             // but that is able to reuse the same task if we're already in one but then that\n             // will be a lazy future value rather than guaranteed to exist but maybe that's good.\n             const newId = outlineModel(request, (value: any));\n-            return serializeLazyID(newId);\n+            return serializeByValueID(newId);\n           } else {\n             // We've already emitted this as an outlined object, so we can refer to that by its\n-            // existing ID. We use a lazy reference since, unlike plain objects, elements might\n-            // suspend so it might not have emitted yet even if we have the ID for it.\n-            return serializeLazyID(existingId);\n+            // existing ID. TODO: We should use a lazy reference since, unlike plain objects,\n+            // elements might suspend so it might not have emitted yet even if we have the ID for\n+            // it. However, this creates an extra wrapper when it's not needed. We should really\n+            // detect whether this already was emitted and synchronously available. In that\n+            // case we can refer to it synchronously and only make it lazy otherwise.\n+            // We currently don't have a data structure that lets us see that though.\n+            return serializeByValueID(existingId);\n           }\n         } else {\n           // This is the first time we've seen this object. We may never see it again",
        "date": "2024-02-08T23:45:40Z",
        "chatgpt": "Refactor serialization to use serializeByValueID for outlined objects and add TODO for optimizing lazy reference.",
        "msg": "[Flight] Serialize deduped elements by direct reference even if they suspend (#28283)\n\nIn #28123 I switched these to be lazy references. However that creates a\r\nlazy wrapper even if they're synchronously available. We try to as much\r\nas possible preserve the original data structure in these cases.\r\n\r\nE.g. here in the dev outlining I only use a lazy wrapper if it didn't\r\ncomplete synchronously:\r\nhttps://github.com/facebook/react/pull/28272/files#diff-d4c9c509922b3671d3ecce4e051df66dd5c3d38ff913c7a7fe94abc3ba2ed72eR638\r\n\r\nUnfortunately we don't have a data structure that tracks the status of\r\neach emitted row. We could store the task in the map but then they\r\ncouldn't be GC:ed as they complete. We could maybe store the status of\r\neach element but seems so heavy.\r\n\r\nFor now I just went back to direct reference which might be an issue\r\nsince it can suspend something higher up when deduped."
    },
    {
        "diff": "diff --git a/packages/shared/ReactFeatureFlags.js b/a/packages/shared/ReactFeatureFlags.js @@ -15,8 +15,6 @@\n \n export const enableComponentStackLocations = true;\n \n-export const enableServerComponentKeys = __EXPERIMENTAL__;\n-\n // -----------------------------------------------------------------------------\n // Killswitch\n //\n@@ -169,6 +167,9 @@ export const enableFilterEmptyStringAttributesDOM = __NEXT_MAJOR__;\n // Disabled caching behavior of `react/cache` in client runtimes.\n export const disableClientCache = false;\n \n+// Changes Server Components Reconciliation when they have keys\n+export const enableServerComponentKeys = __NEXT_MAJOR__;\n+\n // -----------------------------------------------------------------------------\n // Chopping Block\n //",
        "date": "2024-02-07T20:21:59Z",
        "chatgpt": "\"Enable Server Component Keys and Disable Client Cache\"",
        "msg": "Add enableServerComponentKeys to NEXT_MAJOR (#28259)"
    },
    {
        "diff": "diff --git a/packages/react/src/ReactCacheClient.js b/a/packages/react/src/ReactCacheClient.js @@ -10,25 +10,25 @@\n import {disableClientCache} from 'shared/ReactFeatureFlags';\n import {cache as cacheImpl} from './ReactCacheImpl';\n \n-export function cache<A: Iterable<mixed>, T>(fn: (...A) => T): (...A) => T {\n-  if (disableClientCache) {\n-    // On the client (i.e. not a Server Components environment) `cache` has\n-    // no caching behavior. We just return the function as-is.\n-    //\n-    // We intend to implement client caching in a future major release. In the\n-    // meantime, it's only exposed as an API so that Shared Components can use\n-    // per-request caching on the server without breaking on the client. But it\n-    // does mean they need to be aware of the behavioral difference.\n-    //\n-    // The rest of the behavior is the same as the server implementation \u2014 it\n-    // returns a new reference, extra properties like `displayName` are not\n-    // preserved, the length of the new function is 0, etc. That way apps can't\n-    // accidentally depend on those details.\n-    return function () {\n-      // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n-      return fn.apply(null, arguments);\n-    };\n-  } else {\n-    return cacheImpl(fn);\n-  }\n+export function noopCache<A: Iterable<mixed>, T>(fn: (...A) => T): (...A) => T {\n+  // On the client (i.e. not a Server Components environment) `cache` has\n+  // no caching behavior. We just return the function as-is.\n+  //\n+  // We intend to implement client caching in a future major release. In the\n+  // meantime, it's only exposed as an API so that Shared Components can use\n+  // per-request caching on the server without breaking on the client. But it\n+  // does mean they need to be aware of the behavioral difference.\n+  //\n+  // The rest of the behavior is the same as the server implementation \u2014 it\n+  // returns a new reference, extra properties like `displayName` are not\n+  // preserved, the length of the new function is 0, etc. That way apps can't\n+  // accidentally depend on those details.\n+  return function () {\n+    // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n+    return fn.apply(null, arguments);\n+  };\n }\n+\n+export const cache: typeof noopCache = disableClientCache\n+  ? noopCache\n+  : cacheImpl;",
        "date": "2024-02-07T01:40:06Z",
        "chatgpt": "Refactor cache function to use noopCache on the client side. Updated the cache function to return the function as-is without caching behavior on the client side, to be consistent with future major release plans. Added a conditional assignment for cache function based on disableClientCache.",
        "msg": "Improve flagging of `React.cache` to remove indirection in bundled code (#28263)\n\nUses a better technique for conditionally disabling cache on the client"
    }
]